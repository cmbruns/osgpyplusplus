// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgParticle.h"
#include "wrap_referenced.h"
#include "BoxPlacer.pypp.hpp"

namespace bp = boost::python;

struct BoxPlacer_wrapper : osgParticle::BoxPlacer, bp::wrapper< osgParticle::BoxPlacer > {

    BoxPlacer_wrapper( )
    : osgParticle::BoxPlacer( )
      , bp::wrapper< osgParticle::BoxPlacer >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgParticle::BoxPlacer::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgParticle::BoxPlacer::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgParticle::BoxPlacer::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgParticle::BoxPlacer::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgParticle::BoxPlacer::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgParticle::BoxPlacer::cloneType( );
    }

    virtual ::osg::Vec3 getControlPosition(  ) const  {
        if( bp::override func_getControlPosition = this->get_override( "getControlPosition" ) )
            return func_getControlPosition(  );
        else{
            return this->osgParticle::BoxPlacer::getControlPosition(  );
        }
    }
    
    ::osg::Vec3 default_getControlPosition(  ) const  {
        return osgParticle::BoxPlacer::getControlPosition( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgParticle::BoxPlacer::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgParticle::BoxPlacer::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgParticle::BoxPlacer::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgParticle::BoxPlacer::libraryName( );
    }

    virtual void place( ::osgParticle::Particle * P ) const  {
        if( bp::override func_place = this->get_override( "place" ) )
            func_place( boost::python::ptr(P) );
        else{
            this->osgParticle::BoxPlacer::place( boost::python::ptr(P) );
        }
    }
    
    void default_place( ::osgParticle::Particle * P ) const  {
        osgParticle::BoxPlacer::place( boost::python::ptr(P) );
    }

    virtual float volume(  ) const  {
        if( bp::override func_volume = this->get_override( "volume" ) )
            return func_volume(  );
        else{
            return this->osgParticle::BoxPlacer::volume(  );
        }
    }
    
    float default_volume(  ) const  {
        return osgParticle::BoxPlacer::volume( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_BoxPlacer_class(){

    bp::class_< BoxPlacer_wrapper, bp::bases< osgParticle::CenteredPlacer >, osg::ref_ptr< BoxPlacer_wrapper >, boost::noncopyable >( "BoxPlacer", "\n A box-shaped particle placer.\n        This placer sets the initial position of incoming particle by choosing a random position\n        within the volume of a box; this placer is defined by four parameters: a <I>center point</I>,\n        which is inherited directly from <CODE>osgParticle::CenteredPlacer</CODE>, and three ranges of values\n    for the valid <I>X</I>, <I>Y</I>, and <I>Z</I> coordinates.\n", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "className"
            , (char const * ( ::osgParticle::BoxPlacer::* )(  ) const)(&::osgParticle::BoxPlacer::className)
            , (char const * ( BoxPlacer_wrapper::* )(  ) const)(&BoxPlacer_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osgParticle::BoxPlacer::* )( ::osg::CopyOp const & ) const)(&::osgParticle::BoxPlacer::clone)
            , (::osg::Object * ( BoxPlacer_wrapper::* )( ::osg::CopyOp const & ) const)(&BoxPlacer_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osgParticle::BoxPlacer::* )(  ) const)(&::osgParticle::BoxPlacer::cloneType)
            , (::osg::Object * ( BoxPlacer_wrapper::* )(  ) const)(&BoxPlacer_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getControlPosition"
            , (::osg::Vec3 ( ::osgParticle::BoxPlacer::* )(  ) const)(&::osgParticle::BoxPlacer::getControlPosition)
            , (::osg::Vec3 ( BoxPlacer_wrapper::* )(  ) const)(&BoxPlacer_wrapper::default_getControlPosition) )    
        .def( 
            "getXRange"
            , (::osgParticle::rangef const & ( ::osgParticle::BoxPlacer::* )(  ) const)( &::osgParticle::BoxPlacer::getXRange )
            , bp::return_internal_reference< >() )    
        .def( 
            "getYRange"
            , (::osgParticle::rangef const & ( ::osgParticle::BoxPlacer::* )(  ) const)( &::osgParticle::BoxPlacer::getYRange )
            , bp::return_internal_reference< >() )    
        .def( 
            "getZRange"
            , (::osgParticle::rangef const & ( ::osgParticle::BoxPlacer::* )(  ) const)( &::osgParticle::BoxPlacer::getZRange )
            , bp::return_internal_reference< >() )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osgParticle::BoxPlacer::* )( ::osg::Object const * ) const)(&::osgParticle::BoxPlacer::isSameKindAs)
            , (bool ( BoxPlacer_wrapper::* )( ::osg::Object const * ) const)(&BoxPlacer_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osgParticle::BoxPlacer::* )(  ) const)(&::osgParticle::BoxPlacer::libraryName)
            , (char const * ( BoxPlacer_wrapper::* )(  ) const)(&BoxPlacer_wrapper::default_libraryName) )    
        .def( 
            "place"
            , (void ( ::osgParticle::BoxPlacer::* )( ::osgParticle::Particle * ) const)(&::osgParticle::BoxPlacer::place)
            , (void ( BoxPlacer_wrapper::* )( ::osgParticle::Particle * ) const)(&BoxPlacer_wrapper::default_place)
            , ( bp::arg("P") ) )    
        .def( 
            "setXRange"
            , (void ( ::osgParticle::BoxPlacer::* )( ::osgParticle::rangef const & ) )( &::osgParticle::BoxPlacer::setXRange )
            , ( bp::arg("r") ) )    
        .def( 
            "setXRange"
            , (void ( ::osgParticle::BoxPlacer::* )( float,float ) )( &::osgParticle::BoxPlacer::setXRange )
            , ( bp::arg("r1"), bp::arg("r2") ) )    
        .def( 
            "setYRange"
            , (void ( ::osgParticle::BoxPlacer::* )( ::osgParticle::rangef const & ) )( &::osgParticle::BoxPlacer::setYRange )
            , ( bp::arg("r") ) )    
        .def( 
            "setYRange"
            , (void ( ::osgParticle::BoxPlacer::* )( float,float ) )( &::osgParticle::BoxPlacer::setYRange )
            , ( bp::arg("r1"), bp::arg("r2") ) )    
        .def( 
            "setZRange"
            , (void ( ::osgParticle::BoxPlacer::* )( ::osgParticle::rangef const & ) )( &::osgParticle::BoxPlacer::setZRange )
            , ( bp::arg("r") ) )    
        .def( 
            "setZRange"
            , (void ( ::osgParticle::BoxPlacer::* )( float,float ) )( &::osgParticle::BoxPlacer::setZRange )
            , ( bp::arg("r1"), bp::arg("r2") ) )    
        .def( 
            "volume"
            , (float ( ::osgParticle::BoxPlacer::* )(  ) const)(&::osgParticle::BoxPlacer::volume)
            , (float ( BoxPlacer_wrapper::* )(  ) const)(&BoxPlacer_wrapper::default_volume) );

}
