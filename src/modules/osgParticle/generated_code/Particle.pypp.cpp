// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgParticle.h"
#include "Particle.pypp.hpp"

namespace bp = boost::python;

void register_Particle_class(){

    { //::osgParticle::Particle
        typedef bp::class_< osgParticle::Particle > Particle_exposer_t;
        Particle_exposer_t Particle_exposer = Particle_exposer_t( "Particle", "\n    Implementation of a <B>particle</B>.\n        Objects of this class are particles, they have some graphical properties\n        and some physical properties. Particles are created by emitters and then placed\n        into Particle Systems, where they live and get updated at each frame.\n        Particles can either live forever (lifeTime < 0), or die after a specified\n        time (lifeTime >= 0). For each property which is defined as a range of values, a\n        current value will be evaluated at each frame by interpolating the <I>min</I>\n        and <I>max</I> values so that <I>curr_value = min</I> when <I>t == 0</I>, and\n        <I>curr_value = max</I> when <I>t == lifeTime</I>.\n        You may customize the interpolator objects to achieve any kind of transition.\n        If you want the particle to live forever, set its lifetime to any value <= 0;\n        in that case, no interpolation is done to compute real-time properties, and only\n        minimum values are used.\n", bp::init< >() );
        bp::scope Particle_scope( Particle_exposer );
        bp::scope().attr("INVALID_INDEX") = (int)osgParticle::Particle::INVALID_INDEX;
        bp::enum_< osgParticle::Particle::Shape>("Shape")
            .value("POINT", osgParticle::Particle::POINT)
            .value("QUAD", osgParticle::Particle::QUAD)
            .value("QUAD_TRIANGLESTRIP", osgParticle::Particle::QUAD_TRIANGLESTRIP)
            .value("HEXAGON", osgParticle::Particle::HEXAGON)
            .value("LINE", osgParticle::Particle::LINE)
            .value("USER", osgParticle::Particle::USER)
            .export_values()
            ;
        { //::osgParticle::Particle::addAngularVelocity
        
            typedef void ( ::osgParticle::Particle::*addAngularVelocity_function_type )( ::osg::Vec3 const & ) ;
            
            Particle_exposer.def( 
                "addAngularVelocity"
                , addAngularVelocity_function_type( &::osgParticle::Particle::addAngularVelocity )
                , ( bp::arg("dv") ) );
        
        }
        { //::osgParticle::Particle::addVelocity
        
            typedef void ( ::osgParticle::Particle::*addVelocity_function_type )( ::osg::Vec3 const & ) ;
            
            Particle_exposer.def( 
                "addVelocity"
                , addVelocity_function_type( &::osgParticle::Particle::addVelocity )
                , ( bp::arg("dv") ) );
        
        }
        { //::osgParticle::Particle::beginRender
        
            typedef void ( ::osgParticle::Particle::*beginRender_function_type )( ::osg::GLBeginEndAdapter * ) const;
            
            Particle_exposer.def( 
                "beginRender"
                , beginRender_function_type( &::osgParticle::Particle::beginRender )
                , ( bp::arg("gl") ) );
        
        }
        { //::osgParticle::Particle::endRender
        
            typedef void ( ::osgParticle::Particle::*endRender_function_type )( ::osg::GLBeginEndAdapter * ) const;
            
            Particle_exposer.def( 
                "endRender"
                , endRender_function_type( &::osgParticle::Particle::endRender )
                , ( bp::arg("gl") ) );
        
        }
        { //::osgParticle::Particle::getAge
        
            typedef double ( ::osgParticle::Particle::*getAge_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getAge"
                , getAge_function_type( &::osgParticle::Particle::getAge ) );
        
        }
        { //::osgParticle::Particle::getAlphaInterpolator
        
            typedef ::osgParticle::Interpolator const * ( ::osgParticle::Particle::*getAlphaInterpolator_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getAlphaInterpolator"
                , getAlphaInterpolator_function_type( &::osgParticle::Particle::getAlphaInterpolator )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::Particle::getAlphaRange
        
            typedef ::osgParticle::rangef const & ( ::osgParticle::Particle::*getAlphaRange_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getAlphaRange"
                , getAlphaRange_function_type( &::osgParticle::Particle::getAlphaRange )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::Particle::getAngle
        
            typedef ::osg::Vec3 const & ( ::osgParticle::Particle::*getAngle_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getAngle"
                , getAngle_function_type( &::osgParticle::Particle::getAngle )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::Particle::getAngularVelocity
        
            typedef ::osg::Vec3 const & ( ::osgParticle::Particle::*getAngularVelocity_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getAngularVelocity"
                , getAngularVelocity_function_type( &::osgParticle::Particle::getAngularVelocity )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::Particle::getColorInterpolator
        
            typedef ::osgParticle::Interpolator const * ( ::osgParticle::Particle::*getColorInterpolator_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getColorInterpolator"
                , getColorInterpolator_function_type( &::osgParticle::Particle::getColorInterpolator )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::Particle::getColorRange
        
            typedef ::osgParticle::rangev4 const & ( ::osgParticle::Particle::*getColorRange_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getColorRange"
                , getColorRange_function_type( &::osgParticle::Particle::getColorRange )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::Particle::getCurrentAlpha
        
            typedef float ( ::osgParticle::Particle::*getCurrentAlpha_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getCurrentAlpha"
                , getCurrentAlpha_function_type( &::osgParticle::Particle::getCurrentAlpha )
                , "\n Get the current alpha\n" );
        
        }
        { //::osgParticle::Particle::getCurrentColor
        
            typedef ::osg::Vec4 const & ( ::osgParticle::Particle::*getCurrentColor_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getCurrentColor"
                , getCurrentColor_function_type( &::osgParticle::Particle::getCurrentColor )
                , bp::return_internal_reference< >()
                , "\n Get the current color\n" );
        
        }
        { //::osgParticle::Particle::getCurrentSize
        
            typedef float ( ::osgParticle::Particle::*getCurrentSize_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getCurrentSize"
                , getCurrentSize_function_type( &::osgParticle::Particle::getCurrentSize ) );
        
        }
        { //::osgParticle::Particle::getDepth
        
            typedef double ( ::osgParticle::Particle::*getDepth_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getDepth"
                , getDepth_function_type( &::osgParticle::Particle::getDepth )
                , "\n Get the depth of the particle\n" );
        
        }
        { //::osgParticle::Particle::getDrawable
        
            typedef ::osg::Drawable * ( ::osgParticle::Particle::*getDrawable_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getDrawable"
                , getDrawable_function_type( &::osgParticle::Particle::getDrawable )
                , bp::return_internal_reference< >()
                , "\n Get the user-defined particle drawable\n" );
        
        }
        { //::osgParticle::Particle::getEndTile
        
            typedef int ( ::osgParticle::Particle::*getEndTile_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getEndTile"
                , getEndTile_function_type( &::osgParticle::Particle::getEndTile ) );
        
        }
        { //::osgParticle::Particle::getLifeTime
        
            typedef double ( ::osgParticle::Particle::*getLifeTime_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getLifeTime"
                , getLifeTime_function_type( &::osgParticle::Particle::getLifeTime ) );
        
        }
        { //::osgParticle::Particle::getMass
        
            typedef float ( ::osgParticle::Particle::*getMass_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getMass"
                , getMass_function_type( &::osgParticle::Particle::getMass ) );
        
        }
        { //::osgParticle::Particle::getMassInv
        
            typedef float ( ::osgParticle::Particle::*getMassInv_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getMassInv"
                , getMassInv_function_type( &::osgParticle::Particle::getMassInv ) );
        
        }
        { //::osgParticle::Particle::getNextParticle
        
            typedef int ( ::osgParticle::Particle::*getNextParticle_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getNextParticle"
                , getNextParticle_function_type( &::osgParticle::Particle::getNextParticle )
                , "\n Get the const next particle\n" );
        
        }
        { //::osgParticle::Particle::getNumTiles
        
            typedef int ( ::osgParticle::Particle::*getNumTiles_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getNumTiles"
                , getNumTiles_function_type( &::osgParticle::Particle::getNumTiles )
                , "\n Get number of texture tiles\n" );
        
        }
        { //::osgParticle::Particle::getPosition
        
            typedef ::osg::Vec3 const & ( ::osgParticle::Particle::*getPosition_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getPosition"
                , getPosition_function_type( &::osgParticle::Particle::getPosition )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::Particle::getPreviousAngle
        
            typedef ::osg::Vec3 const & ( ::osgParticle::Particle::*getPreviousAngle_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getPreviousAngle"
                , getPreviousAngle_function_type( &::osgParticle::Particle::getPreviousAngle )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::Particle::getPreviousParticle
        
            typedef int ( ::osgParticle::Particle::*getPreviousParticle_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getPreviousParticle"
                , getPreviousParticle_function_type( &::osgParticle::Particle::getPreviousParticle )
                , "\n Get the previous particle\n" );
        
        }
        { //::osgParticle::Particle::getPreviousPosition
        
            typedef ::osg::Vec3 const & ( ::osgParticle::Particle::*getPreviousPosition_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getPreviousPosition"
                , getPreviousPosition_function_type( &::osgParticle::Particle::getPreviousPosition )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::Particle::getRadius
        
            typedef float ( ::osgParticle::Particle::*getRadius_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getRadius"
                , getRadius_function_type( &::osgParticle::Particle::getRadius ) );
        
        }
        { //::osgParticle::Particle::getSTexCoord
        
            typedef float ( ::osgParticle::Particle::*getSTexCoord_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getSTexCoord"
                , getSTexCoord_function_type( &::osgParticle::Particle::getSTexCoord )
                , "\n Get the s texture coordinate of the bottom left of the particle\n" );
        
        }
        { //::osgParticle::Particle::getShape
        
            typedef ::osgParticle::Particle::Shape ( ::osgParticle::Particle::*getShape_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getShape"
                , getShape_function_type( &::osgParticle::Particle::getShape ) );
        
        }
        { //::osgParticle::Particle::getSizeInterpolator
        
            typedef ::osgParticle::Interpolator const * ( ::osgParticle::Particle::*getSizeInterpolator_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getSizeInterpolator"
                , getSizeInterpolator_function_type( &::osgParticle::Particle::getSizeInterpolator )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::Particle::getSizeRange
        
            typedef ::osgParticle::rangef const & ( ::osgParticle::Particle::*getSizeRange_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getSizeRange"
                , getSizeRange_function_type( &::osgParticle::Particle::getSizeRange )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::Particle::getStartTile
        
            typedef int ( ::osgParticle::Particle::*getStartTile_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getStartTile"
                , getStartTile_function_type( &::osgParticle::Particle::getStartTile ) );
        
        }
        { //::osgParticle::Particle::getTTexCoord
        
            typedef float ( ::osgParticle::Particle::*getTTexCoord_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getTTexCoord"
                , getTTexCoord_function_type( &::osgParticle::Particle::getTTexCoord )
                , "\n Get the t texture coordinate of the bottom left of the particle\n" );
        
        }
        { //::osgParticle::Particle::getTileS
        
            typedef int ( ::osgParticle::Particle::*getTileS_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getTileS"
                , getTileS_function_type( &::osgParticle::Particle::getTileS ) );
        
        }
        { //::osgParticle::Particle::getTileT
        
            typedef int ( ::osgParticle::Particle::*getTileT_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getTileT"
                , getTileT_function_type( &::osgParticle::Particle::getTileT ) );
        
        }
        { //::osgParticle::Particle::getVelocity
        
            typedef ::osg::Vec3 const & ( ::osgParticle::Particle::*getVelocity_function_type )(  ) const;
            
            Particle_exposer.def( 
                "getVelocity"
                , getVelocity_function_type( &::osgParticle::Particle::getVelocity )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::Particle::isAlive
        
            typedef bool ( ::osgParticle::Particle::*isAlive_function_type )(  ) const;
            
            Particle_exposer.def( 
                "isAlive"
                , isAlive_function_type( &::osgParticle::Particle::isAlive ) );
        
        }
        { //::osgParticle::Particle::kill
        
            typedef void ( ::osgParticle::Particle::*kill_function_type )(  ) ;
            
            Particle_exposer.def( 
                "kill"
                , kill_function_type( &::osgParticle::Particle::kill ) );
        
        }
        Particle_exposer.def( bp::self < bp::self );
        { //::osgParticle::Particle::render
        
            typedef void ( ::osgParticle::Particle::*render_function_type )( ::osg::GLBeginEndAdapter *,::osg::Vec3 const &,::osg::Vec3 const &,::osg::Vec3 const &,float ) const;
            
            Particle_exposer.def( 
                "render"
                , render_function_type( &::osgParticle::Particle::render )
                , ( bp::arg("gl"), bp::arg("xpos"), bp::arg("px"), bp::arg("py"), bp::arg("scale")=1.0e+0f )
                , "\n Render the particle. Called automatically by particle systems.\n" );
        
        }
        { //::osgParticle::Particle::render
        
            typedef void ( ::osgParticle::Particle::*render_function_type )( ::osg::RenderInfo &,::osg::Vec3 const &,::osg::Vec3 const & ) const;
            
            Particle_exposer.def( 
                "render"
                , render_function_type( &::osgParticle::Particle::render )
                , ( bp::arg("renderInfo"), bp::arg("xpos"), bp::arg("xrot") )
                , "\n Render the particle with user-defined drawable\n" );
        
        }
        { //::osgParticle::Particle::setAlphaInterpolator
        
            typedef void ( ::osgParticle::Particle::*setAlphaInterpolator_function_type )( ::osgParticle::Interpolator * ) ;
            
            Particle_exposer.def( 
                "setAlphaInterpolator"
                , setAlphaInterpolator_function_type( &::osgParticle::Particle::setAlphaInterpolator )
                , ( bp::arg("ai") ) );
        
        }
        { //::osgParticle::Particle::setAlphaRange
        
            typedef void ( ::osgParticle::Particle::*setAlphaRange_function_type )( ::osgParticle::rangef const & ) ;
            
            Particle_exposer.def( 
                "setAlphaRange"
                , setAlphaRange_function_type( &::osgParticle::Particle::setAlphaRange )
                , ( bp::arg("r") ) );
        
        }
        { //::osgParticle::Particle::setAngle
        
            typedef void ( ::osgParticle::Particle::*setAngle_function_type )( ::osg::Vec3 const & ) ;
            
            Particle_exposer.def( 
                "setAngle"
                , setAngle_function_type( &::osgParticle::Particle::setAngle )
                , ( bp::arg("a") ) );
        
        }
        { //::osgParticle::Particle::setAngularVelocity
        
            typedef void ( ::osgParticle::Particle::*setAngularVelocity_function_type )( ::osg::Vec3 const & ) ;
            
            Particle_exposer.def( 
                "setAngularVelocity"
                , setAngularVelocity_function_type( &::osgParticle::Particle::setAngularVelocity )
                , ( bp::arg("v") ) );
        
        }
        { //::osgParticle::Particle::setColorInterpolator
        
            typedef void ( ::osgParticle::Particle::*setColorInterpolator_function_type )( ::osgParticle::Interpolator * ) ;
            
            Particle_exposer.def( 
                "setColorInterpolator"
                , setColorInterpolator_function_type( &::osgParticle::Particle::setColorInterpolator )
                , ( bp::arg("ci") ) );
        
        }
        { //::osgParticle::Particle::setColorRange
        
            typedef void ( ::osgParticle::Particle::*setColorRange_function_type )( ::osgParticle::rangev4 const & ) ;
            
            Particle_exposer.def( 
                "setColorRange"
                , setColorRange_function_type( &::osgParticle::Particle::setColorRange )
                , ( bp::arg("r") ) );
        
        }
        { //::osgParticle::Particle::setDepth
        
            typedef void ( ::osgParticle::Particle::*setDepth_function_type )( double ) ;
            
            Particle_exposer.def( 
                "setDepth"
                , setDepth_function_type( &::osgParticle::Particle::setDepth )
                , ( bp::arg("d") )
                , "\n Set the depth of the particle\n" );
        
        }
        { //::osgParticle::Particle::setDrawable
        
            typedef void ( ::osgParticle::Particle::*setDrawable_function_type )( ::osg::Drawable * ) ;
            
            Particle_exposer.def( 
                "setDrawable"
                , setDrawable_function_type( &::osgParticle::Particle::setDrawable )
                , ( bp::arg("d") )
                , "\n Set the user-defined particle drawable\n" );
        
        }
        { //::osgParticle::Particle::setLifeTime
        
            typedef void ( ::osgParticle::Particle::*setLifeTime_function_type )( double ) ;
            
            Particle_exposer.def( 
                "setLifeTime"
                , setLifeTime_function_type( &::osgParticle::Particle::setLifeTime )
                , ( bp::arg("t") ) );
        
        }
        { //::osgParticle::Particle::setMass
        
            typedef void ( ::osgParticle::Particle::*setMass_function_type )( float ) ;
            
            Particle_exposer.def( 
                "setMass"
                , setMass_function_type( &::osgParticle::Particle::setMass )
                , ( bp::arg("m") ) );
        
        }
        { //::osgParticle::Particle::setNextParticle
        
            typedef void ( ::osgParticle::Particle::*setNextParticle_function_type )( int ) ;
            
            Particle_exposer.def( 
                "setNextParticle"
                , setNextParticle_function_type( &::osgParticle::Particle::setNextParticle )
                , ( bp::arg("next") )
                , "\n Set the next particle\n" );
        
        }
        { //::osgParticle::Particle::setPosition
        
            typedef void ( ::osgParticle::Particle::*setPosition_function_type )( ::osg::Vec3 const & ) ;
            
            Particle_exposer.def( 
                "setPosition"
                , setPosition_function_type( &::osgParticle::Particle::setPosition )
                , ( bp::arg("p") ) );
        
        }
        { //::osgParticle::Particle::setPreviousParticle
        
            typedef void ( ::osgParticle::Particle::*setPreviousParticle_function_type )( int ) ;
            
            Particle_exposer.def( 
                "setPreviousParticle"
                , setPreviousParticle_function_type( &::osgParticle::Particle::setPreviousParticle )
                , ( bp::arg("previous") )
                , "\n Set the previous particle\n" );
        
        }
        { //::osgParticle::Particle::setRadius
        
            typedef void ( ::osgParticle::Particle::*setRadius_function_type )( float ) ;
            
            Particle_exposer.def( 
                "setRadius"
                , setRadius_function_type( &::osgParticle::Particle::setRadius )
                , ( bp::arg("r") ) );
        
        }
        { //::osgParticle::Particle::setShape
        
            typedef void ( ::osgParticle::Particle::*setShape_function_type )( ::osgParticle::Particle::Shape ) ;
            
            Particle_exposer.def( 
                "setShape"
                , setShape_function_type( &::osgParticle::Particle::setShape )
                , ( bp::arg("s") ) );
        
        }
        { //::osgParticle::Particle::setSizeInterpolator
        
            typedef void ( ::osgParticle::Particle::*setSizeInterpolator_function_type )( ::osgParticle::Interpolator * ) ;
            
            Particle_exposer.def( 
                "setSizeInterpolator"
                , setSizeInterpolator_function_type( &::osgParticle::Particle::setSizeInterpolator )
                , ( bp::arg("ri") ) );
        
        }
        { //::osgParticle::Particle::setSizeRange
        
            typedef void ( ::osgParticle::Particle::*setSizeRange_function_type )( ::osgParticle::rangef const & ) ;
            
            Particle_exposer.def( 
                "setSizeRange"
                , setSizeRange_function_type( &::osgParticle::Particle::setSizeRange )
                , ( bp::arg("r") ) );
        
        }
        { //::osgParticle::Particle::setTextureTile
        
            typedef void ( ::osgParticle::Particle::*setTextureTile_function_type )( int,int,int ) ;
            
            Particle_exposer.def( 
                "setTextureTile"
                , setTextureTile_function_type( &::osgParticle::Particle::setTextureTile )
                , ( bp::arg("sTile"), bp::arg("tTile"), bp::arg("end")=(int)(-0x00000000000000001) ) );
        
        }
        { //::osgParticle::Particle::setTextureTileRange
        
            typedef void ( ::osgParticle::Particle::*setTextureTileRange_function_type )( int,int,int,int ) ;
            
            Particle_exposer.def( 
                "setTextureTileRange"
                , setTextureTileRange_function_type( &::osgParticle::Particle::setTextureTileRange )
                , ( bp::arg("sTile"), bp::arg("tTile"), bp::arg("startTile"), bp::arg("endTile") ) );
        
        }
        { //::osgParticle::Particle::setUpTexCoordsAsPartOfConnectedParticleSystem
        
            typedef void ( ::osgParticle::Particle::*setUpTexCoordsAsPartOfConnectedParticleSystem_function_type )( ::osgParticle::ParticleSystem * ) ;
            
            Particle_exposer.def( 
                "setUpTexCoordsAsPartOfConnectedParticleSystem"
                , setUpTexCoordsAsPartOfConnectedParticleSystem_function_type( &::osgParticle::Particle::setUpTexCoordsAsPartOfConnectedParticleSystem )
                , ( bp::arg("ps") )
                , "\n Method for initializing a particles texture coords as part of a connected particle system.\n" );
        
        }
        { //::osgParticle::Particle::setVelocity
        
            typedef void ( ::osgParticle::Particle::*setVelocity_function_type )( ::osg::Vec3 const & ) ;
            
            Particle_exposer.def( 
                "setVelocity"
                , setVelocity_function_type( &::osgParticle::Particle::setVelocity )
                , ( bp::arg("v") ) );
        
        }
        { //::osgParticle::Particle::transformAngleVelocity
        
            typedef void ( ::osgParticle::Particle::*transformAngleVelocity_function_type )( ::osg::Matrix const & ) ;
            
            Particle_exposer.def( 
                "transformAngleVelocity"
                , transformAngleVelocity_function_type( &::osgParticle::Particle::transformAngleVelocity )
                , ( bp::arg("xform") ) );
        
        }
        { //::osgParticle::Particle::transformPositionVelocity
        
            typedef void ( ::osgParticle::Particle::*transformPositionVelocity_function_type )( ::osg::Matrix const & ) ;
            
            Particle_exposer.def( 
                "transformPositionVelocity"
                , transformPositionVelocity_function_type( &::osgParticle::Particle::transformPositionVelocity )
                , ( bp::arg("xform") ) );
        
        }
        { //::osgParticle::Particle::transformPositionVelocity
        
            typedef void ( ::osgParticle::Particle::*transformPositionVelocity_function_type )( ::osg::Matrix const &,::osg::Matrix const &,float ) ;
            
            Particle_exposer.def( 
                "transformPositionVelocity"
                , transformPositionVelocity_function_type( &::osgParticle::Particle::transformPositionVelocity )
                , ( bp::arg("xform1"), bp::arg("xform2"), bp::arg("r") ) );
        
        }
        { //::osgParticle::Particle::update
        
            typedef bool ( ::osgParticle::Particle::*update_function_type )( double,bool ) ;
            
            Particle_exposer.def( 
                "update"
                , update_function_type( &::osgParticle::Particle::update )
                , ( bp::arg("dt"), bp::arg("onlyTimeStamp") )
                , "\n Update the particle (dont call this method manually).\n            This method is called automatically by <CODE>ParticleSystem::update()</CODE>; it\n            updates the graphical properties of the particle for the current time,\n            checks whether the particle is still alive, and then updates its position\n            by computing <I>P = P + V * dt</I> (where <I>P</I> is the position and <I>V</I> is the velocity).\n" );
        
        }
    }

}
