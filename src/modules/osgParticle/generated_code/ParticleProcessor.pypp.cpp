// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgParticle.h"
#include "wrap_referenced.h"
#include "ParticleProcessor.pypp.hpp"

namespace bp = boost::python;

struct ParticleProcessor_wrapper : osgParticle::ParticleProcessor, bp::wrapper< osgParticle::ParticleProcessor > {

    virtual void accept( ::osg::NodeVisitor & nv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(nv) );
        else{
            this->osgParticle::ParticleProcessor::accept( boost::ref(nv) );
        }
    }
    
    void default_accept( ::osg::NodeVisitor & nv ) {
        osgParticle::ParticleProcessor::accept( boost::ref(nv) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgParticle::ParticleProcessor::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgParticle::ParticleProcessor::className( );
    }

    virtual ::osg::BoundingSphere computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osgParticle::ParticleProcessor::computeBound(  );
        }
    }
    
    ::osg::BoundingSphere default_computeBound(  ) const  {
        return osgParticle::ParticleProcessor::computeBound( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgParticle::ParticleProcessor::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgParticle::ParticleProcessor::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgParticle::ParticleProcessor::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgParticle::ParticleProcessor::libraryName( );
    }

    virtual void traverse( ::osg::NodeVisitor & nv ) {
        if( bp::override func_traverse = this->get_override( "traverse" ) )
            func_traverse( boost::ref(nv) );
        else{
            this->osgParticle::ParticleProcessor::traverse( boost::ref(nv) );
        }
    }
    
    void default_traverse( ::osg::NodeVisitor & nv ) {
        osgParticle::ParticleProcessor::traverse( boost::ref(nv) );
    }

    virtual ::osg::Camera * asCamera(  ) {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera * default_asCamera(  ) {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Camera const * asCamera(  ) const  {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera const * default_asCamera(  ) const  {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Geode * asGeode(  ) {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode * default_asGeode(  ) {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Geode const * asGeode(  ) const  {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode const * default_asGeode(  ) const  {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Group * asGroup(  ) {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Node::asGroup(  );
        }
    }
    
    ::osg::Group * default_asGroup(  ) {
        return osg::Node::asGroup( );
    }

    virtual ::osg::Group const * asGroup(  ) const  {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Node::asGroup(  );
        }
    }
    
    ::osg::Group const * default_asGroup(  ) const  {
        return osg::Node::asGroup( );
    }

    virtual ::osg::Switch * asSwitch(  ) {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch * default_asSwitch(  ) {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Switch const * asSwitch(  ) const  {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch const * default_asSwitch(  ) const  {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Transform * asTransform(  ) {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Node::asTransform(  );
        }
    }
    
    ::osg::Transform * default_asTransform(  ) {
        return osg::Node::asTransform( );
    }

    virtual ::osg::Transform const * asTransform(  ) const  {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Node::asTransform(  );
        }
    }
    
    ::osg::Transform const * default_asTransform(  ) const  {
        return osg::Node::asTransform( );
    }

    virtual void ascend( ::osg::NodeVisitor & nv ) {
        if( bp::override func_ascend = this->get_override( "ascend" ) )
            func_ascend( boost::ref(nv) );
        else{
            this->osg::Node::ascend( boost::ref(nv) );
        }
    }
    
    void default_ascend( ::osg::NodeVisitor & nv ) {
        osg::Node::ascend( boost::ref(nv) );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::Node::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::Node::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::Node::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::Node::cloneType( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Node::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Node::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Node::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Node::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_ParticleProcessor_class(){

    { //::osgParticle::ParticleProcessor
        typedef bp::class_< ParticleProcessor_wrapper, bp::bases< ::osg::Node >, osg::ref_ptr< ParticleProcessor_wrapper >, boost::noncopyable > ParticleProcessor_exposer_t;
        ParticleProcessor_exposer_t ParticleProcessor_exposer = ParticleProcessor_exposer_t( "ParticleProcessor", "\n A common base interface for those classes which need to do something on particles. Such classes\n are, for example, Emitter (particle generation) and Program (particle animation).\n This class holds some properties, like a <I>reference frame</I> and a reference to a ParticleSystem;\n descendant classes should process the particles taking into account the reference frame, computing the right\n transformations when needed.\n", bp::no_init );
        bp::scope ParticleProcessor_scope( ParticleProcessor_exposer );
        bp::enum_< osgParticle::ParticleProcessor::ReferenceFrame>("ReferenceFrame")
            .value("RELATIVE_RF", osgParticle::ParticleProcessor::RELATIVE_RF)
            .value("ABSOLUTE_RF", osgParticle::ParticleProcessor::ABSOLUTE_RF)
            .export_values()
            ;
        { //::osgParticle::ParticleProcessor::accept
        
            typedef void ( ::osgParticle::ParticleProcessor::*accept_function_type )( ::osg::NodeVisitor & ) ;
            typedef void ( ParticleProcessor_wrapper::*default_accept_function_type )( ::osg::NodeVisitor & ) ;
            
            ParticleProcessor_exposer.def( 
                "accept"
                , accept_function_type(&::osgParticle::ParticleProcessor::accept)
                , default_accept_function_type(&ParticleProcessor_wrapper::default_accept)
                , ( bp::arg("nv") ) );
        
        }
        { //::osgParticle::ParticleProcessor::className
        
            typedef char const * ( ::osgParticle::ParticleProcessor::*className_function_type )(  ) const;
            typedef char const * ( ParticleProcessor_wrapper::*default_className_function_type )(  ) const;
            
            ParticleProcessor_exposer.def( 
                "className"
                , className_function_type(&::osgParticle::ParticleProcessor::className)
                , default_className_function_type(&ParticleProcessor_wrapper::default_className) );
        
        }
        { //::osgParticle::ParticleProcessor::computeBound
        
            typedef ::osg::BoundingSphere ( ::osgParticle::ParticleProcessor::*computeBound_function_type )(  ) const;
            typedef ::osg::BoundingSphere ( ParticleProcessor_wrapper::*default_computeBound_function_type )(  ) const;
            
            ParticleProcessor_exposer.def( 
                "computeBound"
                , computeBound_function_type(&::osgParticle::ParticleProcessor::computeBound)
                , default_computeBound_function_type(&ParticleProcessor_wrapper::default_computeBound) );
        
        }
        { //::osgParticle::ParticleProcessor::getCurrentTime
        
            typedef double ( ::osgParticle::ParticleProcessor::*getCurrentTime_function_type )(  ) const;
            
            ParticleProcessor_exposer.def( 
                "getCurrentTime"
                , getCurrentTime_function_type( &::osgParticle::ParticleProcessor::getCurrentTime ) );
        
        }
        { //::osgParticle::ParticleProcessor::getEnabled
        
            typedef bool ( ::osgParticle::ParticleProcessor::*getEnabled_function_type )(  ) const;
            
            ParticleProcessor_exposer.def( 
                "getEnabled"
                , getEnabled_function_type( &::osgParticle::ParticleProcessor::getEnabled )
                , " Get whether this processor is enabled or not." );
        
        }
        { //::osgParticle::ParticleProcessor::getEndless
        
            typedef bool ( ::osgParticle::ParticleProcessor::*getEndless_function_type )(  ) const;
            
            ParticleProcessor_exposer.def( 
                "getEndless"
                , getEndless_function_type( &::osgParticle::ParticleProcessor::getEndless )
                , " Check whether this processor is endless." );
        
        }
        { //::osgParticle::ParticleProcessor::getLifeTime
        
            typedef double ( ::osgParticle::ParticleProcessor::*getLifeTime_function_type )(  ) const;
            
            ParticleProcessor_exposer.def( 
                "getLifeTime"
                , getLifeTime_function_type( &::osgParticle::ParticleProcessor::getLifeTime ) );
        
        }
        { //::osgParticle::ParticleProcessor::getLocalToWorldMatrix
        
            typedef ::osg::Matrix const & ( ::osgParticle::ParticleProcessor::*getLocalToWorldMatrix_function_type )(  ) ;
            
            ParticleProcessor_exposer.def( 
                "getLocalToWorldMatrix"
                , getLocalToWorldMatrix_function_type( &::osgParticle::ParticleProcessor::getLocalToWorldMatrix )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::ParticleProcessor::getParticleSystem
        
            typedef ::osgParticle::ParticleSystem * ( ::osgParticle::ParticleProcessor::*getParticleSystem_function_type )(  ) ;
            
            ParticleProcessor_exposer.def( 
                "getParticleSystem"
                , getParticleSystem_function_type( &::osgParticle::ParticleProcessor::getParticleSystem )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::ParticleProcessor::getParticleSystem
        
            typedef ::osgParticle::ParticleSystem const * ( ::osgParticle::ParticleProcessor::*getParticleSystem_function_type )(  ) const;
            
            ParticleProcessor_exposer.def( 
                "getParticleSystem"
                , getParticleSystem_function_type( &::osgParticle::ParticleProcessor::getParticleSystem )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::ParticleProcessor::getPreviousLocalToWorldMatrix
        
            typedef ::osg::Matrix const & ( ::osgParticle::ParticleProcessor::*getPreviousLocalToWorldMatrix_function_type )(  ) ;
            
            ParticleProcessor_exposer.def( 
                "getPreviousLocalToWorldMatrix"
                , getPreviousLocalToWorldMatrix_function_type( &::osgParticle::ParticleProcessor::getPreviousLocalToWorldMatrix )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::ParticleProcessor::getPreviousWorldToLocalMatrix
        
            typedef ::osg::Matrix const & ( ::osgParticle::ParticleProcessor::*getPreviousWorldToLocalMatrix_function_type )(  ) ;
            
            ParticleProcessor_exposer.def( 
                "getPreviousWorldToLocalMatrix"
                , getPreviousWorldToLocalMatrix_function_type( &::osgParticle::ParticleProcessor::getPreviousWorldToLocalMatrix )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::ParticleProcessor::getReferenceFrame
        
            typedef ::osgParticle::ParticleProcessor::ReferenceFrame ( ::osgParticle::ParticleProcessor::*getReferenceFrame_function_type )(  ) const;
            
            ParticleProcessor_exposer.def( 
                "getReferenceFrame"
                , getReferenceFrame_function_type( &::osgParticle::ParticleProcessor::getReferenceFrame ) );
        
        }
        { //::osgParticle::ParticleProcessor::getResetTime
        
            typedef double ( ::osgParticle::ParticleProcessor::*getResetTime_function_type )(  ) const;
            
            ParticleProcessor_exposer.def( 
                "getResetTime"
                , getResetTime_function_type( &::osgParticle::ParticleProcessor::getResetTime ) );
        
        }
        { //::osgParticle::ParticleProcessor::getStartTime
        
            typedef double ( ::osgParticle::ParticleProcessor::*getStartTime_function_type )(  ) const;
            
            ParticleProcessor_exposer.def( 
                "getStartTime"
                , getStartTime_function_type( &::osgParticle::ParticleProcessor::getStartTime ) );
        
        }
        { //::osgParticle::ParticleProcessor::getWorldToLocalMatrix
        
            typedef ::osg::Matrix const & ( ::osgParticle::ParticleProcessor::*getWorldToLocalMatrix_function_type )(  ) ;
            
            ParticleProcessor_exposer.def( 
                "getWorldToLocalMatrix"
                , getWorldToLocalMatrix_function_type( &::osgParticle::ParticleProcessor::getWorldToLocalMatrix )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::ParticleProcessor::isAlive
        
            typedef bool ( ::osgParticle::ParticleProcessor::*isAlive_function_type )(  ) const;
            
            ParticleProcessor_exposer.def( 
                "isAlive"
                , isAlive_function_type( &::osgParticle::ParticleProcessor::isAlive ) );
        
        }
        { //::osgParticle::ParticleProcessor::isEnabled
        
            typedef bool ( ::osgParticle::ParticleProcessor::*isEnabled_function_type )(  ) const;
            
            ParticleProcessor_exposer.def( 
                "isEnabled"
                , isEnabled_function_type( &::osgParticle::ParticleProcessor::isEnabled ) );
        
        }
        { //::osgParticle::ParticleProcessor::isEndless
        
            typedef bool ( ::osgParticle::ParticleProcessor::*isEndless_function_type )(  ) const;
            
            ParticleProcessor_exposer.def( 
                "isEndless"
                , isEndless_function_type( &::osgParticle::ParticleProcessor::isEndless ) );
        
        }
        { //::osgParticle::ParticleProcessor::isSameKindAs
        
            typedef bool ( ::osgParticle::ParticleProcessor::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( ParticleProcessor_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            ParticleProcessor_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgParticle::ParticleProcessor::isSameKindAs)
                , default_isSameKindAs_function_type(&ParticleProcessor_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgParticle::ParticleProcessor::libraryName
        
            typedef char const * ( ::osgParticle::ParticleProcessor::*libraryName_function_type )(  ) const;
            typedef char const * ( ParticleProcessor_wrapper::*default_libraryName_function_type )(  ) const;
            
            ParticleProcessor_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgParticle::ParticleProcessor::libraryName)
                , default_libraryName_function_type(&ParticleProcessor_wrapper::default_libraryName) );
        
        }
        { //::osgParticle::ParticleProcessor::rotateLocalToWorld
        
            typedef ::osg::Vec3 ( ::osgParticle::ParticleProcessor::*rotateLocalToWorld_function_type )( ::osg::Vec3 const & ) ;
            
            ParticleProcessor_exposer.def( 
                "rotateLocalToWorld"
                , rotateLocalToWorld_function_type( &::osgParticle::ParticleProcessor::rotateLocalToWorld )
                , ( bp::arg("P") ) );
        
        }
        { //::osgParticle::ParticleProcessor::rotateWorldToLocal
        
            typedef ::osg::Vec3 ( ::osgParticle::ParticleProcessor::*rotateWorldToLocal_function_type )( ::osg::Vec3 const & ) ;
            
            ParticleProcessor_exposer.def( 
                "rotateWorldToLocal"
                , rotateWorldToLocal_function_type( &::osgParticle::ParticleProcessor::rotateWorldToLocal )
                , ( bp::arg("P") ) );
        
        }
        { //::osgParticle::ParticleProcessor::setCurrentTime
        
            typedef void ( ::osgParticle::ParticleProcessor::*setCurrentTime_function_type )( double ) ;
            
            ParticleProcessor_exposer.def( 
                "setCurrentTime"
                , setCurrentTime_function_type( &::osgParticle::ParticleProcessor::setCurrentTime )
                , ( bp::arg("t") ) );
        
        }
        { //::osgParticle::ParticleProcessor::setEnabled
        
            typedef void ( ::osgParticle::ParticleProcessor::*setEnabled_function_type )( bool ) ;
            
            ParticleProcessor_exposer.def( 
                "setEnabled"
                , setEnabled_function_type( &::osgParticle::ParticleProcessor::setEnabled )
                , ( bp::arg("v") ) );
        
        }
        { //::osgParticle::ParticleProcessor::setEndless
        
            typedef void ( ::osgParticle::ParticleProcessor::*setEndless_function_type )( bool ) ;
            
            ParticleProcessor_exposer.def( 
                "setEndless"
                , setEndless_function_type( &::osgParticle::ParticleProcessor::setEndless )
                , ( bp::arg("type") ) );
        
        }
        { //::osgParticle::ParticleProcessor::setLifeTime
        
            typedef void ( ::osgParticle::ParticleProcessor::*setLifeTime_function_type )( double ) ;
            
            ParticleProcessor_exposer.def( 
                "setLifeTime"
                , setLifeTime_function_type( &::osgParticle::ParticleProcessor::setLifeTime )
                , ( bp::arg("t") ) );
        
        }
        { //::osgParticle::ParticleProcessor::setParticleSystem
        
            typedef void ( ::osgParticle::ParticleProcessor::*setParticleSystem_function_type )( ::osgParticle::ParticleSystem * ) ;
            
            ParticleProcessor_exposer.def( 
                "setParticleSystem"
                , setParticleSystem_function_type( &::osgParticle::ParticleProcessor::setParticleSystem )
                , ( bp::arg("ps") ) );
        
        }
        { //::osgParticle::ParticleProcessor::setReferenceFrame
        
            typedef void ( ::osgParticle::ParticleProcessor::*setReferenceFrame_function_type )( ::osgParticle::ParticleProcessor::ReferenceFrame ) ;
            
            ParticleProcessor_exposer.def( 
                "setReferenceFrame"
                , setReferenceFrame_function_type( &::osgParticle::ParticleProcessor::setReferenceFrame )
                , ( bp::arg("rf") ) );
        
        }
        { //::osgParticle::ParticleProcessor::setResetTime
        
            typedef void ( ::osgParticle::ParticleProcessor::*setResetTime_function_type )( double ) ;
            
            ParticleProcessor_exposer.def( 
                "setResetTime"
                , setResetTime_function_type( &::osgParticle::ParticleProcessor::setResetTime )
                , ( bp::arg("t") ) );
        
        }
        { //::osgParticle::ParticleProcessor::setStartTime
        
            typedef void ( ::osgParticle::ParticleProcessor::*setStartTime_function_type )( double ) ;
            
            ParticleProcessor_exposer.def( 
                "setStartTime"
                , setStartTime_function_type( &::osgParticle::ParticleProcessor::setStartTime )
                , ( bp::arg("t") ) );
        
        }
        { //::osgParticle::ParticleProcessor::transformLocalToWorld
        
            typedef ::osg::Vec3 ( ::osgParticle::ParticleProcessor::*transformLocalToWorld_function_type )( ::osg::Vec3 const & ) ;
            
            ParticleProcessor_exposer.def( 
                "transformLocalToWorld"
                , transformLocalToWorld_function_type( &::osgParticle::ParticleProcessor::transformLocalToWorld )
                , ( bp::arg("P") ) );
        
        }
        { //::osgParticle::ParticleProcessor::transformWorldToLocal
        
            typedef ::osg::Vec3 ( ::osgParticle::ParticleProcessor::*transformWorldToLocal_function_type )( ::osg::Vec3 const & ) ;
            
            ParticleProcessor_exposer.def( 
                "transformWorldToLocal"
                , transformWorldToLocal_function_type( &::osgParticle::ParticleProcessor::transformWorldToLocal )
                , ( bp::arg("P") ) );
        
        }
        { //::osgParticle::ParticleProcessor::traverse
        
            typedef void ( ::osgParticle::ParticleProcessor::*traverse_function_type )( ::osg::NodeVisitor & ) ;
            typedef void ( ParticleProcessor_wrapper::*default_traverse_function_type )( ::osg::NodeVisitor & ) ;
            
            ParticleProcessor_exposer.def( 
                "traverse"
                , traverse_function_type(&::osgParticle::ParticleProcessor::traverse)
                , default_traverse_function_type(&ParticleProcessor_wrapper::default_traverse)
                , ( bp::arg("nv") ) );
        
        }
    }

}
