// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgParticle.h"
#include "wrap_referenced.h"
#include "ConnectedParticleSystem.pypp.hpp"

namespace bp = boost::python;

struct ConnectedParticleSystem_wrapper : osgParticle::ConnectedParticleSystem, bp::wrapper< osgParticle::ConnectedParticleSystem > {

    ConnectedParticleSystem_wrapper( )
    : osgParticle::ConnectedParticleSystem( )
      , bp::wrapper< osgParticle::ConnectedParticleSystem >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgParticle::ConnectedParticleSystem::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgParticle::ConnectedParticleSystem::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgParticle::ConnectedParticleSystem::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgParticle::ConnectedParticleSystem::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgParticle::ConnectedParticleSystem::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgParticle::ConnectedParticleSystem::cloneType( );
    }

    virtual ::osgParticle::Particle * createParticle( ::osgParticle::Particle const * ptemplate ) {
        if( bp::override func_createParticle = this->get_override( "createParticle" ) )
            return func_createParticle( boost::python::ptr(ptemplate) );
        else{
            return this->osgParticle::ConnectedParticleSystem::createParticle( boost::python::ptr(ptemplate) );
        }
    }
    
    ::osgParticle::Particle * default_createParticle( ::osgParticle::Particle const * ptemplate ) {
        return osgParticle::ConnectedParticleSystem::createParticle( boost::python::ptr(ptemplate) );
    }

    virtual void drawImplementation( ::osg::RenderInfo & renderInfo ) const  {
        if( bp::override func_drawImplementation = this->get_override( "drawImplementation" ) )
            func_drawImplementation( boost::ref(renderInfo) );
        else{
            this->osgParticle::ConnectedParticleSystem::drawImplementation( boost::ref(renderInfo) );
        }
    }
    
    void default_drawImplementation( ::osg::RenderInfo & renderInfo ) const  {
        osgParticle::ConnectedParticleSystem::drawImplementation( boost::ref(renderInfo) );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgParticle::ConnectedParticleSystem::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgParticle::ConnectedParticleSystem::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgParticle::ConnectedParticleSystem::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgParticle::ConnectedParticleSystem::libraryName( );
    }

    virtual void reuseParticle( int i ) {
        if( bp::override func_reuseParticle = this->get_override( "reuseParticle" ) )
            func_reuseParticle( i );
        else{
            this->osgParticle::ConnectedParticleSystem::reuseParticle( i );
        }
    }
    
    void default_reuseParticle( int i ) {
        osgParticle::ConnectedParticleSystem::reuseParticle( i );
    }

    virtual void accept( ::osg::Drawable::AttributeFunctor & arg0 ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(arg0) );
        else{
            this->osg::Drawable::accept( boost::ref(arg0) );
        }
    }
    
    void default_accept( ::osg::Drawable::AttributeFunctor & arg0 ) {
        osg::Drawable::accept( boost::ref(arg0) );
    }

    virtual void accept( ::osg::Drawable::ConstAttributeFunctor & arg0 ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(arg0) );
        else{
            this->osg::Drawable::accept( boost::ref(arg0) );
        }
    }
    
    void default_accept( ::osg::Drawable::ConstAttributeFunctor & arg0 ) const  {
        osg::Drawable::accept( boost::ref(arg0) );
    }

    virtual void accept( ::osg::PrimitiveFunctor & arg0 ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(arg0) );
        else{
            this->osg::Drawable::accept( boost::ref(arg0) );
        }
    }
    
    void default_accept( ::osg::PrimitiveFunctor & arg0 ) const  {
        osg::Drawable::accept( boost::ref(arg0) );
    }

    virtual void accept( ::osg::PrimitiveIndexFunctor & arg0 ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(arg0) );
        else{
            this->osg::Drawable::accept( boost::ref(arg0) );
        }
    }
    
    void default_accept( ::osg::PrimitiveIndexFunctor & arg0 ) const  {
        osg::Drawable::accept( boost::ref(arg0) );
    }

    virtual ::osg::Geometry * asGeometry(  ) {
        if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
            return func_asGeometry(  );
        else{
            return this->osg::Drawable::asGeometry(  );
        }
    }
    
    ::osg::Geometry * default_asGeometry(  ) {
        return osg::Drawable::asGeometry( );
    }

    virtual ::osg::Geometry const * asGeometry(  ) const  {
        if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
            return func_asGeometry(  );
        else{
            return this->osg::Drawable::asGeometry(  );
        }
    }
    
    ::osg::Geometry const * default_asGeometry(  ) const  {
        return osg::Drawable::asGeometry( );
    }

    virtual void compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
        if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
            func_compileGLObjects( boost::ref(renderInfo) );
        else{
            this->osg::Drawable::compileGLObjects( boost::ref(renderInfo) );
        }
    }
    
    void default_compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
        osg::Drawable::compileGLObjects( boost::ref(renderInfo) );
    }

    virtual ::osg::BoundingBox computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osgParticle::ParticleSystem::computeBound(  );
        }
    }
    
    ::osg::BoundingBox default_computeBound(  ) const  {
        return osgParticle::ParticleSystem::computeBound( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Drawable::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Drawable::computeDataVariance( );
    }

    virtual void destroyParticle( int i ) {
        if( bp::override func_destroyParticle = this->get_override( "destroyParticle" ) )
            func_destroyParticle( i );
        else{
            this->osgParticle::ParticleSystem::destroyParticle( i );
        }
    }
    
    void default_destroyParticle( int i ) {
        osgParticle::ParticleSystem::destroyParticle( i );
    }

    virtual void dirtyDisplayList(  ) {
        if( bp::override func_dirtyDisplayList = this->get_override( "dirtyDisplayList" ) )
            func_dirtyDisplayList(  );
        else{
            this->osg::Drawable::dirtyDisplayList(  );
        }
    }
    
    void default_dirtyDisplayList(  ) {
        osg::Drawable::dirtyDisplayList( );
    }

    virtual unsigned int getGLObjectSizeHint(  ) const  {
        if( bp::override func_getGLObjectSizeHint = this->get_override( "getGLObjectSizeHint" ) )
            return func_getGLObjectSizeHint(  );
        else{
            return this->osg::Drawable::getGLObjectSizeHint(  );
        }
    }
    
    unsigned int default_getGLObjectSizeHint(  ) const  {
        return osg::Drawable::getGLObjectSizeHint( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Drawable::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Drawable::resizeGLObjectBuffers( maxSize );
    }

    virtual void setCullCallback( ::osg::Drawable::CullCallback * cc ) {
        if( bp::override func_setCullCallback = this->get_override( "setCullCallback" ) )
            func_setCullCallback( boost::python::ptr(cc) );
        else{
            this->osg::Drawable::setCullCallback( boost::python::ptr(cc) );
        }
    }
    
    void default_setCullCallback( ::osg::Drawable::CullCallback * cc ) {
        osg::Drawable::setCullCallback( boost::python::ptr(cc) );
    }

    virtual void setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
        if( bp::override func_setDrawCallback = this->get_override( "setDrawCallback" ) )
            func_setDrawCallback( boost::python::ptr(dc) );
        else{
            this->osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
        }
    }
    
    void default_setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
        osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
    }

    virtual void setEventCallback( ::osg::Drawable::EventCallback * ac ) {
        if( bp::override func_setEventCallback = this->get_override( "setEventCallback" ) )
            func_setEventCallback( boost::python::ptr(ac) );
        else{
            this->osg::Drawable::setEventCallback( boost::python::ptr(ac) );
        }
    }
    
    void default_setEventCallback( ::osg::Drawable::EventCallback * ac ) {
        osg::Drawable::setEventCallback( boost::python::ptr(ac) );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Drawable::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Drawable::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
        if( bp::override func_setUpdateCallback = this->get_override( "setUpdateCallback" ) )
            func_setUpdateCallback( boost::python::ptr(ac) );
        else{
            this->osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
        }
    }
    
    void default_setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
        osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
    }

    virtual void setUseVertexBufferObjects( bool flag ) {
        if( bp::override func_setUseVertexBufferObjects = this->get_override( "setUseVertexBufferObjects" ) )
            func_setUseVertexBufferObjects( flag );
        else{
            this->osg::Drawable::setUseVertexBufferObjects( flag );
        }
    }
    
    void default_setUseVertexBufferObjects( bool flag ) {
        osg::Drawable::setUseVertexBufferObjects( flag );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual bool supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Drawable::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
        return osg::Drawable::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Drawable::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
        return osg::Drawable::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Drawable::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
        return osg::Drawable::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Drawable::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
        return osg::Drawable::supports( boost::ref(arg0) );
    }

    virtual void update( double dt, ::osg::NodeVisitor & nv ) {
        if( bp::override func_update = this->get_override( "update" ) )
            func_update( dt, boost::ref(nv) );
        else{
            this->osgParticle::ParticleSystem::update( dt, boost::ref(nv) );
        }
    }
    
    void default_update( double dt, ::osg::NodeVisitor & nv ) {
        osgParticle::ParticleSystem::update( dt, boost::ref(nv) );
    }

};

void register_ConnectedParticleSystem_class(){

    bp::class_< ConnectedParticleSystem_wrapper, bp::bases< osgParticle::ParticleSystem >, osg::ref_ptr< ConnectedParticleSystem_wrapper >, boost::noncopyable >( "ConnectedParticleSystem", "\n ConnectConnectedParticleSystem is a specialise ConnectedParticleSystem for effects\n like missle trails, where the individual particles are rendered as\n single ribbon.\n", bp::no_init )    
        .def( bp::init< >("\n ConnectConnectedParticleSystem is a specialise ConnectedParticleSystem for effects\n like missle trails, where the individual particles are rendered as\n single ribbon.\n") )    
        .def( 
            "className"
            , (char const * ( ::osgParticle::ConnectedParticleSystem::* )(  ) const)(&::osgParticle::ConnectedParticleSystem::className)
            , (char const * ( ConnectedParticleSystem_wrapper::* )(  ) const)(&ConnectedParticleSystem_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osgParticle::ConnectedParticleSystem::* )( ::osg::CopyOp const & ) const)(&::osgParticle::ConnectedParticleSystem::clone)
            , (::osg::Object * ( ConnectedParticleSystem_wrapper::* )( ::osg::CopyOp const & ) const)(&ConnectedParticleSystem_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osgParticle::ConnectedParticleSystem::* )(  ) const)(&::osgParticle::ConnectedParticleSystem::cloneType)
            , (::osg::Object * ( ConnectedParticleSystem_wrapper::* )(  ) const)(&ConnectedParticleSystem_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "createParticle"
            , (::osgParticle::Particle * ( ::osgParticle::ConnectedParticleSystem::* )( ::osgParticle::Particle const * ) )(&::osgParticle::ConnectedParticleSystem::createParticle)
            , (::osgParticle::Particle * ( ConnectedParticleSystem_wrapper::* )( ::osgParticle::Particle const * ) )(&ConnectedParticleSystem_wrapper::default_createParticle)
            , ( bp::arg("ptemplate") )
            , bp::return_internal_reference< >() )    
        .def( 
            "drawImplementation"
            , (void ( ::osgParticle::ConnectedParticleSystem::* )( ::osg::RenderInfo & ) const)(&::osgParticle::ConnectedParticleSystem::drawImplementation)
            , (void ( ConnectedParticleSystem_wrapper::* )( ::osg::RenderInfo & ) const)(&ConnectedParticleSystem_wrapper::default_drawImplementation)
            , ( bp::arg("renderInfo") ) )    
        .def( 
            "getMaxNumberOfParticlesToSkip"
            , (unsigned int ( ::osgParticle::ConnectedParticleSystem::* )(  ) )( &::osgParticle::ConnectedParticleSystem::getMaxNumberOfParticlesToSkip )
            , "Get the maximum numbers of particles to be skipped during the predraw filtering" )    
        .def( 
            "getStartParticle"
            , (::osgParticle::Particle const * ( ::osgParticle::ConnectedParticleSystem::* )(  ) const)( &::osgParticle::ConnectedParticleSystem::getStartParticle )
            , bp::return_internal_reference< >()
            , "Get the (const) particle from where the line or quadstrip starts to be drawn" )    
        .def( 
            "getStartParticle"
            , (::osgParticle::Particle * ( ::osgParticle::ConnectedParticleSystem::* )(  ) )( &::osgParticle::ConnectedParticleSystem::getStartParticle )
            , bp::return_internal_reference< >()
            , "Get the particle from where the line or quadstrip starts to be drawn" )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osgParticle::ConnectedParticleSystem::* )( ::osg::Object const * ) const)(&::osgParticle::ConnectedParticleSystem::isSameKindAs)
            , (bool ( ConnectedParticleSystem_wrapper::* )( ::osg::Object const * ) const)(&ConnectedParticleSystem_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osgParticle::ConnectedParticleSystem::* )(  ) const)(&::osgParticle::ConnectedParticleSystem::libraryName)
            , (char const * ( ConnectedParticleSystem_wrapper::* )(  ) const)(&ConnectedParticleSystem_wrapper::default_libraryName) )    
        .def( 
            "reuseParticle"
            , (void ( ::osgParticle::ConnectedParticleSystem::* )( int ) )(&::osgParticle::ConnectedParticleSystem::reuseParticle)
            , (void ( ConnectedParticleSystem_wrapper::* )( int ) )(&ConnectedParticleSystem_wrapper::default_reuseParticle)
            , ( bp::arg("i") ) )    
        .def( 
            "setMaxNumberOfParticlesToSkip"
            , (void ( ::osgParticle::ConnectedParticleSystem::* )( unsigned int ) )( &::osgParticle::ConnectedParticleSystem::setMaxNumberOfParticlesToSkip )
            , ( bp::arg("maxNumberofParticlesToSkip") )
            , "Set the maximum numbers of particles to be skipped during the predraw filtering" )    
        .def( 
            "computeBound"
            , (::osg::BoundingBox ( ::osgParticle::ParticleSystem::* )(  ) const)(&::osgParticle::ParticleSystem::computeBound)
            , (::osg::BoundingBox ( ConnectedParticleSystem_wrapper::* )(  ) const)(&ConnectedParticleSystem_wrapper::default_computeBound) )    
        .def( 
            "destroyParticle"
            , (void ( ::osgParticle::ParticleSystem::* )( int ) )(&::osgParticle::ParticleSystem::destroyParticle)
            , (void ( ConnectedParticleSystem_wrapper::* )( int ) )(&ConnectedParticleSystem_wrapper::default_destroyParticle)
            , ( bp::arg("i") ) )    
        .def( 
            "update"
            , (void ( ::osgParticle::ParticleSystem::* )( double,::osg::NodeVisitor & ) )(&::osgParticle::ParticleSystem::update)
            , (void ( ConnectedParticleSystem_wrapper::* )( double,::osg::NodeVisitor & ) )(&ConnectedParticleSystem_wrapper::default_update)
            , ( bp::arg("dt"), bp::arg("nv") ) );

}
