// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgParticle.h"
#include "wrap_referenced.h"
#include "DomainOperator.pypp.hpp"

namespace bp = boost::python;

struct DomainOperator_wrapper : osgParticle::DomainOperator, bp::wrapper< osgParticle::DomainOperator > {

    DomainOperator_wrapper( )
    : osgParticle::DomainOperator( )
      , bp::wrapper< osgParticle::DomainOperator >(){
        // null constructor
    
    }

    virtual void beginOperate( ::osgParticle::Program * prg ) {
        if( bp::override func_beginOperate = this->get_override( "beginOperate" ) )
            func_beginOperate( boost::python::ptr(prg) );
        else{
            this->osgParticle::DomainOperator::beginOperate( boost::python::ptr(prg) );
        }
    }
    
    void default_beginOperate( ::osgParticle::Program * prg ) {
        osgParticle::DomainOperator::beginOperate( boost::python::ptr(prg) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgParticle::DomainOperator::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgParticle::DomainOperator::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgParticle::DomainOperator::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgParticle::DomainOperator::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgParticle::DomainOperator::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgParticle::DomainOperator::cloneType( );
    }

    virtual void endOperate(  ) {
        if( bp::override func_endOperate = this->get_override( "endOperate" ) )
            func_endOperate(  );
        else{
            this->osgParticle::DomainOperator::endOperate(  );
        }
    }
    
    void default_endOperate(  ) {
        osgParticle::DomainOperator::endOperate( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgParticle::DomainOperator::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgParticle::DomainOperator::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgParticle::DomainOperator::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgParticle::DomainOperator::libraryName( );
    }

    virtual void operate( ::osgParticle::Particle * P, double dt ) {
        if( bp::override func_operate = this->get_override( "operate" ) )
            func_operate( boost::python::ptr(P), dt );
        else{
            this->osgParticle::DomainOperator::operate( boost::python::ptr(P), dt );
        }
    }
    
    void default_operate( ::osgParticle::Particle * P, double dt ) {
        osgParticle::DomainOperator::operate( boost::python::ptr(P), dt );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void operateParticles( ::osgParticle::ParticleSystem * ps, double dt ) {
        if( bp::override func_operateParticles = this->get_override( "operateParticles" ) )
            func_operateParticles( boost::python::ptr(ps), dt );
        else{
            this->osgParticle::Operator::operateParticles( boost::python::ptr(ps), dt );
        }
    }
    
    void default_operateParticles( ::osgParticle::ParticleSystem * ps, double dt ) {
        osgParticle::Operator::operateParticles( boost::python::ptr(ps), dt );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_DomainOperator_class(){

    { //::osgParticle::DomainOperator
        typedef bp::class_< DomainOperator_wrapper, bp::bases< osgParticle::Operator >, osg::ref_ptr< DomainOperator_wrapper >, boost::noncopyable > DomainOperator_exposer_t;
        DomainOperator_exposer_t DomainOperator_exposer = DomainOperator_exposer_t( "DomainOperator", "\n A domain operator which accepts different domain shapes as the parameter.\n    It can be derived to implement operators that require particles interacting with domains.\n    Refer to David McAllisters Particle System API (http://www.particlesystems.org)\n", bp::no_init );
        bp::scope DomainOperator_scope( DomainOperator_exposer );
        { //::osgParticle::DomainOperator::Domain
            typedef bp::class_< osgParticle::DomainOperator::Domain > Domain_exposer_t;
            Domain_exposer_t Domain_exposer = Domain_exposer_t( "Domain", "\n A domain operator which accepts different domain shapes as the parameter.\n    It can be derived to implement operators that require particles interacting with domains.\n    Refer to David McAllisters Particle System API (http://www.particlesystems.org)\n", bp::init< osgParticle::DomainOperator::Domain::Type >(( bp::arg("t") )) );
            bp::scope Domain_scope( Domain_exposer );
            bp::enum_< osgParticle::DomainOperator::Domain::Type>("Type")
                .value("UNDEFINED_DOMAIN", osgParticle::DomainOperator::Domain::UNDEFINED_DOMAIN)
                .value("POINT_DOMAIN", osgParticle::DomainOperator::Domain::POINT_DOMAIN)
                .value("LINE_DOMAIN", osgParticle::DomainOperator::Domain::LINE_DOMAIN)
                .value("TRI_DOMAIN", osgParticle::DomainOperator::Domain::TRI_DOMAIN)
                .value("RECT_DOMAIN", osgParticle::DomainOperator::Domain::RECT_DOMAIN)
                .value("PLANE_DOMAIN", osgParticle::DomainOperator::Domain::PLANE_DOMAIN)
                .value("SPHERE_DOMAIN", osgParticle::DomainOperator::Domain::SPHERE_DOMAIN)
                .value("BOX_DOMAIN", osgParticle::DomainOperator::Domain::BOX_DOMAIN)
                .value("DISK_DOMAIN", osgParticle::DomainOperator::Domain::DISK_DOMAIN)
                .export_values()
                ;
            bp::implicitly_convertible< osgParticle::DomainOperator::Domain::Type, osgParticle::DomainOperator::Domain >();
            Domain_exposer.def_readwrite( "plane", &osgParticle::DomainOperator::Domain::plane );
            Domain_exposer.def_readwrite( "r1", &osgParticle::DomainOperator::Domain::r1 );
            Domain_exposer.def_readwrite( "r2", &osgParticle::DomainOperator::Domain::r2 );
            Domain_exposer.def_readwrite( "s1", &osgParticle::DomainOperator::Domain::s1 );
            Domain_exposer.def_readwrite( "s2", &osgParticle::DomainOperator::Domain::s2 );
            Domain_exposer.def_readwrite( "type", &osgParticle::DomainOperator::Domain::type );
            Domain_exposer.def_readwrite( "v1", &osgParticle::DomainOperator::Domain::v1 );
            Domain_exposer.def_readwrite( "v2", &osgParticle::DomainOperator::Domain::v2 );
            Domain_exposer.def_readwrite( "v3", &osgParticle::DomainOperator::Domain::v3 );
        }
        DomainOperator_exposer.def( bp::init< >() );
        { //::osgParticle::DomainOperator::addBoxDomain
        
            typedef void ( ::osgParticle::DomainOperator::*addBoxDomain_function_type )( ::osg::Vec3 const &,::osg::Vec3 const & ) ;
            
            DomainOperator_exposer.def( 
                "addBoxDomain"
                , addBoxDomain_function_type( &::osgParticle::DomainOperator::addBoxDomain )
                , ( bp::arg("min"), bp::arg("max") ) );
        
        }
        { //::osgParticle::DomainOperator::addDiskDomain
        
            typedef void ( ::osgParticle::DomainOperator::*addDiskDomain_function_type )( ::osg::Vec3 const &,::osg::Vec3 const &,float,float ) ;
            
            DomainOperator_exposer.def( 
                "addDiskDomain"
                , addDiskDomain_function_type( &::osgParticle::DomainOperator::addDiskDomain )
                , ( bp::arg("c"), bp::arg("n"), bp::arg("r1"), bp::arg("r2")=0.0f ) );
        
        }
        { //::osgParticle::DomainOperator::addDomain
        
            typedef void ( ::osgParticle::DomainOperator::*addDomain_function_type )( ::osgParticle::DomainOperator::Domain const & ) ;
            
            DomainOperator_exposer.def( 
                "addDomain"
                , addDomain_function_type( &::osgParticle::DomainOperator::addDomain )
                , ( bp::arg("domain") )
                , "\n Add a domain object directly, used by the .osg wrappers and serializers.\n" );
        
        }
        { //::osgParticle::DomainOperator::addLineSegmentDomain
        
            typedef void ( ::osgParticle::DomainOperator::*addLineSegmentDomain_function_type )( ::osg::Vec3 const &,::osg::Vec3 const & ) ;
            
            DomainOperator_exposer.def( 
                "addLineSegmentDomain"
                , addLineSegmentDomain_function_type( &::osgParticle::DomainOperator::addLineSegmentDomain )
                , ( bp::arg("v1"), bp::arg("v2") ) );
        
        }
        { //::osgParticle::DomainOperator::addPlaneDomain
        
            typedef void ( ::osgParticle::DomainOperator::*addPlaneDomain_function_type )( ::osg::Plane const & ) ;
            
            DomainOperator_exposer.def( 
                "addPlaneDomain"
                , addPlaneDomain_function_type( &::osgParticle::DomainOperator::addPlaneDomain )
                , ( bp::arg("plane") ) );
        
        }
        { //::osgParticle::DomainOperator::addPointDomain
        
            typedef void ( ::osgParticle::DomainOperator::*addPointDomain_function_type )( ::osg::Vec3 const & ) ;
            
            DomainOperator_exposer.def( 
                "addPointDomain"
                , addPointDomain_function_type( &::osgParticle::DomainOperator::addPointDomain )
                , ( bp::arg("p") ) );
        
        }
        { //::osgParticle::DomainOperator::addRectangleDomain
        
            typedef void ( ::osgParticle::DomainOperator::*addRectangleDomain_function_type )( ::osg::Vec3 const &,::osg::Vec3 const &,::osg::Vec3 const & ) ;
            
            DomainOperator_exposer.def( 
                "addRectangleDomain"
                , addRectangleDomain_function_type( &::osgParticle::DomainOperator::addRectangleDomain )
                , ( bp::arg("corner"), bp::arg("w"), bp::arg("h") ) );
        
        }
        { //::osgParticle::DomainOperator::addSphereDomain
        
            typedef void ( ::osgParticle::DomainOperator::*addSphereDomain_function_type )( ::osg::Vec3 const &,float ) ;
            
            DomainOperator_exposer.def( 
                "addSphereDomain"
                , addSphereDomain_function_type( &::osgParticle::DomainOperator::addSphereDomain )
                , ( bp::arg("c"), bp::arg("r") ) );
        
        }
        { //::osgParticle::DomainOperator::addTriangleDomain
        
            typedef void ( ::osgParticle::DomainOperator::*addTriangleDomain_function_type )( ::osg::Vec3 const &,::osg::Vec3 const &,::osg::Vec3 const & ) ;
            
            DomainOperator_exposer.def( 
                "addTriangleDomain"
                , addTriangleDomain_function_type( &::osgParticle::DomainOperator::addTriangleDomain )
                , ( bp::arg("v1"), bp::arg("v2"), bp::arg("v3") ) );
        
        }
        { //::osgParticle::DomainOperator::beginOperate
        
            typedef void ( ::osgParticle::DomainOperator::*beginOperate_function_type )( ::osgParticle::Program * ) ;
            typedef void ( DomainOperator_wrapper::*default_beginOperate_function_type )( ::osgParticle::Program * ) ;
            
            DomainOperator_exposer.def( 
                "beginOperate"
                , beginOperate_function_type(&::osgParticle::DomainOperator::beginOperate)
                , default_beginOperate_function_type(&DomainOperator_wrapper::default_beginOperate)
                , ( bp::arg("prg") ) );
        
        }
        { //::osgParticle::DomainOperator::className
        
            typedef char const * ( ::osgParticle::DomainOperator::*className_function_type )(  ) const;
            typedef char const * ( DomainOperator_wrapper::*default_className_function_type )(  ) const;
            
            DomainOperator_exposer.def( 
                "className"
                , className_function_type(&::osgParticle::DomainOperator::className)
                , default_className_function_type(&DomainOperator_wrapper::default_className) );
        
        }
        { //::osgParticle::DomainOperator::clone
        
            typedef ::osg::Object * ( ::osgParticle::DomainOperator::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( DomainOperator_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            DomainOperator_exposer.def( 
                "clone"
                , clone_function_type(&::osgParticle::DomainOperator::clone)
                , default_clone_function_type(&DomainOperator_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgParticle::DomainOperator::cloneType
        
            typedef ::osg::Object * ( ::osgParticle::DomainOperator::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( DomainOperator_wrapper::*default_cloneType_function_type )(  ) const;
            
            DomainOperator_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgParticle::DomainOperator::cloneType)
                , default_cloneType_function_type(&DomainOperator_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgParticle::DomainOperator::endOperate
        
            typedef void ( ::osgParticle::DomainOperator::*endOperate_function_type )(  ) ;
            typedef void ( DomainOperator_wrapper::*default_endOperate_function_type )(  ) ;
            
            DomainOperator_exposer.def( 
                "endOperate"
                , endOperate_function_type(&::osgParticle::DomainOperator::endOperate)
                , default_endOperate_function_type(&DomainOperator_wrapper::default_endOperate) );
        
        }
        { //::osgParticle::DomainOperator::getDomain
        
            typedef ::osgParticle::DomainOperator::Domain const & ( ::osgParticle::DomainOperator::*getDomain_function_type )( unsigned int ) const;
            
            DomainOperator_exposer.def( 
                "getDomain"
                , getDomain_function_type( &::osgParticle::DomainOperator::getDomain )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >()
                , "\n Get a domain object directly, used by the .osg wrappers and serializers.\n" );
        
        }
        { //::osgParticle::DomainOperator::getNumDomains
        
            typedef unsigned int ( ::osgParticle::DomainOperator::*getNumDomains_function_type )(  ) const;
            
            DomainOperator_exposer.def( 
                "getNumDomains"
                , getNumDomains_function_type( &::osgParticle::DomainOperator::getNumDomains )
                , "\n Get number of domains\n" );
        
        }
        { //::osgParticle::DomainOperator::isSameKindAs
        
            typedef bool ( ::osgParticle::DomainOperator::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( DomainOperator_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            DomainOperator_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgParticle::DomainOperator::isSameKindAs)
                , default_isSameKindAs_function_type(&DomainOperator_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgParticle::DomainOperator::libraryName
        
            typedef char const * ( ::osgParticle::DomainOperator::*libraryName_function_type )(  ) const;
            typedef char const * ( DomainOperator_wrapper::*default_libraryName_function_type )(  ) const;
            
            DomainOperator_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgParticle::DomainOperator::libraryName)
                , default_libraryName_function_type(&DomainOperator_wrapper::default_libraryName) );
        
        }
        { //::osgParticle::DomainOperator::operate
        
            typedef void ( ::osgParticle::DomainOperator::*operate_function_type )( ::osgParticle::Particle *,double ) ;
            typedef void ( DomainOperator_wrapper::*default_operate_function_type )( ::osgParticle::Particle *,double ) ;
            
            DomainOperator_exposer.def( 
                "operate"
                , operate_function_type(&::osgParticle::DomainOperator::operate)
                , default_operate_function_type(&DomainOperator_wrapper::default_operate)
                , ( bp::arg("P"), bp::arg("dt") ) );
        
        }
        { //::osgParticle::DomainOperator::removeAllDomains
        
            typedef void ( ::osgParticle::DomainOperator::*removeAllDomains_function_type )(  ) ;
            
            DomainOperator_exposer.def( 
                "removeAllDomains"
                , removeAllDomains_function_type( &::osgParticle::DomainOperator::removeAllDomains )
                , "\n Remove all existing domains\n" );
        
        }
        { //::osgParticle::DomainOperator::removeDomain
        
            typedef void ( ::osgParticle::DomainOperator::*removeDomain_function_type )( unsigned int ) ;
            
            DomainOperator_exposer.def( 
                "removeDomain"
                , removeDomain_function_type( &::osgParticle::DomainOperator::removeDomain )
                , ( bp::arg("i") )
                , "\n Remove a domain at specific index\n" );
        
        }
        { //::osgParticle::Operator::operateParticles
        
            typedef void ( ::osgParticle::Operator::*operateParticles_function_type )( ::osgParticle::ParticleSystem *,double ) ;
            typedef void ( DomainOperator_wrapper::*default_operateParticles_function_type )( ::osgParticle::ParticleSystem *,double ) ;
            
            DomainOperator_exposer.def( 
                "operateParticles"
                , operateParticles_function_type(&::osgParticle::Operator::operateParticles)
                , default_operateParticles_function_type(&DomainOperator_wrapper::default_operateParticles)
                , ( bp::arg("ps"), bp::arg("dt") ) );
        
        }
    }

}
