// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgParticle.h"
#include "wrap_referenced.h"
#include "ParticleSystem.pypp.hpp"

namespace bp = boost::python;

struct ParticleSystem_wrapper : osgParticle::ParticleSystem, bp::wrapper< osgParticle::ParticleSystem > {

    ParticleSystem_wrapper( )
    : osgParticle::ParticleSystem( )
      , bp::wrapper< osgParticle::ParticleSystem >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgParticle::ParticleSystem::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgParticle::ParticleSystem::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgParticle::ParticleSystem::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgParticle::ParticleSystem::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgParticle::ParticleSystem::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgParticle::ParticleSystem::cloneType( );
    }

    virtual ::osg::BoundingBox computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osgParticle::ParticleSystem::computeBound(  );
        }
    }
    
    ::osg::BoundingBox default_computeBound(  ) const  {
        return osgParticle::ParticleSystem::computeBound( );
    }

    virtual ::osgParticle::Particle * createParticle( ::osgParticle::Particle const * ptemplate ) {
        if( bp::override func_createParticle = this->get_override( "createParticle" ) )
            return func_createParticle( boost::python::ptr(ptemplate) );
        else{
            return this->osgParticle::ParticleSystem::createParticle( boost::python::ptr(ptemplate) );
        }
    }
    
    ::osgParticle::Particle * default_createParticle( ::osgParticle::Particle const * ptemplate ) {
        return osgParticle::ParticleSystem::createParticle( boost::python::ptr(ptemplate) );
    }

    virtual void destroyParticle( int i ) {
        if( bp::override func_destroyParticle = this->get_override( "destroyParticle" ) )
            func_destroyParticle( i );
        else{
            this->osgParticle::ParticleSystem::destroyParticle( i );
        }
    }
    
    void default_destroyParticle( int i ) {
        osgParticle::ParticleSystem::destroyParticle( i );
    }

    virtual void drawImplementation( ::osg::RenderInfo & renderInfo ) const  {
        if( bp::override func_drawImplementation = this->get_override( "drawImplementation" ) )
            func_drawImplementation( boost::ref(renderInfo) );
        else{
            this->osgParticle::ParticleSystem::drawImplementation( boost::ref(renderInfo) );
        }
    }
    
    void default_drawImplementation( ::osg::RenderInfo & renderInfo ) const  {
        osgParticle::ParticleSystem::drawImplementation( boost::ref(renderInfo) );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgParticle::ParticleSystem::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgParticle::ParticleSystem::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgParticle::ParticleSystem::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgParticle::ParticleSystem::libraryName( );
    }

    virtual void reuseParticle( int i ) {
        if( bp::override func_reuseParticle = this->get_override( "reuseParticle" ) )
            func_reuseParticle( i );
        else{
            this->osgParticle::ParticleSystem::reuseParticle( i );
        }
    }
    
    void default_reuseParticle( int i ) {
        osgParticle::ParticleSystem::reuseParticle( i );
    }

    virtual void update( double dt, ::osg::NodeVisitor & nv ) {
        if( bp::override func_update = this->get_override( "update" ) )
            func_update( dt, boost::ref(nv) );
        else{
            this->osgParticle::ParticleSystem::update( dt, boost::ref(nv) );
        }
    }
    
    void default_update( double dt, ::osg::NodeVisitor & nv ) {
        osgParticle::ParticleSystem::update( dt, boost::ref(nv) );
    }

    virtual void accept( ::osg::Drawable::AttributeFunctor & arg0 ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(arg0) );
        else{
            this->osg::Drawable::accept( boost::ref(arg0) );
        }
    }
    
    void default_accept( ::osg::Drawable::AttributeFunctor & arg0 ) {
        osg::Drawable::accept( boost::ref(arg0) );
    }

    virtual void accept( ::osg::Drawable::ConstAttributeFunctor & arg0 ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(arg0) );
        else{
            this->osg::Drawable::accept( boost::ref(arg0) );
        }
    }
    
    void default_accept( ::osg::Drawable::ConstAttributeFunctor & arg0 ) const  {
        osg::Drawable::accept( boost::ref(arg0) );
    }

    virtual void accept( ::osg::PrimitiveFunctor & arg0 ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(arg0) );
        else{
            this->osg::Drawable::accept( boost::ref(arg0) );
        }
    }
    
    void default_accept( ::osg::PrimitiveFunctor & arg0 ) const  {
        osg::Drawable::accept( boost::ref(arg0) );
    }

    virtual void accept( ::osg::PrimitiveIndexFunctor & arg0 ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(arg0) );
        else{
            this->osg::Drawable::accept( boost::ref(arg0) );
        }
    }
    
    void default_accept( ::osg::PrimitiveIndexFunctor & arg0 ) const  {
        osg::Drawable::accept( boost::ref(arg0) );
    }

    virtual ::osg::Geometry * asGeometry(  ) {
        if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
            return func_asGeometry(  );
        else{
            return this->osg::Drawable::asGeometry(  );
        }
    }
    
    ::osg::Geometry * default_asGeometry(  ) {
        return osg::Drawable::asGeometry( );
    }

    virtual ::osg::Geometry const * asGeometry(  ) const  {
        if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
            return func_asGeometry(  );
        else{
            return this->osg::Drawable::asGeometry(  );
        }
    }
    
    ::osg::Geometry const * default_asGeometry(  ) const  {
        return osg::Drawable::asGeometry( );
    }

    virtual void compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
        if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
            func_compileGLObjects( boost::ref(renderInfo) );
        else{
            this->osg::Drawable::compileGLObjects( boost::ref(renderInfo) );
        }
    }
    
    void default_compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
        osg::Drawable::compileGLObjects( boost::ref(renderInfo) );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Drawable::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Drawable::computeDataVariance( );
    }

    virtual void dirtyDisplayList(  ) {
        if( bp::override func_dirtyDisplayList = this->get_override( "dirtyDisplayList" ) )
            func_dirtyDisplayList(  );
        else{
            this->osg::Drawable::dirtyDisplayList(  );
        }
    }
    
    void default_dirtyDisplayList(  ) {
        osg::Drawable::dirtyDisplayList( );
    }

    virtual unsigned int getGLObjectSizeHint(  ) const  {
        if( bp::override func_getGLObjectSizeHint = this->get_override( "getGLObjectSizeHint" ) )
            return func_getGLObjectSizeHint(  );
        else{
            return this->osg::Drawable::getGLObjectSizeHint(  );
        }
    }
    
    unsigned int default_getGLObjectSizeHint(  ) const  {
        return osg::Drawable::getGLObjectSizeHint( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Drawable::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Drawable::resizeGLObjectBuffers( maxSize );
    }

    virtual void setCullCallback( ::osg::Drawable::CullCallback * cc ) {
        if( bp::override func_setCullCallback = this->get_override( "setCullCallback" ) )
            func_setCullCallback( boost::python::ptr(cc) );
        else{
            this->osg::Drawable::setCullCallback( boost::python::ptr(cc) );
        }
    }
    
    void default_setCullCallback( ::osg::Drawable::CullCallback * cc ) {
        osg::Drawable::setCullCallback( boost::python::ptr(cc) );
    }

    virtual void setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
        if( bp::override func_setDrawCallback = this->get_override( "setDrawCallback" ) )
            func_setDrawCallback( boost::python::ptr(dc) );
        else{
            this->osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
        }
    }
    
    void default_setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
        osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
    }

    virtual void setEventCallback( ::osg::Drawable::EventCallback * ac ) {
        if( bp::override func_setEventCallback = this->get_override( "setEventCallback" ) )
            func_setEventCallback( boost::python::ptr(ac) );
        else{
            this->osg::Drawable::setEventCallback( boost::python::ptr(ac) );
        }
    }
    
    void default_setEventCallback( ::osg::Drawable::EventCallback * ac ) {
        osg::Drawable::setEventCallback( boost::python::ptr(ac) );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Drawable::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Drawable::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
        if( bp::override func_setUpdateCallback = this->get_override( "setUpdateCallback" ) )
            func_setUpdateCallback( boost::python::ptr(ac) );
        else{
            this->osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
        }
    }
    
    void default_setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
        osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
    }

    virtual void setUseVertexBufferObjects( bool flag ) {
        if( bp::override func_setUseVertexBufferObjects = this->get_override( "setUseVertexBufferObjects" ) )
            func_setUseVertexBufferObjects( flag );
        else{
            this->osg::Drawable::setUseVertexBufferObjects( flag );
        }
    }
    
    void default_setUseVertexBufferObjects( bool flag ) {
        osg::Drawable::setUseVertexBufferObjects( flag );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual bool supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Drawable::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
        return osg::Drawable::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Drawable::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
        return osg::Drawable::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Drawable::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
        return osg::Drawable::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Drawable::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
        return osg::Drawable::supports( boost::ref(arg0) );
    }

};

void register_ParticleSystem_class(){

    { //::osgParticle::ParticleSystem
        typedef bp::class_< ParticleSystem_wrapper, bp::bases< ::osg::Drawable >, osg::ref_ptr< ParticleSystem_wrapper >, boost::noncopyable > ParticleSystem_exposer_t;
        ParticleSystem_exposer_t ParticleSystem_exposer = ParticleSystem_exposer_t( "ParticleSystem", "\n The heart of this class library; its purpose is to hold a set of particles and manage particle creation, update, rendering and destruction.\n You can add this drawable to any Geode as you usually do with other\n Drawable classes. Each instance of ParticleSystem is a separate set of\n particles; it provides the interface for creating particles and iterating\n through them (see the Emitter and Program classes).\n", bp::no_init );
        bp::scope ParticleSystem_scope( ParticleSystem_exposer );
        bp::enum_< osgParticle::ParticleSystem::Alignment>("Alignment")
            .value("BILLBOARD", osgParticle::ParticleSystem::BILLBOARD)
            .value("FIXED", osgParticle::ParticleSystem::FIXED)
            .export_values()
            ;
        bp::enum_< osgParticle::ParticleSystem::ParticleScaleReferenceFrame>("ParticleScaleReferenceFrame")
            .value("LOCAL_COORDINATES", osgParticle::ParticleSystem::LOCAL_COORDINATES)
            .value("WORLD_COORDINATES", osgParticle::ParticleSystem::WORLD_COORDINATES)
            .export_values()
            ;
        bp::enum_< osgParticle::ParticleSystem::SortMode>("SortMode")
            .value("NO_SORT", osgParticle::ParticleSystem::NO_SORT)
            .value("SORT_FRONT_TO_BACK", osgParticle::ParticleSystem::SORT_FRONT_TO_BACK)
            .value("SORT_BACK_TO_FRONT", osgParticle::ParticleSystem::SORT_BACK_TO_FRONT)
            .export_values()
            ;
        ParticleSystem_exposer.def( bp::init< >() );
        { //::osgParticle::ParticleSystem::areAllParticlesDead
        
            typedef bool ( ::osgParticle::ParticleSystem::*areAllParticlesDead_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "areAllParticlesDead"
                , areAllParticlesDead_function_type( &::osgParticle::ParticleSystem::areAllParticlesDead )
                , " Get whether all particles are dead" );
        
        }
        { //::osgParticle::ParticleSystem::className
        
            typedef char const * ( ::osgParticle::ParticleSystem::*className_function_type )(  ) const;
            typedef char const * ( ParticleSystem_wrapper::*default_className_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "className"
                , className_function_type(&::osgParticle::ParticleSystem::className)
                , default_className_function_type(&ParticleSystem_wrapper::default_className) );
        
        }
        { //::osgParticle::ParticleSystem::clone
        
            typedef ::osg::Object * ( ::osgParticle::ParticleSystem::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( ParticleSystem_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            ParticleSystem_exposer.def( 
                "clone"
                , clone_function_type(&::osgParticle::ParticleSystem::clone)
                , default_clone_function_type(&ParticleSystem_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgParticle::ParticleSystem::cloneType
        
            typedef ::osg::Object * ( ::osgParticle::ParticleSystem::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( ParticleSystem_wrapper::*default_cloneType_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgParticle::ParticleSystem::cloneType)
                , default_cloneType_function_type(&ParticleSystem_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgParticle::ParticleSystem::computeBound
        
            typedef ::osg::BoundingBox ( ::osgParticle::ParticleSystem::*computeBound_function_type )(  ) const;
            typedef ::osg::BoundingBox ( ParticleSystem_wrapper::*default_computeBound_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "computeBound"
                , computeBound_function_type(&::osgParticle::ParticleSystem::computeBound)
                , default_computeBound_function_type(&ParticleSystem_wrapper::default_computeBound) );
        
        }
        { //::osgParticle::ParticleSystem::createParticle
        
            typedef ::osgParticle::Particle * ( ::osgParticle::ParticleSystem::*createParticle_function_type )( ::osgParticle::Particle const * ) ;
            typedef ::osgParticle::Particle * ( ParticleSystem_wrapper::*default_createParticle_function_type )( ::osgParticle::Particle const * ) ;
            
            ParticleSystem_exposer.def( 
                "createParticle"
                , createParticle_function_type(&::osgParticle::ParticleSystem::createParticle)
                , default_createParticle_function_type(&ParticleSystem_wrapper::default_createParticle)
                , ( bp::arg("ptemplate") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::ParticleSystem::destroyParticle
        
            typedef void ( ::osgParticle::ParticleSystem::*destroyParticle_function_type )( int ) ;
            typedef void ( ParticleSystem_wrapper::*default_destroyParticle_function_type )( int ) ;
            
            ParticleSystem_exposer.def( 
                "destroyParticle"
                , destroyParticle_function_type(&::osgParticle::ParticleSystem::destroyParticle)
                , default_destroyParticle_function_type(&ParticleSystem_wrapper::default_destroyParticle)
                , ( bp::arg("i") ) );
        
        }
        { //::osgParticle::ParticleSystem::drawImplementation
        
            typedef void ( ::osgParticle::ParticleSystem::*drawImplementation_function_type )( ::osg::RenderInfo & ) const;
            typedef void ( ParticleSystem_wrapper::*default_drawImplementation_function_type )( ::osg::RenderInfo & ) const;
            
            ParticleSystem_exposer.def( 
                "drawImplementation"
                , drawImplementation_function_type(&::osgParticle::ParticleSystem::drawImplementation)
                , default_drawImplementation_function_type(&ParticleSystem_wrapper::default_drawImplementation)
                , ( bp::arg("renderInfo") ) );
        
        }
        { //::osgParticle::ParticleSystem::getAlignVectorX
        
            typedef ::osg::Vec3 const & ( ::osgParticle::ParticleSystem::*getAlignVectorX_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "getAlignVectorX"
                , getAlignVectorX_function_type( &::osgParticle::ParticleSystem::getAlignVectorX )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::ParticleSystem::getAlignVectorY
        
            typedef ::osg::Vec3 const & ( ::osgParticle::ParticleSystem::*getAlignVectorY_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "getAlignVectorY"
                , getAlignVectorY_function_type( &::osgParticle::ParticleSystem::getAlignVectorY )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::ParticleSystem::getDefaultBoundingBox
        
            typedef ::osg::BoundingBox const & ( ::osgParticle::ParticleSystem::*getDefaultBoundingBox_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "getDefaultBoundingBox"
                , getDefaultBoundingBox_function_type( &::osgParticle::ParticleSystem::getDefaultBoundingBox )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::ParticleSystem::getDefaultParticleTemplate
        
            typedef ::osgParticle::Particle & ( ::osgParticle::ParticleSystem::*getDefaultParticleTemplate_function_type )(  ) ;
            
            ParticleSystem_exposer.def( 
                "getDefaultParticleTemplate"
                , getDefaultParticleTemplate_function_type( &::osgParticle::ParticleSystem::getDefaultParticleTemplate )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::ParticleSystem::getDefaultParticleTemplate
        
            typedef ::osgParticle::Particle const & ( ::osgParticle::ParticleSystem::*getDefaultParticleTemplate_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "getDefaultParticleTemplate"
                , getDefaultParticleTemplate_function_type( &::osgParticle::ParticleSystem::getDefaultParticleTemplate )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::ParticleSystem::getDeltaTime
        
            typedef double & ( ::osgParticle::ParticleSystem::*getDeltaTime_function_type )( double ) ;
            
            ParticleSystem_exposer.def( 
                "getDeltaTime"
                , getDeltaTime_function_type( &::osgParticle::ParticleSystem::getDeltaTime )
                , ( bp::arg("currentTime") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osgParticle::ParticleSystem::getDoublePassRendering
        
            typedef bool ( ::osgParticle::ParticleSystem::*getDoublePassRendering_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "getDoublePassRendering"
                , getDoublePassRendering_function_type( &::osgParticle::ParticleSystem::getDoublePassRendering ) );
        
        }
        { //::osgParticle::ParticleSystem::getFreezeOnCull
        
            typedef bool ( ::osgParticle::ParticleSystem::*getFreezeOnCull_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "getFreezeOnCull"
                , getFreezeOnCull_function_type( &::osgParticle::ParticleSystem::getFreezeOnCull ) );
        
        }
        { //::osgParticle::ParticleSystem::getFrozen
        
            typedef bool ( ::osgParticle::ParticleSystem::*getFrozen_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "getFrozen"
                , getFrozen_function_type( &::osgParticle::ParticleSystem::getFrozen )
                , " Return true if the particle system is frozen." );
        
        }
        { //::osgParticle::ParticleSystem::getLastFrameNumber
        
            typedef unsigned int ( ::osgParticle::ParticleSystem::*getLastFrameNumber_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "getLastFrameNumber"
                , getLastFrameNumber_function_type( &::osgParticle::ParticleSystem::getLastFrameNumber ) );
        
        }
        { //::osgParticle::ParticleSystem::getLevelOfDetail
        
            typedef int ( ::osgParticle::ParticleSystem::*getLevelOfDetail_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "getLevelOfDetail"
                , getLevelOfDetail_function_type( &::osgParticle::ParticleSystem::getLevelOfDetail ) );
        
        }
        { //::osgParticle::ParticleSystem::getParticle
        
            typedef ::osgParticle::Particle * ( ::osgParticle::ParticleSystem::*getParticle_function_type )( int ) ;
            
            ParticleSystem_exposer.def( 
                "getParticle"
                , getParticle_function_type( &::osgParticle::ParticleSystem::getParticle )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::ParticleSystem::getParticle
        
            typedef ::osgParticle::Particle const * ( ::osgParticle::ParticleSystem::*getParticle_function_type )( int ) const;
            
            ParticleSystem_exposer.def( 
                "getParticle"
                , getParticle_function_type( &::osgParticle::ParticleSystem::getParticle )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::ParticleSystem::getParticleAlignment
        
            typedef ::osgParticle::ParticleSystem::Alignment ( ::osgParticle::ParticleSystem::*getParticleAlignment_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "getParticleAlignment"
                , getParticleAlignment_function_type( &::osgParticle::ParticleSystem::getParticleAlignment ) );
        
        }
        { //::osgParticle::ParticleSystem::getParticleScaleReferenceFrame
        
            typedef ::osgParticle::ParticleSystem::ParticleScaleReferenceFrame ( ::osgParticle::ParticleSystem::*getParticleScaleReferenceFrame_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "getParticleScaleReferenceFrame"
                , getParticleScaleReferenceFrame_function_type( &::osgParticle::ParticleSystem::getParticleScaleReferenceFrame )
                , " Get whether the particles should be scaled relative to world coordaintes or local coordinates." );
        
        }
        { //::osgParticle::ParticleSystem::getReadWriteMutex
        
            typedef ::OpenThreads::Mutex * ( ::osgParticle::ParticleSystem::*getReadWriteMutex_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "getReadWriteMutex"
                , getReadWriteMutex_function_type( &::osgParticle::ParticleSystem::getReadWriteMutex )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::ParticleSystem::getSortMode
        
            typedef ::osgParticle::ParticleSystem::SortMode ( ::osgParticle::ParticleSystem::*getSortMode_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "getSortMode"
                , getSortMode_function_type( &::osgParticle::ParticleSystem::getSortMode ) );
        
        }
        { //::osgParticle::ParticleSystem::getUseShaders
        
            typedef bool ( ::osgParticle::ParticleSystem::*getUseShaders_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "getUseShaders"
                , getUseShaders_function_type( &::osgParticle::ParticleSystem::getUseShaders )
                , " Return true if shaders are required." );
        
        }
        { //::osgParticle::ParticleSystem::getUseVertexArray
        
            typedef bool ( ::osgParticle::ParticleSystem::*getUseVertexArray_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "getUseVertexArray"
                , getUseVertexArray_function_type( &::osgParticle::ParticleSystem::getUseVertexArray )
                , " Return true if we use vertex arrays for rendering particles." );
        
        }
        { //::osgParticle::ParticleSystem::getVisibilityDistance
        
            typedef double ( ::osgParticle::ParticleSystem::*getVisibilityDistance_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "getVisibilityDistance"
                , getVisibilityDistance_function_type( &::osgParticle::ParticleSystem::getVisibilityDistance ) );
        
        }
        { //::osgParticle::ParticleSystem::isFrozen
        
            typedef bool ( ::osgParticle::ParticleSystem::*isFrozen_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "isFrozen"
                , isFrozen_function_type( &::osgParticle::ParticleSystem::isFrozen ) );
        
        }
        { //::osgParticle::ParticleSystem::isSameKindAs
        
            typedef bool ( ::osgParticle::ParticleSystem::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( ParticleSystem_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            ParticleSystem_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgParticle::ParticleSystem::isSameKindAs)
                , default_isSameKindAs_function_type(&ParticleSystem_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgParticle::ParticleSystem::libraryName
        
            typedef char const * ( ::osgParticle::ParticleSystem::*libraryName_function_type )(  ) const;
            typedef char const * ( ParticleSystem_wrapper::*default_libraryName_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgParticle::ParticleSystem::libraryName)
                , default_libraryName_function_type(&ParticleSystem_wrapper::default_libraryName) );
        
        }
        { //::osgParticle::ParticleSystem::numDeadParticles
        
            typedef int ( ::osgParticle::ParticleSystem::*numDeadParticles_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "numDeadParticles"
                , numDeadParticles_function_type( &::osgParticle::ParticleSystem::numDeadParticles ) );
        
        }
        { //::osgParticle::ParticleSystem::numParticles
        
            typedef int ( ::osgParticle::ParticleSystem::*numParticles_function_type )(  ) const;
            
            ParticleSystem_exposer.def( 
                "numParticles"
                , numParticles_function_type( &::osgParticle::ParticleSystem::numParticles ) );
        
        }
        { //::osgParticle::ParticleSystem::reuseParticle
        
            typedef void ( ::osgParticle::ParticleSystem::*reuseParticle_function_type )( int ) ;
            typedef void ( ParticleSystem_wrapper::*default_reuseParticle_function_type )( int ) ;
            
            ParticleSystem_exposer.def( 
                "reuseParticle"
                , reuseParticle_function_type(&::osgParticle::ParticleSystem::reuseParticle)
                , default_reuseParticle_function_type(&ParticleSystem_wrapper::default_reuseParticle)
                , ( bp::arg("i") ) );
        
        }
        { //::osgParticle::ParticleSystem::setAlignVectorX
        
            typedef void ( ::osgParticle::ParticleSystem::*setAlignVectorX_function_type )( ::osg::Vec3 const & ) ;
            
            ParticleSystem_exposer.def( 
                "setAlignVectorX"
                , setAlignVectorX_function_type( &::osgParticle::ParticleSystem::setAlignVectorX )
                , ( bp::arg("v") ) );
        
        }
        { //::osgParticle::ParticleSystem::setAlignVectorY
        
            typedef void ( ::osgParticle::ParticleSystem::*setAlignVectorY_function_type )( ::osg::Vec3 const & ) ;
            
            ParticleSystem_exposer.def( 
                "setAlignVectorY"
                , setAlignVectorY_function_type( &::osgParticle::ParticleSystem::setAlignVectorY )
                , ( bp::arg("v") ) );
        
        }
        { //::osgParticle::ParticleSystem::setAlignVectors
        
            typedef void ( ::osgParticle::ParticleSystem::*setAlignVectors_function_type )( ::osg::Vec3 const &,::osg::Vec3 const & ) ;
            
            ParticleSystem_exposer.def( 
                "setAlignVectors"
                , setAlignVectors_function_type( &::osgParticle::ParticleSystem::setAlignVectors )
                , ( bp::arg("X"), bp::arg("Y") ) );
        
        }
        { //::osgParticle::ParticleSystem::setDefaultAttributes
        
            typedef void ( ::osgParticle::ParticleSystem::*setDefaultAttributes_function_type )( ::std::string const &,bool,bool,int ) ;
            
            ParticleSystem_exposer.def( 
                "setDefaultAttributes"
                , setDefaultAttributes_function_type( &::osgParticle::ParticleSystem::setDefaultAttributes )
                , ( bp::arg("texturefile")="", bp::arg("emissive_particles")=(bool)(true), bp::arg("lighting")=(bool)(false), bp::arg("texture_unit")=(int)(0) )
                , " A useful method to set the most common <CODE>StateAttribute</CODE>s in one call.\n            If <CODE>texturefile</CODE> is empty, then texturing is turned off." );
        
        }
        { //::osgParticle::ParticleSystem::setDefaultAttributesUsingShaders
        
            typedef void ( ::osgParticle::ParticleSystem::*setDefaultAttributesUsingShaders_function_type )( ::std::string const &,bool,int ) ;
            
            ParticleSystem_exposer.def( 
                "setDefaultAttributesUsingShaders"
                , setDefaultAttributesUsingShaders_function_type( &::osgParticle::ParticleSystem::setDefaultAttributesUsingShaders )
                , ( bp::arg("texturefile")="", bp::arg("emissive_particles")=(bool)(true), bp::arg("texture_unit")=(int)(0) )
                , " A useful method to set the most common <CODE>StateAttribute</CODE> and use GLSL shaders to draw particles.\n            At present, when enabling shaders in the particle system, user-defined shapes will not be usable.\n            If <CODE>texturefile</CODE> is empty, then texturing is turned off." );
        
        }
        { //::osgParticle::ParticleSystem::setDefaultBoundingBox
        
            typedef void ( ::osgParticle::ParticleSystem::*setDefaultBoundingBox_function_type )( ::osg::BoundingBox const & ) ;
            
            ParticleSystem_exposer.def( 
                "setDefaultBoundingBox"
                , setDefaultBoundingBox_function_type( &::osgParticle::ParticleSystem::setDefaultBoundingBox )
                , ( bp::arg("bbox") ) );
        
        }
        { //::osgParticle::ParticleSystem::setDefaultParticleTemplate
        
            typedef void ( ::osgParticle::ParticleSystem::*setDefaultParticleTemplate_function_type )( ::osgParticle::Particle const & ) ;
            
            ParticleSystem_exposer.def( 
                "setDefaultParticleTemplate"
                , setDefaultParticleTemplate_function_type( &::osgParticle::ParticleSystem::setDefaultParticleTemplate )
                , ( bp::arg("p") ) );
        
        }
        { //::osgParticle::ParticleSystem::setDoublePassRendering
        
            typedef void ( ::osgParticle::ParticleSystem::*setDoublePassRendering_function_type )( bool ) ;
            
            ParticleSystem_exposer.def( 
                "setDoublePassRendering"
                , setDoublePassRendering_function_type( &::osgParticle::ParticleSystem::setDoublePassRendering )
                , ( bp::arg("v") ) );
        
        }
        { //::osgParticle::ParticleSystem::setFreezeOnCull
        
            typedef void ( ::osgParticle::ParticleSystem::*setFreezeOnCull_function_type )( bool ) ;
            
            ParticleSystem_exposer.def( 
                "setFreezeOnCull"
                , setFreezeOnCull_function_type( &::osgParticle::ParticleSystem::setFreezeOnCull )
                , ( bp::arg("v") ) );
        
        }
        { //::osgParticle::ParticleSystem::setFrozen
        
            typedef void ( ::osgParticle::ParticleSystem::*setFrozen_function_type )( bool ) ;
            
            ParticleSystem_exposer.def( 
                "setFrozen"
                , setFrozen_function_type( &::osgParticle::ParticleSystem::setFrozen )
                , ( bp::arg("v") ) );
        
        }
        { //::osgParticle::ParticleSystem::setLevelOfDetail
        
            typedef void ( ::osgParticle::ParticleSystem::*setLevelOfDetail_function_type )( int ) ;
            
            ParticleSystem_exposer.def( 
                "setLevelOfDetail"
                , setLevelOfDetail_function_type( &::osgParticle::ParticleSystem::setLevelOfDetail )
                , ( bp::arg("v") ) );
        
        }
        { //::osgParticle::ParticleSystem::setParticleAlignment
        
            typedef void ( ::osgParticle::ParticleSystem::*setParticleAlignment_function_type )( ::osgParticle::ParticleSystem::Alignment ) ;
            
            ParticleSystem_exposer.def( 
                "setParticleAlignment"
                , setParticleAlignment_function_type( &::osgParticle::ParticleSystem::setParticleAlignment )
                , ( bp::arg("a") ) );
        
        }
        { //::osgParticle::ParticleSystem::setParticleScaleReferenceFrame
        
            typedef void ( ::osgParticle::ParticleSystem::*setParticleScaleReferenceFrame_function_type )( ::osgParticle::ParticleSystem::ParticleScaleReferenceFrame ) ;
            
            ParticleSystem_exposer.def( 
                "setParticleScaleReferenceFrame"
                , setParticleScaleReferenceFrame_function_type( &::osgParticle::ParticleSystem::setParticleScaleReferenceFrame )
                , ( bp::arg("rf") )
                , " Set whether the particles should be scaled relative to world coordaintes or local coordinates." );
        
        }
        { //::osgParticle::ParticleSystem::setSortMode
        
            typedef void ( ::osgParticle::ParticleSystem::*setSortMode_function_type )( ::osgParticle::ParticleSystem::SortMode ) ;
            
            ParticleSystem_exposer.def( 
                "setSortMode"
                , setSortMode_function_type( &::osgParticle::ParticleSystem::setSortMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::osgParticle::ParticleSystem::setUseShaders
        
            typedef void ( ::osgParticle::ParticleSystem::*setUseShaders_function_type )( bool ) ;
            
            ParticleSystem_exposer.def( 
                "setUseShaders"
                , setUseShaders_function_type( &::osgParticle::ParticleSystem::setUseShaders )
                , ( bp::arg("v") )
                , " Set to use GLSL shaders for rendering particles.\n            Particles parameters will be used as shader attribute arrays, and necessary variables, including\n            the visibility distance, texture, etc, will be used and updated as uniforms." );
        
        }
        { //::osgParticle::ParticleSystem::setUseVertexArray
        
            typedef void ( ::osgParticle::ParticleSystem::*setUseVertexArray_function_type )( bool ) ;
            
            ParticleSystem_exposer.def( 
                "setUseVertexArray"
                , setUseVertexArray_function_type( &::osgParticle::ParticleSystem::setUseVertexArray )
                , ( bp::arg("v") )
                , " Set to use vertex arrays for rendering particles.\n            Lots of variables will be omitted: particles shape, alive or not, visibility distance, and so on,\n            so the rendering result is not as good as we wish (although its fast than using glBegin/glEnd).\n            We had better use this for GLSL shaders, in which particle parameters will be kept as uniforms.\n            This method is called automatically by <CODE>setDefaultAttributesUsingShaders()</CODE>." );
        
        }
        { //::osgParticle::ParticleSystem::setVisibilityDistance
        
            typedef void ( ::osgParticle::ParticleSystem::*setVisibilityDistance_function_type )( double ) ;
            
            ParticleSystem_exposer.def( 
                "setVisibilityDistance"
                , setVisibilityDistance_function_type( &::osgParticle::ParticleSystem::setVisibilityDistance )
                , ( bp::arg("distance") ) );
        
        }
        { //::osgParticle::ParticleSystem::update
        
            typedef void ( ::osgParticle::ParticleSystem::*update_function_type )( double,::osg::NodeVisitor & ) ;
            typedef void ( ParticleSystem_wrapper::*default_update_function_type )( double,::osg::NodeVisitor & ) ;
            
            ParticleSystem_exposer.def( 
                "update"
                , update_function_type(&::osgParticle::ParticleSystem::update)
                , default_update_function_type(&ParticleSystem_wrapper::default_update)
                , ( bp::arg("dt"), bp::arg("nv") ) );
        
        }
    }

}
