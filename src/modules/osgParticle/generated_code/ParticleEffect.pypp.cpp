// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgParticle.h"
#include "wrap_referenced.h"
#include "ParticleEffect.pypp.hpp"

namespace bp = boost::python;

struct ParticleEffect_wrapper : osgParticle::ParticleEffect, bp::wrapper< osgParticle::ParticleEffect > {

    virtual void accept( ::osg::NodeVisitor & nv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(nv) );
        else{
            this->osgParticle::ParticleEffect::accept( boost::ref(nv) );
        }
    }
    
    void default_accept( ::osg::NodeVisitor & nv ) {
        osgParticle::ParticleEffect::accept( boost::ref(nv) );
    }

    virtual void buildEffect(  ) {
        if( bp::override func_buildEffect = this->get_override( "buildEffect" ) )
            func_buildEffect(  );
        else{
            this->osgParticle::ParticleEffect::buildEffect(  );
        }
    }
    
    void default_buildEffect(  ) {
        osgParticle::ParticleEffect::buildEffect( );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgParticle::ParticleEffect::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgParticle::ParticleEffect::className( );
    }

    virtual ::osgParticle::Emitter * getEmitter(  ){
        bp::override func_getEmitter = this->get_override( "getEmitter" );
        return func_getEmitter(  );
    }

    virtual ::osgParticle::Emitter const * getEmitter(  ) const {
        bp::override func_getEmitter = this->get_override( "getEmitter" );
        return func_getEmitter(  );
    }

    virtual ::osgParticle::Program * getProgram(  ){
        bp::override func_getProgram = this->get_override( "getProgram" );
        return func_getProgram(  );
    }

    virtual ::osgParticle::Program const * getProgram(  ) const {
        bp::override func_getProgram = this->get_override( "getProgram" );
        return func_getProgram(  );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgParticle::ParticleEffect::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgParticle::ParticleEffect::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgParticle::ParticleEffect::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgParticle::ParticleEffect::libraryName( );
    }

    virtual void setDefaults(  ) {
        if( bp::override func_setDefaults = this->get_override( "setDefaults" ) )
            func_setDefaults(  );
        else{
            this->osgParticle::ParticleEffect::setDefaults(  );
        }
    }
    
    void default_setDefaults(  ) {
        osgParticle::ParticleEffect::setDefaults( );
    }

    virtual void setUpEmitterAndProgram(  ){
        bp::override func_setUpEmitterAndProgram = this->get_override( "setUpEmitterAndProgram" );
        func_setUpEmitterAndProgram(  );
    }

    virtual bool addChild( ::osg::Node * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            return func_addChild( boost::python::ptr(child) );
        else{
            return this->osg::Group::addChild( boost::python::ptr(child) );
        }
    }
    
    bool default_addChild( ::osg::Node * child ) {
        return osg::Group::addChild( boost::python::ptr(child) );
    }

    virtual ::osg::Camera * asCamera(  ) {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera * default_asCamera(  ) {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Camera const * asCamera(  ) const  {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera const * default_asCamera(  ) const  {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Geode * asGeode(  ) {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode * default_asGeode(  ) {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Geode const * asGeode(  ) const  {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode const * default_asGeode(  ) const  {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Group * asGroup(  ) {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group * default_asGroup(  ) {
        return osg::Group::asGroup( );
    }

    virtual ::osg::Group const * asGroup(  ) const  {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group const * default_asGroup(  ) const  {
        return osg::Group::asGroup( );
    }

    virtual ::osg::Switch * asSwitch(  ) {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch * default_asSwitch(  ) {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Switch const * asSwitch(  ) const  {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch const * default_asSwitch(  ) const  {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Transform * asTransform(  ) {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Node::asTransform(  );
        }
    }
    
    ::osg::Transform * default_asTransform(  ) {
        return osg::Node::asTransform( );
    }

    virtual ::osg::Transform const * asTransform(  ) const  {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Node::asTransform(  );
        }
    }
    
    ::osg::Transform const * default_asTransform(  ) const  {
        return osg::Node::asTransform( );
    }

    virtual void ascend( ::osg::NodeVisitor & nv ) {
        if( bp::override func_ascend = this->get_override( "ascend" ) )
            func_ascend( boost::ref(nv) );
        else{
            this->osg::Node::ascend( boost::ref(nv) );
        }
    }
    
    void default_ascend( ::osg::NodeVisitor & nv ) {
        osg::Node::ascend( boost::ref(nv) );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::Group::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::Group::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::Group::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::Group::cloneType( );
    }

    virtual ::osg::BoundingSphere computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osg::Group::computeBound(  );
        }
    }
    
    ::osg::BoundingSphere default_computeBound(  ) const  {
        return osg::Group::computeBound( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool insertChild( unsigned int index, ::osg::Node * child ) {
        if( bp::override func_insertChild = this->get_override( "insertChild" ) )
            return func_insertChild( index, boost::python::ptr(child) );
        else{
            return this->osg::Group::insertChild( index, boost::python::ptr(child) );
        }
    }
    
    bool default_insertChild( unsigned int index, ::osg::Node * child ) {
        return osg::Group::insertChild( index, boost::python::ptr(child) );
    }

    virtual bool removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        if( bp::override func_removeChildren = this->get_override( "removeChildren" ) )
            return func_removeChildren( pos, numChildrenToRemove );
        else{
            return this->osg::Group::removeChildren( pos, numChildrenToRemove );
        }
    }
    
    bool default_removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        return osg::Group::removeChildren( pos, numChildrenToRemove );
    }

    virtual bool replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        if( bp::override func_replaceChild = this->get_override( "replaceChild" ) )
            return func_replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        else{
            return this->osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        }
    }
    
    bool default_replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        return osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Group::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Group::resizeGLObjectBuffers( maxSize );
    }

    virtual bool setChild( unsigned int i, ::osg::Node * node ) {
        if( bp::override func_setChild = this->get_override( "setChild" ) )
            return func_setChild( i, boost::python::ptr(node) );
        else{
            return this->osg::Group::setChild( i, boost::python::ptr(node) );
        }
    }
    
    bool default_setChild( unsigned int i, ::osg::Node * node ) {
        return osg::Group::setChild( i, boost::python::ptr(node) );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Group::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Group::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual void traverse( ::osg::NodeVisitor & nv ) {
        if( bp::override func_traverse = this->get_override( "traverse" ) )
            func_traverse( boost::ref(nv) );
        else{
            this->osg::Group::traverse( boost::ref(nv) );
        }
    }
    
    void default_traverse( ::osg::NodeVisitor & nv ) {
        osg::Group::traverse( boost::ref(nv) );
    }

};

void register_ParticleEffect_class(){

    bp::class_< ParticleEffect_wrapper, bp::bases< ::osg::Group >, osg::ref_ptr< ParticleEffect_wrapper >, boost::noncopyable >( "ParticleEffect", bp::no_init )    
        .def( 
            "accept"
            , (void ( ::osgParticle::ParticleEffect::* )( ::osg::NodeVisitor & ) )(&::osgParticle::ParticleEffect::accept)
            , (void ( ParticleEffect_wrapper::* )( ::osg::NodeVisitor & ) )(&ParticleEffect_wrapper::default_accept)
            , ( bp::arg("nv") ) )    
        .def( 
            "areAllParticlesDead"
            , (bool ( ::osgParticle::ParticleEffect::* )(  ) const)( &::osgParticle::ParticleEffect::areAllParticlesDead )
            , " Get whether all particles are dead" )    
        .def( 
            "buildEffect"
            , (void ( ::osgParticle::ParticleEffect::* )(  ) )(&::osgParticle::ParticleEffect::buildEffect)
            , (void ( ParticleEffect_wrapper::* )(  ) )(&ParticleEffect_wrapper::default_buildEffect) )    
        .def( 
            "className"
            , (char const * ( ::osgParticle::ParticleEffect::* )(  ) const)(&::osgParticle::ParticleEffect::className)
            , (char const * ( ParticleEffect_wrapper::* )(  ) const)(&ParticleEffect_wrapper::default_className) )    
        .def( 
            "getAutomaticSetup"
            , (bool ( ::osgParticle::ParticleEffect::* )(  ) const)( &::osgParticle::ParticleEffect::getAutomaticSetup ) )    
        .def( 
            "getDefaultParticleTemplate"
            , (::osgParticle::Particle const & ( ::osgParticle::ParticleEffect::* )(  ) const)( &::osgParticle::ParticleEffect::getDefaultParticleTemplate )
            , bp::return_internal_reference< >() )    
        .def( 
            "getEmitter"
            , bp::pure_virtual( (::osgParticle::Emitter * ( ::osgParticle::ParticleEffect::* )(  ) )(&::osgParticle::ParticleEffect::getEmitter) )
            , bp::return_internal_reference< >() )    
        .def( 
            "getEmitter"
            , bp::pure_virtual( (::osgParticle::Emitter const * ( ::osgParticle::ParticleEffect::* )(  ) const)(&::osgParticle::ParticleEffect::getEmitter) )
            , bp::return_internal_reference< >() )    
        .def( 
            "getEmitterDuration"
            , (double ( ::osgParticle::ParticleEffect::* )(  ) const)( &::osgParticle::ParticleEffect::getEmitterDuration ) )    
        .def( 
            "getIntensity"
            , (float ( ::osgParticle::ParticleEffect::* )(  ) const)( &::osgParticle::ParticleEffect::getIntensity ) )    
        .def( 
            "getParticleDuration"
            , (double ( ::osgParticle::ParticleEffect::* )(  ) const)( &::osgParticle::ParticleEffect::getParticleDuration ) )    
        .def( 
            "getParticleSystem"
            , (::osgParticle::ParticleSystem * ( ::osgParticle::ParticleEffect::* )(  ) )( &::osgParticle::ParticleEffect::getParticleSystem )
            , bp::return_internal_reference< >() )    
        .def( 
            "getParticleSystem"
            , (::osgParticle::ParticleSystem const * ( ::osgParticle::ParticleEffect::* )(  ) const)( &::osgParticle::ParticleEffect::getParticleSystem )
            , bp::return_internal_reference< >() )    
        .def( 
            "getPosition"
            , (::osg::Vec3 const & ( ::osgParticle::ParticleEffect::* )(  ) const)( &::osgParticle::ParticleEffect::getPosition )
            , bp::return_internal_reference< >() )    
        .def( 
            "getProgram"
            , bp::pure_virtual( (::osgParticle::Program * ( ::osgParticle::ParticleEffect::* )(  ) )(&::osgParticle::ParticleEffect::getProgram) )
            , bp::return_internal_reference< >() )    
        .def( 
            "getProgram"
            , bp::pure_virtual( (::osgParticle::Program const * ( ::osgParticle::ParticleEffect::* )(  ) const)(&::osgParticle::ParticleEffect::getProgram) )
            , bp::return_internal_reference< >() )    
        .def( 
            "getScale"
            , (float ( ::osgParticle::ParticleEffect::* )(  ) const)( &::osgParticle::ParticleEffect::getScale ) )    
        .def( 
            "getStartTime"
            , (double ( ::osgParticle::ParticleEffect::* )(  ) const)( &::osgParticle::ParticleEffect::getStartTime ) )    
        .def( 
            "getTextureFileName"
            , (::std::string const & ( ::osgParticle::ParticleEffect::* )(  ) const)( &::osgParticle::ParticleEffect::getTextureFileName )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getUseLocalParticleSystem"
            , (bool ( ::osgParticle::ParticleEffect::* )(  ) const)( &::osgParticle::ParticleEffect::getUseLocalParticleSystem ) )    
        .def( 
            "getWind"
            , (::osg::Vec3 const & ( ::osgParticle::ParticleEffect::* )(  ) const)( &::osgParticle::ParticleEffect::getWind )
            , bp::return_internal_reference< >() )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osgParticle::ParticleEffect::* )( ::osg::Object const * ) const)(&::osgParticle::ParticleEffect::isSameKindAs)
            , (bool ( ParticleEffect_wrapper::* )( ::osg::Object const * ) const)(&ParticleEffect_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osgParticle::ParticleEffect::* )(  ) const)(&::osgParticle::ParticleEffect::libraryName)
            , (char const * ( ParticleEffect_wrapper::* )(  ) const)(&ParticleEffect_wrapper::default_libraryName) )    
        .def( 
            "setAutomaticSetup"
            , (void ( ::osgParticle::ParticleEffect::* )( bool ) )( &::osgParticle::ParticleEffect::setAutomaticSetup )
            , ( bp::arg("flag") ) )    
        .def( 
            "setDefaultParticleTemplate"
            , (void ( ::osgParticle::ParticleEffect::* )( ::osgParticle::Particle const & ) )( &::osgParticle::ParticleEffect::setDefaultParticleTemplate )
            , ( bp::arg("p") ) )    
        .def( 
            "setDefaults"
            , (void ( ::osgParticle::ParticleEffect::* )(  ) )(&::osgParticle::ParticleEffect::setDefaults)
            , (void ( ParticleEffect_wrapper::* )(  ) )(&ParticleEffect_wrapper::default_setDefaults) )    
        .def( 
            "setEmitterDuration"
            , (void ( ::osgParticle::ParticleEffect::* )( double ) )( &::osgParticle::ParticleEffect::setEmitterDuration )
            , ( bp::arg("duration") ) )    
        .def( 
            "setIntensity"
            , (void ( ::osgParticle::ParticleEffect::* )( float ) )( &::osgParticle::ParticleEffect::setIntensity )
            , ( bp::arg("intensity") ) )    
        .def( 
            "setParticleDuration"
            , (void ( ::osgParticle::ParticleEffect::* )( double ) )( &::osgParticle::ParticleEffect::setParticleDuration )
            , ( bp::arg("duration") ) )    
        .def( 
            "setParticleSystem"
            , (void ( ::osgParticle::ParticleEffect::* )( ::osgParticle::ParticleSystem * ) )( &::osgParticle::ParticleEffect::setParticleSystem )
            , ( bp::arg("ps") ) )    
        .def( 
            "setPosition"
            , (void ( ::osgParticle::ParticleEffect::* )( ::osg::Vec3 const & ) )( &::osgParticle::ParticleEffect::setPosition )
            , ( bp::arg("position") ) )    
        .def( 
            "setScale"
            , (void ( ::osgParticle::ParticleEffect::* )( float ) )( &::osgParticle::ParticleEffect::setScale )
            , ( bp::arg("scale") ) )    
        .def( 
            "setStartTime"
            , (void ( ::osgParticle::ParticleEffect::* )( double ) )( &::osgParticle::ParticleEffect::setStartTime )
            , ( bp::arg("startTime") ) )    
        .def( 
            "setTextureFileName"
            , (void ( ::osgParticle::ParticleEffect::* )( ::std::string const & ) )( &::osgParticle::ParticleEffect::setTextureFileName )
            , ( bp::arg("filename") ) )    
        .def( 
            "setUpEmitterAndProgram"
            , bp::pure_virtual( (void ( ::osgParticle::ParticleEffect::* )(  ) )(&::osgParticle::ParticleEffect::setUpEmitterAndProgram) ) )    
        .def( 
            "setUseLocalParticleSystem"
            , (void ( ::osgParticle::ParticleEffect::* )( bool ) )( &::osgParticle::ParticleEffect::setUseLocalParticleSystem )
            , ( bp::arg("local") ) )    
        .def( 
            "setWind"
            , (void ( ::osgParticle::ParticleEffect::* )( ::osg::Vec3 const & ) )( &::osgParticle::ParticleEffect::setWind )
            , ( bp::arg("wind") ) );

}
