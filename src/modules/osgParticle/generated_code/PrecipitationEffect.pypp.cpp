// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgParticle.h"
#include "wrap_referenced.h"
#include "PrecipitationEffect.pypp.hpp"

namespace bp = boost::python;

struct PrecipitationEffect_wrapper : osgParticle::PrecipitationEffect, bp::wrapper< osgParticle::PrecipitationEffect > {

    struct PrecipitationDrawable_wrapper : osgParticle::PrecipitationEffect::PrecipitationDrawable, bp::wrapper< osgParticle::PrecipitationEffect::PrecipitationDrawable > {
    
        PrecipitationDrawable_wrapper( )
        : osgParticle::PrecipitationEffect::PrecipitationDrawable( )
          , bp::wrapper< osgParticle::PrecipitationEffect::PrecipitationDrawable >(){
            // null constructor
        
        }
    
        virtual void accept( ::osg::PrimitiveFunctor & arg0 ) const  {
            if( bp::override func_accept = this->get_override( "accept" ) )
                func_accept( boost::ref(arg0) );
            else{
                this->osgParticle::PrecipitationEffect::PrecipitationDrawable::accept( boost::ref(arg0) );
            }
        }
        
        void default_accept( ::osg::PrimitiveFunctor & arg0 ) const  {
            osgParticle::PrecipitationEffect::PrecipitationDrawable::accept( boost::ref(arg0) );
        }
    
        virtual void accept( ::osg::PrimitiveIndexFunctor & arg0 ) const  {
            if( bp::override func_accept = this->get_override( "accept" ) )
                func_accept( boost::ref(arg0) );
            else{
                this->osgParticle::PrecipitationEffect::PrecipitationDrawable::accept( boost::ref(arg0) );
            }
        }
        
        void default_accept( ::osg::PrimitiveIndexFunctor & arg0 ) const  {
            osgParticle::PrecipitationEffect::PrecipitationDrawable::accept( boost::ref(arg0) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osgParticle::PrecipitationEffect::PrecipitationDrawable::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osgParticle::PrecipitationEffect::PrecipitationDrawable::className( );
        }
    
        virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
            if( bp::override func_clone = this->get_override( "clone" ) )
                return func_clone( boost::ref(copyop) );
            else{
                return this->osgParticle::PrecipitationEffect::PrecipitationDrawable::clone( boost::ref(copyop) );
            }
        }
        
        ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
            return osgParticle::PrecipitationEffect::PrecipitationDrawable::clone( boost::ref(copyop) );
        }
    
        virtual ::osg::Object * cloneType(  ) const  {
            if( bp::override func_cloneType = this->get_override( "cloneType" ) )
                return func_cloneType(  );
            else{
                return this->osgParticle::PrecipitationEffect::PrecipitationDrawable::cloneType(  );
            }
        }
        
        ::osg::Object * default_cloneType(  ) const  {
            return osgParticle::PrecipitationEffect::PrecipitationDrawable::cloneType( );
        }
    
        virtual void drawImplementation( ::osg::RenderInfo & renderInfo ) const  {
            if( bp::override func_drawImplementation = this->get_override( "drawImplementation" ) )
                func_drawImplementation( boost::ref(renderInfo) );
            else{
                this->osgParticle::PrecipitationEffect::PrecipitationDrawable::drawImplementation( boost::ref(renderInfo) );
            }
        }
        
        void default_drawImplementation( ::osg::RenderInfo & renderInfo ) const  {
            osgParticle::PrecipitationEffect::PrecipitationDrawable::drawImplementation( boost::ref(renderInfo) );
        }
    
        virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
            if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
                return func_isSameKindAs( boost::python::ptr(obj) );
            else{
                return this->osgParticle::PrecipitationEffect::PrecipitationDrawable::isSameKindAs( boost::python::ptr(obj) );
            }
        }
        
        bool default_isSameKindAs( ::osg::Object const * obj ) const  {
            return osgParticle::PrecipitationEffect::PrecipitationDrawable::isSameKindAs( boost::python::ptr(obj) );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osgParticle::PrecipitationEffect::PrecipitationDrawable::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osgParticle::PrecipitationEffect::PrecipitationDrawable::libraryName( );
        }
    
        virtual bool supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
            if( bp::override func_supports = this->get_override( "supports" ) )
                return func_supports( boost::ref(arg0) );
            else{
                return this->osgParticle::PrecipitationEffect::PrecipitationDrawable::supports( boost::ref(arg0) );
            }
        }
        
        bool default_supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
            return osgParticle::PrecipitationEffect::PrecipitationDrawable::supports( boost::ref(arg0) );
        }
    
        virtual bool supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
            if( bp::override func_supports = this->get_override( "supports" ) )
                return func_supports( boost::ref(arg0) );
            else{
                return this->osgParticle::PrecipitationEffect::PrecipitationDrawable::supports( boost::ref(arg0) );
            }
        }
        
        bool default_supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
            return osgParticle::PrecipitationEffect::PrecipitationDrawable::supports( boost::ref(arg0) );
        }
    
        virtual void accept( ::osg::Drawable::AttributeFunctor & arg0 ) {
            if( bp::override func_accept = this->get_override( "accept" ) )
                func_accept( boost::ref(arg0) );
            else{
                this->osg::Drawable::accept( boost::ref(arg0) );
            }
        }
        
        void default_accept( ::osg::Drawable::AttributeFunctor & arg0 ) {
            osg::Drawable::accept( boost::ref(arg0) );
        }
    
        virtual void accept( ::osg::Drawable::ConstAttributeFunctor & arg0 ) const  {
            if( bp::override func_accept = this->get_override( "accept" ) )
                func_accept( boost::ref(arg0) );
            else{
                this->osg::Drawable::accept( boost::ref(arg0) );
            }
        }
        
        void default_accept( ::osg::Drawable::ConstAttributeFunctor & arg0 ) const  {
            osg::Drawable::accept( boost::ref(arg0) );
        }
    
        virtual ::osg::Geometry * asGeometry(  ) {
            if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
                return func_asGeometry(  );
            else{
                return this->osg::Drawable::asGeometry(  );
            }
        }
        
        ::osg::Geometry * default_asGeometry(  ) {
            return osg::Drawable::asGeometry( );
        }
    
        virtual ::osg::Geometry const * asGeometry(  ) const  {
            if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
                return func_asGeometry(  );
            else{
                return this->osg::Drawable::asGeometry(  );
            }
        }
        
        ::osg::Geometry const * default_asGeometry(  ) const  {
            return osg::Drawable::asGeometry( );
        }
    
        virtual void compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
            if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
                func_compileGLObjects( boost::ref(renderInfo) );
            else{
                this->osg::Drawable::compileGLObjects( boost::ref(renderInfo) );
            }
        }
        
        void default_compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
            osg::Drawable::compileGLObjects( boost::ref(renderInfo) );
        }
    
        virtual ::osg::BoundingBox computeBound(  ) const  {
            if( bp::override func_computeBound = this->get_override( "computeBound" ) )
                return func_computeBound(  );
            else{
                return this->osg::Drawable::computeBound(  );
            }
        }
        
        ::osg::BoundingBox default_computeBound(  ) const  {
            return osg::Drawable::computeBound( );
        }
    
        virtual void computeDataVariance(  ) {
            if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
                func_computeDataVariance(  );
            else{
                this->osg::Drawable::computeDataVariance(  );
            }
        }
        
        void default_computeDataVariance(  ) {
            osg::Drawable::computeDataVariance( );
        }
    
        virtual void dirtyDisplayList(  ) {
            if( bp::override func_dirtyDisplayList = this->get_override( "dirtyDisplayList" ) )
                func_dirtyDisplayList(  );
            else{
                this->osg::Drawable::dirtyDisplayList(  );
            }
        }
        
        void default_dirtyDisplayList(  ) {
            osg::Drawable::dirtyDisplayList( );
        }
    
        virtual unsigned int getGLObjectSizeHint(  ) const  {
            if( bp::override func_getGLObjectSizeHint = this->get_override( "getGLObjectSizeHint" ) )
                return func_getGLObjectSizeHint(  );
            else{
                return this->osg::Drawable::getGLObjectSizeHint(  );
            }
        }
        
        unsigned int default_getGLObjectSizeHint(  ) const  {
            return osg::Drawable::getGLObjectSizeHint( );
        }
    
        virtual ::osg::Referenced * getUserData(  ) {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced * default_getUserData(  ) {
            return osg::Object::getUserData( );
        }
    
        virtual ::osg::Referenced const * getUserData(  ) const  {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced const * default_getUserData(  ) const  {
            return osg::Object::getUserData( );
        }
    
        virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
            if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
                func_resizeGLObjectBuffers( maxSize );
            else{
                this->osg::Drawable::resizeGLObjectBuffers( maxSize );
            }
        }
        
        void default_resizeGLObjectBuffers( unsigned int maxSize ) {
            osg::Drawable::resizeGLObjectBuffers( maxSize );
        }
    
        virtual void setCullCallback( ::osg::Drawable::CullCallback * cc ) {
            if( bp::override func_setCullCallback = this->get_override( "setCullCallback" ) )
                func_setCullCallback( boost::python::ptr(cc) );
            else{
                this->osg::Drawable::setCullCallback( boost::python::ptr(cc) );
            }
        }
        
        void default_setCullCallback( ::osg::Drawable::CullCallback * cc ) {
            osg::Drawable::setCullCallback( boost::python::ptr(cc) );
        }
    
        virtual void setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
            if( bp::override func_setDrawCallback = this->get_override( "setDrawCallback" ) )
                func_setDrawCallback( boost::python::ptr(dc) );
            else{
                this->osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
            }
        }
        
        void default_setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
            osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
        }
    
        virtual void setEventCallback( ::osg::Drawable::EventCallback * ac ) {
            if( bp::override func_setEventCallback = this->get_override( "setEventCallback" ) )
                func_setEventCallback( boost::python::ptr(ac) );
            else{
                this->osg::Drawable::setEventCallback( boost::python::ptr(ac) );
            }
        }
        
        void default_setEventCallback( ::osg::Drawable::EventCallback * ac ) {
            osg::Drawable::setEventCallback( boost::python::ptr(ac) );
        }
    
        virtual void setName( ::std::string const & name ) {
            if( bp::override func_setName = this->get_override( "setName" ) )
                func_setName( name );
            else{
                this->osg::Object::setName( name );
            }
        }
        
        void default_setName( ::std::string const & name ) {
            osg::Object::setName( name );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Drawable::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Drawable::setThreadSafeRefUnref( threadSafe );
        }
    
        virtual void setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
            if( bp::override func_setUpdateCallback = this->get_override( "setUpdateCallback" ) )
                func_setUpdateCallback( boost::python::ptr(ac) );
            else{
                this->osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
            }
        }
        
        void default_setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
            osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
        }
    
        virtual void setUseVertexBufferObjects( bool flag ) {
            if( bp::override func_setUseVertexBufferObjects = this->get_override( "setUseVertexBufferObjects" ) )
                func_setUseVertexBufferObjects( flag );
            else{
                this->osg::Drawable::setUseVertexBufferObjects( flag );
            }
        }
        
        void default_setUseVertexBufferObjects( bool flag ) {
            osg::Drawable::setUseVertexBufferObjects( flag );
        }
    
        virtual void setUserData( ::osg::Referenced * obj ) {
            if( bp::override func_setUserData = this->get_override( "setUserData" ) )
                func_setUserData( boost::python::ptr(obj) );
            else{
                this->osg::Object::setUserData( boost::python::ptr(obj) );
            }
        }
        
        void default_setUserData( ::osg::Referenced * obj ) {
            osg::Object::setUserData( boost::python::ptr(obj) );
        }
    
        virtual bool supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
            if( bp::override func_supports = this->get_override( "supports" ) )
                return func_supports( boost::ref(arg0) );
            else{
                return this->osg::Drawable::supports( boost::ref(arg0) );
            }
        }
        
        bool default_supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
            return osg::Drawable::supports( boost::ref(arg0) );
        }
    
        virtual bool supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
            if( bp::override func_supports = this->get_override( "supports" ) )
                return func_supports( boost::ref(arg0) );
            else{
                return this->osg::Drawable::supports( boost::ref(arg0) );
            }
        }
        
        bool default_supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
            return osg::Drawable::supports( boost::ref(arg0) );
        }
    
    };

    PrecipitationEffect_wrapper( )
    : osgParticle::PrecipitationEffect( )
      , bp::wrapper< osgParticle::PrecipitationEffect >(){
        // null constructor
    
    }

    virtual void accept( ::osg::NodeVisitor & nv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(nv) );
        else{
            this->osgParticle::PrecipitationEffect::accept( boost::ref(nv) );
        }
    }
    
    void default_accept( ::osg::NodeVisitor & nv ) {
        osgParticle::PrecipitationEffect::accept( boost::ref(nv) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgParticle::PrecipitationEffect::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgParticle::PrecipitationEffect::className( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgParticle::PrecipitationEffect::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgParticle::PrecipitationEffect::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgParticle::PrecipitationEffect::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgParticle::PrecipitationEffect::libraryName( );
    }

    virtual void traverse( ::osg::NodeVisitor & nv ) {
        if( bp::override func_traverse = this->get_override( "traverse" ) )
            func_traverse( boost::ref(nv) );
        else{
            this->osgParticle::PrecipitationEffect::traverse( boost::ref(nv) );
        }
    }
    
    void default_traverse( ::osg::NodeVisitor & nv ) {
        osgParticle::PrecipitationEffect::traverse( boost::ref(nv) );
    }

    virtual ::osg::Camera * asCamera(  ) {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera * default_asCamera(  ) {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Camera const * asCamera(  ) const  {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera const * default_asCamera(  ) const  {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Geode * asGeode(  ) {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode * default_asGeode(  ) {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Geode const * asGeode(  ) const  {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode const * default_asGeode(  ) const  {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Group * asGroup(  ) {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Node::asGroup(  );
        }
    }
    
    ::osg::Group * default_asGroup(  ) {
        return osg::Node::asGroup( );
    }

    virtual ::osg::Group const * asGroup(  ) const  {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Node::asGroup(  );
        }
    }
    
    ::osg::Group const * default_asGroup(  ) const  {
        return osg::Node::asGroup( );
    }

    virtual ::osg::Switch * asSwitch(  ) {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch * default_asSwitch(  ) {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Switch const * asSwitch(  ) const  {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch const * default_asSwitch(  ) const  {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Transform * asTransform(  ) {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Node::asTransform(  );
        }
    }
    
    ::osg::Transform * default_asTransform(  ) {
        return osg::Node::asTransform( );
    }

    virtual ::osg::Transform const * asTransform(  ) const  {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Node::asTransform(  );
        }
    }
    
    ::osg::Transform const * default_asTransform(  ) const  {
        return osg::Node::asTransform( );
    }

    virtual void ascend( ::osg::NodeVisitor & nv ) {
        if( bp::override func_ascend = this->get_override( "ascend" ) )
            func_ascend( boost::ref(nv) );
        else{
            this->osg::Node::ascend( boost::ref(nv) );
        }
    }
    
    void default_ascend( ::osg::NodeVisitor & nv ) {
        osg::Node::ascend( boost::ref(nv) );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::Node::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::Node::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::Node::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::Node::cloneType( );
    }

    virtual ::osg::BoundingSphere computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osg::Node::computeBound(  );
        }
    }
    
    ::osg::BoundingSphere default_computeBound(  ) const  {
        return osg::Node::computeBound( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Node::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Node::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Node::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Node::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_PrecipitationEffect_class(){

    { //::osgParticle::PrecipitationEffect
        typedef bp::class_< PrecipitationEffect_wrapper, bp::bases< ::osg::Node >, osg::ref_ptr< PrecipitationEffect_wrapper >, boost::noncopyable > PrecipitationEffect_exposer_t;
        PrecipitationEffect_exposer_t PrecipitationEffect_exposer = PrecipitationEffect_exposer_t( "PrecipitationEffect", bp::no_init );
        bp::scope PrecipitationEffect_scope( PrecipitationEffect_exposer );
        { //::osgParticle::PrecipitationEffect::PrecipitationDrawable
            typedef bp::class_< PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper, bp::bases< ::osg::Drawable >, osg::ref_ptr< PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper >, boost::noncopyable > PrecipitationDrawable_exposer_t;
            PrecipitationDrawable_exposer_t PrecipitationDrawable_exposer = PrecipitationDrawable_exposer_t( "PrecipitationDrawable", "\n Internal drawable used to render batches of cells.\n", bp::no_init );
            bp::scope PrecipitationDrawable_scope( PrecipitationDrawable_exposer );
            bp::class_< osgParticle::PrecipitationEffect::PrecipitationDrawable::Cell >( "Cell", bp::init< int, int, int >(( bp::arg("in_i"), bp::arg("in_j"), bp::arg("in_k") )) )    
                .def( bp::self < bp::self )    
                .def_readwrite( "i", &osgParticle::PrecipitationEffect::PrecipitationDrawable::Cell::i )    
                .def_readwrite( "j", &osgParticle::PrecipitationEffect::PrecipitationDrawable::Cell::j )    
                .def_readwrite( "k", &osgParticle::PrecipitationEffect::PrecipitationDrawable::Cell::k );
            bp::class_< osgParticle::PrecipitationEffect::PrecipitationDrawable::DepthMatrixStartTime >( "DepthMatrixStartTime" )    
                .def( bp::self < bp::self )    
                .def_readwrite( "depth", &osgParticle::PrecipitationEffect::PrecipitationDrawable::DepthMatrixStartTime::depth )    
                .def_readwrite( "modelview", &osgParticle::PrecipitationEffect::PrecipitationDrawable::DepthMatrixStartTime::modelview )    
                .def_readwrite( "startTime", &osgParticle::PrecipitationEffect::PrecipitationDrawable::DepthMatrixStartTime::startTime );
            bp::class_< osgParticle::PrecipitationEffect::PrecipitationDrawable::LessFunctor >( "LessFunctor" )    
                .def( 
                    "__call__"
                    , (bool ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::LessFunctor::* )( ::std::pair< osgParticle::PrecipitationEffect::PrecipitationDrawable::Cell const, osgParticle::PrecipitationEffect::PrecipitationDrawable::DepthMatrixStartTime > const *,::std::pair< osgParticle::PrecipitationEffect::PrecipitationDrawable::Cell const, osgParticle::PrecipitationEffect::PrecipitationDrawable::DepthMatrixStartTime > const * ) const)( &::osgParticle::PrecipitationEffect::PrecipitationDrawable::LessFunctor::operator() )
                    , ( bp::arg("lhs"), bp::arg("rhs") ) );
            PrecipitationDrawable_exposer.def( bp::init< >("\n Internal drawable used to render batches of cells.\n") );
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::accept
            
                typedef void ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*accept_function_type )( ::osg::PrimitiveFunctor & ) const;
                typedef void ( PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::*default_accept_function_type )( ::osg::PrimitiveFunctor & ) const;
                
                PrecipitationDrawable_exposer.def( 
                    "accept"
                    , accept_function_type(&::osgParticle::PrecipitationEffect::PrecipitationDrawable::accept)
                    , default_accept_function_type(&PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::default_accept)
                    , ( bp::arg("arg0") ) );
            
            }
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::accept
            
                typedef void ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*accept_function_type )( ::osg::PrimitiveIndexFunctor & ) const;
                typedef void ( PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::*default_accept_function_type )( ::osg::PrimitiveIndexFunctor & ) const;
                
                PrecipitationDrawable_exposer.def( 
                    "accept"
                    , accept_function_type(&::osgParticle::PrecipitationEffect::PrecipitationDrawable::accept)
                    , default_accept_function_type(&PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::default_accept)
                    , ( bp::arg("arg0") ) );
            
            }
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::className
            
                typedef char const * ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*className_function_type )(  ) const;
                typedef char const * ( PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::*default_className_function_type )(  ) const;
                
                PrecipitationDrawable_exposer.def( 
                    "className"
                    , className_function_type(&::osgParticle::PrecipitationEffect::PrecipitationDrawable::className)
                    , default_className_function_type(&PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::default_className) );
            
            }
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::clone
            
                typedef ::osg::Object * ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*clone_function_type )( ::osg::CopyOp const & ) const;
                typedef ::osg::Object * ( PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
                
                PrecipitationDrawable_exposer.def( 
                    "clone"
                    , clone_function_type(&::osgParticle::PrecipitationEffect::PrecipitationDrawable::clone)
                    , default_clone_function_type(&PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::default_clone)
                    , ( bp::arg("copyop") )
                    , bp::return_value_policy< bp::reference_existing_object >() );
            
            }
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::cloneType
            
                typedef ::osg::Object * ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*cloneType_function_type )(  ) const;
                typedef ::osg::Object * ( PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::*default_cloneType_function_type )(  ) const;
                
                PrecipitationDrawable_exposer.def( 
                    "cloneType"
                    , cloneType_function_type(&::osgParticle::PrecipitationEffect::PrecipitationDrawable::cloneType)
                    , default_cloneType_function_type(&PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::default_cloneType)
                    , bp::return_value_policy< bp::reference_existing_object >() );
            
            }
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::drawImplementation
            
                typedef void ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*drawImplementation_function_type )( ::osg::RenderInfo & ) const;
                typedef void ( PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::*default_drawImplementation_function_type )( ::osg::RenderInfo & ) const;
                
                PrecipitationDrawable_exposer.def( 
                    "drawImplementation"
                    , drawImplementation_function_type(&::osgParticle::PrecipitationEffect::PrecipitationDrawable::drawImplementation)
                    , default_drawImplementation_function_type(&PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::default_drawImplementation)
                    , ( bp::arg("renderInfo") ) );
            
            }
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::getDrawType
            
                typedef ::GLenum ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*getDrawType_function_type )(  ) const;
                
                PrecipitationDrawable_exposer.def( 
                    "getDrawType"
                    , getDrawType_function_type( &::osgParticle::PrecipitationEffect::PrecipitationDrawable::getDrawType ) );
            
            }
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::getGeometry
            
                typedef ::osg::Geometry * ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*getGeometry_function_type )(  ) ;
                
                PrecipitationDrawable_exposer.def( 
                    "getGeometry"
                    , getGeometry_function_type( &::osgParticle::PrecipitationEffect::PrecipitationDrawable::getGeometry )
                    , bp::return_internal_reference< >() );
            
            }
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::getGeometry
            
                typedef ::osg::Geometry const * ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*getGeometry_function_type )(  ) const;
                
                PrecipitationDrawable_exposer.def( 
                    "getGeometry"
                    , getGeometry_function_type( &::osgParticle::PrecipitationEffect::PrecipitationDrawable::getGeometry )
                    , bp::return_internal_reference< >() );
            
            }
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::getNumberOfVertices
            
                typedef unsigned int ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*getNumberOfVertices_function_type )(  ) const;
                
                PrecipitationDrawable_exposer.def( 
                    "getNumberOfVertices"
                    , getNumberOfVertices_function_type( &::osgParticle::PrecipitationEffect::PrecipitationDrawable::getNumberOfVertices ) );
            
            }
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::getRequiresPreviousMatrix
            
                typedef bool ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*getRequiresPreviousMatrix_function_type )(  ) const;
                
                PrecipitationDrawable_exposer.def( 
                    "getRequiresPreviousMatrix"
                    , getRequiresPreviousMatrix_function_type( &::osgParticle::PrecipitationEffect::PrecipitationDrawable::getRequiresPreviousMatrix ) );
            
            }
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::isSameKindAs
            
                typedef bool ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*isSameKindAs_function_type )( ::osg::Object const * ) const;
                typedef bool ( PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
                
                PrecipitationDrawable_exposer.def( 
                    "isSameKindAs"
                    , isSameKindAs_function_type(&::osgParticle::PrecipitationEffect::PrecipitationDrawable::isSameKindAs)
                    , default_isSameKindAs_function_type(&PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::default_isSameKindAs)
                    , ( bp::arg("obj") ) );
            
            }
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::libraryName
            
                typedef char const * ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*libraryName_function_type )(  ) const;
                typedef char const * ( PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::*default_libraryName_function_type )(  ) const;
                
                PrecipitationDrawable_exposer.def( 
                    "libraryName"
                    , libraryName_function_type(&::osgParticle::PrecipitationEffect::PrecipitationDrawable::libraryName)
                    , default_libraryName_function_type(&PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::default_libraryName) );
            
            }
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::newFrame
            
                typedef void ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*newFrame_function_type )(  ) ;
                
                PrecipitationDrawable_exposer.def( 
                    "newFrame"
                    , newFrame_function_type( &::osgParticle::PrecipitationEffect::PrecipitationDrawable::newFrame ) );
            
            }
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::setDrawType
            
                typedef void ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*setDrawType_function_type )( ::GLenum ) ;
                
                PrecipitationDrawable_exposer.def( 
                    "setDrawType"
                    , setDrawType_function_type( &::osgParticle::PrecipitationEffect::PrecipitationDrawable::setDrawType )
                    , ( bp::arg("type") ) );
            
            }
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::setGeometry
            
                typedef void ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*setGeometry_function_type )( ::osg::Geometry * ) ;
                
                PrecipitationDrawable_exposer.def( 
                    "setGeometry"
                    , setGeometry_function_type( &::osgParticle::PrecipitationEffect::PrecipitationDrawable::setGeometry )
                    , ( bp::arg("geom") ) );
            
            }
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::setNumberOfVertices
            
                typedef void ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*setNumberOfVertices_function_type )( unsigned int ) ;
                
                PrecipitationDrawable_exposer.def( 
                    "setNumberOfVertices"
                    , setNumberOfVertices_function_type( &::osgParticle::PrecipitationEffect::PrecipitationDrawable::setNumberOfVertices )
                    , ( bp::arg("numVertices") ) );
            
            }
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::setRequiresPreviousMatrix
            
                typedef void ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*setRequiresPreviousMatrix_function_type )( bool ) ;
                
                PrecipitationDrawable_exposer.def( 
                    "setRequiresPreviousMatrix"
                    , setRequiresPreviousMatrix_function_type( &::osgParticle::PrecipitationEffect::PrecipitationDrawable::setRequiresPreviousMatrix )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::supports
            
                typedef bool ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*supports_function_type )( ::osg::PrimitiveFunctor const & ) const;
                typedef bool ( PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::*default_supports_function_type )( ::osg::PrimitiveFunctor const & ) const;
                
                PrecipitationDrawable_exposer.def( 
                    "supports"
                    , supports_function_type(&::osgParticle::PrecipitationEffect::PrecipitationDrawable::supports)
                    , default_supports_function_type(&PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::default_supports)
                    , ( bp::arg("arg0") ) );
            
            }
            { //::osgParticle::PrecipitationEffect::PrecipitationDrawable::supports
            
                typedef bool ( ::osgParticle::PrecipitationEffect::PrecipitationDrawable::*supports_function_type )( ::osg::PrimitiveIndexFunctor const & ) const;
                typedef bool ( PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::*default_supports_function_type )( ::osg::PrimitiveIndexFunctor const & ) const;
                
                PrecipitationDrawable_exposer.def( 
                    "supports"
                    , supports_function_type(&::osgParticle::PrecipitationEffect::PrecipitationDrawable::supports)
                    , default_supports_function_type(&PrecipitationEffect_wrapper::PrecipitationDrawable_wrapper::default_supports)
                    , ( bp::arg("arg0") ) );
            
            }
        }
        PrecipitationEffect_exposer.def( bp::init< >() );
        { //::osgParticle::PrecipitationEffect::accept
        
            typedef void ( ::osgParticle::PrecipitationEffect::*accept_function_type )( ::osg::NodeVisitor & ) ;
            typedef void ( PrecipitationEffect_wrapper::*default_accept_function_type )( ::osg::NodeVisitor & ) ;
            
            PrecipitationEffect_exposer.def( 
                "accept"
                , accept_function_type(&::osgParticle::PrecipitationEffect::accept)
                , default_accept_function_type(&PrecipitationEffect_wrapper::default_accept)
                , ( bp::arg("nv") ) );
        
        }
        { //::osgParticle::PrecipitationEffect::className
        
            typedef char const * ( ::osgParticle::PrecipitationEffect::*className_function_type )(  ) const;
            typedef char const * ( PrecipitationEffect_wrapper::*default_className_function_type )(  ) const;
            
            PrecipitationEffect_exposer.def( 
                "className"
                , className_function_type(&::osgParticle::PrecipitationEffect::className)
                , default_className_function_type(&PrecipitationEffect_wrapper::default_className) );
        
        }
        { //::osgParticle::PrecipitationEffect::getCellSize
        
            typedef ::osg::Vec3 const & ( ::osgParticle::PrecipitationEffect::*getCellSize_function_type )(  ) const;
            
            PrecipitationEffect_exposer.def( 
                "getCellSize"
                , getCellSize_function_type( &::osgParticle::PrecipitationEffect::getCellSize )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::PrecipitationEffect::getFarTransition
        
            typedef float ( ::osgParticle::PrecipitationEffect::*getFarTransition_function_type )(  ) const;
            
            PrecipitationEffect_exposer.def( 
                "getFarTransition"
                , getFarTransition_function_type( &::osgParticle::PrecipitationEffect::getFarTransition ) );
        
        }
        { //::osgParticle::PrecipitationEffect::getFog
        
            typedef ::osg::Fog * ( ::osgParticle::PrecipitationEffect::*getFog_function_type )(  ) ;
            
            PrecipitationEffect_exposer.def( 
                "getFog"
                , getFog_function_type( &::osgParticle::PrecipitationEffect::getFog )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::PrecipitationEffect::getFog
        
            typedef ::osg::Fog const * ( ::osgParticle::PrecipitationEffect::*getFog_function_type )(  ) const;
            
            PrecipitationEffect_exposer.def( 
                "getFog"
                , getFog_function_type( &::osgParticle::PrecipitationEffect::getFog )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::PrecipitationEffect::getLineGeometry
        
            typedef ::osg::Geometry * ( ::osgParticle::PrecipitationEffect::*getLineGeometry_function_type )(  ) ;
            
            PrecipitationEffect_exposer.def( 
                "getLineGeometry"
                , getLineGeometry_function_type( &::osgParticle::PrecipitationEffect::getLineGeometry )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::PrecipitationEffect::getLineStateSet
        
            typedef ::osg::StateSet * ( ::osgParticle::PrecipitationEffect::*getLineStateSet_function_type )(  ) ;
            
            PrecipitationEffect_exposer.def( 
                "getLineStateSet"
                , getLineStateSet_function_type( &::osgParticle::PrecipitationEffect::getLineStateSet )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::PrecipitationEffect::getMaximumParticleDensity
        
            typedef float ( ::osgParticle::PrecipitationEffect::*getMaximumParticleDensity_function_type )(  ) const;
            
            PrecipitationEffect_exposer.def( 
                "getMaximumParticleDensity"
                , getMaximumParticleDensity_function_type( &::osgParticle::PrecipitationEffect::getMaximumParticleDensity ) );
        
        }
        { //::osgParticle::PrecipitationEffect::getNearTransition
        
            typedef float ( ::osgParticle::PrecipitationEffect::*getNearTransition_function_type )(  ) const;
            
            PrecipitationEffect_exposer.def( 
                "getNearTransition"
                , getNearTransition_function_type( &::osgParticle::PrecipitationEffect::getNearTransition ) );
        
        }
        { //::osgParticle::PrecipitationEffect::getParticleColor
        
            typedef ::osg::Vec4 const & ( ::osgParticle::PrecipitationEffect::*getParticleColor_function_type )(  ) const;
            
            PrecipitationEffect_exposer.def( 
                "getParticleColor"
                , getParticleColor_function_type( &::osgParticle::PrecipitationEffect::getParticleColor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::PrecipitationEffect::getParticleSize
        
            typedef float ( ::osgParticle::PrecipitationEffect::*getParticleSize_function_type )(  ) const;
            
            PrecipitationEffect_exposer.def( 
                "getParticleSize"
                , getParticleSize_function_type( &::osgParticle::PrecipitationEffect::getParticleSize ) );
        
        }
        { //::osgParticle::PrecipitationEffect::getParticleSpeed
        
            typedef float ( ::osgParticle::PrecipitationEffect::*getParticleSpeed_function_type )(  ) const;
            
            PrecipitationEffect_exposer.def( 
                "getParticleSpeed"
                , getParticleSpeed_function_type( &::osgParticle::PrecipitationEffect::getParticleSpeed ) );
        
        }
        { //::osgParticle::PrecipitationEffect::getPointGeometry
        
            typedef ::osg::Geometry * ( ::osgParticle::PrecipitationEffect::*getPointGeometry_function_type )(  ) ;
            
            PrecipitationEffect_exposer.def( 
                "getPointGeometry"
                , getPointGeometry_function_type( &::osgParticle::PrecipitationEffect::getPointGeometry )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::PrecipitationEffect::getPointStateSet
        
            typedef ::osg::StateSet * ( ::osgParticle::PrecipitationEffect::*getPointStateSet_function_type )(  ) ;
            
            PrecipitationEffect_exposer.def( 
                "getPointStateSet"
                , getPointStateSet_function_type( &::osgParticle::PrecipitationEffect::getPointStateSet )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::PrecipitationEffect::getPosition
        
            typedef ::osg::Vec3 const & ( ::osgParticle::PrecipitationEffect::*getPosition_function_type )(  ) const;
            
            PrecipitationEffect_exposer.def( 
                "getPosition"
                , getPosition_function_type( &::osgParticle::PrecipitationEffect::getPosition )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::PrecipitationEffect::getQuadGeometry
        
            typedef ::osg::Geometry * ( ::osgParticle::PrecipitationEffect::*getQuadGeometry_function_type )(  ) ;
            
            PrecipitationEffect_exposer.def( 
                "getQuadGeometry"
                , getQuadGeometry_function_type( &::osgParticle::PrecipitationEffect::getQuadGeometry )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::PrecipitationEffect::getQuadStateSet
        
            typedef ::osg::StateSet * ( ::osgParticle::PrecipitationEffect::*getQuadStateSet_function_type )(  ) ;
            
            PrecipitationEffect_exposer.def( 
                "getQuadStateSet"
                , getQuadStateSet_function_type( &::osgParticle::PrecipitationEffect::getQuadStateSet )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::PrecipitationEffect::getUseFarLineSegments
        
            typedef bool ( ::osgParticle::PrecipitationEffect::*getUseFarLineSegments_function_type )(  ) const;
            
            PrecipitationEffect_exposer.def( 
                "getUseFarLineSegments"
                , getUseFarLineSegments_function_type( &::osgParticle::PrecipitationEffect::getUseFarLineSegments ) );
        
        }
        { //::osgParticle::PrecipitationEffect::getWind
        
            typedef ::osg::Vec3 const & ( ::osgParticle::PrecipitationEffect::*getWind_function_type )(  ) const;
            
            PrecipitationEffect_exposer.def( 
                "getWind"
                , getWind_function_type( &::osgParticle::PrecipitationEffect::getWind )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgParticle::PrecipitationEffect::isSameKindAs
        
            typedef bool ( ::osgParticle::PrecipitationEffect::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( PrecipitationEffect_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            PrecipitationEffect_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgParticle::PrecipitationEffect::isSameKindAs)
                , default_isSameKindAs_function_type(&PrecipitationEffect_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgParticle::PrecipitationEffect::libraryName
        
            typedef char const * ( ::osgParticle::PrecipitationEffect::*libraryName_function_type )(  ) const;
            typedef char const * ( PrecipitationEffect_wrapper::*default_libraryName_function_type )(  ) const;
            
            PrecipitationEffect_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgParticle::PrecipitationEffect::libraryName)
                , default_libraryName_function_type(&PrecipitationEffect_wrapper::default_libraryName) );
        
        }
        { //::osgParticle::PrecipitationEffect::rain
        
            typedef void ( ::osgParticle::PrecipitationEffect::*rain_function_type )( float ) ;
            
            PrecipitationEffect_exposer.def( 
                "rain"
                , rain_function_type( &::osgParticle::PrecipitationEffect::rain )
                , ( bp::arg("intensity") )
                , "\n Set all the parameters to create an rain effect of specified intensity.\n" );
        
        }
        { //::osgParticle::PrecipitationEffect::setCellSize
        
            typedef void ( ::osgParticle::PrecipitationEffect::*setCellSize_function_type )( ::osg::Vec3 const & ) ;
            
            PrecipitationEffect_exposer.def( 
                "setCellSize"
                , setCellSize_function_type( &::osgParticle::PrecipitationEffect::setCellSize )
                , ( bp::arg("cellSize") ) );
        
        }
        { //::osgParticle::PrecipitationEffect::setFarTransition
        
            typedef void ( ::osgParticle::PrecipitationEffect::*setFarTransition_function_type )( float ) ;
            
            PrecipitationEffect_exposer.def( 
                "setFarTransition"
                , setFarTransition_function_type( &::osgParticle::PrecipitationEffect::setFarTransition )
                , ( bp::arg("farTransition") ) );
        
        }
        { //::osgParticle::PrecipitationEffect::setFog
        
            typedef void ( ::osgParticle::PrecipitationEffect::*setFog_function_type )( ::osg::Fog * ) ;
            
            PrecipitationEffect_exposer.def( 
                "setFog"
                , setFog_function_type( &::osgParticle::PrecipitationEffect::setFog )
                , ( bp::arg("fog") ) );
        
        }
        { //::osgParticle::PrecipitationEffect::setMaximumParticleDensity
        
            typedef void ( ::osgParticle::PrecipitationEffect::*setMaximumParticleDensity_function_type )( float ) ;
            
            PrecipitationEffect_exposer.def( 
                "setMaximumParticleDensity"
                , setMaximumParticleDensity_function_type( &::osgParticle::PrecipitationEffect::setMaximumParticleDensity )
                , ( bp::arg("density") ) );
        
        }
        { //::osgParticle::PrecipitationEffect::setNearTransition
        
            typedef void ( ::osgParticle::PrecipitationEffect::*setNearTransition_function_type )( float ) ;
            
            PrecipitationEffect_exposer.def( 
                "setNearTransition"
                , setNearTransition_function_type( &::osgParticle::PrecipitationEffect::setNearTransition )
                , ( bp::arg("nearTransition") ) );
        
        }
        { //::osgParticle::PrecipitationEffect::setParticleColor
        
            typedef void ( ::osgParticle::PrecipitationEffect::*setParticleColor_function_type )( ::osg::Vec4 const & ) ;
            
            PrecipitationEffect_exposer.def( 
                "setParticleColor"
                , setParticleColor_function_type( &::osgParticle::PrecipitationEffect::setParticleColor )
                , ( bp::arg("color") ) );
        
        }
        { //::osgParticle::PrecipitationEffect::setParticleSize
        
            typedef void ( ::osgParticle::PrecipitationEffect::*setParticleSize_function_type )( float ) ;
            
            PrecipitationEffect_exposer.def( 
                "setParticleSize"
                , setParticleSize_function_type( &::osgParticle::PrecipitationEffect::setParticleSize )
                , ( bp::arg("particleSize") ) );
        
        }
        { //::osgParticle::PrecipitationEffect::setParticleSpeed
        
            typedef void ( ::osgParticle::PrecipitationEffect::*setParticleSpeed_function_type )( float ) ;
            
            PrecipitationEffect_exposer.def( 
                "setParticleSpeed"
                , setParticleSpeed_function_type( &::osgParticle::PrecipitationEffect::setParticleSpeed )
                , ( bp::arg("particleSpeed") ) );
        
        }
        { //::osgParticle::PrecipitationEffect::setPosition
        
            typedef void ( ::osgParticle::PrecipitationEffect::*setPosition_function_type )( ::osg::Vec3 const & ) ;
            
            PrecipitationEffect_exposer.def( 
                "setPosition"
                , setPosition_function_type( &::osgParticle::PrecipitationEffect::setPosition )
                , ( bp::arg("position") ) );
        
        }
        { //::osgParticle::PrecipitationEffect::setUseFarLineSegments
        
            typedef void ( ::osgParticle::PrecipitationEffect::*setUseFarLineSegments_function_type )( bool ) ;
            
            PrecipitationEffect_exposer.def( 
                "setUseFarLineSegments"
                , setUseFarLineSegments_function_type( &::osgParticle::PrecipitationEffect::setUseFarLineSegments )
                , ( bp::arg("useFarLineSegments") ) );
        
        }
        { //::osgParticle::PrecipitationEffect::setWind
        
            typedef void ( ::osgParticle::PrecipitationEffect::*setWind_function_type )( ::osg::Vec3 const & ) ;
            
            PrecipitationEffect_exposer.def( 
                "setWind"
                , setWind_function_type( &::osgParticle::PrecipitationEffect::setWind )
                , ( bp::arg("wind") ) );
        
        }
        { //::osgParticle::PrecipitationEffect::snow
        
            typedef void ( ::osgParticle::PrecipitationEffect::*snow_function_type )( float ) ;
            
            PrecipitationEffect_exposer.def( 
                "snow"
                , snow_function_type( &::osgParticle::PrecipitationEffect::snow )
                , ( bp::arg("intensity") )
                , "\n Set all the parameters to create an snow effect of specified intensity.\n" );
        
        }
        { //::osgParticle::PrecipitationEffect::traverse
        
            typedef void ( ::osgParticle::PrecipitationEffect::*traverse_function_type )( ::osg::NodeVisitor & ) ;
            typedef void ( PrecipitationEffect_wrapper::*default_traverse_function_type )( ::osg::NodeVisitor & ) ;
            
            PrecipitationEffect_exposer.def( 
                "traverse"
                , traverse_function_type(&::osgParticle::PrecipitationEffect::traverse)
                , default_traverse_function_type(&PrecipitationEffect_wrapper::default_traverse)
                , ( bp::arg("nv") ) );
        
        }
    }

}
