// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgParticle.h"
#include "wrap_referenced.h"
#include "SinkOperator.pypp.hpp"

namespace bp = boost::python;

struct SinkOperator_wrapper : osgParticle::SinkOperator, bp::wrapper< osgParticle::SinkOperator > {

    SinkOperator_wrapper( )
    : osgParticle::SinkOperator( )
      , bp::wrapper< osgParticle::SinkOperator >(){
        // null constructor
    
    }

    virtual void beginOperate( ::osgParticle::Program * prg ) {
        if( bp::override func_beginOperate = this->get_override( "beginOperate" ) )
            func_beginOperate( boost::python::ptr(prg) );
        else{
            this->osgParticle::SinkOperator::beginOperate( boost::python::ptr(prg) );
        }
    }
    
    void default_beginOperate( ::osgParticle::Program * prg ) {
        osgParticle::SinkOperator::beginOperate( boost::python::ptr(prg) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgParticle::SinkOperator::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgParticle::SinkOperator::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgParticle::SinkOperator::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgParticle::SinkOperator::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgParticle::SinkOperator::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgParticle::SinkOperator::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgParticle::SinkOperator::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgParticle::SinkOperator::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgParticle::SinkOperator::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgParticle::SinkOperator::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual void endOperate(  ) {
        if( bp::override func_endOperate = this->get_override( "endOperate" ) )
            func_endOperate(  );
        else{
            this->osgParticle::DomainOperator::endOperate(  );
        }
    }
    
    void default_endOperate(  ) {
        osgParticle::DomainOperator::endOperate( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void operate( ::osgParticle::Particle * P, double dt ) {
        if( bp::override func_operate = this->get_override( "operate" ) )
            func_operate( boost::python::ptr(P), dt );
        else{
            this->osgParticle::DomainOperator::operate( boost::python::ptr(P), dt );
        }
    }
    
    void default_operate( ::osgParticle::Particle * P, double dt ) {
        osgParticle::DomainOperator::operate( boost::python::ptr(P), dt );
    }

    virtual void operateParticles( ::osgParticle::ParticleSystem * ps, double dt ) {
        if( bp::override func_operateParticles = this->get_override( "operateParticles" ) )
            func_operateParticles( boost::python::ptr(ps), dt );
        else{
            this->osgParticle::Operator::operateParticles( boost::python::ptr(ps), dt );
        }
    }
    
    void default_operateParticles( ::osgParticle::ParticleSystem * ps, double dt ) {
        osgParticle::Operator::operateParticles( boost::python::ptr(ps), dt );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_SinkOperator_class(){

    { //::osgParticle::SinkOperator
        typedef bp::class_< SinkOperator_wrapper, bp::bases< osgParticle::DomainOperator >, osg::ref_ptr< SinkOperator_wrapper >, boost::noncopyable > SinkOperator_exposer_t;
        SinkOperator_exposer_t SinkOperator_exposer = SinkOperator_exposer_t( "SinkOperator", "\n A sink operator kills particles if positions or velocities inside/outside the specified domain.\n    Refer to David McAllisters Particle System API (http://www.particlesystems.org)\n", bp::no_init );
        bp::scope SinkOperator_scope( SinkOperator_exposer );
        bp::enum_< osgParticle::SinkOperator::SinkStrategy>("SinkStrategy")
            .value("SINK_INSIDE", osgParticle::SinkOperator::SINK_INSIDE)
            .value("SINK_OUTSIDE", osgParticle::SinkOperator::SINK_OUTSIDE)
            .export_values()
            ;
        bp::enum_< osgParticle::SinkOperator::SinkTarget>("SinkTarget")
            .value("SINK_POSITION", osgParticle::SinkOperator::SINK_POSITION)
            .value("SINK_VELOCITY", osgParticle::SinkOperator::SINK_VELOCITY)
            .value("SINK_ANGULAR_VELOCITY", osgParticle::SinkOperator::SINK_ANGULAR_VELOCITY)
            .export_values()
            ;
        SinkOperator_exposer.def( bp::init< >() );
        { //::osgParticle::SinkOperator::beginOperate
        
            typedef void ( ::osgParticle::SinkOperator::*beginOperate_function_type )( ::osgParticle::Program * ) ;
            typedef void ( SinkOperator_wrapper::*default_beginOperate_function_type )( ::osgParticle::Program * ) ;
            
            SinkOperator_exposer.def( 
                "beginOperate"
                , beginOperate_function_type(&::osgParticle::SinkOperator::beginOperate)
                , default_beginOperate_function_type(&SinkOperator_wrapper::default_beginOperate)
                , ( bp::arg("prg") ) );
        
        }
        { //::osgParticle::SinkOperator::className
        
            typedef char const * ( ::osgParticle::SinkOperator::*className_function_type )(  ) const;
            typedef char const * ( SinkOperator_wrapper::*default_className_function_type )(  ) const;
            
            SinkOperator_exposer.def( 
                "className"
                , className_function_type(&::osgParticle::SinkOperator::className)
                , default_className_function_type(&SinkOperator_wrapper::default_className) );
        
        }
        { //::osgParticle::SinkOperator::clone
        
            typedef ::osg::Object * ( ::osgParticle::SinkOperator::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( SinkOperator_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            SinkOperator_exposer.def( 
                "clone"
                , clone_function_type(&::osgParticle::SinkOperator::clone)
                , default_clone_function_type(&SinkOperator_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgParticle::SinkOperator::cloneType
        
            typedef ::osg::Object * ( ::osgParticle::SinkOperator::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( SinkOperator_wrapper::*default_cloneType_function_type )(  ) const;
            
            SinkOperator_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgParticle::SinkOperator::cloneType)
                , default_cloneType_function_type(&SinkOperator_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgParticle::SinkOperator::getSinkStrategy
        
            typedef ::osgParticle::SinkOperator::SinkStrategy ( ::osgParticle::SinkOperator::*getSinkStrategy_function_type )(  ) const;
            
            SinkOperator_exposer.def( 
                "getSinkStrategy"
                , getSinkStrategy_function_type( &::osgParticle::SinkOperator::getSinkStrategy )
                , " Get the sink strategy" );
        
        }
        { //::osgParticle::SinkOperator::getSinkTarget
        
            typedef ::osgParticle::SinkOperator::SinkTarget ( ::osgParticle::SinkOperator::*getSinkTarget_function_type )(  ) const;
            
            SinkOperator_exposer.def( 
                "getSinkTarget"
                , getSinkTarget_function_type( &::osgParticle::SinkOperator::getSinkTarget )
                , " Get the sink strategy" );
        
        }
        { //::osgParticle::SinkOperator::isSameKindAs
        
            typedef bool ( ::osgParticle::SinkOperator::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( SinkOperator_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            SinkOperator_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgParticle::SinkOperator::isSameKindAs)
                , default_isSameKindAs_function_type(&SinkOperator_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgParticle::SinkOperator::libraryName
        
            typedef char const * ( ::osgParticle::SinkOperator::*libraryName_function_type )(  ) const;
            typedef char const * ( SinkOperator_wrapper::*default_libraryName_function_type )(  ) const;
            
            SinkOperator_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgParticle::SinkOperator::libraryName)
                , default_libraryName_function_type(&SinkOperator_wrapper::default_libraryName) );
        
        }
        { //::osgParticle::SinkOperator::setSinkStrategy
        
            typedef void ( ::osgParticle::SinkOperator::*setSinkStrategy_function_type )( ::osgParticle::SinkOperator::SinkStrategy ) ;
            
            SinkOperator_exposer.def( 
                "setSinkStrategy"
                , setSinkStrategy_function_type( &::osgParticle::SinkOperator::setSinkStrategy )
                , ( bp::arg("ss") )
                , " Set the sink strategy" );
        
        }
        { //::osgParticle::SinkOperator::setSinkTarget
        
            typedef void ( ::osgParticle::SinkOperator::*setSinkTarget_function_type )( ::osgParticle::SinkOperator::SinkTarget ) ;
            
            SinkOperator_exposer.def( 
                "setSinkTarget"
                , setSinkTarget_function_type( &::osgParticle::SinkOperator::setSinkTarget )
                , ( bp::arg("so") )
                , " Set the sink strategy" );
        
        }
        { //::osgParticle::DomainOperator::endOperate
        
            typedef void ( ::osgParticle::DomainOperator::*endOperate_function_type )(  ) ;
            typedef void ( SinkOperator_wrapper::*default_endOperate_function_type )(  ) ;
            
            SinkOperator_exposer.def( 
                "endOperate"
                , endOperate_function_type(&::osgParticle::DomainOperator::endOperate)
                , default_endOperate_function_type(&SinkOperator_wrapper::default_endOperate) );
        
        }
        { //::osgParticle::DomainOperator::operate
        
            typedef void ( ::osgParticle::DomainOperator::*operate_function_type )( ::osgParticle::Particle *,double ) ;
            typedef void ( SinkOperator_wrapper::*default_operate_function_type )( ::osgParticle::Particle *,double ) ;
            
            SinkOperator_exposer.def( 
                "operate"
                , operate_function_type(&::osgParticle::DomainOperator::operate)
                , default_operate_function_type(&SinkOperator_wrapper::default_operate)
                , ( bp::arg("P"), bp::arg("dt") ) );
        
        }
        { //::osgParticle::Operator::operateParticles
        
            typedef void ( ::osgParticle::Operator::*operateParticles_function_type )( ::osgParticle::ParticleSystem *,double ) ;
            typedef void ( SinkOperator_wrapper::*default_operateParticles_function_type )( ::osgParticle::ParticleSystem *,double ) ;
            
            SinkOperator_exposer.def( 
                "operateParticles"
                , operateParticles_function_type(&::osgParticle::Operator::operateParticles)
                , default_operateParticles_function_type(&SinkOperator_wrapper::default_operateParticles)
                , ( bp::arg("ps"), bp::arg("dt") ) );
        
        }
    }

}
