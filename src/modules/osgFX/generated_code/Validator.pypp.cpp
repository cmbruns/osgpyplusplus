// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgFX.h"
#include "wrap_referenced.h"
#include "Validator.pypp.hpp"

namespace bp = boost::python;

struct Validator_wrapper : osgFX::Validator, bp::wrapper< osgFX::Validator > {

    Validator_wrapper( )
    : osgFX::Validator( )
      , bp::wrapper< osgFX::Validator >(){
        // null constructor
    
    }

    Validator_wrapper(::osgFX::Effect * effect )
    : osgFX::Validator( boost::python::ptr(effect) )
      , bp::wrapper< osgFX::Validator >(){
        // constructor
    
    }

    virtual void apply( ::osg::State & state ) const  {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(state) );
        else{
            this->osgFX::Validator::apply( boost::ref(state) );
        }
    }
    
    void default_apply( ::osg::State & state ) const  {
        osgFX::Validator::apply( boost::ref(state) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgFX::Validator::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgFX::Validator::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgFX::Validator::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgFX::Validator::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgFX::Validator::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgFX::Validator::cloneType( );
    }

    virtual void compileGLObjects( ::osg::State & state ) const  {
        if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
            func_compileGLObjects( boost::ref(state) );
        else{
            this->osgFX::Validator::compileGLObjects( boost::ref(state) );
        }
    }
    
    void default_compileGLObjects( ::osg::State & state ) const  {
        osgFX::Validator::compileGLObjects( boost::ref(state) );
    }

    virtual ::osg::StateAttribute::Type getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->osgFX::Validator::getType(  );
        }
    }
    
    ::osg::StateAttribute::Type default_getType(  ) const  {
        return osgFX::Validator::getType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgFX::Validator::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgFX::Validator::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgFX::Validator::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgFX::Validator::libraryName( );
    }

    virtual ::osg::Texture * asTexture(  ) {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::StateAttribute::asTexture(  );
        }
    }
    
    ::osg::Texture * default_asTexture(  ) {
        return osg::StateAttribute::asTexture( );
    }

    virtual ::osg::Texture const * asTexture(  ) const  {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::StateAttribute::asTexture(  );
        }
    }
    
    ::osg::Texture const * default_asTexture(  ) const  {
        return osg::StateAttribute::asTexture( );
    }

    virtual bool checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        if( bp::override func_checkValidityOfAssociatedModes = this->get_override( "checkValidityOfAssociatedModes" ) )
            return func_checkValidityOfAssociatedModes( boost::ref(arg0) );
        else{
            return this->osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
        }
    }
    
    bool default_checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        return osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual unsigned int getMember(  ) const  {
        if( bp::override func_getMember = this->get_override( "getMember" ) )
            return func_getMember(  );
        else{
            return this->osg::StateAttribute::getMember(  );
        }
    }
    
    unsigned int default_getMember(  ) const  {
        return osg::StateAttribute::getMember( );
    }

    virtual bool getModeUsage( ::osg::StateAttribute::ModeUsage & arg0 ) const  {
        if( bp::override func_getModeUsage = this->get_override( "getModeUsage" ) )
            return func_getModeUsage( boost::ref(arg0) );
        else{
            return this->osg::StateAttribute::getModeUsage( boost::ref(arg0) );
        }
    }
    
    bool default_getModeUsage( ::osg::StateAttribute::ModeUsage & arg0 ) const  {
        return osg::StateAttribute::getModeUsage( boost::ref(arg0) );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool isTextureAttribute(  ) const  {
        if( bp::override func_isTextureAttribute = this->get_override( "isTextureAttribute" ) )
            return func_isTextureAttribute(  );
        else{
            return this->osg::StateAttribute::isTextureAttribute(  );
        }
    }
    
    bool default_isTextureAttribute(  ) const  {
        return osg::StateAttribute::isTextureAttribute( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::StateAttribute::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::StateAttribute::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_Validator_class(){

    { //::osgFX::Validator
        typedef bp::class_< Validator_wrapper, bp::bases< ::osg::StateAttribute >, osg::ref_ptr< Validator_wrapper >, boost::noncopyable > Validator_exposer_t;
        Validator_exposer_t Validator_exposer = Validator_exposer_t( "Validator", "\n     This class is used internally by osgFX::Effect to choose between different\n     techniques dynamically. The apply() method will call each techniques\n     validate() method and store the results in a buffered array. The Effect\n     class will then choose the first technique that could be validated in all\n     active rendering contexts.\n", bp::no_init );
        bp::scope Validator_scope( Validator_exposer );
        Validator_exposer.def( bp::init< >("\n     This class is used internally by osgFX::Effect to choose between different\n     techniques dynamically. The apply() method will call each techniques\n     validate() method and store the results in a buffered array. The Effect\n     class will then choose the first technique that could be validated in all\n     active rendering contexts.\n") );
        Validator_exposer.def( bp::init< osgFX::Effect * >(( bp::arg("effect") )) );
        bp::implicitly_convertible< osgFX::Effect *, osgFX::Validator >();
        { //::osgFX::Validator::apply
        
            typedef void ( ::osgFX::Validator::*apply_function_type )( ::osg::State & ) const;
            typedef void ( Validator_wrapper::*default_apply_function_type )( ::osg::State & ) const;
            
            Validator_exposer.def( 
                "apply"
                , apply_function_type(&::osgFX::Validator::apply)
                , default_apply_function_type(&Validator_wrapper::default_apply)
                , ( bp::arg("state") ) );
        
        }
        { //::osgFX::Validator::className
        
            typedef char const * ( ::osgFX::Validator::*className_function_type )(  ) const;
            typedef char const * ( Validator_wrapper::*default_className_function_type )(  ) const;
            
            Validator_exposer.def( 
                "className"
                , className_function_type(&::osgFX::Validator::className)
                , default_className_function_type(&Validator_wrapper::default_className) );
        
        }
        { //::osgFX::Validator::clone
        
            typedef ::osg::Object * ( ::osgFX::Validator::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Validator_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Validator_exposer.def( 
                "clone"
                , clone_function_type(&::osgFX::Validator::clone)
                , default_clone_function_type(&Validator_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgFX::Validator::cloneType
        
            typedef ::osg::Object * ( ::osgFX::Validator::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Validator_wrapper::*default_cloneType_function_type )(  ) const;
            
            Validator_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgFX::Validator::cloneType)
                , default_cloneType_function_type(&Validator_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgFX::Validator::compileGLObjects
        
            typedef void ( ::osgFX::Validator::*compileGLObjects_function_type )( ::osg::State & ) const;
            typedef void ( Validator_wrapper::*default_compileGLObjects_function_type )( ::osg::State & ) const;
            
            Validator_exposer.def( 
                "compileGLObjects"
                , compileGLObjects_function_type(&::osgFX::Validator::compileGLObjects)
                , default_compileGLObjects_function_type(&Validator_wrapper::default_compileGLObjects)
                , ( bp::arg("state") ) );
        
        }
        { //::osgFX::Validator::disable
        
            typedef void ( ::osgFX::Validator::*disable_function_type )(  ) ;
            
            Validator_exposer.def( 
                "disable"
                , disable_function_type( &::osgFX::Validator::disable ) );
        
        }
        { //::osgFX::Validator::getType
        
            typedef ::osg::StateAttribute::Type ( ::osgFX::Validator::*getType_function_type )(  ) const;
            typedef ::osg::StateAttribute::Type ( Validator_wrapper::*default_getType_function_type )(  ) const;
            
            Validator_exposer.def( 
                "getType"
                , getType_function_type(&::osgFX::Validator::getType)
                , default_getType_function_type(&Validator_wrapper::default_getType) );
        
        }
        { //::osgFX::Validator::isSameKindAs
        
            typedef bool ( ::osgFX::Validator::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Validator_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Validator_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgFX::Validator::isSameKindAs)
                , default_isSameKindAs_function_type(&Validator_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgFX::Validator::libraryName
        
            typedef char const * ( ::osgFX::Validator::*libraryName_function_type )(  ) const;
            typedef char const * ( Validator_wrapper::*default_libraryName_function_type )(  ) const;
            
            Validator_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgFX::Validator::libraryName)
                , default_libraryName_function_type(&Validator_wrapper::default_libraryName) );
        
        }
    }

}
