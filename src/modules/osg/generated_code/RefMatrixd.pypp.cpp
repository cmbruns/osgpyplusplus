// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "RefMatrixd.pypp.hpp"

namespace bp = boost::python;

struct RefMatrixd_wrapper : osg::RefMatrixd, bp::wrapper< osg::RefMatrixd > {

    RefMatrixd_wrapper( )
    : osg::RefMatrixd( )
      , bp::wrapper< osg::RefMatrixd >(){
        // null constructor
    
    }

    RefMatrixd_wrapper(::osg::Matrixd const & other )
    : osg::RefMatrixd( boost::ref(other) )
      , bp::wrapper< osg::RefMatrixd >(){
        // constructor
    
    }

    RefMatrixd_wrapper(::osg::Matrixf const & other )
    : osg::RefMatrixd( boost::ref(other) )
      , bp::wrapper< osg::RefMatrixd >(){
        // constructor
    
    }

    RefMatrixd_wrapper(double const * const def )
    : osg::RefMatrixd( def )
      , bp::wrapper< osg::RefMatrixd >(){
        // constructor
    
    }

    RefMatrixd_wrapper(double a00, double a01, double a02, double a03, double a10, double a11, double a12, double a13, double a20, double a21, double a22, double a23, double a30, double a31, double a32, double a33 )
    : osg::RefMatrixd( a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33 )
      , bp::wrapper< osg::RefMatrixd >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::RefMatrixd::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::RefMatrixd::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & arg0 ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(arg0) );
        else{
            return this->osg::RefMatrixd::clone( boost::ref(arg0) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & arg0 ) const  {
        return osg::RefMatrixd::clone( boost::ref(arg0) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::RefMatrixd::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::RefMatrixd::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::RefMatrixd::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::RefMatrixd::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::RefMatrixd::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::RefMatrixd::libraryName( );
    }

};

void register_RefMatrixd_class(){

    { //::osg::RefMatrixd
        typedef bp::class_< RefMatrixd_wrapper, bp::bases< osg::Object, osg::Matrixd >, osg::ref_ptr< ::osg::RefMatrixd > > RefMatrixd_exposer_t;
        RefMatrixd_exposer_t RefMatrixd_exposer = RefMatrixd_exposer_t( "RefMatrixd", bp::no_init );
        bp::scope RefMatrixd_scope( RefMatrixd_exposer );
        RefMatrixd_exposer.def( bp::init< >() );
        RefMatrixd_exposer.def( bp::init< osg::Matrixd const & >(( bp::arg("other") )) );
        bp::implicitly_convertible< osg::Matrixd const &, osg::RefMatrixd >();
        RefMatrixd_exposer.def( bp::init< osg::Matrixf const & >(( bp::arg("other") )) );
        bp::implicitly_convertible< osg::Matrixf const &, osg::RefMatrixd >();
        RefMatrixd_exposer.def( bp::init< double const * >(( bp::arg("def") )) );
        bp::implicitly_convertible< double const * const, osg::RefMatrixd >();
        RefMatrixd_exposer.def( bp::init< double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double >(( bp::arg("a00"), bp::arg("a01"), bp::arg("a02"), bp::arg("a03"), bp::arg("a10"), bp::arg("a11"), bp::arg("a12"), bp::arg("a13"), bp::arg("a20"), bp::arg("a21"), bp::arg("a22"), bp::arg("a23"), bp::arg("a30"), bp::arg("a31"), bp::arg("a32"), bp::arg("a33") )) );
        { //::osg::RefMatrixd::className
        
            typedef char const * ( ::osg::RefMatrixd::*className_function_type )(  ) const;
            typedef char const * ( RefMatrixd_wrapper::*default_className_function_type )(  ) const;
            
            RefMatrixd_exposer.def( 
                "className"
                , className_function_type(&::osg::RefMatrixd::className)
                , default_className_function_type(&RefMatrixd_wrapper::default_className) );
        
        }
        { //::osg::RefMatrixd::clone
        
            typedef ::osg::Object * ( ::osg::RefMatrixd::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( RefMatrixd_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            RefMatrixd_exposer.def( 
                "clone"
                , clone_function_type(&::osg::RefMatrixd::clone)
                , default_clone_function_type(&RefMatrixd_wrapper::default_clone)
                , ( bp::arg("arg0") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::RefMatrixd::cloneType
        
            typedef ::osg::Object * ( ::osg::RefMatrixd::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( RefMatrixd_wrapper::*default_cloneType_function_type )(  ) const;
            
            RefMatrixd_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::RefMatrixd::cloneType)
                , default_cloneType_function_type(&RefMatrixd_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::RefMatrixd::isSameKindAs
        
            typedef bool ( ::osg::RefMatrixd::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( RefMatrixd_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            RefMatrixd_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::RefMatrixd::isSameKindAs)
                , default_isSameKindAs_function_type(&RefMatrixd_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::RefMatrixd::libraryName
        
            typedef char const * ( ::osg::RefMatrixd::*libraryName_function_type )(  ) const;
            typedef char const * ( RefMatrixd_wrapper::*default_libraryName_function_type )(  ) const;
            
            RefMatrixd_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::RefMatrixd::libraryName)
                , default_libraryName_function_type(&RefMatrixd_wrapper::default_libraryName) );
        
        }
        RefMatrixd_exposer.def( bp::self_ns::str(bp::self) );
    }

}
