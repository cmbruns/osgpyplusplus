// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "Observer.pypp.hpp"

namespace bp = boost::python;

struct Observer_wrapper : osg::Observer, bp::wrapper< osg::Observer > {

    Observer_wrapper(osg::Observer const & arg )
    : osg::Observer( arg )
      , bp::wrapper< osg::Observer >(){
        // copy constructor
        
    }

    Observer_wrapper( )
    : osg::Observer( )
      , bp::wrapper< osg::Observer >(){
        // null constructor
    
    }

    virtual void objectDeleted( void * arg0 ) {
        if( bp::override func_objectDeleted = this->get_override( "objectDeleted" ) )
            func_objectDeleted( arg0 );
        else{
            this->osg::Observer::objectDeleted( arg0 );
        }
    }
    
    void default_objectDeleted( void * arg0 ) {
        osg::Observer::objectDeleted( arg0 );
    }

};

void register_Observer_class(){

    bp::class_< Observer_wrapper >( "Observer", "\n Observer base class for tracking when objects are unreferenced (their reference count goes to 0) and are being deleted.\n", bp::init< >("\n Observer base class for tracking when objects are unreferenced (their reference count goes to 0) and are being deleted.\n") )    
        .def( 
            "objectDeleted"
            , (void ( ::osg::Observer::* )( void * ) )(&::osg::Observer::objectDeleted)
            , (void ( Observer_wrapper::* )( void * ) )(&Observer_wrapper::default_objectDeleted)
            , ( bp::arg("arg0") ) );

}
