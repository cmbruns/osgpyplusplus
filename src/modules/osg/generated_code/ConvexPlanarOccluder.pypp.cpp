// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "ConvexPlanarOccluder.pypp.hpp"

namespace bp = boost::python;

struct ConvexPlanarOccluder_wrapper : osg::ConvexPlanarOccluder, bp::wrapper< osg::ConvexPlanarOccluder > {

    ConvexPlanarOccluder_wrapper( )
    : osg::ConvexPlanarOccluder( )
      , bp::wrapper< osg::ConvexPlanarOccluder >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::ConvexPlanarOccluder::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::ConvexPlanarOccluder::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::ConvexPlanarOccluder::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::ConvexPlanarOccluder::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::ConvexPlanarOccluder::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::ConvexPlanarOccluder::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::ConvexPlanarOccluder::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::ConvexPlanarOccluder::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::ConvexPlanarOccluder::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::ConvexPlanarOccluder::libraryName( );
    }

};

void register_ConvexPlanarOccluder_class(){

    bp::class_< ConvexPlanarOccluder_wrapper, bp::bases< osg::Object >, osg::ref_ptr< ::osg::ConvexPlanarOccluder >, boost::noncopyable >( "ConvexPlanarOccluder", "\n A class for representing convex clipping volumes made up of several ConvexPlanarPolygon.\n", bp::no_init )    
        .def( bp::init< >("\n A class for representing convex clipping volumes made up of several ConvexPlanarPolygon.\n") )    
        .def( 
            "addHole"
            , (void ( ::osg::ConvexPlanarOccluder::* )( ::osg::ConvexPlanarPolygon const & ) )( &::osg::ConvexPlanarOccluder::addHole )
            , ( bp::arg("cpp") ) )    
        .def( 
            "className"
            , (char const * ( ::osg::ConvexPlanarOccluder::* )(  ) const)(&::osg::ConvexPlanarOccluder::className)
            , (char const * ( ConvexPlanarOccluder_wrapper::* )(  ) const)(&ConvexPlanarOccluder_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osg::ConvexPlanarOccluder::* )( ::osg::CopyOp const & ) const)(&::osg::ConvexPlanarOccluder::clone)
            , (::osg::Object * ( ConvexPlanarOccluder_wrapper::* )( ::osg::CopyOp const & ) const)(&ConvexPlanarOccluder_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osg::ConvexPlanarOccluder::* )(  ) const)(&::osg::ConvexPlanarOccluder::cloneType)
            , (::osg::Object * ( ConvexPlanarOccluder_wrapper::* )(  ) const)(&ConvexPlanarOccluder_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getHoleList"
            , (::std::vector< osg::ConvexPlanarPolygon > & ( ::osg::ConvexPlanarOccluder::* )(  ) )( &::osg::ConvexPlanarOccluder::getHoleList )
            , bp::return_internal_reference< >() )    
        .def( 
            "getHoleList"
            , (::std::vector< osg::ConvexPlanarPolygon > const & ( ::osg::ConvexPlanarOccluder::* )(  ) const)( &::osg::ConvexPlanarOccluder::getHoleList )
            , bp::return_internal_reference< >() )    
        .def( 
            "getOccluder"
            , (::osg::ConvexPlanarPolygon & ( ::osg::ConvexPlanarOccluder::* )(  ) )( &::osg::ConvexPlanarOccluder::getOccluder )
            , bp::return_internal_reference< >() )    
        .def( 
            "getOccluder"
            , (::osg::ConvexPlanarPolygon const & ( ::osg::ConvexPlanarOccluder::* )(  ) const)( &::osg::ConvexPlanarOccluder::getOccluder )
            , bp::return_internal_reference< >() )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osg::ConvexPlanarOccluder::* )( ::osg::Object const * ) const)(&::osg::ConvexPlanarOccluder::isSameKindAs)
            , (bool ( ConvexPlanarOccluder_wrapper::* )( ::osg::Object const * ) const)(&ConvexPlanarOccluder_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osg::ConvexPlanarOccluder::* )(  ) const)(&::osg::ConvexPlanarOccluder::libraryName)
            , (char const * ( ConvexPlanarOccluder_wrapper::* )(  ) const)(&ConvexPlanarOccluder_wrapper::default_libraryName) )    
        .def( 
            "setHoleList"
            , (void ( ::osg::ConvexPlanarOccluder::* )( ::std::vector< osg::ConvexPlanarPolygon > const & ) )( &::osg::ConvexPlanarOccluder::setHoleList )
            , ( bp::arg("holeList") ) )    
        .def( 
            "setOccluder"
            , (void ( ::osg::ConvexPlanarOccluder::* )( ::osg::ConvexPlanarPolygon const & ) )( &::osg::ConvexPlanarOccluder::setOccluder )
            , ( bp::arg("cpp") ) );

}
