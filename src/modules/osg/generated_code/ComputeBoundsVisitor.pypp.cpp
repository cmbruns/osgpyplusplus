// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "ComputeBoundsVisitor.pypp.hpp"

namespace bp = boost::python;

struct ComputeBoundsVisitor_wrapper : osg::ComputeBoundsVisitor, bp::wrapper< osg::ComputeBoundsVisitor > {

    ComputeBoundsVisitor_wrapper(::osg::NodeVisitor::TraversalMode traversalMode=::osg::NodeVisitor::TRAVERSE_ALL_CHILDREN )
    : osg::ComputeBoundsVisitor( traversalMode )
      , bp::wrapper< osg::ComputeBoundsVisitor >(){
        // constructor
    
    }

    virtual void apply( ::osg::Node & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::ComputeBoundsVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Node & node ) {
        osg::ComputeBoundsVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Transform & transform ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(transform) );
        else{
            this->osg::ComputeBoundsVisitor::apply( boost::ref(transform) );
        }
    }
    
    void default_apply( ::osg::Transform & transform ) {
        osg::ComputeBoundsVisitor::apply( boost::ref(transform) );
    }

    virtual void apply( ::osg::Geode & geode ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(geode) );
        else{
            this->osg::ComputeBoundsVisitor::apply( boost::ref(geode) );
        }
    }
    
    void default_apply( ::osg::Geode & geode ) {
        osg::ComputeBoundsVisitor::apply( boost::ref(geode) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::ComputeBoundsVisitor::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::ComputeBoundsVisitor::className( );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::ComputeBoundsVisitor::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::ComputeBoundsVisitor::libraryName( );
    }

    virtual void reset(  ) {
        if( bp::override func_reset = this->get_override( "reset" ) )
            func_reset(  );
        else{
            this->osg::ComputeBoundsVisitor::reset(  );
        }
    }
    
    void default_reset(  ) {
        osg::ComputeBoundsVisitor::reset( );
    }

    virtual void apply( ::osg::Billboard & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Billboard & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Group & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Group & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::ProxyNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::ProxyNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Projection & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Projection & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::CoordinateSystemNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::CoordinateSystemNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::ClipNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::ClipNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::TexGenNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::TexGenNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::LightSource & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::LightSource & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Camera & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Camera & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::CameraView & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::CameraView & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::MatrixTransform & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::MatrixTransform & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::PositionAttitudeTransform & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::PositionAttitudeTransform & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Switch & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Switch & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Sequence & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Sequence & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::LOD & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::LOD & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::PagedLOD & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::PagedLOD & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::ClearNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::ClearNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::OccluderNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::OccluderNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::OcclusionQueryNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::OcclusionQueryNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
            return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        else{
            return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    }
    
    float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
    }

    virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
            return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
        else{
            return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    }
    
    float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
    }

    virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
            return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
        else{
            return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    }
    
    float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
    }

    virtual ::osg::Vec3 getEyePoint(  ) const  {
        if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
            return func_getEyePoint(  );
        else{
            return this->osg::NodeVisitor::getEyePoint(  );
        }
    }
    
    ::osg::Vec3 default_getEyePoint(  ) const  {
        return osg::NodeVisitor::getEyePoint( );
    }

    virtual ::osg::Vec3 getViewPoint(  ) const  {
        if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
            return func_getViewPoint(  );
        else{
            return this->osg::NodeVisitor::getViewPoint(  );
        }
    }
    
    ::osg::Vec3 default_getViewPoint(  ) const  {
        return osg::NodeVisitor::getViewPoint( );
    }

};

void register_ComputeBoundsVisitor_class(){

    { //::osg::ComputeBoundsVisitor
        typedef bp::class_< ComputeBoundsVisitor_wrapper, bp::bases< osg::NodeVisitor >, osg::ref_ptr< ComputeBoundsVisitor_wrapper >, boost::noncopyable > ComputeBoundsVisitor_exposer_t;
        ComputeBoundsVisitor_exposer_t ComputeBoundsVisitor_exposer = ComputeBoundsVisitor_exposer_t( "ComputeBoundsVisitor", bp::init< bp::optional< osg::NodeVisitor::TraversalMode > >(( bp::arg("traversalMode")=::osg::NodeVisitor::TRAVERSE_ALL_CHILDREN )) );
        bp::scope ComputeBoundsVisitor_scope( ComputeBoundsVisitor_exposer );
        bp::implicitly_convertible< osg::NodeVisitor::TraversalMode, osg::ComputeBoundsVisitor >();
        { //::osg::ComputeBoundsVisitor::apply
        
            typedef void ( ::osg::ComputeBoundsVisitor::*apply_function_type )( ::osg::Node & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::Node & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::ComputeBoundsVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::ComputeBoundsVisitor::apply
        
            typedef void ( ::osg::ComputeBoundsVisitor::*apply_function_type )( ::osg::Transform & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::Transform & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::ComputeBoundsVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("transform") ) );
        
        }
        { //::osg::ComputeBoundsVisitor::apply
        
            typedef void ( ::osg::ComputeBoundsVisitor::*apply_function_type )( ::osg::Geode & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::Geode & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::ComputeBoundsVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("geode") ) );
        
        }
        { //::osg::ComputeBoundsVisitor::applyDrawable
        
            typedef void ( ::osg::ComputeBoundsVisitor::*applyDrawable_function_type )( ::osg::Drawable * ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "applyDrawable"
                , applyDrawable_function_type( &::osg::ComputeBoundsVisitor::applyDrawable )
                , ( bp::arg("drawable") ) );
        
        }
        { //::osg::ComputeBoundsVisitor::className
        
            typedef char const * ( ::osg::ComputeBoundsVisitor::*className_function_type )(  ) const;
            typedef char const * ( ComputeBoundsVisitor_wrapper::*default_className_function_type )(  ) const;
            
            ComputeBoundsVisitor_exposer.def( 
                "className"
                , className_function_type(&::osg::ComputeBoundsVisitor::className)
                , default_className_function_type(&ComputeBoundsVisitor_wrapper::default_className) );
        
        }
        { //::osg::ComputeBoundsVisitor::getBase
        
            typedef void ( ::osg::ComputeBoundsVisitor::*getBase_function_type )( ::osg::Polytope &,float ) const;
            
            ComputeBoundsVisitor_exposer.def( 
                "getBase"
                , getBase_function_type( &::osg::ComputeBoundsVisitor::getBase )
                , ( bp::arg("polytope"), bp::arg("margin")=1.000000000000000055511151231257827021181583404541015625e-1 ) );
        
        }
        { //::osg::ComputeBoundsVisitor::getBoundingBox
        
            typedef ::osg::BoundingBox & ( ::osg::ComputeBoundsVisitor::*getBoundingBox_function_type )(  ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "getBoundingBox"
                , getBoundingBox_function_type( &::osg::ComputeBoundsVisitor::getBoundingBox )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::ComputeBoundsVisitor::getPolytope
        
            typedef void ( ::osg::ComputeBoundsVisitor::*getPolytope_function_type )( ::osg::Polytope &,float ) const;
            
            ComputeBoundsVisitor_exposer.def( 
                "getPolytope"
                , getPolytope_function_type( &::osg::ComputeBoundsVisitor::getPolytope )
                , ( bp::arg("polytope"), bp::arg("margin")=1.000000000000000055511151231257827021181583404541015625e-1 ) );
        
        }
        { //::osg::ComputeBoundsVisitor::libraryName
        
            typedef char const * ( ::osg::ComputeBoundsVisitor::*libraryName_function_type )(  ) const;
            typedef char const * ( ComputeBoundsVisitor_wrapper::*default_libraryName_function_type )(  ) const;
            
            ComputeBoundsVisitor_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::ComputeBoundsVisitor::libraryName)
                , default_libraryName_function_type(&ComputeBoundsVisitor_wrapper::default_libraryName) );
        
        }
        { //::osg::ComputeBoundsVisitor::popMatrix
        
            typedef void ( ::osg::ComputeBoundsVisitor::*popMatrix_function_type )(  ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "popMatrix"
                , popMatrix_function_type( &::osg::ComputeBoundsVisitor::popMatrix ) );
        
        }
        { //::osg::ComputeBoundsVisitor::pushMatrix
        
            typedef void ( ::osg::ComputeBoundsVisitor::*pushMatrix_function_type )( ::osg::Matrix & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "pushMatrix"
                , pushMatrix_function_type( &::osg::ComputeBoundsVisitor::pushMatrix )
                , ( bp::arg("matrix") ) );
        
        }
        { //::osg::ComputeBoundsVisitor::reset
        
            typedef void ( ::osg::ComputeBoundsVisitor::*reset_function_type )(  ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_reset_function_type )(  ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "reset"
                , reset_function_type(&::osg::ComputeBoundsVisitor::reset)
                , default_reset_function_type(&ComputeBoundsVisitor_wrapper::default_reset) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type )( ::osg::Billboard & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::Billboard & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type )( ::osg::Group & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::Group & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type )( ::osg::ProxyNode & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::ProxyNode & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type )( ::osg::Projection & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::Projection & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type )( ::osg::CoordinateSystemNode & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::CoordinateSystemNode & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type )( ::osg::ClipNode & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::ClipNode & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type )( ::osg::TexGenNode & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::TexGenNode & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type )( ::osg::LightSource & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::LightSource & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type )( ::osg::Camera & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::Camera & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type )( ::osg::CameraView & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::CameraView & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type )( ::osg::MatrixTransform & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::MatrixTransform & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type )( ::osg::PositionAttitudeTransform & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::PositionAttitudeTransform & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type )( ::osg::Switch & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::Switch & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type )( ::osg::Sequence & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::Sequence & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type )( ::osg::LOD & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::LOD & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type )( ::osg::PagedLOD & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::PagedLOD & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type )( ::osg::ClearNode & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::ClearNode & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type )( ::osg::OccluderNode & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::OccluderNode & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::apply
        
            typedef void ( ::osg::NodeVisitor::*apply_function_type )( ::osg::OcclusionQueryNode & ) ;
            typedef void ( ComputeBoundsVisitor_wrapper::*default_apply_function_type )( ::osg::OcclusionQueryNode & ) ;
            
            ComputeBoundsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osg::NodeVisitor::apply)
                , default_apply_function_type(&ComputeBoundsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osg::NodeVisitor::getDistanceFromEyePoint
        
            typedef float ( ::osg::NodeVisitor::*getDistanceFromEyePoint_function_type )( ::osg::Vec3 const &,bool ) const;
            typedef float ( ComputeBoundsVisitor_wrapper::*default_getDistanceFromEyePoint_function_type )( ::osg::Vec3 const &,bool ) const;
            
            ComputeBoundsVisitor_exposer.def( 
                "getDistanceFromEyePoint"
                , getDistanceFromEyePoint_function_type(&::osg::NodeVisitor::getDistanceFromEyePoint)
                , default_getDistanceFromEyePoint_function_type(&ComputeBoundsVisitor_wrapper::default_getDistanceFromEyePoint)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osg::NodeVisitor::getDistanceToEyePoint
        
            typedef float ( ::osg::NodeVisitor::*getDistanceToEyePoint_function_type )( ::osg::Vec3 const &,bool ) const;
            typedef float ( ComputeBoundsVisitor_wrapper::*default_getDistanceToEyePoint_function_type )( ::osg::Vec3 const &,bool ) const;
            
            ComputeBoundsVisitor_exposer.def( 
                "getDistanceToEyePoint"
                , getDistanceToEyePoint_function_type(&::osg::NodeVisitor::getDistanceToEyePoint)
                , default_getDistanceToEyePoint_function_type(&ComputeBoundsVisitor_wrapper::default_getDistanceToEyePoint)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osg::NodeVisitor::getDistanceToViewPoint
        
            typedef float ( ::osg::NodeVisitor::*getDistanceToViewPoint_function_type )( ::osg::Vec3 const &,bool ) const;
            typedef float ( ComputeBoundsVisitor_wrapper::*default_getDistanceToViewPoint_function_type )( ::osg::Vec3 const &,bool ) const;
            
            ComputeBoundsVisitor_exposer.def( 
                "getDistanceToViewPoint"
                , getDistanceToViewPoint_function_type(&::osg::NodeVisitor::getDistanceToViewPoint)
                , default_getDistanceToViewPoint_function_type(&ComputeBoundsVisitor_wrapper::default_getDistanceToViewPoint)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osg::NodeVisitor::getEyePoint
        
            typedef ::osg::Vec3 ( ::osg::NodeVisitor::*getEyePoint_function_type )(  ) const;
            typedef ::osg::Vec3 ( ComputeBoundsVisitor_wrapper::*default_getEyePoint_function_type )(  ) const;
            
            ComputeBoundsVisitor_exposer.def( 
                "getEyePoint"
                , getEyePoint_function_type(&::osg::NodeVisitor::getEyePoint)
                , default_getEyePoint_function_type(&ComputeBoundsVisitor_wrapper::default_getEyePoint) );
        
        }
        { //::osg::NodeVisitor::getViewPoint
        
            typedef ::osg::Vec3 ( ::osg::NodeVisitor::*getViewPoint_function_type )(  ) const;
            typedef ::osg::Vec3 ( ComputeBoundsVisitor_wrapper::*default_getViewPoint_function_type )(  ) const;
            
            ComputeBoundsVisitor_exposer.def( 
                "getViewPoint"
                , getViewPoint_function_type(&::osg::NodeVisitor::getViewPoint)
                , default_getViewPoint_function_type(&ComputeBoundsVisitor_wrapper::default_getViewPoint) );
        
        }
    }

}
