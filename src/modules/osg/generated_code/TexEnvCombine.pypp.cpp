// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "TexEnvCombine.pypp.hpp"

namespace bp = boost::python;

struct TexEnvCombine_wrapper : osg::TexEnvCombine, bp::wrapper< osg::TexEnvCombine > {

    TexEnvCombine_wrapper( )
    : osg::TexEnvCombine( )
      , bp::wrapper< osg::TexEnvCombine >(){
        // null constructor
    
    }

    virtual void apply( ::osg::State & state ) const  {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(state) );
        else{
            this->osg::TexEnvCombine::apply( boost::ref(state) );
        }
    }
    
    void default_apply( ::osg::State & state ) const  {
        osg::TexEnvCombine::apply( boost::ref(state) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::TexEnvCombine::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::TexEnvCombine::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::TexEnvCombine::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::TexEnvCombine::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::TexEnvCombine::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::TexEnvCombine::cloneType( );
    }

    virtual ::osg::StateAttribute::Type getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->osg::TexEnvCombine::getType(  );
        }
    }
    
    ::osg::StateAttribute::Type default_getType(  ) const  {
        return osg::TexEnvCombine::getType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::TexEnvCombine::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::TexEnvCombine::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual bool isTextureAttribute(  ) const  {
        if( bp::override func_isTextureAttribute = this->get_override( "isTextureAttribute" ) )
            return func_isTextureAttribute(  );
        else{
            return this->osg::TexEnvCombine::isTextureAttribute(  );
        }
    }
    
    bool default_isTextureAttribute(  ) const  {
        return osg::TexEnvCombine::isTextureAttribute( );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::TexEnvCombine::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::TexEnvCombine::libraryName( );
    }

    virtual ::osg::Texture * asTexture(  ) {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::StateAttribute::asTexture(  );
        }
    }
    
    ::osg::Texture * default_asTexture(  ) {
        return osg::StateAttribute::asTexture( );
    }

    virtual ::osg::Texture const * asTexture(  ) const  {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::StateAttribute::asTexture(  );
        }
    }
    
    ::osg::Texture const * default_asTexture(  ) const  {
        return osg::StateAttribute::asTexture( );
    }

    virtual bool checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        if( bp::override func_checkValidityOfAssociatedModes = this->get_override( "checkValidityOfAssociatedModes" ) )
            return func_checkValidityOfAssociatedModes( boost::ref(arg0) );
        else{
            return this->osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
        }
    }
    
    bool default_checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        return osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
    }

    virtual void compileGLObjects( ::osg::State & arg0 ) const  {
        if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
            func_compileGLObjects( boost::ref(arg0) );
        else{
            this->osg::StateAttribute::compileGLObjects( boost::ref(arg0) );
        }
    }
    
    void default_compileGLObjects( ::osg::State & arg0 ) const  {
        osg::StateAttribute::compileGLObjects( boost::ref(arg0) );
    }

    virtual unsigned int getMember(  ) const  {
        if( bp::override func_getMember = this->get_override( "getMember" ) )
            return func_getMember(  );
        else{
            return this->osg::StateAttribute::getMember(  );
        }
    }
    
    unsigned int default_getMember(  ) const  {
        return osg::StateAttribute::getMember( );
    }

    virtual bool getModeUsage( ::osg::StateAttribute::ModeUsage & arg0 ) const  {
        if( bp::override func_getModeUsage = this->get_override( "getModeUsage" ) )
            return func_getModeUsage( boost::ref(arg0) );
        else{
            return this->osg::StateAttribute::getModeUsage( boost::ref(arg0) );
        }
    }
    
    bool default_getModeUsage( ::osg::StateAttribute::ModeUsage & arg0 ) const  {
        return osg::StateAttribute::getModeUsage( boost::ref(arg0) );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::StateAttribute::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::StateAttribute::resizeGLObjectBuffers( arg0 );
    }

};

void register_TexEnvCombine_class(){

    { //::osg::TexEnvCombine
        typedef bp::class_< TexEnvCombine_wrapper, bp::bases< osg::StateAttribute >, osg::ref_ptr< ::osg::TexEnvCombine >, boost::noncopyable > TexEnvCombine_exposer_t;
        TexEnvCombine_exposer_t TexEnvCombine_exposer = TexEnvCombine_exposer_t( "TexEnvCombine", "\n TexEnvCombine encapsulates the OpenGL glTexEnvCombine (texture\n environment) state.\n", bp::no_init );
        bp::scope TexEnvCombine_scope( TexEnvCombine_exposer );
        bp::enum_< osg::TexEnvCombine::CombineParam>("CombineParam")
            .value("REPLACE", osg::TexEnvCombine::REPLACE)
            .value("MODULATE", osg::TexEnvCombine::MODULATE)
            .value("ADD", osg::TexEnvCombine::ADD)
            .value("ADD_SIGNED", osg::TexEnvCombine::ADD_SIGNED)
            .value("INTERPOLATE", osg::TexEnvCombine::INTERPOLATE)
            .value("SUBTRACT", osg::TexEnvCombine::SUBTRACT)
            .value("DOT3_RGB", osg::TexEnvCombine::DOT3_RGB)
            .value("DOT3_RGBA", osg::TexEnvCombine::DOT3_RGBA)
            .export_values()
            ;
        bp::enum_< osg::TexEnvCombine::OperandParam>("OperandParam")
            .value("SRC_COLOR", osg::TexEnvCombine::SRC_COLOR)
            .value("ONE_MINUS_SRC_COLOR", osg::TexEnvCombine::ONE_MINUS_SRC_COLOR)
            .value("SRC_ALPHA", osg::TexEnvCombine::SRC_ALPHA)
            .value("ONE_MINUS_SRC_ALPHA", osg::TexEnvCombine::ONE_MINUS_SRC_ALPHA)
            .export_values()
            ;
        bp::enum_< osg::TexEnvCombine::SourceParam>("SourceParam")
            .value("CONSTANT", osg::TexEnvCombine::CONSTANT)
            .value("PRIMARY_COLOR", osg::TexEnvCombine::PRIMARY_COLOR)
            .value("PREVIOUS", osg::TexEnvCombine::PREVIOUS)
            .value("TEXTURE", osg::TexEnvCombine::TEXTURE)
            .value("TEXTURE0", osg::TexEnvCombine::TEXTURE0)
            .value("TEXTURE1", osg::TexEnvCombine::TEXTURE1)
            .value("TEXTURE2", osg::TexEnvCombine::TEXTURE2)
            .value("TEXTURE3", osg::TexEnvCombine::TEXTURE3)
            .value("TEXTURE4", osg::TexEnvCombine::TEXTURE4)
            .value("TEXTURE5", osg::TexEnvCombine::TEXTURE5)
            .value("TEXTURE6", osg::TexEnvCombine::TEXTURE6)
            .value("TEXTURE7", osg::TexEnvCombine::TEXTURE7)
            .export_values()
            ;
        TexEnvCombine_exposer.def( bp::init< >("\n TexEnvCombine encapsulates the OpenGL glTexEnvCombine (texture\n environment) state.\n") );
        { //::osg::TexEnvCombine::apply
        
            typedef void ( ::osg::TexEnvCombine::*apply_function_type )( ::osg::State & ) const;
            typedef void ( TexEnvCombine_wrapper::*default_apply_function_type )( ::osg::State & ) const;
            
            TexEnvCombine_exposer.def( 
                "apply"
                , apply_function_type(&::osg::TexEnvCombine::apply)
                , default_apply_function_type(&TexEnvCombine_wrapper::default_apply)
                , ( bp::arg("state") ) );
        
        }
        { //::osg::TexEnvCombine::className
        
            typedef char const * ( ::osg::TexEnvCombine::*className_function_type )(  ) const;
            typedef char const * ( TexEnvCombine_wrapper::*default_className_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "className"
                , className_function_type(&::osg::TexEnvCombine::className)
                , default_className_function_type(&TexEnvCombine_wrapper::default_className) );
        
        }
        { //::osg::TexEnvCombine::clone
        
            typedef ::osg::Object * ( ::osg::TexEnvCombine::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( TexEnvCombine_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            TexEnvCombine_exposer.def( 
                "clone"
                , clone_function_type(&::osg::TexEnvCombine::clone)
                , default_clone_function_type(&TexEnvCombine_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::TexEnvCombine::cloneType
        
            typedef ::osg::Object * ( ::osg::TexEnvCombine::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( TexEnvCombine_wrapper::*default_cloneType_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::TexEnvCombine::cloneType)
                , default_cloneType_function_type(&TexEnvCombine_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::TexEnvCombine::getCombine_Alpha
        
            typedef ::GLint ( ::osg::TexEnvCombine::*getCombine_Alpha_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getCombine_Alpha"
                , getCombine_Alpha_function_type( &::osg::TexEnvCombine::getCombine_Alpha ) );
        
        }
        { //::osg::TexEnvCombine::getCombine_RGB
        
            typedef ::GLint ( ::osg::TexEnvCombine::*getCombine_RGB_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getCombine_RGB"
                , getCombine_RGB_function_type( &::osg::TexEnvCombine::getCombine_RGB ) );
        
        }
        { //::osg::TexEnvCombine::getConstantColor
        
            typedef ::osg::Vec4 const & ( ::osg::TexEnvCombine::*getConstantColor_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getConstantColor"
                , getConstantColor_function_type( &::osg::TexEnvCombine::getConstantColor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::TexEnvCombine::getConstantColorAsLightDirection
        
            typedef ::osg::Vec3 ( ::osg::TexEnvCombine::*getConstantColorAsLightDirection_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getConstantColorAsLightDirection"
                , getConstantColorAsLightDirection_function_type( &::osg::TexEnvCombine::getConstantColorAsLightDirection ) );
        
        }
        { //::osg::TexEnvCombine::getOperand0_Alpha
        
            typedef ::GLint ( ::osg::TexEnvCombine::*getOperand0_Alpha_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getOperand0_Alpha"
                , getOperand0_Alpha_function_type( &::osg::TexEnvCombine::getOperand0_Alpha ) );
        
        }
        { //::osg::TexEnvCombine::getOperand0_RGB
        
            typedef ::GLint ( ::osg::TexEnvCombine::*getOperand0_RGB_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getOperand0_RGB"
                , getOperand0_RGB_function_type( &::osg::TexEnvCombine::getOperand0_RGB ) );
        
        }
        { //::osg::TexEnvCombine::getOperand1_Alpha
        
            typedef ::GLint ( ::osg::TexEnvCombine::*getOperand1_Alpha_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getOperand1_Alpha"
                , getOperand1_Alpha_function_type( &::osg::TexEnvCombine::getOperand1_Alpha ) );
        
        }
        { //::osg::TexEnvCombine::getOperand1_RGB
        
            typedef ::GLint ( ::osg::TexEnvCombine::*getOperand1_RGB_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getOperand1_RGB"
                , getOperand1_RGB_function_type( &::osg::TexEnvCombine::getOperand1_RGB ) );
        
        }
        { //::osg::TexEnvCombine::getOperand2_Alpha
        
            typedef ::GLint ( ::osg::TexEnvCombine::*getOperand2_Alpha_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getOperand2_Alpha"
                , getOperand2_Alpha_function_type( &::osg::TexEnvCombine::getOperand2_Alpha ) );
        
        }
        { //::osg::TexEnvCombine::getOperand2_RGB
        
            typedef ::GLint ( ::osg::TexEnvCombine::*getOperand2_RGB_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getOperand2_RGB"
                , getOperand2_RGB_function_type( &::osg::TexEnvCombine::getOperand2_RGB ) );
        
        }
        { //::osg::TexEnvCombine::getScale_Alpha
        
            typedef float ( ::osg::TexEnvCombine::*getScale_Alpha_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getScale_Alpha"
                , getScale_Alpha_function_type( &::osg::TexEnvCombine::getScale_Alpha ) );
        
        }
        { //::osg::TexEnvCombine::getScale_RGB
        
            typedef float ( ::osg::TexEnvCombine::*getScale_RGB_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getScale_RGB"
                , getScale_RGB_function_type( &::osg::TexEnvCombine::getScale_RGB ) );
        
        }
        { //::osg::TexEnvCombine::getSource0_Alpha
        
            typedef ::GLint ( ::osg::TexEnvCombine::*getSource0_Alpha_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getSource0_Alpha"
                , getSource0_Alpha_function_type( &::osg::TexEnvCombine::getSource0_Alpha ) );
        
        }
        { //::osg::TexEnvCombine::getSource0_RGB
        
            typedef ::GLint ( ::osg::TexEnvCombine::*getSource0_RGB_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getSource0_RGB"
                , getSource0_RGB_function_type( &::osg::TexEnvCombine::getSource0_RGB ) );
        
        }
        { //::osg::TexEnvCombine::getSource1_Alpha
        
            typedef ::GLint ( ::osg::TexEnvCombine::*getSource1_Alpha_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getSource1_Alpha"
                , getSource1_Alpha_function_type( &::osg::TexEnvCombine::getSource1_Alpha ) );
        
        }
        { //::osg::TexEnvCombine::getSource1_RGB
        
            typedef ::GLint ( ::osg::TexEnvCombine::*getSource1_RGB_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getSource1_RGB"
                , getSource1_RGB_function_type( &::osg::TexEnvCombine::getSource1_RGB ) );
        
        }
        { //::osg::TexEnvCombine::getSource2_Alpha
        
            typedef ::GLint ( ::osg::TexEnvCombine::*getSource2_Alpha_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getSource2_Alpha"
                , getSource2_Alpha_function_type( &::osg::TexEnvCombine::getSource2_Alpha ) );
        
        }
        { //::osg::TexEnvCombine::getSource2_RGB
        
            typedef ::GLint ( ::osg::TexEnvCombine::*getSource2_RGB_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getSource2_RGB"
                , getSource2_RGB_function_type( &::osg::TexEnvCombine::getSource2_RGB ) );
        
        }
        { //::osg::TexEnvCombine::getType
        
            typedef ::osg::StateAttribute::Type ( ::osg::TexEnvCombine::*getType_function_type )(  ) const;
            typedef ::osg::StateAttribute::Type ( TexEnvCombine_wrapper::*default_getType_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getType"
                , getType_function_type(&::osg::TexEnvCombine::getType)
                , default_getType_function_type(&TexEnvCombine_wrapper::default_getType) );
        
        }
        { //::osg::TexEnvCombine::isSameKindAs
        
            typedef bool ( ::osg::TexEnvCombine::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( TexEnvCombine_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            TexEnvCombine_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::TexEnvCombine::isSameKindAs)
                , default_isSameKindAs_function_type(&TexEnvCombine_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::TexEnvCombine::isTextureAttribute
        
            typedef bool ( ::osg::TexEnvCombine::*isTextureAttribute_function_type )(  ) const;
            typedef bool ( TexEnvCombine_wrapper::*default_isTextureAttribute_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "isTextureAttribute"
                , isTextureAttribute_function_type(&::osg::TexEnvCombine::isTextureAttribute)
                , default_isTextureAttribute_function_type(&TexEnvCombine_wrapper::default_isTextureAttribute) );
        
        }
        { //::osg::TexEnvCombine::libraryName
        
            typedef char const * ( ::osg::TexEnvCombine::*libraryName_function_type )(  ) const;
            typedef char const * ( TexEnvCombine_wrapper::*default_libraryName_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::TexEnvCombine::libraryName)
                , default_libraryName_function_type(&TexEnvCombine_wrapper::default_libraryName) );
        
        }
        { //::osg::TexEnvCombine::setCombine_Alpha
        
            typedef void ( ::osg::TexEnvCombine::*setCombine_Alpha_function_type )( ::GLint ) ;
            
            TexEnvCombine_exposer.def( 
                "setCombine_Alpha"
                , setCombine_Alpha_function_type( &::osg::TexEnvCombine::setCombine_Alpha )
                , ( bp::arg("cm") ) );
        
        }
        { //::osg::TexEnvCombine::setCombine_RGB
        
            typedef void ( ::osg::TexEnvCombine::*setCombine_RGB_function_type )( ::GLint ) ;
            
            TexEnvCombine_exposer.def( 
                "setCombine_RGB"
                , setCombine_RGB_function_type( &::osg::TexEnvCombine::setCombine_RGB )
                , ( bp::arg("cm") ) );
        
        }
        { //::osg::TexEnvCombine::setConstantColor
        
            typedef void ( ::osg::TexEnvCombine::*setConstantColor_function_type )( ::osg::Vec4 const & ) ;
            
            TexEnvCombine_exposer.def( 
                "setConstantColor"
                , setConstantColor_function_type( &::osg::TexEnvCombine::setConstantColor )
                , ( bp::arg("color") ) );
        
        }
        { //::osg::TexEnvCombine::setConstantColorAsLightDirection
        
            typedef void ( ::osg::TexEnvCombine::*setConstantColorAsLightDirection_function_type )( ::osg::Vec3 const & ) ;
            
            TexEnvCombine_exposer.def( 
                "setConstantColorAsLightDirection"
                , setConstantColorAsLightDirection_function_type( &::osg::TexEnvCombine::setConstantColorAsLightDirection )
                , ( bp::arg("direction") )
                , " Set the constant color attribute to the given light direction\n for use with DOT3 combine operation." );
        
        }
        { //::osg::TexEnvCombine::setOperand0_Alpha
        
            typedef void ( ::osg::TexEnvCombine::*setOperand0_Alpha_function_type )( ::GLint ) ;
            
            TexEnvCombine_exposer.def( 
                "setOperand0_Alpha"
                , setOperand0_Alpha_function_type( &::osg::TexEnvCombine::setOperand0_Alpha )
                , ( bp::arg("op") ) );
        
        }
        { //::osg::TexEnvCombine::setOperand0_RGB
        
            typedef void ( ::osg::TexEnvCombine::*setOperand0_RGB_function_type )( ::GLint ) ;
            
            TexEnvCombine_exposer.def( 
                "setOperand0_RGB"
                , setOperand0_RGB_function_type( &::osg::TexEnvCombine::setOperand0_RGB )
                , ( bp::arg("op") ) );
        
        }
        { //::osg::TexEnvCombine::setOperand1_Alpha
        
            typedef void ( ::osg::TexEnvCombine::*setOperand1_Alpha_function_type )( ::GLint ) ;
            
            TexEnvCombine_exposer.def( 
                "setOperand1_Alpha"
                , setOperand1_Alpha_function_type( &::osg::TexEnvCombine::setOperand1_Alpha )
                , ( bp::arg("op") ) );
        
        }
        { //::osg::TexEnvCombine::setOperand1_RGB
        
            typedef void ( ::osg::TexEnvCombine::*setOperand1_RGB_function_type )( ::GLint ) ;
            
            TexEnvCombine_exposer.def( 
                "setOperand1_RGB"
                , setOperand1_RGB_function_type( &::osg::TexEnvCombine::setOperand1_RGB )
                , ( bp::arg("op") ) );
        
        }
        { //::osg::TexEnvCombine::setOperand2_Alpha
        
            typedef void ( ::osg::TexEnvCombine::*setOperand2_Alpha_function_type )( ::GLint ) ;
            
            TexEnvCombine_exposer.def( 
                "setOperand2_Alpha"
                , setOperand2_Alpha_function_type( &::osg::TexEnvCombine::setOperand2_Alpha )
                , ( bp::arg("op") ) );
        
        }
        { //::osg::TexEnvCombine::setOperand2_RGB
        
            typedef void ( ::osg::TexEnvCombine::*setOperand2_RGB_function_type )( ::GLint ) ;
            
            TexEnvCombine_exposer.def( 
                "setOperand2_RGB"
                , setOperand2_RGB_function_type( &::osg::TexEnvCombine::setOperand2_RGB )
                , ( bp::arg("op") ) );
        
        }
        { //::osg::TexEnvCombine::setScale_Alpha
        
            typedef void ( ::osg::TexEnvCombine::*setScale_Alpha_function_type )( float ) ;
            
            TexEnvCombine_exposer.def( 
                "setScale_Alpha"
                , setScale_Alpha_function_type( &::osg::TexEnvCombine::setScale_Alpha )
                , ( bp::arg("scale") ) );
        
        }
        { //::osg::TexEnvCombine::setScale_RGB
        
            typedef void ( ::osg::TexEnvCombine::*setScale_RGB_function_type )( float ) ;
            
            TexEnvCombine_exposer.def( 
                "setScale_RGB"
                , setScale_RGB_function_type( &::osg::TexEnvCombine::setScale_RGB )
                , ( bp::arg("scale") ) );
        
        }
        { //::osg::TexEnvCombine::setSource0_Alpha
        
            typedef void ( ::osg::TexEnvCombine::*setSource0_Alpha_function_type )( ::GLint ) ;
            
            TexEnvCombine_exposer.def( 
                "setSource0_Alpha"
                , setSource0_Alpha_function_type( &::osg::TexEnvCombine::setSource0_Alpha )
                , ( bp::arg("sp") ) );
        
        }
        { //::osg::TexEnvCombine::setSource0_RGB
        
            typedef void ( ::osg::TexEnvCombine::*setSource0_RGB_function_type )( ::GLint ) ;
            
            TexEnvCombine_exposer.def( 
                "setSource0_RGB"
                , setSource0_RGB_function_type( &::osg::TexEnvCombine::setSource0_RGB )
                , ( bp::arg("sp") ) );
        
        }
        { //::osg::TexEnvCombine::setSource1_Alpha
        
            typedef void ( ::osg::TexEnvCombine::*setSource1_Alpha_function_type )( ::GLint ) ;
            
            TexEnvCombine_exposer.def( 
                "setSource1_Alpha"
                , setSource1_Alpha_function_type( &::osg::TexEnvCombine::setSource1_Alpha )
                , ( bp::arg("sp") ) );
        
        }
        { //::osg::TexEnvCombine::setSource1_RGB
        
            typedef void ( ::osg::TexEnvCombine::*setSource1_RGB_function_type )( ::GLint ) ;
            
            TexEnvCombine_exposer.def( 
                "setSource1_RGB"
                , setSource1_RGB_function_type( &::osg::TexEnvCombine::setSource1_RGB )
                , ( bp::arg("sp") ) );
        
        }
        { //::osg::TexEnvCombine::setSource2_Alpha
        
            typedef void ( ::osg::TexEnvCombine::*setSource2_Alpha_function_type )( ::GLint ) ;
            
            TexEnvCombine_exposer.def( 
                "setSource2_Alpha"
                , setSource2_Alpha_function_type( &::osg::TexEnvCombine::setSource2_Alpha )
                , ( bp::arg("sp") ) );
        
        }
        { //::osg::TexEnvCombine::setSource2_RGB
        
            typedef void ( ::osg::TexEnvCombine::*setSource2_RGB_function_type )( ::GLint ) ;
            
            TexEnvCombine_exposer.def( 
                "setSource2_RGB"
                , setSource2_RGB_function_type( &::osg::TexEnvCombine::setSource2_RGB )
                , ( bp::arg("sp") ) );
        
        }
        { //::osg::StateAttribute::asTexture
        
            typedef ::osg::Texture * ( ::osg::StateAttribute::*asTexture_function_type )(  ) ;
            typedef ::osg::Texture * ( TexEnvCombine_wrapper::*default_asTexture_function_type )(  ) ;
            
            TexEnvCombine_exposer.def( 
                "asTexture"
                , asTexture_function_type(&::osg::StateAttribute::asTexture)
                , default_asTexture_function_type(&TexEnvCombine_wrapper::default_asTexture)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateAttribute::asTexture
        
            typedef ::osg::Texture const * ( ::osg::StateAttribute::*asTexture_function_type )(  ) const;
            typedef ::osg::Texture const * ( TexEnvCombine_wrapper::*default_asTexture_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "asTexture"
                , asTexture_function_type(&::osg::StateAttribute::asTexture)
                , default_asTexture_function_type(&TexEnvCombine_wrapper::default_asTexture)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateAttribute::checkValidityOfAssociatedModes
        
            typedef bool ( ::osg::StateAttribute::*checkValidityOfAssociatedModes_function_type )( ::osg::State & ) const;
            typedef bool ( TexEnvCombine_wrapper::*default_checkValidityOfAssociatedModes_function_type )( ::osg::State & ) const;
            
            TexEnvCombine_exposer.def( 
                "checkValidityOfAssociatedModes"
                , checkValidityOfAssociatedModes_function_type(&::osg::StateAttribute::checkValidityOfAssociatedModes)
                , default_checkValidityOfAssociatedModes_function_type(&TexEnvCombine_wrapper::default_checkValidityOfAssociatedModes)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::StateAttribute::compileGLObjects
        
            typedef void ( ::osg::StateAttribute::*compileGLObjects_function_type )( ::osg::State & ) const;
            typedef void ( TexEnvCombine_wrapper::*default_compileGLObjects_function_type )( ::osg::State & ) const;
            
            TexEnvCombine_exposer.def( 
                "compileGLObjects"
                , compileGLObjects_function_type(&::osg::StateAttribute::compileGLObjects)
                , default_compileGLObjects_function_type(&TexEnvCombine_wrapper::default_compileGLObjects)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::StateAttribute::getMember
        
            typedef unsigned int ( ::osg::StateAttribute::*getMember_function_type )(  ) const;
            typedef unsigned int ( TexEnvCombine_wrapper::*default_getMember_function_type )(  ) const;
            
            TexEnvCombine_exposer.def( 
                "getMember"
                , getMember_function_type(&::osg::StateAttribute::getMember)
                , default_getMember_function_type(&TexEnvCombine_wrapper::default_getMember) );
        
        }
        { //::osg::StateAttribute::getModeUsage
        
            typedef bool ( ::osg::StateAttribute::*getModeUsage_function_type )( ::osg::StateAttribute::ModeUsage & ) const;
            typedef bool ( TexEnvCombine_wrapper::*default_getModeUsage_function_type )( ::osg::StateAttribute::ModeUsage & ) const;
            
            TexEnvCombine_exposer.def( 
                "getModeUsage"
                , getModeUsage_function_type(&::osg::StateAttribute::getModeUsage)
                , default_getModeUsage_function_type(&TexEnvCombine_wrapper::default_getModeUsage)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::StateAttribute::resizeGLObjectBuffers
        
            typedef void ( ::osg::StateAttribute::*resizeGLObjectBuffers_function_type )( unsigned int ) ;
            typedef void ( TexEnvCombine_wrapper::*default_resizeGLObjectBuffers_function_type )( unsigned int ) ;
            
            TexEnvCombine_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::StateAttribute::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&TexEnvCombine_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) );
        
        }
    }

}
