// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "TransferFunction.pypp.hpp"

namespace bp = boost::python;

struct TransferFunction_wrapper : osg::TransferFunction, bp::wrapper< osg::TransferFunction > {

    TransferFunction_wrapper( )
    : osg::TransferFunction( )
      , bp::wrapper< osg::TransferFunction >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::TransferFunction::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::TransferFunction::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::TransferFunction::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::TransferFunction::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::TransferFunction::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::TransferFunction::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::TransferFunction::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::TransferFunction::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::TransferFunction::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::TransferFunction::libraryName( );
    }

};

void register_TransferFunction_class(){

    bp::class_< TransferFunction_wrapper, bp::bases< osg::Object >, osg::ref_ptr< ::osg::TransferFunction >, boost::noncopyable >( "TransferFunction", "\n TransferFunction is a class that provide a 1D,2D or 3D colour look up table\n that can be used on the GPU as a 1D, 2D or 3D texture.\n Typically uses include mapping heights to colours when contouring terrain,\n or mapping intensities to colours when volume rendering.\n", bp::no_init )    
        .def( bp::init< >("\n TransferFunction is a class that provide a 1D,2D or 3D colour look up table\n that can be used on the GPU as a 1D, 2D or 3D texture.\n Typically uses include mapping heights to colours when contouring terrain,\n or mapping intensities to colours when volume rendering.\n") )    
        .def( 
            "className"
            , (char const * ( ::osg::TransferFunction::* )(  ) const)(&::osg::TransferFunction::className)
            , (char const * ( TransferFunction_wrapper::* )(  ) const)(&TransferFunction_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osg::TransferFunction::* )( ::osg::CopyOp const & ) const)(&::osg::TransferFunction::clone)
            , (::osg::Object * ( TransferFunction_wrapper::* )( ::osg::CopyOp const & ) const)(&TransferFunction_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osg::TransferFunction::* )(  ) const)(&::osg::TransferFunction::cloneType)
            , (::osg::Object * ( TransferFunction_wrapper::* )(  ) const)(&TransferFunction_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getImage"
            , (::osg::Image * ( ::osg::TransferFunction::* )(  ) )( &::osg::TransferFunction::getImage )
            , bp::return_internal_reference< >()
            , " Get the image that is used for passing the transfer function data to the GPU." )    
        .def( 
            "getImage"
            , (::osg::Image const * ( ::osg::TransferFunction::* )(  ) const)( &::osg::TransferFunction::getImage )
            , bp::return_internal_reference< >()
            , " Get the const image that is used for passing the transfer function data to the GPU." )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osg::TransferFunction::* )( ::osg::Object const * ) const)(&::osg::TransferFunction::isSameKindAs)
            , (bool ( TransferFunction_wrapper::* )( ::osg::Object const * ) const)(&TransferFunction_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osg::TransferFunction::* )(  ) const)(&::osg::TransferFunction::libraryName)
            , (char const * ( TransferFunction_wrapper::* )(  ) const)(&TransferFunction_wrapper::default_libraryName) );

}
