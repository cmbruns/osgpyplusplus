// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "wrap_osg.h"
#include "ShadowVolumeOccluder.pypp.hpp"

namespace bp = boost::python;

static boost::python::object computeOccluder_21ff40427e323f6b1c78c03e464321b0( ::osg::ShadowVolumeOccluder & inst, ::osg::NodePath const & nodePath, ::osg::ConvexPlanarOccluder & occluder, ::osg::CullStack & cullStack, bool createDrawables=false ){
    bool result = inst.computeOccluder(nodePath, occluder, cullStack, createDrawables);
    return bp::object( result );
}

void register_ShadowVolumeOccluder_class(){

    bp::class_< osg::ShadowVolumeOccluder >( "ShadowVolumeOccluder", "\n ShadowVolumeOccluder is a helper class for implementing shadow occlusion culling.\n", bp::init< osg::ShadowVolumeOccluder const & >(( bp::arg("svo") )) )    
        .def( bp::init< >() )    
        .def( 
            "computeOccluder"
            , (boost::python::object (*)( ::osg::ShadowVolumeOccluder &,::osg::NodePath const &,::osg::ConvexPlanarOccluder &,::osg::CullStack &,bool ))( &computeOccluder_21ff40427e323f6b1c78c03e464321b0 )
            , ( bp::arg("inst"), bp::arg("nodePath"), bp::arg("occluder"), bp::arg("cullStack"), bp::arg("createDrawables")=(bool)(false) )
            , " compute the shadow volume occluder." )    
        .def( 
            "contains"
            , (bool ( ::osg::ShadowVolumeOccluder::* )( ::std::vector< osg::Vec3f > const & ) )( &::osg::ShadowVolumeOccluder::contains )
            , ( bp::arg("vertices") )
            , " return true if the specified vertex list is contained entirely\n within this shadow occluder volume." )    
        .def( 
            "contains"
            , (bool ( ::osg::ShadowVolumeOccluder::* )( ::osg::BoundingSphere const & ) )( &::osg::ShadowVolumeOccluder::contains )
            , ( bp::arg("bound") )
            , " return true if the specified bounding sphere is contained entirely\n within this shadow occluder volume." )    
        .def( 
            "contains"
            , (bool ( ::osg::ShadowVolumeOccluder::* )( ::osg::BoundingBox const & ) )( &::osg::ShadowVolumeOccluder::contains )
            , ( bp::arg("bound") )
            , " return true if the specified bounding box is contained entirely\n within this shadow occluder volume." )    
        .def( 
            "disableResultMasks"
            , (void ( ::osg::ShadowVolumeOccluder::* )(  ) )( &::osg::ShadowVolumeOccluder::disableResultMasks ) )    
        .def( 
            "getHoleList"
            , (::std::vector< osg::Polytope > & ( ::osg::ShadowVolumeOccluder::* )(  ) )( &::osg::ShadowVolumeOccluder::getHoleList )
            , bp::return_internal_reference< >()
            , " return the list of holes." )    
        .def( 
            "getHoleList"
            , (::std::vector< osg::Polytope > const & ( ::osg::ShadowVolumeOccluder::* )(  ) const)( &::osg::ShadowVolumeOccluder::getHoleList )
            , bp::return_internal_reference< >()
            , " return the const list of holes." )    
        .def( 
            "getNodePath"
            , (::osg::NodePath & ( ::osg::ShadowVolumeOccluder::* )(  ) )( &::osg::ShadowVolumeOccluder::getNodePath )
            , bp::return_internal_reference< >() )    
        .def( 
            "getNodePath"
            , (::osg::NodePath const & ( ::osg::ShadowVolumeOccluder::* )(  ) const)( &::osg::ShadowVolumeOccluder::getNodePath )
            , bp::return_internal_reference< >() )    
        .def( 
            "getOccluder"
            , (::osg::Polytope & ( ::osg::ShadowVolumeOccluder::* )(  ) )( &::osg::ShadowVolumeOccluder::getOccluder )
            , bp::return_internal_reference< >()
            , " return the occluder polytope." )    
        .def( 
            "getOccluder"
            , (::osg::Polytope const & ( ::osg::ShadowVolumeOccluder::* )(  ) const)( &::osg::ShadowVolumeOccluder::getOccluder )
            , bp::return_internal_reference< >()
            , " return the const occluder polytope." )    
        .def( 
            "getVolume"
            , (float ( ::osg::ShadowVolumeOccluder::* )(  ) const)( &::osg::ShadowVolumeOccluder::getVolume )
            , " get the volume of the occluder minus its holes, in eye coords, the volume is normalized by dividing by\n the volume of the view frustum in eye coords." )    
        .def( 
            "matchProjectionMatrix"
            , (bool ( ::osg::ShadowVolumeOccluder::* )( ::osg::Matrix const & ) const)( &::osg::ShadowVolumeOccluder::matchProjectionMatrix )
            , ( bp::arg("matrix") )
            , " return true if the matrix passed in matches the projection matrix that this ShadowVolumeOccluder is\n associated with." )    
        .def( bp::self < bp::self )    
        .def( 
            "popCurrentMask"
            , (void ( ::osg::ShadowVolumeOccluder::* )(  ) )( &::osg::ShadowVolumeOccluder::popCurrentMask ) )    
        .def( 
            "pushCurrentMask"
            , (void ( ::osg::ShadowVolumeOccluder::* )(  ) )( &::osg::ShadowVolumeOccluder::pushCurrentMask ) )    
        .def( 
            "setNodePath"
            , (void ( ::osg::ShadowVolumeOccluder::* )( ::osg::NodePath & ) )( &::osg::ShadowVolumeOccluder::setNodePath )
            , ( bp::arg("nodePath") )
            , " Set the NodePath which describes which node in the scene graph\n that this occluder is attached to." )    
        .def( 
            "transformProvidingInverse"
            , (void ( ::osg::ShadowVolumeOccluder::* )( ::osg::Matrix const & ) )( &::osg::ShadowVolumeOccluder::transformProvidingInverse )
            , ( bp::arg("matrix") ) );

}
