// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "BlockCount.pypp.hpp"

namespace bp = boost::python;

void register_BlockCount_class(){

    { //::OpenThreads::BlockCount
        typedef bp::class_< OpenThreads::BlockCount, boost::noncopyable > BlockCount_exposer_t;
        BlockCount_exposer_t BlockCount_exposer = BlockCount_exposer_t( "BlockCount", "\n BlockCount is a block that can be used to halt a thread that is waiting for a specified number of operations to be completed.\n", bp::init< unsigned int >(( bp::arg("blockCount") ), "\n BlockCount is a block that can be used to halt a thread that is waiting for a specified number of operations to be completed.\n") );
        bp::scope BlockCount_scope( BlockCount_exposer );
        bp::implicitly_convertible< unsigned int, OpenThreads::BlockCount >();
        { //::OpenThreads::BlockCount::block
        
            typedef void ( ::OpenThreads::BlockCount::*block_function_type )(  ) ;
            
            BlockCount_exposer.def( 
                "block"
                , block_function_type( &::OpenThreads::BlockCount::block ) );
        
        }
        { //::OpenThreads::BlockCount::completed
        
            typedef void ( ::OpenThreads::BlockCount::*completed_function_type )(  ) ;
            
            BlockCount_exposer.def( 
                "completed"
                , completed_function_type( &::OpenThreads::BlockCount::completed ) );
        
        }
        { //::OpenThreads::BlockCount::getBlockCount
        
            typedef unsigned int ( ::OpenThreads::BlockCount::*getBlockCount_function_type )(  ) const;
            
            BlockCount_exposer.def( 
                "getBlockCount"
                , getBlockCount_function_type( &::OpenThreads::BlockCount::getBlockCount ) );
        
        }
        { //::OpenThreads::BlockCount::getCurrentCount
        
            typedef unsigned int ( ::OpenThreads::BlockCount::*getCurrentCount_function_type )(  ) const;
            
            BlockCount_exposer.def( 
                "getCurrentCount"
                , getCurrentCount_function_type( &::OpenThreads::BlockCount::getCurrentCount ) );
        
        }
        { //::OpenThreads::BlockCount::release
        
            typedef void ( ::OpenThreads::BlockCount::*release_function_type )(  ) ;
            
            BlockCount_exposer.def( 
                "release"
                , release_function_type( &::OpenThreads::BlockCount::release ) );
        
        }
        { //::OpenThreads::BlockCount::reset
        
            typedef void ( ::OpenThreads::BlockCount::*reset_function_type )(  ) ;
            
            BlockCount_exposer.def( 
                "reset"
                , reset_function_type( &::OpenThreads::BlockCount::reset ) );
        
        }
        { //::OpenThreads::BlockCount::setBlockCount
        
            typedef void ( ::OpenThreads::BlockCount::*setBlockCount_function_type )( unsigned int ) ;
            
            BlockCount_exposer.def( 
                "setBlockCount"
                , setBlockCount_function_type( &::OpenThreads::BlockCount::setBlockCount )
                , ( bp::arg("blockCount") ) );
        
        }
    }

}
