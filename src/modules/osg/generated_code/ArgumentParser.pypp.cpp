// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "ArgumentParser.pypp.hpp"

namespace bp = boost::python;

boost::shared_ptr<osg::ArgumentParser> initArgumentParser( bp::object const & sys_argv )
            {
                int * argc = new int(bp::len(sys_argv));
                char ** argv = new char*[*argc];
                for (int i = 0; i < *argc; ++i) {
                    std::string str = bp::extract<std::string>(sys_argv[i]);
                    int sz = str.size();
                    argv[i] = new char[sz+1];
                    argv[i][sz] = '\0'; // null terminate string
                    for (int c = 0; c < sz; ++c)
                        argv[i][c] = str[c];
                }
                return boost::shared_ptr<osg::ArgumentParser>(new osg::ArgumentParser(argc, argv) );
            }

            boost::shared_ptr<osg::ArgumentParser> initArgumentParser2( int argc0, bp::object const & sys_argv )
            {
                int * argc = new int(argc0);
                char ** argv = new char*[argc0];
                for (int i = 0; i < argc0; ++i) {
                    std::string str = bp::extract<std::string>(sys_argv[i]);
                    int sz = str.size();
                    argv[i] = new char[sz+1];
                    argv[i][sz] = '\0'; // null terminate string
                    for (int c = 0; c < sz; ++c)
                        argv[i][c] = str[c];
                }
                return boost::shared_ptr<osg::ArgumentParser>(new osg::ArgumentParser(argc, argv) );
            }

            std::string getArgumentParserItem(const osg::ArgumentParser& ap, int index) {
                return std::string(ap[index]);
            }

void register_ArgumentParser_class(){

    { //::osg::ArgumentParser
        typedef bp::class_< osg::ArgumentParser > ArgumentParser_exposer_t;
        ArgumentParser_exposer_t ArgumentParser_exposer = ArgumentParser_exposer_t( "ArgumentParser", bp::no_init );
        bp::scope ArgumentParser_scope( ArgumentParser_exposer );
        bp::enum_< osg::ArgumentParser::ErrorSeverity>("ErrorSeverity")
            .value("BENIGN", osg::ArgumentParser::BENIGN)
            .value("CRITICAL", osg::ArgumentParser::CRITICAL)
            .export_values()
            ;
        { //::osg::ArgumentParser::Parameter
            typedef bp::class_< osg::ArgumentParser::Parameter > Parameter_exposer_t;
            Parameter_exposer_t Parameter_exposer = Parameter_exposer_t( "Parameter", bp::init< bool & >(( bp::arg("value") )) );
            bp::scope Parameter_scope( Parameter_exposer );
            bp::enum_< osg::ArgumentParser::Parameter::ParameterType>("ParameterType")
                .value("BOOL_PARAMETER", osg::ArgumentParser::Parameter::BOOL_PARAMETER)
                .value("FLOAT_PARAMETER", osg::ArgumentParser::Parameter::FLOAT_PARAMETER)
                .value("DOUBLE_PARAMETER", osg::ArgumentParser::Parameter::DOUBLE_PARAMETER)
                .value("INT_PARAMETER", osg::ArgumentParser::Parameter::INT_PARAMETER)
                .value("UNSIGNED_INT_PARAMETER", osg::ArgumentParser::Parameter::UNSIGNED_INT_PARAMETER)
                .value("STRING_PARAMETER", osg::ArgumentParser::Parameter::STRING_PARAMETER)
                .export_values()
                ;
            bp::implicitly_convertible< bool &, osg::ArgumentParser::Parameter >();
            Parameter_exposer.def( bp::init< float & >(( bp::arg("value") )) );
            bp::implicitly_convertible< float &, osg::ArgumentParser::Parameter >();
            Parameter_exposer.def( bp::init< double & >(( bp::arg("value") )) );
            bp::implicitly_convertible< double &, osg::ArgumentParser::Parameter >();
            Parameter_exposer.def( bp::init< int & >(( bp::arg("value") )) );
            bp::implicitly_convertible< int &, osg::ArgumentParser::Parameter >();
            Parameter_exposer.def( bp::init< unsigned int & >(( bp::arg("value") )) );
            bp::implicitly_convertible< unsigned int &, osg::ArgumentParser::Parameter >();
            Parameter_exposer.def( bp::init< std::string & >(( bp::arg("value") )) );
            bp::implicitly_convertible< std::string &, osg::ArgumentParser::Parameter >();
            Parameter_exposer.def( bp::init< osg::ArgumentParser::Parameter const & >(( bp::arg("param") )) );
            { //::osg::ArgumentParser::Parameter::assign
            
                typedef bool ( ::osg::ArgumentParser::Parameter::*assign_function_type )( char const * ) ;
                
                Parameter_exposer.def( 
                    "assign"
                    , assign_function_type( &::osg::ArgumentParser::Parameter::assign )
                    , ( bp::arg("str") ) );
            
            }
            { //::osg::ArgumentParser::Parameter::operator=
            
                typedef ::osg::ArgumentParser::Parameter & ( ::osg::ArgumentParser::Parameter::*assign_function_type )( ::osg::ArgumentParser::Parameter const & ) ;
                
                Parameter_exposer.def( 
                    "assign"
                    , assign_function_type( &::osg::ArgumentParser::Parameter::operator= )
                    , ( bp::arg("param") )
                    , bp::return_self< >() );
            
            }
            { //::osg::ArgumentParser::Parameter::valid
            
                typedef bool ( ::osg::ArgumentParser::Parameter::*valid_function_type )( char const * ) const;
                
                Parameter_exposer.def( 
                    "valid"
                    , valid_function_type( &::osg::ArgumentParser::Parameter::valid )
                    , ( bp::arg("str") ) );
            
            }
        }
        ArgumentParser_exposer.def( bp::init< int *, char * * >(( bp::arg("argc"), bp::arg("argv") )) );
        { //::osg::ArgumentParser::argc
        
            typedef int & ( ::osg::ArgumentParser::*argc_function_type )(  ) ;
            
            ArgumentParser_exposer.def( 
                "argc"
                , argc_function_type( &::osg::ArgumentParser::argc )
                , bp::return_value_policy< bp::copy_non_const_reference >()
                , "\n Return the argument count.\n" );
        
        }
        { //::osg::ArgumentParser::containsOptions
        
            typedef bool ( ::osg::ArgumentParser::*containsOptions_function_type )(  ) const;
            
            ArgumentParser_exposer.def( 
                "containsOptions"
                , containsOptions_function_type( &::osg::ArgumentParser::containsOptions ) );
        
        }
        { //::osg::ArgumentParser::errors
        
            typedef bool ( ::osg::ArgumentParser::*errors_function_type )( ::osg::ArgumentParser::ErrorSeverity ) const;
            
            ArgumentParser_exposer.def( 
                "errors"
                , errors_function_type( &::osg::ArgumentParser::errors )
                , ( bp::arg("severity")=::osg::ArgumentParser::BENIGN )
                , "\n Return the error flag, true if an error has occurred when reading arguments.\n" );
        
        }
        { //::osg::ArgumentParser::find
        
            typedef int ( ::osg::ArgumentParser::*find_function_type )( ::std::string const & ) const;
            
            ArgumentParser_exposer.def( 
                "find"
                , find_function_type( &::osg::ArgumentParser::find )
                , ( bp::arg("str") )
                , "\n Return the position of an occurrence of a string in the argument list.\n Return -1 if no string is found.\n" );
        
        }
        { //::osg::ArgumentParser::getApplicationName
        
            typedef ::std::string ( ::osg::ArgumentParser::*getApplicationName_function_type )(  ) const;
            
            ArgumentParser_exposer.def( 
                "getApplicationName"
                , getApplicationName_function_type( &::osg::ArgumentParser::getApplicationName )
                , "\n Return the application name, as specified by argv[0]\n" );
        
        }
        { //::osg::ArgumentParser::getApplicationUsage
        
            typedef ::osg::ApplicationUsage * ( ::osg::ArgumentParser::*getApplicationUsage_function_type )(  ) ;
            
            ArgumentParser_exposer.def( 
                "getApplicationUsage"
                , getApplicationUsage_function_type( &::osg::ArgumentParser::getApplicationUsage )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::ArgumentParser::getApplicationUsage
        
            typedef ::osg::ApplicationUsage const * ( ::osg::ArgumentParser::*getApplicationUsage_function_type )(  ) const;
            
            ArgumentParser_exposer.def( 
                "getApplicationUsage"
                , getApplicationUsage_function_type( &::osg::ArgumentParser::getApplicationUsage )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::ArgumentParser::getErrorMessageMap
        
            typedef ::std::map< std::string, osg::ArgumentParser::ErrorSeverity > & ( ::osg::ArgumentParser::*getErrorMessageMap_function_type )(  ) ;
            
            ArgumentParser_exposer.def( 
                "getErrorMessageMap"
                , getErrorMessageMap_function_type( &::osg::ArgumentParser::getErrorMessageMap )
                , bp::return_internal_reference< >()
                , "\n Return the error message, if any has occurred.\n" );
        
        }
        { //::osg::ArgumentParser::getErrorMessageMap
        
            typedef ::std::map< std::string, osg::ArgumentParser::ErrorSeverity > const & ( ::osg::ArgumentParser::*getErrorMessageMap_function_type )(  ) const;
            
            ArgumentParser_exposer.def( 
                "getErrorMessageMap"
                , getErrorMessageMap_function_type( &::osg::ArgumentParser::getErrorMessageMap )
                , bp::return_internal_reference< >()
                , "\n Return the error message, if any has occurred.\n" );
        
        }
        { //::osg::ArgumentParser::isBool
        
            typedef bool ( *isBool_function_type )( char const * );
            
            ArgumentParser_exposer.def( 
                "isBool"
                , isBool_function_type( &::osg::ArgumentParser::isBool )
                , ( bp::arg("str") )
                , "\n Return true if specified parameter is a bool.\n" );
        
        }
        { //::osg::ArgumentParser::isNumber
        
            typedef bool ( *isNumber_function_type )( char const * );
            
            ArgumentParser_exposer.def( 
                "isNumber"
                , isNumber_function_type( &::osg::ArgumentParser::isNumber )
                , ( bp::arg("str") )
                , "\n Return true if specified parameter is a number.\n" );
        
        }
        { //::osg::ArgumentParser::isNumber
        
            typedef bool ( ::osg::ArgumentParser::*isNumber_function_type )( int ) const;
            
            ArgumentParser_exposer.def( 
                "isNumber"
                , isNumber_function_type( &::osg::ArgumentParser::isNumber )
                , ( bp::arg("pos") )
                , "\n Return true if the specified parameter is a number.\n" );
        
        }
        { //::osg::ArgumentParser::isOption
        
            typedef bool ( *isOptionStr_function_type )( char const * );
            
            ArgumentParser_exposer.def( 
                "isOptionStr"
                , isOptionStr_function_type( &::osg::ArgumentParser::isOption )
                , ( bp::arg("str") )
                , "\n Return true if the specified string is an option in the form\n -option or --option.\n" );
        
        }
        { //::osg::ArgumentParser::isOption
        
            typedef bool ( ::osg::ArgumentParser::*isOption_function_type )( int ) const;
            
            ArgumentParser_exposer.def( 
                "isOption"
                , isOption_function_type( &::osg::ArgumentParser::isOption )
                , ( bp::arg("pos") )
                , "\n Return true if the specified parameter is an option in the form of\n -option or --option.\n" );
        
        }
        { //::osg::ArgumentParser::isString
        
            typedef bool ( *isString_function_type )( char const * );
            
            ArgumentParser_exposer.def( 
                "isString"
                , isString_function_type( &::osg::ArgumentParser::isString )
                , ( bp::arg("str") )
                , "\n Return true if string is non-NULL and not an option in the form\n -option or --option.\n" );
        
        }
        { //::osg::ArgumentParser::isString
        
            typedef bool ( ::osg::ArgumentParser::*isString_function_type )( int ) const;
            
            ArgumentParser_exposer.def( 
                "isString"
                , isString_function_type( &::osg::ArgumentParser::isString )
                , ( bp::arg("pos") )
                , "\n Return true if the specified parameter is a string not in\n the form of an option.\n" );
        
        }
        { //::osg::ArgumentParser::match
        
            typedef bool ( ::osg::ArgumentParser::*match_function_type )( int,::std::string const & ) const;
            
            ArgumentParser_exposer.def( 
                "match"
                , match_function_type( &::osg::ArgumentParser::match )
                , ( bp::arg("pos"), bp::arg("str") )
                , "\n Return true if the specified argument matches the given string.\n" );
        
        }
        { //::osg::ArgumentParser::read
        
            typedef bool ( ::osg::ArgumentParser::*read_function_type )( ::std::string const & ) ;
            
            ArgumentParser_exposer.def( 
                "read"
                , read_function_type( &::osg::ArgumentParser::read )
                , ( bp::arg("str") )
                , "\n Search for an occurrence of a string in the argument list. If found,\n remove that occurrence and return true. Otherwise, return false.\n" );
        
        }
        { //::osg::ArgumentParser::read
        
            typedef bool ( ::osg::ArgumentParser::*read_function_type )( ::std::string const &,::osg::ArgumentParser::Parameter ) ;
            
            ArgumentParser_exposer.def( 
                "read"
                , read_function_type( &::osg::ArgumentParser::read )
                , ( bp::arg("str"), bp::arg("value1") ) );
        
        }
        { //::osg::ArgumentParser::read
        
            typedef bool ( ::osg::ArgumentParser::*read_function_type )( ::std::string const &,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) ;
            
            ArgumentParser_exposer.def( 
                "read"
                , read_function_type( &::osg::ArgumentParser::read )
                , ( bp::arg("str"), bp::arg("value1"), bp::arg("value2") ) );
        
        }
        { //::osg::ArgumentParser::read
        
            typedef bool ( ::osg::ArgumentParser::*read_function_type )( ::std::string const &,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) ;
            
            ArgumentParser_exposer.def( 
                "read"
                , read_function_type( &::osg::ArgumentParser::read )
                , ( bp::arg("str"), bp::arg("value1"), bp::arg("value2"), bp::arg("value3") ) );
        
        }
        { //::osg::ArgumentParser::read
        
            typedef bool ( ::osg::ArgumentParser::*read_function_type )( ::std::string const &,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) ;
            
            ArgumentParser_exposer.def( 
                "read"
                , read_function_type( &::osg::ArgumentParser::read )
                , ( bp::arg("str"), bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4") ) );
        
        }
        { //::osg::ArgumentParser::read
        
            typedef bool ( ::osg::ArgumentParser::*read_function_type )( ::std::string const &,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) ;
            
            ArgumentParser_exposer.def( 
                "read"
                , read_function_type( &::osg::ArgumentParser::read )
                , ( bp::arg("str"), bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4"), bp::arg("value5") ) );
        
        }
        { //::osg::ArgumentParser::read
        
            typedef bool ( ::osg::ArgumentParser::*read_function_type )( ::std::string const &,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) ;
            
            ArgumentParser_exposer.def( 
                "read"
                , read_function_type( &::osg::ArgumentParser::read )
                , ( bp::arg("str"), bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4"), bp::arg("value5"), bp::arg("value6") ) );
        
        }
        { //::osg::ArgumentParser::read
        
            typedef bool ( ::osg::ArgumentParser::*read_function_type )( ::std::string const &,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) ;
            
            ArgumentParser_exposer.def( 
                "read"
                , read_function_type( &::osg::ArgumentParser::read )
                , ( bp::arg("str"), bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4"), bp::arg("value5"), bp::arg("value6"), bp::arg("value7") ) );
        
        }
        { //::osg::ArgumentParser::read
        
            typedef bool ( ::osg::ArgumentParser::*read_function_type )( ::std::string const &,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) ;
            
            ArgumentParser_exposer.def( 
                "read"
                , read_function_type( &::osg::ArgumentParser::read )
                , ( bp::arg("str"), bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4"), bp::arg("value5"), bp::arg("value6"), bp::arg("value7"), bp::arg("value8") ) );
        
        }
        { //::osg::ArgumentParser::read
        
            typedef bool ( ::osg::ArgumentParser::*read_function_type )( int,::std::string const & ) ;
            
            ArgumentParser_exposer.def( 
                "read"
                , read_function_type( &::osg::ArgumentParser::read )
                , ( bp::arg("pos"), bp::arg("str") )
                , "\n If the argument value at the specified position matches the given string,\n and subsequent parameters are also matched, then set the parameter values,\n remove the arguments from the list, and return true. Otherwise, return false.\n" );
        
        }
        { //::osg::ArgumentParser::read
        
            typedef bool ( ::osg::ArgumentParser::*read_function_type )( int,::std::string const &,::osg::ArgumentParser::Parameter ) ;
            
            ArgumentParser_exposer.def( 
                "read"
                , read_function_type( &::osg::ArgumentParser::read )
                , ( bp::arg("pos"), bp::arg("str"), bp::arg("value1") ) );
        
        }
        { //::osg::ArgumentParser::read
        
            typedef bool ( ::osg::ArgumentParser::*read_function_type )( int,::std::string const &,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) ;
            
            ArgumentParser_exposer.def( 
                "read"
                , read_function_type( &::osg::ArgumentParser::read )
                , ( bp::arg("pos"), bp::arg("str"), bp::arg("value1"), bp::arg("value2") ) );
        
        }
        { //::osg::ArgumentParser::read
        
            typedef bool ( ::osg::ArgumentParser::*read_function_type )( int,::std::string const &,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) ;
            
            ArgumentParser_exposer.def( 
                "read"
                , read_function_type( &::osg::ArgumentParser::read )
                , ( bp::arg("pos"), bp::arg("str"), bp::arg("value1"), bp::arg("value2"), bp::arg("value3") ) );
        
        }
        { //::osg::ArgumentParser::read
        
            typedef bool ( ::osg::ArgumentParser::*read_function_type )( int,::std::string const &,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) ;
            
            ArgumentParser_exposer.def( 
                "read"
                , read_function_type( &::osg::ArgumentParser::read )
                , ( bp::arg("pos"), bp::arg("str"), bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4") ) );
        
        }
        { //::osg::ArgumentParser::read
        
            typedef bool ( ::osg::ArgumentParser::*read_function_type )( int,::std::string const &,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) ;
            
            ArgumentParser_exposer.def( 
                "read"
                , read_function_type( &::osg::ArgumentParser::read )
                , ( bp::arg("pos"), bp::arg("str"), bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4"), bp::arg("value5") ) );
        
        }
        { //::osg::ArgumentParser::read
        
            typedef bool ( ::osg::ArgumentParser::*read_function_type )( int,::std::string const &,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) ;
            
            ArgumentParser_exposer.def( 
                "read"
                , read_function_type( &::osg::ArgumentParser::read )
                , ( bp::arg("pos"), bp::arg("str"), bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4"), bp::arg("value5"), bp::arg("value6") ) );
        
        }
        { //::osg::ArgumentParser::read
        
            typedef bool ( ::osg::ArgumentParser::*read_function_type )( int,::std::string const &,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) ;
            
            ArgumentParser_exposer.def( 
                "read"
                , read_function_type( &::osg::ArgumentParser::read )
                , ( bp::arg("pos"), bp::arg("str"), bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4"), bp::arg("value5"), bp::arg("value6"), bp::arg("value7") ) );
        
        }
        { //::osg::ArgumentParser::read
        
            typedef bool ( ::osg::ArgumentParser::*read_function_type )( int,::std::string const &,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) ;
            
            ArgumentParser_exposer.def( 
                "read"
                , read_function_type( &::osg::ArgumentParser::read )
                , ( bp::arg("pos"), bp::arg("str"), bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4"), bp::arg("value5"), bp::arg("value6"), bp::arg("value7"), bp::arg("value8") ) );
        
        }
        { //::osg::ArgumentParser::readHelpType
        
            typedef ::osg::ApplicationUsage::Type ( ::osg::ArgumentParser::*readHelpType_function_type )(  ) ;
            
            ArgumentParser_exposer.def( 
                "readHelpType"
                , readHelpType_function_type( &::osg::ArgumentParser::readHelpType )
                , "\n This convenience method handles help requests on the command line.\n Return the type(s) of help requested. The return value of this\n function is suitable for passing into getApplicationUsage()->write().\n If ApplicationUsage::NO_HELP is returned then no help commandline option\n was found on the command line.\n" );
        
        }
        { //::osg::ArgumentParser::remove
        
            typedef void ( ::osg::ArgumentParser::*remove_function_type )( int,int ) ;
            
            ArgumentParser_exposer.def( 
                "remove"
                , remove_function_type( &::osg::ArgumentParser::remove )
                , ( bp::arg("pos"), bp::arg("num")=(int)(1) )
                , "\n Remove one or more arguments from the argv argument list,\n and decrement the argc respectively.\n" );
        
        }
        { //::osg::ArgumentParser::reportError
        
            typedef void ( ::osg::ArgumentParser::*reportError_function_type )( ::std::string const &,::osg::ArgumentParser::ErrorSeverity ) ;
            
            ArgumentParser_exposer.def( 
                "reportError"
                , reportError_function_type( &::osg::ArgumentParser::reportError )
                , ( bp::arg("message"), bp::arg("severity")=::osg::ArgumentParser::CRITICAL )
                , "\n Report an error message by adding to the ErrorMessageMap.\n" );
        
        }
        { //::osg::ArgumentParser::reportRemainingOptionsAsUnrecognized
        
            typedef void ( ::osg::ArgumentParser::*reportRemainingOptionsAsUnrecognized_function_type )( ::osg::ArgumentParser::ErrorSeverity ) ;
            
            ArgumentParser_exposer.def( 
                "reportRemainingOptionsAsUnrecognized"
                , reportRemainingOptionsAsUnrecognized_function_type( &::osg::ArgumentParser::reportRemainingOptionsAsUnrecognized )
                , ( bp::arg("severity")=::osg::ArgumentParser::BENIGN )
                , "\n For each remaining option, report it as unrecognized.\n" );
        
        }
        { //::osg::ArgumentParser::setApplicationUsage
        
            typedef void ( ::osg::ArgumentParser::*setApplicationUsage_function_type )( ::osg::ApplicationUsage * ) ;
            
            ArgumentParser_exposer.def( 
                "setApplicationUsage"
                , setApplicationUsage_function_type( &::osg::ArgumentParser::setApplicationUsage )
                , ( bp::arg("usage") ) );
        
        }
        { //::osg::ArgumentParser::writeErrorMessages
        
            typedef void ( ::osg::ArgumentParser::*writeErrorMessages_function_type )( ::std::ostream &,::osg::ArgumentParser::ErrorSeverity ) ;
            
            ArgumentParser_exposer.def( 
                "writeErrorMessages"
                , writeErrorMessages_function_type( &::osg::ArgumentParser::writeErrorMessages )
                , ( bp::arg("output"), bp::arg("sevrity")=::osg::ArgumentParser::BENIGN )
                , "\n Write error messages to the given ostream, if at or above the given severity.\n" );
        
        }
        ArgumentParser_exposer.staticmethod( "isBool" );
        ArgumentParser_exposer.staticmethod( "isNumber" );
        ArgumentParser_exposer.staticmethod( "isOptionStr" );
        ArgumentParser_exposer.staticmethod( "isString" );
        ArgumentParser_exposer.def( "__init__", bp::make_constructor( &initArgumentParser ) );
        ArgumentParser_exposer.def( "__init__", bp::make_constructor( &initArgumentParser2 ) );
        ArgumentParser_exposer.def( "__getitem__", &getArgumentParserItem );
    }

}
