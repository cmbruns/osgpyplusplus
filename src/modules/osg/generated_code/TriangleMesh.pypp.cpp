// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "TriangleMesh.pypp.hpp"

namespace bp = boost::python;

struct TriangleMesh_wrapper : osg::TriangleMesh, bp::wrapper< osg::TriangleMesh > {

    TriangleMesh_wrapper( )
    : osg::TriangleMesh( )
      , bp::wrapper< osg::TriangleMesh >(){
        // null constructor
    
    }

    virtual void accept( ::osg::ShapeVisitor & sv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(sv) );
        else{
            this->osg::TriangleMesh::accept( boost::ref(sv) );
        }
    }
    
    void default_accept( ::osg::ShapeVisitor & sv ) {
        osg::TriangleMesh::accept( boost::ref(sv) );
    }

    virtual void accept( ::osg::ConstShapeVisitor & csv ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(csv) );
        else{
            this->osg::TriangleMesh::accept( boost::ref(csv) );
        }
    }
    
    void default_accept( ::osg::ConstShapeVisitor & csv ) const  {
        osg::TriangleMesh::accept( boost::ref(csv) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::TriangleMesh::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::TriangleMesh::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::TriangleMesh::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::TriangleMesh::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::TriangleMesh::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::TriangleMesh::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::TriangleMesh::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::TriangleMesh::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::TriangleMesh::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::TriangleMesh::libraryName( );
    }

};

void register_TriangleMesh_class(){

    bp::class_< TriangleMesh_wrapper, bp::bases< osg::Shape >, osg::ref_ptr< ::osg::TriangleMesh >, boost::noncopyable >( "TriangleMesh", "\n Exists to support collision detection engines not for doing rendering, use  osg::Geometry instead.\n", bp::no_init )    
        .def( bp::init< >("\n Exists to support collision detection engines not for doing rendering, use  osg::Geometry instead.\n") )    
        .def( 
            "accept"
            , (void ( ::osg::TriangleMesh::* )( ::osg::ShapeVisitor & ) )(&::osg::TriangleMesh::accept)
            , (void ( TriangleMesh_wrapper::* )( ::osg::ShapeVisitor & ) )(&TriangleMesh_wrapper::default_accept)
            , ( bp::arg("sv") ) )    
        .def( 
            "accept"
            , (void ( ::osg::TriangleMesh::* )( ::osg::ConstShapeVisitor & ) const)(&::osg::TriangleMesh::accept)
            , (void ( TriangleMesh_wrapper::* )( ::osg::ConstShapeVisitor & ) const)(&TriangleMesh_wrapper::default_accept)
            , ( bp::arg("csv") ) )    
        .def( 
            "className"
            , (char const * ( ::osg::TriangleMesh::* )(  ) const)(&::osg::TriangleMesh::className)
            , (char const * ( TriangleMesh_wrapper::* )(  ) const)(&TriangleMesh_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osg::TriangleMesh::* )( ::osg::CopyOp const & ) const)(&::osg::TriangleMesh::clone)
            , (::osg::Object * ( TriangleMesh_wrapper::* )( ::osg::CopyOp const & ) const)(&TriangleMesh_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osg::TriangleMesh::* )(  ) const)(&::osg::TriangleMesh::cloneType)
            , (::osg::Object * ( TriangleMesh_wrapper::* )(  ) const)(&TriangleMesh_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getIndices"
            , (::osg::IndexArray * ( ::osg::TriangleMesh::* )(  ) )( &::osg::TriangleMesh::getIndices )
            , bp::return_internal_reference< >() )    
        .def( 
            "getIndices"
            , (::osg::IndexArray const * ( ::osg::TriangleMesh::* )(  ) const)( &::osg::TriangleMesh::getIndices )
            , bp::return_internal_reference< >() )    
        .def( 
            "getVertices"
            , (::osg::Vec3Array * ( ::osg::TriangleMesh::* )(  ) )( &::osg::TriangleMesh::getVertices )
            , bp::return_internal_reference< >() )    
        .def( 
            "getVertices"
            , (::osg::Vec3Array const * ( ::osg::TriangleMesh::* )(  ) const)( &::osg::TriangleMesh::getVertices )
            , bp::return_internal_reference< >() )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osg::TriangleMesh::* )( ::osg::Object const * ) const)(&::osg::TriangleMesh::isSameKindAs)
            , (bool ( TriangleMesh_wrapper::* )( ::osg::Object const * ) const)(&TriangleMesh_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osg::TriangleMesh::* )(  ) const)(&::osg::TriangleMesh::libraryName)
            , (char const * ( TriangleMesh_wrapper::* )(  ) const)(&TriangleMesh_wrapper::default_libraryName) )    
        .def( 
            "setIndices"
            , (void ( ::osg::TriangleMesh::* )( ::osg::IndexArray * ) )( &::osg::TriangleMesh::setIndices )
            , ( bp::arg("indices") ) )    
        .def( 
            "setVertices"
            , (void ( ::osg::TriangleMesh::* )( ::osg::Vec3Array * ) )( &::osg::TriangleMesh::setVertices )
            , ( bp::arg("vertices") ) );

}
