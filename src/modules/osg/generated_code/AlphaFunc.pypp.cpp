// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "AlphaFunc.pypp.hpp"

namespace bp = boost::python;

struct AlphaFunc_wrapper : osg::AlphaFunc, bp::wrapper< osg::AlphaFunc > {

    AlphaFunc_wrapper( )
    : osg::AlphaFunc( )
      , bp::wrapper< osg::AlphaFunc >(){
        // null constructor
    
    }

    AlphaFunc_wrapper(::osg::AlphaFunc::ComparisonFunction func, float ref )
    : osg::AlphaFunc( func, ref )
      , bp::wrapper< osg::AlphaFunc >(){
        // constructor
    
    }

    virtual void apply( ::osg::State & state ) const  {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(state) );
        else{
            this->osg::AlphaFunc::apply( boost::ref(state) );
        }
    }
    
    void default_apply( ::osg::State & state ) const  {
        osg::AlphaFunc::apply( boost::ref(state) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::AlphaFunc::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::AlphaFunc::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::AlphaFunc::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::AlphaFunc::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::AlphaFunc::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::AlphaFunc::cloneType( );
    }

    virtual bool getModeUsage( ::osg::StateAttribute::ModeUsage & usage ) const  {
        if( bp::override func_getModeUsage = this->get_override( "getModeUsage" ) )
            return func_getModeUsage( boost::ref(usage) );
        else{
            return this->osg::AlphaFunc::getModeUsage( boost::ref(usage) );
        }
    }
    
    bool default_getModeUsage( ::osg::StateAttribute::ModeUsage & usage ) const  {
        return osg::AlphaFunc::getModeUsage( boost::ref(usage) );
    }

    virtual ::osg::StateAttribute::Type getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->osg::AlphaFunc::getType(  );
        }
    }
    
    ::osg::StateAttribute::Type default_getType(  ) const  {
        return osg::AlphaFunc::getType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::AlphaFunc::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::AlphaFunc::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::AlphaFunc::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::AlphaFunc::libraryName( );
    }

    virtual ::osg::Texture * asTexture(  ) {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::StateAttribute::asTexture(  );
        }
    }
    
    ::osg::Texture * default_asTexture(  ) {
        return osg::StateAttribute::asTexture( );
    }

    virtual ::osg::Texture const * asTexture(  ) const  {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::StateAttribute::asTexture(  );
        }
    }
    
    ::osg::Texture const * default_asTexture(  ) const  {
        return osg::StateAttribute::asTexture( );
    }

    virtual bool checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        if( bp::override func_checkValidityOfAssociatedModes = this->get_override( "checkValidityOfAssociatedModes" ) )
            return func_checkValidityOfAssociatedModes( boost::ref(arg0) );
        else{
            return this->osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
        }
    }
    
    bool default_checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        return osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
    }

    virtual void compileGLObjects( ::osg::State & arg0 ) const  {
        if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
            func_compileGLObjects( boost::ref(arg0) );
        else{
            this->osg::StateAttribute::compileGLObjects( boost::ref(arg0) );
        }
    }
    
    void default_compileGLObjects( ::osg::State & arg0 ) const  {
        osg::StateAttribute::compileGLObjects( boost::ref(arg0) );
    }

    virtual unsigned int getMember(  ) const  {
        if( bp::override func_getMember = this->get_override( "getMember" ) )
            return func_getMember(  );
        else{
            return this->osg::StateAttribute::getMember(  );
        }
    }
    
    unsigned int default_getMember(  ) const  {
        return osg::StateAttribute::getMember( );
    }

    virtual bool isTextureAttribute(  ) const  {
        if( bp::override func_isTextureAttribute = this->get_override( "isTextureAttribute" ) )
            return func_isTextureAttribute(  );
        else{
            return this->osg::StateAttribute::isTextureAttribute(  );
        }
    }
    
    bool default_isTextureAttribute(  ) const  {
        return osg::StateAttribute::isTextureAttribute( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::StateAttribute::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::StateAttribute::resizeGLObjectBuffers( arg0 );
    }

};

void register_AlphaFunc_class(){

    { //::osg::AlphaFunc
        typedef bp::class_< AlphaFunc_wrapper, bp::bases< osg::StateAttribute >, osg::ref_ptr< ::osg::AlphaFunc >, boost::noncopyable > AlphaFunc_exposer_t;
        AlphaFunc_exposer_t AlphaFunc_exposer = AlphaFunc_exposer_t( "AlphaFunc", "\n Encapsulates OpenGL glAlphaFunc.\n", bp::no_init );
        bp::scope AlphaFunc_scope( AlphaFunc_exposer );
        bp::enum_< osg::AlphaFunc::ComparisonFunction>("ComparisonFunction")
            .value("NEVER", osg::AlphaFunc::NEVER)
            .value("LESS", osg::AlphaFunc::LESS)
            .value("EQUAL", osg::AlphaFunc::EQUAL)
            .value("LEQUAL", osg::AlphaFunc::LEQUAL)
            .value("GREATER", osg::AlphaFunc::GREATER)
            .value("NOTEQUAL", osg::AlphaFunc::NOTEQUAL)
            .value("GEQUAL", osg::AlphaFunc::GEQUAL)
            .value("ALWAYS", osg::AlphaFunc::ALWAYS)
            .export_values()
            ;
        AlphaFunc_exposer.def( bp::init< >() );
        AlphaFunc_exposer.def( bp::init< osg::AlphaFunc::ComparisonFunction, float >(( bp::arg("func"), bp::arg("ref") )) );
        { //::osg::AlphaFunc::apply
        
            typedef void ( ::osg::AlphaFunc::*apply_function_type )( ::osg::State & ) const;
            typedef void ( AlphaFunc_wrapper::*default_apply_function_type )( ::osg::State & ) const;
            
            AlphaFunc_exposer.def( 
                "apply"
                , apply_function_type(&::osg::AlphaFunc::apply)
                , default_apply_function_type(&AlphaFunc_wrapper::default_apply)
                , ( bp::arg("state") ) );
        
        }
        { //::osg::AlphaFunc::className
        
            typedef char const * ( ::osg::AlphaFunc::*className_function_type )(  ) const;
            typedef char const * ( AlphaFunc_wrapper::*default_className_function_type )(  ) const;
            
            AlphaFunc_exposer.def( 
                "className"
                , className_function_type(&::osg::AlphaFunc::className)
                , default_className_function_type(&AlphaFunc_wrapper::default_className) );
        
        }
        { //::osg::AlphaFunc::clone
        
            typedef ::osg::Object * ( ::osg::AlphaFunc::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( AlphaFunc_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            AlphaFunc_exposer.def( 
                "clone"
                , clone_function_type(&::osg::AlphaFunc::clone)
                , default_clone_function_type(&AlphaFunc_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::AlphaFunc::cloneType
        
            typedef ::osg::Object * ( ::osg::AlphaFunc::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( AlphaFunc_wrapper::*default_cloneType_function_type )(  ) const;
            
            AlphaFunc_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::AlphaFunc::cloneType)
                , default_cloneType_function_type(&AlphaFunc_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::AlphaFunc::getFunction
        
            typedef ::osg::AlphaFunc::ComparisonFunction ( ::osg::AlphaFunc::*getFunction_function_type )(  ) const;
            
            AlphaFunc_exposer.def( 
                "getFunction"
                , getFunction_function_type( &::osg::AlphaFunc::getFunction ) );
        
        }
        { //::osg::AlphaFunc::getModeUsage
        
            typedef bool ( ::osg::AlphaFunc::*getModeUsage_function_type )( ::osg::StateAttribute::ModeUsage & ) const;
            typedef bool ( AlphaFunc_wrapper::*default_getModeUsage_function_type )( ::osg::StateAttribute::ModeUsage & ) const;
            
            AlphaFunc_exposer.def( 
                "getModeUsage"
                , getModeUsage_function_type(&::osg::AlphaFunc::getModeUsage)
                , default_getModeUsage_function_type(&AlphaFunc_wrapper::default_getModeUsage)
                , ( bp::arg("usage") ) );
        
        }
        { //::osg::AlphaFunc::getReferenceValue
        
            typedef float ( ::osg::AlphaFunc::*getReferenceValue_function_type )(  ) const;
            
            AlphaFunc_exposer.def( 
                "getReferenceValue"
                , getReferenceValue_function_type( &::osg::AlphaFunc::getReferenceValue ) );
        
        }
        { //::osg::AlphaFunc::getType
        
            typedef ::osg::StateAttribute::Type ( ::osg::AlphaFunc::*getType_function_type )(  ) const;
            typedef ::osg::StateAttribute::Type ( AlphaFunc_wrapper::*default_getType_function_type )(  ) const;
            
            AlphaFunc_exposer.def( 
                "getType"
                , getType_function_type(&::osg::AlphaFunc::getType)
                , default_getType_function_type(&AlphaFunc_wrapper::default_getType) );
        
        }
        { //::osg::AlphaFunc::isSameKindAs
        
            typedef bool ( ::osg::AlphaFunc::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( AlphaFunc_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            AlphaFunc_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::AlphaFunc::isSameKindAs)
                , default_isSameKindAs_function_type(&AlphaFunc_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::AlphaFunc::libraryName
        
            typedef char const * ( ::osg::AlphaFunc::*libraryName_function_type )(  ) const;
            typedef char const * ( AlphaFunc_wrapper::*default_libraryName_function_type )(  ) const;
            
            AlphaFunc_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::AlphaFunc::libraryName)
                , default_libraryName_function_type(&AlphaFunc_wrapper::default_libraryName) );
        
        }
        { //::osg::AlphaFunc::setFunction
        
            typedef void ( ::osg::AlphaFunc::*setFunction_function_type )( ::osg::AlphaFunc::ComparisonFunction,float ) ;
            
            AlphaFunc_exposer.def( 
                "setFunction"
                , setFunction_function_type( &::osg::AlphaFunc::setFunction )
                , ( bp::arg("func"), bp::arg("ref") ) );
        
        }
        { //::osg::AlphaFunc::setFunction
        
            typedef void ( ::osg::AlphaFunc::*setFunction_function_type )( ::osg::AlphaFunc::ComparisonFunction ) ;
            
            AlphaFunc_exposer.def( 
                "setFunction"
                , setFunction_function_type( &::osg::AlphaFunc::setFunction )
                , ( bp::arg("func") ) );
        
        }
        { //::osg::AlphaFunc::setReferenceValue
        
            typedef void ( ::osg::AlphaFunc::*setReferenceValue_function_type )( float ) ;
            
            AlphaFunc_exposer.def( 
                "setReferenceValue"
                , setReferenceValue_function_type( &::osg::AlphaFunc::setReferenceValue )
                , ( bp::arg("value") ) );
        
        }
        { //::osg::StateAttribute::asTexture
        
            typedef ::osg::Texture * ( ::osg::StateAttribute::*asTexture_function_type )(  ) ;
            typedef ::osg::Texture * ( AlphaFunc_wrapper::*default_asTexture_function_type )(  ) ;
            
            AlphaFunc_exposer.def( 
                "asTexture"
                , asTexture_function_type(&::osg::StateAttribute::asTexture)
                , default_asTexture_function_type(&AlphaFunc_wrapper::default_asTexture)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateAttribute::asTexture
        
            typedef ::osg::Texture const * ( ::osg::StateAttribute::*asTexture_function_type )(  ) const;
            typedef ::osg::Texture const * ( AlphaFunc_wrapper::*default_asTexture_function_type )(  ) const;
            
            AlphaFunc_exposer.def( 
                "asTexture"
                , asTexture_function_type(&::osg::StateAttribute::asTexture)
                , default_asTexture_function_type(&AlphaFunc_wrapper::default_asTexture)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateAttribute::checkValidityOfAssociatedModes
        
            typedef bool ( ::osg::StateAttribute::*checkValidityOfAssociatedModes_function_type )( ::osg::State & ) const;
            typedef bool ( AlphaFunc_wrapper::*default_checkValidityOfAssociatedModes_function_type )( ::osg::State & ) const;
            
            AlphaFunc_exposer.def( 
                "checkValidityOfAssociatedModes"
                , checkValidityOfAssociatedModes_function_type(&::osg::StateAttribute::checkValidityOfAssociatedModes)
                , default_checkValidityOfAssociatedModes_function_type(&AlphaFunc_wrapper::default_checkValidityOfAssociatedModes)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::StateAttribute::compileGLObjects
        
            typedef void ( ::osg::StateAttribute::*compileGLObjects_function_type )( ::osg::State & ) const;
            typedef void ( AlphaFunc_wrapper::*default_compileGLObjects_function_type )( ::osg::State & ) const;
            
            AlphaFunc_exposer.def( 
                "compileGLObjects"
                , compileGLObjects_function_type(&::osg::StateAttribute::compileGLObjects)
                , default_compileGLObjects_function_type(&AlphaFunc_wrapper::default_compileGLObjects)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::StateAttribute::getMember
        
            typedef unsigned int ( ::osg::StateAttribute::*getMember_function_type )(  ) const;
            typedef unsigned int ( AlphaFunc_wrapper::*default_getMember_function_type )(  ) const;
            
            AlphaFunc_exposer.def( 
                "getMember"
                , getMember_function_type(&::osg::StateAttribute::getMember)
                , default_getMember_function_type(&AlphaFunc_wrapper::default_getMember) );
        
        }
        { //::osg::StateAttribute::isTextureAttribute
        
            typedef bool ( ::osg::StateAttribute::*isTextureAttribute_function_type )(  ) const;
            typedef bool ( AlphaFunc_wrapper::*default_isTextureAttribute_function_type )(  ) const;
            
            AlphaFunc_exposer.def( 
                "isTextureAttribute"
                , isTextureAttribute_function_type(&::osg::StateAttribute::isTextureAttribute)
                , default_isTextureAttribute_function_type(&AlphaFunc_wrapper::default_isTextureAttribute) );
        
        }
        { //::osg::StateAttribute::resizeGLObjectBuffers
        
            typedef void ( ::osg::StateAttribute::*resizeGLObjectBuffers_function_type )( unsigned int ) ;
            typedef void ( AlphaFunc_wrapper::*default_resizeGLObjectBuffers_function_type )( unsigned int ) ;
            
            AlphaFunc_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::StateAttribute::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&AlphaFunc_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) );
        
        }
    }

}
