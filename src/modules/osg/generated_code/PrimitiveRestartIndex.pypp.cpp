// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "PrimitiveRestartIndex.pypp.hpp"

namespace bp = boost::python;

struct PrimitiveRestartIndex_wrapper : osg::PrimitiveRestartIndex, bp::wrapper< osg::PrimitiveRestartIndex > {

    PrimitiveRestartIndex_wrapper( )
    : osg::PrimitiveRestartIndex( )
      , bp::wrapper< osg::PrimitiveRestartIndex >(){
        // null constructor
    
    }

    PrimitiveRestartIndex_wrapper(unsigned int restartIndex )
    : osg::PrimitiveRestartIndex( restartIndex )
      , bp::wrapper< osg::PrimitiveRestartIndex >(){
        // constructor
    
    }

    virtual void apply( ::osg::State & state ) const  {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(state) );
        else{
            this->osg::PrimitiveRestartIndex::apply( boost::ref(state) );
        }
    }
    
    void default_apply( ::osg::State & state ) const  {
        osg::PrimitiveRestartIndex::apply( boost::ref(state) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::PrimitiveRestartIndex::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::PrimitiveRestartIndex::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::PrimitiveRestartIndex::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::PrimitiveRestartIndex::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::PrimitiveRestartIndex::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::PrimitiveRestartIndex::cloneType( );
    }

    virtual ::osg::StateAttribute::Type getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->osg::PrimitiveRestartIndex::getType(  );
        }
    }
    
    ::osg::StateAttribute::Type default_getType(  ) const  {
        return osg::PrimitiveRestartIndex::getType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::PrimitiveRestartIndex::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::PrimitiveRestartIndex::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::PrimitiveRestartIndex::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::PrimitiveRestartIndex::libraryName( );
    }

    virtual ::osg::Texture * asTexture(  ) {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::StateAttribute::asTexture(  );
        }
    }
    
    ::osg::Texture * default_asTexture(  ) {
        return osg::StateAttribute::asTexture( );
    }

    virtual ::osg::Texture const * asTexture(  ) const  {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::StateAttribute::asTexture(  );
        }
    }
    
    ::osg::Texture const * default_asTexture(  ) const  {
        return osg::StateAttribute::asTexture( );
    }

    virtual bool checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        if( bp::override func_checkValidityOfAssociatedModes = this->get_override( "checkValidityOfAssociatedModes" ) )
            return func_checkValidityOfAssociatedModes( boost::ref(arg0) );
        else{
            return this->osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
        }
    }
    
    bool default_checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        return osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
    }

    virtual void compileGLObjects( ::osg::State & arg0 ) const  {
        if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
            func_compileGLObjects( boost::ref(arg0) );
        else{
            this->osg::StateAttribute::compileGLObjects( boost::ref(arg0) );
        }
    }
    
    void default_compileGLObjects( ::osg::State & arg0 ) const  {
        osg::StateAttribute::compileGLObjects( boost::ref(arg0) );
    }

    virtual unsigned int getMember(  ) const  {
        if( bp::override func_getMember = this->get_override( "getMember" ) )
            return func_getMember(  );
        else{
            return this->osg::StateAttribute::getMember(  );
        }
    }
    
    unsigned int default_getMember(  ) const  {
        return osg::StateAttribute::getMember( );
    }

    virtual bool getModeUsage( ::osg::StateAttribute::ModeUsage & arg0 ) const  {
        if( bp::override func_getModeUsage = this->get_override( "getModeUsage" ) )
            return func_getModeUsage( boost::ref(arg0) );
        else{
            return this->osg::StateAttribute::getModeUsage( boost::ref(arg0) );
        }
    }
    
    bool default_getModeUsage( ::osg::StateAttribute::ModeUsage & arg0 ) const  {
        return osg::StateAttribute::getModeUsage( boost::ref(arg0) );
    }

    virtual bool isTextureAttribute(  ) const  {
        if( bp::override func_isTextureAttribute = this->get_override( "isTextureAttribute" ) )
            return func_isTextureAttribute(  );
        else{
            return this->osg::StateAttribute::isTextureAttribute(  );
        }
    }
    
    bool default_isTextureAttribute(  ) const  {
        return osg::StateAttribute::isTextureAttribute( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::StateAttribute::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::StateAttribute::resizeGLObjectBuffers( arg0 );
    }

};

static void lowestCommonDenominator_a2bd4434d4f0f40b404a7e7cbb18b5f7( ::osg::PrimitiveRestartIndex::Extensions & inst, ::osg::PrimitiveRestartIndex::Extensions & rhs ){
    inst.lowestCommonDenominator(rhs);
}

void register_PrimitiveRestartIndex_class(){

    { //::osg::PrimitiveRestartIndex
        typedef bp::class_< PrimitiveRestartIndex_wrapper, bp::bases< osg::StateAttribute >, osg::ref_ptr< ::osg::PrimitiveRestartIndex >, boost::noncopyable > PrimitiveRestartIndex_exposer_t;
        PrimitiveRestartIndex_exposer_t PrimitiveRestartIndex_exposer = PrimitiveRestartIndex_exposer_t( "PrimitiveRestartIndex", "\n  osg::PrimitiveRestartIndex does nothing if OpenGL 3.1 is not available.\n", bp::no_init );
        bp::scope PrimitiveRestartIndex_scope( PrimitiveRestartIndex_exposer );
        { //::osg::PrimitiveRestartIndex::Extensions
            typedef bp::class_< osg::PrimitiveRestartIndex::Extensions, bp::bases< osg::Referenced >, osg::ref_ptr< ::osg::PrimitiveRestartIndex::Extensions > > Extensions_exposer_t;
            Extensions_exposer_t Extensions_exposer = Extensions_exposer_t( "Extensions", "\n Extensions class which encapsulates the querying of extensions and\n associated function pointers, and provide convenience wrappers to\n check for the extensions or use the associated functions.\n", bp::no_init );
            bp::scope Extensions_scope( Extensions_exposer );
            Extensions_exposer.def( bp::init< unsigned int >(( bp::arg("contextID") ), "\n Extensions class which encapsulates the querying of extensions and\n associated function pointers, and provide convenience wrappers to\n check for the extensions or use the associated functions.\n") );
            bp::implicitly_convertible< unsigned int, osg::PrimitiveRestartIndex::Extensions >();
            { //::osg::PrimitiveRestartIndex::Extensions::glPrimitiveRestartIndex
            
                typedef void ( ::osg::PrimitiveRestartIndex::Extensions::*glPrimitiveRestartIndex_function_type )( ::GLuint ) const;
                
                Extensions_exposer.def( 
                    "glPrimitiveRestartIndex"
                    , glPrimitiveRestartIndex_function_type( &::osg::PrimitiveRestartIndex::Extensions::glPrimitiveRestartIndex )
                    , ( bp::arg("index") ) );
            
            }
            { //::osg::PrimitiveRestartIndex::Extensions::isOpenGL31Supported
            
                typedef bool ( ::osg::PrimitiveRestartIndex::Extensions::*isOpenGL31Supported_function_type )(  ) const;
                
                Extensions_exposer.def( 
                    "isOpenGL31Supported"
                    , isOpenGL31Supported_function_type( &::osg::PrimitiveRestartIndex::Extensions::isOpenGL31Supported ) );
            
            }
            { //::osg::PrimitiveRestartIndex::Extensions::isPrimitiveRestartIndexNVSupported
            
                typedef bool ( ::osg::PrimitiveRestartIndex::Extensions::*isPrimitiveRestartIndexNVSupported_function_type )(  ) const;
                
                Extensions_exposer.def( 
                    "isPrimitiveRestartIndexNVSupported"
                    , isPrimitiveRestartIndexNVSupported_function_type( &::osg::PrimitiveRestartIndex::Extensions::isPrimitiveRestartIndexNVSupported ) );
            
            }
            { //::osg::PrimitiveRestartIndex::Extensions::lowestCommonDenominator
            
                typedef void ( *lowestCommonDenominator_function_type )( ::osg::PrimitiveRestartIndex::Extensions &,::osg::PrimitiveRestartIndex::Extensions & );
                
                Extensions_exposer.def( 
                    "lowestCommonDenominator"
                    , lowestCommonDenominator_function_type( &lowestCommonDenominator_a2bd4434d4f0f40b404a7e7cbb18b5f7 )
                    , ( bp::arg("inst"), bp::arg("rhs") ) );
            
            }
            { //::osg::PrimitiveRestartIndex::Extensions::setupGLExtensions
            
                typedef void ( ::osg::PrimitiveRestartIndex::Extensions::*setupGLExtensions_function_type )( unsigned int ) ;
                
                Extensions_exposer.def( 
                    "setupGLExtensions"
                    , setupGLExtensions_function_type( &::osg::PrimitiveRestartIndex::Extensions::setupGLExtensions )
                    , ( bp::arg("contextID") ) );
            
            }
        }
        PrimitiveRestartIndex_exposer.def( bp::init< >("\n  osg::PrimitiveRestartIndex does nothing if OpenGL 3.1 is not available.\n") );
        PrimitiveRestartIndex_exposer.def( bp::init< unsigned int >(( bp::arg("restartIndex") )) );
        bp::implicitly_convertible< unsigned int, osg::PrimitiveRestartIndex >();
        { //::osg::PrimitiveRestartIndex::apply
        
            typedef void ( ::osg::PrimitiveRestartIndex::*apply_function_type )( ::osg::State & ) const;
            typedef void ( PrimitiveRestartIndex_wrapper::*default_apply_function_type )( ::osg::State & ) const;
            
            PrimitiveRestartIndex_exposer.def( 
                "apply"
                , apply_function_type(&::osg::PrimitiveRestartIndex::apply)
                , default_apply_function_type(&PrimitiveRestartIndex_wrapper::default_apply)
                , ( bp::arg("state") ) );
        
        }
        { //::osg::PrimitiveRestartIndex::className
        
            typedef char const * ( ::osg::PrimitiveRestartIndex::*className_function_type )(  ) const;
            typedef char const * ( PrimitiveRestartIndex_wrapper::*default_className_function_type )(  ) const;
            
            PrimitiveRestartIndex_exposer.def( 
                "className"
                , className_function_type(&::osg::PrimitiveRestartIndex::className)
                , default_className_function_type(&PrimitiveRestartIndex_wrapper::default_className) );
        
        }
        { //::osg::PrimitiveRestartIndex::clone
        
            typedef ::osg::Object * ( ::osg::PrimitiveRestartIndex::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( PrimitiveRestartIndex_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            PrimitiveRestartIndex_exposer.def( 
                "clone"
                , clone_function_type(&::osg::PrimitiveRestartIndex::clone)
                , default_clone_function_type(&PrimitiveRestartIndex_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::PrimitiveRestartIndex::cloneType
        
            typedef ::osg::Object * ( ::osg::PrimitiveRestartIndex::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( PrimitiveRestartIndex_wrapper::*default_cloneType_function_type )(  ) const;
            
            PrimitiveRestartIndex_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::PrimitiveRestartIndex::cloneType)
                , default_cloneType_function_type(&PrimitiveRestartIndex_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::PrimitiveRestartIndex::getExtensions
        
            typedef ::osg::PrimitiveRestartIndex::Extensions * ( *getExtensions_function_type )( unsigned int,bool );
            
            PrimitiveRestartIndex_exposer.def( 
                "getExtensions"
                , getExtensions_function_type( &::osg::PrimitiveRestartIndex::getExtensions )
                , ( bp::arg("contextID"), bp::arg("createIfNotInitalized") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::PrimitiveRestartIndex::getRestartIndex
        
            typedef unsigned int ( ::osg::PrimitiveRestartIndex::*getRestartIndex_function_type )(  ) const;
            
            PrimitiveRestartIndex_exposer.def( 
                "getRestartIndex"
                , getRestartIndex_function_type( &::osg::PrimitiveRestartIndex::getRestartIndex ) );
        
        }
        { //::osg::PrimitiveRestartIndex::getType
        
            typedef ::osg::StateAttribute::Type ( ::osg::PrimitiveRestartIndex::*getType_function_type )(  ) const;
            typedef ::osg::StateAttribute::Type ( PrimitiveRestartIndex_wrapper::*default_getType_function_type )(  ) const;
            
            PrimitiveRestartIndex_exposer.def( 
                "getType"
                , getType_function_type(&::osg::PrimitiveRestartIndex::getType)
                , default_getType_function_type(&PrimitiveRestartIndex_wrapper::default_getType) );
        
        }
        { //::osg::PrimitiveRestartIndex::isSameKindAs
        
            typedef bool ( ::osg::PrimitiveRestartIndex::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( PrimitiveRestartIndex_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            PrimitiveRestartIndex_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::PrimitiveRestartIndex::isSameKindAs)
                , default_isSameKindAs_function_type(&PrimitiveRestartIndex_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::PrimitiveRestartIndex::libraryName
        
            typedef char const * ( ::osg::PrimitiveRestartIndex::*libraryName_function_type )(  ) const;
            typedef char const * ( PrimitiveRestartIndex_wrapper::*default_libraryName_function_type )(  ) const;
            
            PrimitiveRestartIndex_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::PrimitiveRestartIndex::libraryName)
                , default_libraryName_function_type(&PrimitiveRestartIndex_wrapper::default_libraryName) );
        
        }
        { //::osg::PrimitiveRestartIndex::setExtensions
        
            typedef void ( *setExtensions_function_type )( unsigned int,::osg::PrimitiveRestartIndex::Extensions * );
            
            PrimitiveRestartIndex_exposer.def( 
                "setExtensions"
                , setExtensions_function_type( &::osg::PrimitiveRestartIndex::setExtensions )
                , ( bp::arg("contextID"), bp::arg("extensions") ) );
        
        }
        { //::osg::PrimitiveRestartIndex::setRestartIndex
        
            typedef void ( ::osg::PrimitiveRestartIndex::*setRestartIndex_function_type )( unsigned int ) ;
            
            PrimitiveRestartIndex_exposer.def( 
                "setRestartIndex"
                , setRestartIndex_function_type( &::osg::PrimitiveRestartIndex::setRestartIndex )
                , ( bp::arg("restartIndex") ) );
        
        }
        { //::osg::StateAttribute::asTexture
        
            typedef ::osg::Texture * ( ::osg::StateAttribute::*asTexture_function_type )(  ) ;
            typedef ::osg::Texture * ( PrimitiveRestartIndex_wrapper::*default_asTexture_function_type )(  ) ;
            
            PrimitiveRestartIndex_exposer.def( 
                "asTexture"
                , asTexture_function_type(&::osg::StateAttribute::asTexture)
                , default_asTexture_function_type(&PrimitiveRestartIndex_wrapper::default_asTexture)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateAttribute::asTexture
        
            typedef ::osg::Texture const * ( ::osg::StateAttribute::*asTexture_function_type )(  ) const;
            typedef ::osg::Texture const * ( PrimitiveRestartIndex_wrapper::*default_asTexture_function_type )(  ) const;
            
            PrimitiveRestartIndex_exposer.def( 
                "asTexture"
                , asTexture_function_type(&::osg::StateAttribute::asTexture)
                , default_asTexture_function_type(&PrimitiveRestartIndex_wrapper::default_asTexture)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateAttribute::checkValidityOfAssociatedModes
        
            typedef bool ( ::osg::StateAttribute::*checkValidityOfAssociatedModes_function_type )( ::osg::State & ) const;
            typedef bool ( PrimitiveRestartIndex_wrapper::*default_checkValidityOfAssociatedModes_function_type )( ::osg::State & ) const;
            
            PrimitiveRestartIndex_exposer.def( 
                "checkValidityOfAssociatedModes"
                , checkValidityOfAssociatedModes_function_type(&::osg::StateAttribute::checkValidityOfAssociatedModes)
                , default_checkValidityOfAssociatedModes_function_type(&PrimitiveRestartIndex_wrapper::default_checkValidityOfAssociatedModes)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::StateAttribute::compileGLObjects
        
            typedef void ( ::osg::StateAttribute::*compileGLObjects_function_type )( ::osg::State & ) const;
            typedef void ( PrimitiveRestartIndex_wrapper::*default_compileGLObjects_function_type )( ::osg::State & ) const;
            
            PrimitiveRestartIndex_exposer.def( 
                "compileGLObjects"
                , compileGLObjects_function_type(&::osg::StateAttribute::compileGLObjects)
                , default_compileGLObjects_function_type(&PrimitiveRestartIndex_wrapper::default_compileGLObjects)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::StateAttribute::getMember
        
            typedef unsigned int ( ::osg::StateAttribute::*getMember_function_type )(  ) const;
            typedef unsigned int ( PrimitiveRestartIndex_wrapper::*default_getMember_function_type )(  ) const;
            
            PrimitiveRestartIndex_exposer.def( 
                "getMember"
                , getMember_function_type(&::osg::StateAttribute::getMember)
                , default_getMember_function_type(&PrimitiveRestartIndex_wrapper::default_getMember) );
        
        }
        { //::osg::StateAttribute::getModeUsage
        
            typedef bool ( ::osg::StateAttribute::*getModeUsage_function_type )( ::osg::StateAttribute::ModeUsage & ) const;
            typedef bool ( PrimitiveRestartIndex_wrapper::*default_getModeUsage_function_type )( ::osg::StateAttribute::ModeUsage & ) const;
            
            PrimitiveRestartIndex_exposer.def( 
                "getModeUsage"
                , getModeUsage_function_type(&::osg::StateAttribute::getModeUsage)
                , default_getModeUsage_function_type(&PrimitiveRestartIndex_wrapper::default_getModeUsage)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::StateAttribute::isTextureAttribute
        
            typedef bool ( ::osg::StateAttribute::*isTextureAttribute_function_type )(  ) const;
            typedef bool ( PrimitiveRestartIndex_wrapper::*default_isTextureAttribute_function_type )(  ) const;
            
            PrimitiveRestartIndex_exposer.def( 
                "isTextureAttribute"
                , isTextureAttribute_function_type(&::osg::StateAttribute::isTextureAttribute)
                , default_isTextureAttribute_function_type(&PrimitiveRestartIndex_wrapper::default_isTextureAttribute) );
        
        }
        { //::osg::StateAttribute::resizeGLObjectBuffers
        
            typedef void ( ::osg::StateAttribute::*resizeGLObjectBuffers_function_type )( unsigned int ) ;
            typedef void ( PrimitiveRestartIndex_wrapper::*default_resizeGLObjectBuffers_function_type )( unsigned int ) ;
            
            PrimitiveRestartIndex_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::StateAttribute::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&PrimitiveRestartIndex_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) );
        
        }
        PrimitiveRestartIndex_exposer.staticmethod( "getExtensions" );
        PrimitiveRestartIndex_exposer.staticmethod( "setExtensions" );
    }

}
