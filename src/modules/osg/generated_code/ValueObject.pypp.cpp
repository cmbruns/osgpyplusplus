// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "ValueObject.pypp.hpp"

namespace bp = boost::python;

struct ValueObject_wrapper : osg::ValueObject, bp::wrapper< osg::ValueObject > {

    struct GetValueVisitor_wrapper : osg::ValueObject::GetValueVisitor, bp::wrapper< osg::ValueObject::GetValueVisitor > {
    
        GetValueVisitor_wrapper(osg::ValueObject::GetValueVisitor const & arg )
        : osg::ValueObject::GetValueVisitor( arg )
          , bp::wrapper< osg::ValueObject::GetValueVisitor >(){
            // copy constructor
            
        }
    
        GetValueVisitor_wrapper()
        : osg::ValueObject::GetValueVisitor()
          , bp::wrapper< osg::ValueObject::GetValueVisitor >(){
            // null constructor
            
        }
    
        virtual void apply( bool arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( bool arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( char arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( char arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( unsigned char arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( unsigned char arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( short int arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( short int arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( short unsigned int arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( short unsigned int arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( int arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( int arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( unsigned int arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( unsigned int arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( float arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( float arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( double arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( double arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( ::std::string const & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( ::std::string const & arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( ::osg::Vec2f const & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Vec2f const & arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
        }
    
        virtual void apply( ::osg::Vec3f const & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Vec3f const & arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
        }
    
        virtual void apply( ::osg::Vec4f const & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Vec4f const & arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
        }
    
        virtual void apply( ::osg::Vec2d const & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Vec2d const & arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
        }
    
        virtual void apply( ::osg::Vec3d const & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Vec3d const & arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
        }
    
        virtual void apply( ::osg::Vec4d const & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Vec4d const & arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
        }
    
        virtual void apply( ::osg::Quat const & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Quat const & arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
        }
    
        virtual void apply( ::osg::Plane const & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Plane const & arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
        }
    
        virtual void apply( ::osg::Matrixf const & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Matrixf const & arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
        }
    
        virtual void apply( ::osg::Matrixd const & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Matrixd const & arg0 ) {
            osg::ValueObject::GetValueVisitor::apply( boost::ref(arg0) );
        }
    
    };

    struct SetValueVisitor_wrapper : osg::ValueObject::SetValueVisitor, bp::wrapper< osg::ValueObject::SetValueVisitor > {
    
        SetValueVisitor_wrapper(osg::ValueObject::SetValueVisitor const & arg )
        : osg::ValueObject::SetValueVisitor( arg )
          , bp::wrapper< osg::ValueObject::SetValueVisitor >(){
            // copy constructor
            
        }
    
        SetValueVisitor_wrapper()
        : osg::ValueObject::SetValueVisitor()
          , bp::wrapper< osg::ValueObject::SetValueVisitor >(){
            // null constructor
            
        }
    
        virtual void apply( bool & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( bool & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( char & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( char & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( unsigned char & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( unsigned char & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( short int & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( short int & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( short unsigned int & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( short unsigned int & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( int & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( int & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( unsigned int & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( unsigned int & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( float & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( float & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( double & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( double & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( ::std::string & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( arg0 );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( arg0 );
            }
        }
        
        void default_apply( ::std::string & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( arg0 );
        }
    
        virtual void apply( ::osg::Vec2f & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Vec2f & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
        }
    
        virtual void apply( ::osg::Vec3f & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Vec3f & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
        }
    
        virtual void apply( ::osg::Vec4f & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Vec4f & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
        }
    
        virtual void apply( ::osg::Vec2d & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Vec2d & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
        }
    
        virtual void apply( ::osg::Vec3d & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Vec3d & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
        }
    
        virtual void apply( ::osg::Vec4d & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Vec4d & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
        }
    
        virtual void apply( ::osg::Quat & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Quat & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
        }
    
        virtual void apply( ::osg::Plane & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Plane & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
        }
    
        virtual void apply( ::osg::Matrixf & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Matrixf & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
        }
    
        virtual void apply( ::osg::Matrixd & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Matrixd & arg0 ) {
            osg::ValueObject::SetValueVisitor::apply( boost::ref(arg0) );
        }
    
    };

    ValueObject_wrapper( )
    : osg::ValueObject( )
      , bp::wrapper< osg::ValueObject >(){
        // null constructor
    
    }

    ValueObject_wrapper(::std::string const & name )
    : osg::ValueObject( name )
      , bp::wrapper< osg::ValueObject >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::ValueObject::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::ValueObject::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::ValueObject::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::ValueObject::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::ValueObject::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::ValueObject::cloneType( );
    }

    virtual bool get( ::osg::ValueObject::GetValueVisitor & arg0 ) const  {
        if( bp::override func_get = this->get_override( "get" ) )
            return func_get( boost::ref(arg0) );
        else{
            return this->osg::ValueObject::get( boost::ref(arg0) );
        }
    }
    
    bool default_get( ::osg::ValueObject::GetValueVisitor & arg0 ) const  {
        return osg::ValueObject::get( boost::ref(arg0) );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::ValueObject::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::ValueObject::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::ValueObject::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::ValueObject::libraryName( );
    }

    virtual bool set( ::osg::ValueObject::SetValueVisitor & arg0 ) {
        if( bp::override func_set = this->get_override( "set" ) )
            return func_set( boost::ref(arg0) );
        else{
            return this->osg::ValueObject::set( boost::ref(arg0) );
        }
    }
    
    bool default_set( ::osg::ValueObject::SetValueVisitor & arg0 ) {
        return osg::ValueObject::set( boost::ref(arg0) );
    }

};

void register_ValueObject_class(){

    { //::osg::ValueObject
        typedef bp::class_< ValueObject_wrapper, bp::bases< osg::Object >, osg::ref_ptr< ::osg::ValueObject >, boost::noncopyable > ValueObject_exposer_t;
        ValueObject_exposer_t ValueObject_exposer = ValueObject_exposer_t( "ValueObject", bp::no_init );
        bp::scope ValueObject_scope( ValueObject_exposer );
        bp::class_< ValueObject_wrapper::GetValueVisitor_wrapper >( "GetValueVisitor" )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( bool ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( bool ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( char ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( char ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( unsigned char ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( unsigned char ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( short int ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( short int ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( short unsigned int ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( short unsigned int ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( int ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( int ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( unsigned int ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( unsigned int ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( float ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( float ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( double ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( double ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( ::std::string const & ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( ::std::string const & ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( ::osg::Vec2f const & ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( ::osg::Vec2f const & ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( ::osg::Vec3f const & ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( ::osg::Vec3f const & ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( ::osg::Vec4f const & ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( ::osg::Vec4f const & ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( ::osg::Vec2d const & ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( ::osg::Vec2d const & ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( ::osg::Vec3d const & ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( ::osg::Vec3d const & ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( ::osg::Vec4d const & ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( ::osg::Vec4d const & ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( ::osg::Quat const & ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( ::osg::Quat const & ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( ::osg::Plane const & ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( ::osg::Plane const & ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( ::osg::Matrixf const & ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( ::osg::Matrixf const & ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::GetValueVisitor::* )( ::osg::Matrixd const & ) )(&::osg::ValueObject::GetValueVisitor::apply)
                , (void ( ValueObject_wrapper::GetValueVisitor_wrapper::* )( ::osg::Matrixd const & ) )(&ValueObject_wrapper::GetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) );
        bp::class_< ValueObject_wrapper::SetValueVisitor_wrapper >( "SetValueVisitor" )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( bool & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( bool & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( char & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( char & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( unsigned char & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( unsigned char & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( short int & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( short int & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( short unsigned int & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( short unsigned int & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( int & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( int & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( unsigned int & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( unsigned int & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( float & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( float & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( double & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( double & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( ::std::string & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( ::std::string & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( ::osg::Vec2f & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( ::osg::Vec2f & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( ::osg::Vec3f & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( ::osg::Vec3f & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( ::osg::Vec4f & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( ::osg::Vec4f & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( ::osg::Vec2d & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( ::osg::Vec2d & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( ::osg::Vec3d & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( ::osg::Vec3d & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( ::osg::Vec4d & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( ::osg::Vec4d & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( ::osg::Quat & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( ::osg::Quat & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( ::osg::Plane & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( ::osg::Plane & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( ::osg::Matrixf & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( ::osg::Matrixf & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) )    
            .def( 
                "apply"
                , (void ( ::osg::ValueObject::SetValueVisitor::* )( ::osg::Matrixd & ) )(&::osg::ValueObject::SetValueVisitor::apply)
                , (void ( ValueObject_wrapper::SetValueVisitor_wrapper::* )( ::osg::Matrixd & ) )(&ValueObject_wrapper::SetValueVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) );
        ValueObject_exposer.def( bp::init< >() );
        ValueObject_exposer.def( bp::init< std::string const & >(( bp::arg("name") )) );
        bp::implicitly_convertible< std::string const &, osg::ValueObject >();
        { //::osg::ValueObject::className
        
            typedef char const * ( ::osg::ValueObject::*className_function_type )(  ) const;
            typedef char const * ( ValueObject_wrapper::*default_className_function_type )(  ) const;
            
            ValueObject_exposer.def( 
                "className"
                , className_function_type(&::osg::ValueObject::className)
                , default_className_function_type(&ValueObject_wrapper::default_className) );
        
        }
        { //::osg::ValueObject::clone
        
            typedef ::osg::Object * ( ::osg::ValueObject::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( ValueObject_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            ValueObject_exposer.def( 
                "clone"
                , clone_function_type(&::osg::ValueObject::clone)
                , default_clone_function_type(&ValueObject_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::ValueObject::cloneType
        
            typedef ::osg::Object * ( ::osg::ValueObject::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( ValueObject_wrapper::*default_cloneType_function_type )(  ) const;
            
            ValueObject_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::ValueObject::cloneType)
                , default_cloneType_function_type(&ValueObject_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::ValueObject::get
        
            typedef bool ( ::osg::ValueObject::*get_function_type )( ::osg::ValueObject::GetValueVisitor & ) const;
            typedef bool ( ValueObject_wrapper::*default_get_function_type )( ::osg::ValueObject::GetValueVisitor & ) const;
            
            ValueObject_exposer.def( 
                "get"
                , get_function_type(&::osg::ValueObject::get)
                , default_get_function_type(&ValueObject_wrapper::default_get)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::ValueObject::isSameKindAs
        
            typedef bool ( ::osg::ValueObject::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( ValueObject_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            ValueObject_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::ValueObject::isSameKindAs)
                , default_isSameKindAs_function_type(&ValueObject_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::ValueObject::libraryName
        
            typedef char const * ( ::osg::ValueObject::*libraryName_function_type )(  ) const;
            typedef char const * ( ValueObject_wrapper::*default_libraryName_function_type )(  ) const;
            
            ValueObject_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::ValueObject::libraryName)
                , default_libraryName_function_type(&ValueObject_wrapper::default_libraryName) );
        
        }
        { //::osg::ValueObject::set
        
            typedef bool ( ::osg::ValueObject::*set_function_type )( ::osg::ValueObject::SetValueVisitor & ) ;
            typedef bool ( ValueObject_wrapper::*default_set_function_type )( ::osg::ValueObject::SetValueVisitor & ) ;
            
            ValueObject_exposer.def( 
                "set"
                , set_function_type(&::osg::ValueObject::set)
                , default_set_function_type(&ValueObject_wrapper::default_set)
                , ( bp::arg("arg0") ) );
        
        }
    }

}
