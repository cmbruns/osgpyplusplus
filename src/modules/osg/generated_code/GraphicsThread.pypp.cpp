// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "GraphicsThread.pypp.hpp"

namespace bp = boost::python;

struct GraphicsThread_wrapper : osg::GraphicsThread, bp::wrapper< osg::GraphicsThread > {

    GraphicsThread_wrapper( )
    : osg::GraphicsThread( )
      , bp::wrapper< osg::GraphicsThread >(){
        // null constructor
    
    }

    virtual void run(  ) {
        if( bp::override func_run = this->get_override( "run" ) )
            func_run(  );
        else{
            this->osg::GraphicsThread::run(  );
        }
    }
    
    void default_run(  ) {
        osg::GraphicsThread::run( );
    }

    virtual int cancel(  ) {
        if( bp::override func_cancel = this->get_override( "cancel" ) )
            return func_cancel(  );
        else{
            return this->osg::OperationThread::cancel(  );
        }
    }
    
    int default_cancel(  ) {
        return osg::OperationThread::cancel( );
    }

    virtual void cancelCleanup(  ) {
        if( bp::override func_cancelCleanup = this->get_override( "cancelCleanup" ) )
            func_cancelCleanup(  );
        else{
            this->OpenThreads::Thread::cancelCleanup(  );
        }
    }
    
    void default_cancelCleanup(  ) {
        OpenThreads::Thread::cancelCleanup( );
    }

};

void register_GraphicsThread_class(){

    bp::class_< GraphicsThread_wrapper, bp::bases< osg::OperationThread >, osg::ref_ptr< ::osg::GraphicsThread >, boost::noncopyable >( "GraphicsThread", "\n GraphicsThread is a helper class for running OpenGL GraphicsOperation within a single thread assigned to a specific GraphicsContext.\n", bp::init< >("\n GraphicsThread is a helper class for running OpenGL GraphicsOperation within a single thread assigned to a specific GraphicsContext.\n") )    
        .def( 
            "run"
            , (void ( ::osg::GraphicsThread::* )(  ) )(&::osg::GraphicsThread::run)
            , (void ( GraphicsThread_wrapper::* )(  ) )(&GraphicsThread_wrapper::default_run) )    
        .def( 
            "cancel"
            , (int ( ::osg::OperationThread::* )(  ) )(&::osg::OperationThread::cancel)
            , (int ( GraphicsThread_wrapper::* )(  ) )(&GraphicsThread_wrapper::default_cancel) )    
        .def( 
            "cancelCleanup"
            , (void ( ::OpenThreads::Thread::* )(  ) )(&::OpenThreads::Thread::cancelCleanup)
            , (void ( GraphicsThread_wrapper::* )(  ) )(&GraphicsThread_wrapper::default_cancelCleanup) );

}
