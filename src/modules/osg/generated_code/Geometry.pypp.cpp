// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "Geometry.pypp.hpp"

namespace bp = boost::python;

struct Geometry_wrapper : osg::Geometry, bp::wrapper< osg::Geometry > {

    Geometry_wrapper( )
    : osg::Geometry( )
      , bp::wrapper< osg::Geometry >(){
        // null constructor
    
    }

    virtual void accept( ::osg::Drawable::AttributeFunctor & af ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(af) );
        else{
            this->osg::Geometry::accept( boost::ref(af) );
        }
    }
    
    void default_accept( ::osg::Drawable::AttributeFunctor & af ) {
        osg::Geometry::accept( boost::ref(af) );
    }

    virtual void accept( ::osg::Drawable::ConstAttributeFunctor & af ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(af) );
        else{
            this->osg::Geometry::accept( boost::ref(af) );
        }
    }
    
    void default_accept( ::osg::Drawable::ConstAttributeFunctor & af ) const  {
        osg::Geometry::accept( boost::ref(af) );
    }

    virtual void accept( ::osg::PrimitiveFunctor & pf ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(pf) );
        else{
            this->osg::Geometry::accept( boost::ref(pf) );
        }
    }
    
    void default_accept( ::osg::PrimitiveFunctor & pf ) const  {
        osg::Geometry::accept( boost::ref(pf) );
    }

    virtual void accept( ::osg::PrimitiveIndexFunctor & pf ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(pf) );
        else{
            this->osg::Geometry::accept( boost::ref(pf) );
        }
    }
    
    void default_accept( ::osg::PrimitiveIndexFunctor & pf ) const  {
        osg::Geometry::accept( boost::ref(pf) );
    }

    virtual ::osg::Geometry * asGeometry(  ) {
        if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
            return func_asGeometry(  );
        else{
            return this->osg::Geometry::asGeometry(  );
        }
    }
    
    ::osg::Geometry * default_asGeometry(  ) {
        return osg::Geometry::asGeometry( );
    }

    virtual ::osg::Geometry const * asGeometry(  ) const  {
        if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
            return func_asGeometry(  );
        else{
            return this->osg::Geometry::asGeometry(  );
        }
    }
    
    ::osg::Geometry const * default_asGeometry(  ) const  {
        return osg::Geometry::asGeometry( );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::Geometry::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::Geometry::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::Geometry::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::Geometry::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::Geometry::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::Geometry::cloneType( );
    }

    virtual void compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
        if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
            func_compileGLObjects( boost::ref(renderInfo) );
        else{
            this->osg::Geometry::compileGLObjects( boost::ref(renderInfo) );
        }
    }
    
    void default_compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
        osg::Geometry::compileGLObjects( boost::ref(renderInfo) );
    }

    virtual void dirtyDisplayList(  ) {
        if( bp::override func_dirtyDisplayList = this->get_override( "dirtyDisplayList" ) )
            func_dirtyDisplayList(  );
        else{
            this->osg::Geometry::dirtyDisplayList(  );
        }
    }
    
    void default_dirtyDisplayList(  ) {
        osg::Geometry::dirtyDisplayList( );
    }

    virtual void drawImplementation( ::osg::RenderInfo & renderInfo ) const  {
        if( bp::override func_drawImplementation = this->get_override( "drawImplementation" ) )
            func_drawImplementation( boost::ref(renderInfo) );
        else{
            this->osg::Geometry::drawImplementation( boost::ref(renderInfo) );
        }
    }
    
    void default_drawImplementation( ::osg::RenderInfo & renderInfo ) const  {
        osg::Geometry::drawImplementation( boost::ref(renderInfo) );
    }

    virtual unsigned int getGLObjectSizeHint(  ) const  {
        if( bp::override func_getGLObjectSizeHint = this->get_override( "getGLObjectSizeHint" ) )
            return func_getGLObjectSizeHint(  );
        else{
            return this->osg::Geometry::getGLObjectSizeHint(  );
        }
    }
    
    unsigned int default_getGLObjectSizeHint(  ) const  {
        return osg::Geometry::getGLObjectSizeHint( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::Geometry::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::Geometry::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::Geometry::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::Geometry::libraryName( );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Geometry::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Geometry::resizeGLObjectBuffers( maxSize );
    }

    virtual void setUseVertexBufferObjects( bool flag ) {
        if( bp::override func_setUseVertexBufferObjects = this->get_override( "setUseVertexBufferObjects" ) )
            func_setUseVertexBufferObjects( flag );
        else{
            this->osg::Geometry::setUseVertexBufferObjects( flag );
        }
    }
    
    void default_setUseVertexBufferObjects( bool flag ) {
        osg::Geometry::setUseVertexBufferObjects( flag );
    }

    virtual bool supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Geometry::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
        return osg::Geometry::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Geometry::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
        return osg::Geometry::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Geometry::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
        return osg::Geometry::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Geometry::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
        return osg::Geometry::supports( boost::ref(arg0) );
    }

    virtual ::osg::BoundingBox computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osg::Drawable::computeBound(  );
        }
    }
    
    ::osg::BoundingBox default_computeBound(  ) const  {
        return osg::Drawable::computeBound( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Drawable::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Drawable::computeDataVariance( );
    }

    virtual void setCullCallback( ::osg::Drawable::CullCallback * cc ) {
        if( bp::override func_setCullCallback = this->get_override( "setCullCallback" ) )
            func_setCullCallback( boost::python::ptr(cc) );
        else{
            this->osg::Drawable::setCullCallback( boost::python::ptr(cc) );
        }
    }
    
    void default_setCullCallback( ::osg::Drawable::CullCallback * cc ) {
        osg::Drawable::setCullCallback( boost::python::ptr(cc) );
    }

    virtual void setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
        if( bp::override func_setDrawCallback = this->get_override( "setDrawCallback" ) )
            func_setDrawCallback( boost::python::ptr(dc) );
        else{
            this->osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
        }
    }
    
    void default_setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
        osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
    }

    virtual void setEventCallback( ::osg::Drawable::EventCallback * ac ) {
        if( bp::override func_setEventCallback = this->get_override( "setEventCallback" ) )
            func_setEventCallback( boost::python::ptr(ac) );
        else{
            this->osg::Drawable::setEventCallback( boost::python::ptr(ac) );
        }
    }
    
    void default_setEventCallback( ::osg::Drawable::EventCallback * ac ) {
        osg::Drawable::setEventCallback( boost::python::ptr(ac) );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Drawable::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Drawable::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
        if( bp::override func_setUpdateCallback = this->get_override( "setUpdateCallback" ) )
            func_setUpdateCallback( boost::python::ptr(ac) );
        else{
            this->osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
        }
    }
    
    void default_setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
        osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
    }

};

void register_Geometry_class(){

    { //::osg::Geometry
        typedef bp::class_< Geometry_wrapper, bp::bases< osg::Drawable >, osg::ref_ptr< ::osg::Geometry >, boost::noncopyable > Geometry_exposer_t;
        Geometry_exposer_t Geometry_exposer = Geometry_exposer_t( "Geometry", bp::no_init );
        bp::scope Geometry_scope( Geometry_exposer );
        bp::enum_< osg::Geometry::AttributeBinding>("AttributeBinding")
            .value("BIND_OFF", osg::Geometry::BIND_OFF)
            .value("BIND_OVERALL", osg::Geometry::BIND_OVERALL)
            .value("BIND_PER_PRIMITIVE_SET", osg::Geometry::BIND_PER_PRIMITIVE_SET)
            .value("BIND_PER_VERTEX", osg::Geometry::BIND_PER_VERTEX)
            .export_values()
            ;
        Geometry_exposer.def( bp::init< >() );
        { //::osg::Geometry::accept
        
            typedef void ( ::osg::Geometry::*accept_function_type )( ::osg::Drawable::AttributeFunctor & ) ;
            typedef void ( Geometry_wrapper::*default_accept_function_type )( ::osg::Drawable::AttributeFunctor & ) ;
            
            Geometry_exposer.def( 
                "accept"
                , accept_function_type(&::osg::Geometry::accept)
                , default_accept_function_type(&Geometry_wrapper::default_accept)
                , ( bp::arg("af") ) );
        
        }
        { //::osg::Geometry::accept
        
            typedef void ( ::osg::Geometry::*accept_function_type )( ::osg::Drawable::ConstAttributeFunctor & ) const;
            typedef void ( Geometry_wrapper::*default_accept_function_type )( ::osg::Drawable::ConstAttributeFunctor & ) const;
            
            Geometry_exposer.def( 
                "accept"
                , accept_function_type(&::osg::Geometry::accept)
                , default_accept_function_type(&Geometry_wrapper::default_accept)
                , ( bp::arg("af") ) );
        
        }
        { //::osg::Geometry::accept
        
            typedef void ( ::osg::Geometry::*accept_function_type )( ::osg::PrimitiveFunctor & ) const;
            typedef void ( Geometry_wrapper::*default_accept_function_type )( ::osg::PrimitiveFunctor & ) const;
            
            Geometry_exposer.def( 
                "accept"
                , accept_function_type(&::osg::Geometry::accept)
                , default_accept_function_type(&Geometry_wrapper::default_accept)
                , ( bp::arg("pf") ) );
        
        }
        { //::osg::Geometry::accept
        
            typedef void ( ::osg::Geometry::*accept_function_type )( ::osg::PrimitiveIndexFunctor & ) const;
            typedef void ( Geometry_wrapper::*default_accept_function_type )( ::osg::PrimitiveIndexFunctor & ) const;
            
            Geometry_exposer.def( 
                "accept"
                , accept_function_type(&::osg::Geometry::accept)
                , default_accept_function_type(&Geometry_wrapper::default_accept)
                , ( bp::arg("pf") ) );
        
        }
        { //::osg::Geometry::addPrimitiveSet
        
            typedef bool ( ::osg::Geometry::*addPrimitiveSet_function_type )( ::osg::PrimitiveSet * ) ;
            
            Geometry_exposer.def( 
                "addPrimitiveSet"
                , addPrimitiveSet_function_type( &::osg::Geometry::addPrimitiveSet )
                , ( bp::arg("primitiveset") )
                , " Add a primitive set to the geometry." );
        
        }
        { //::osg::Geometry::asGeometry
        
            typedef ::osg::Geometry * ( ::osg::Geometry::*asGeometry_function_type )(  ) ;
            typedef ::osg::Geometry * ( Geometry_wrapper::*default_asGeometry_function_type )(  ) ;
            
            Geometry_exposer.def( 
                "asGeometry"
                , asGeometry_function_type(&::osg::Geometry::asGeometry)
                , default_asGeometry_function_type(&Geometry_wrapper::default_asGeometry)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::asGeometry
        
            typedef ::osg::Geometry const * ( ::osg::Geometry::*asGeometry_function_type )(  ) const;
            typedef ::osg::Geometry const * ( Geometry_wrapper::*default_asGeometry_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "asGeometry"
                , asGeometry_function_type(&::osg::Geometry::asGeometry)
                , default_asGeometry_function_type(&Geometry_wrapper::default_asGeometry)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::checkForDeprecatedData
        
            typedef bool ( ::osg::Geometry::*checkForDeprecatedData_function_type )(  ) ;
            
            Geometry_exposer.def( 
                "checkForDeprecatedData"
                , checkForDeprecatedData_function_type( &::osg::Geometry::checkForDeprecatedData )
                , " fallback for deprecated functionality. Return true if the Geometry contains any array indices or BIND_PER_PRIMITIVE arrays." );
        
        }
        { //::osg::Geometry::className
        
            typedef char const * ( ::osg::Geometry::*className_function_type )(  ) const;
            typedef char const * ( Geometry_wrapper::*default_className_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "className"
                , className_function_type(&::osg::Geometry::className)
                , default_className_function_type(&Geometry_wrapper::default_className) );
        
        }
        { //::osg::Geometry::clone
        
            typedef ::osg::Object * ( ::osg::Geometry::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Geometry_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Geometry_exposer.def( 
                "clone"
                , clone_function_type(&::osg::Geometry::clone)
                , default_clone_function_type(&Geometry_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Geometry::cloneType
        
            typedef ::osg::Object * ( ::osg::Geometry::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Geometry_wrapper::*default_cloneType_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::Geometry::cloneType)
                , default_cloneType_function_type(&Geometry_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Geometry::compileGLObjects
        
            typedef void ( ::osg::Geometry::*compileGLObjects_function_type )( ::osg::RenderInfo & ) const;
            typedef void ( Geometry_wrapper::*default_compileGLObjects_function_type )( ::osg::RenderInfo & ) const;
            
            Geometry_exposer.def( 
                "compileGLObjects"
                , compileGLObjects_function_type(&::osg::Geometry::compileGLObjects)
                , default_compileGLObjects_function_type(&Geometry_wrapper::default_compileGLObjects)
                , ( bp::arg("renderInfo") ) );
        
        }
        { //::osg::Geometry::containsDeprecatedData
        
            typedef bool ( ::osg::Geometry::*containsDeprecatedData_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "containsDeprecatedData"
                , containsDeprecatedData_function_type( &::osg::Geometry::containsDeprecatedData )
                , " Return true if the deprecated use array indicies or BIND_PER_PRIMITIVE binding has been assigned to arrays." );
        
        }
        { //::osg::Geometry::containsSharedArrays
        
            typedef bool ( ::osg::Geometry::*containsSharedArrays_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "containsSharedArrays"
                , containsSharedArrays_function_type( &::osg::Geometry::containsSharedArrays )
                , " return true if any arrays are shared." );
        
        }
        { //::osg::Geometry::dirtyDisplayList
        
            typedef void ( ::osg::Geometry::*dirtyDisplayList_function_type )(  ) ;
            typedef void ( Geometry_wrapper::*default_dirtyDisplayList_function_type )(  ) ;
            
            Geometry_exposer.def( 
                "dirtyDisplayList"
                , dirtyDisplayList_function_type(&::osg::Geometry::dirtyDisplayList)
                , default_dirtyDisplayList_function_type(&Geometry_wrapper::default_dirtyDisplayList) );
        
        }
        { //::osg::Geometry::drawImplementation
        
            typedef void ( ::osg::Geometry::*drawImplementation_function_type )( ::osg::RenderInfo & ) const;
            typedef void ( Geometry_wrapper::*default_drawImplementation_function_type )( ::osg::RenderInfo & ) const;
            
            Geometry_exposer.def( 
                "drawImplementation"
                , drawImplementation_function_type(&::osg::Geometry::drawImplementation)
                , default_drawImplementation_function_type(&Geometry_wrapper::default_drawImplementation)
                , ( bp::arg("renderInfo") ) );
        
        }
        { //::osg::Geometry::duplicateSharedArrays
        
            typedef void ( ::osg::Geometry::*duplicateSharedArrays_function_type )(  ) ;
            
            Geometry_exposer.def( 
                "duplicateSharedArrays"
                , duplicateSharedArrays_function_type( &::osg::Geometry::duplicateSharedArrays )
                , " duplicate any shared arrays." );
        
        }
        { //::osg::Geometry::empty
        
            typedef bool ( ::osg::Geometry::*empty_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "empty"
                , empty_function_type( &::osg::Geometry::empty ) );
        
        }
        { //::osg::Geometry::fixDeprecatedData
        
            typedef void ( ::osg::Geometry::*fixDeprecatedData_function_type )(  ) ;
            
            Geometry_exposer.def( 
                "fixDeprecatedData"
                , fixDeprecatedData_function_type( &::osg::Geometry::fixDeprecatedData )
                , " fallback for deprecated functionality. Removes any array indices and BIND_PER_PRIMITIVE arrays." );
        
        }
        { //::osg::Geometry::getArrayList
        
            typedef bool ( ::osg::Geometry::*getArrayList_function_type )( ::std::vector< osg::ref_ptr<osg::Array> > & ) const;
            
            Geometry_exposer.def( 
                "getArrayList"
                , getArrayList_function_type( &::osg::Geometry::getArrayList )
                , ( bp::arg("arrayList") ) );
        
        }
        { //::osg::Geometry::getColorArray
        
            typedef ::osg::Array * ( ::osg::Geometry::*getColorArray_function_type )(  ) ;
            
            Geometry_exposer.def( 
                "getColorArray"
                , getColorArray_function_type( &::osg::Geometry::getColorArray )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getColorArray
        
            typedef ::osg::Array const * ( ::osg::Geometry::*getColorArray_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getColorArray"
                , getColorArray_function_type( &::osg::Geometry::getColorArray )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getColorBinding
        
            typedef ::osg::Geometry::AttributeBinding ( ::osg::Geometry::*getColorBinding_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getColorBinding"
                , getColorBinding_function_type( &::osg::Geometry::getColorBinding ) );
        
        }
        { //::osg::Geometry::getDrawElementsList
        
            typedef bool ( ::osg::Geometry::*getDrawElementsList_function_type )( ::std::vector< osg::DrawElements* > & ) const;
            
            Geometry_exposer.def( 
                "getDrawElementsList"
                , getDrawElementsList_function_type( &::osg::Geometry::getDrawElementsList )
                , ( bp::arg("drawElementsList") ) );
        
        }
        { //::osg::Geometry::getFogCoordArray
        
            typedef ::osg::Array * ( ::osg::Geometry::*getFogCoordArray_function_type )(  ) ;
            
            Geometry_exposer.def( 
                "getFogCoordArray"
                , getFogCoordArray_function_type( &::osg::Geometry::getFogCoordArray )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getFogCoordArray
        
            typedef ::osg::Array const * ( ::osg::Geometry::*getFogCoordArray_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getFogCoordArray"
                , getFogCoordArray_function_type( &::osg::Geometry::getFogCoordArray )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getFogCoordBinding
        
            typedef ::osg::Geometry::AttributeBinding ( ::osg::Geometry::*getFogCoordBinding_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getFogCoordBinding"
                , getFogCoordBinding_function_type( &::osg::Geometry::getFogCoordBinding ) );
        
        }
        { //::osg::Geometry::getGLObjectSizeHint
        
            typedef unsigned int ( ::osg::Geometry::*getGLObjectSizeHint_function_type )(  ) const;
            typedef unsigned int ( Geometry_wrapper::*default_getGLObjectSizeHint_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getGLObjectSizeHint"
                , getGLObjectSizeHint_function_type(&::osg::Geometry::getGLObjectSizeHint)
                , default_getGLObjectSizeHint_function_type(&Geometry_wrapper::default_getGLObjectSizeHint) );
        
        }
        { //::osg::Geometry::getNormalArray
        
            typedef ::osg::Array * ( ::osg::Geometry::*getNormalArray_function_type )(  ) ;
            
            Geometry_exposer.def( 
                "getNormalArray"
                , getNormalArray_function_type( &::osg::Geometry::getNormalArray )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getNormalArray
        
            typedef ::osg::Array const * ( ::osg::Geometry::*getNormalArray_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getNormalArray"
                , getNormalArray_function_type( &::osg::Geometry::getNormalArray )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getNormalBinding
        
            typedef ::osg::Geometry::AttributeBinding ( ::osg::Geometry::*getNormalBinding_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getNormalBinding"
                , getNormalBinding_function_type( &::osg::Geometry::getNormalBinding )
                , " deprecated, use array->get*Binding(..)." );
        
        }
        { //::osg::Geometry::getNumPrimitiveSets
        
            typedef unsigned int ( ::osg::Geometry::*getNumPrimitiveSets_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getNumPrimitiveSets"
                , getNumPrimitiveSets_function_type( &::osg::Geometry::getNumPrimitiveSets ) );
        
        }
        { //::osg::Geometry::getNumTexCoordArrays
        
            typedef unsigned int ( ::osg::Geometry::*getNumTexCoordArrays_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getNumTexCoordArrays"
                , getNumTexCoordArrays_function_type( &::osg::Geometry::getNumTexCoordArrays ) );
        
        }
        { //::osg::Geometry::getNumVertexAttribArrays
        
            typedef unsigned int ( ::osg::Geometry::*getNumVertexAttribArrays_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getNumVertexAttribArrays"
                , getNumVertexAttribArrays_function_type( &::osg::Geometry::getNumVertexAttribArrays ) );
        
        }
        { //::osg::Geometry::getOrCreateElementBufferObject
        
            typedef ::osg::ElementBufferObject * ( ::osg::Geometry::*getOrCreateElementBufferObject_function_type )(  ) ;
            
            Geometry_exposer.def( 
                "getOrCreateElementBufferObject"
                , getOrCreateElementBufferObject_function_type( &::osg::Geometry::getOrCreateElementBufferObject )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getOrCreateVertexBufferObject
        
            typedef ::osg::VertexBufferObject * ( ::osg::Geometry::*getOrCreateVertexBufferObject_function_type )(  ) ;
            
            Geometry_exposer.def( 
                "getOrCreateVertexBufferObject"
                , getOrCreateVertexBufferObject_function_type( &::osg::Geometry::getOrCreateVertexBufferObject )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getPrimitiveSet
        
            typedef ::osg::PrimitiveSet * ( ::osg::Geometry::*getPrimitiveSet_function_type )( unsigned int ) ;
            
            Geometry_exposer.def( 
                "getPrimitiveSet"
                , getPrimitiveSet_function_type( &::osg::Geometry::getPrimitiveSet )
                , ( bp::arg("pos") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getPrimitiveSet
        
            typedef ::osg::PrimitiveSet const * ( ::osg::Geometry::*getPrimitiveSet_function_type )( unsigned int ) const;
            
            Geometry_exposer.def( 
                "getPrimitiveSet"
                , getPrimitiveSet_function_type( &::osg::Geometry::getPrimitiveSet )
                , ( bp::arg("pos") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getPrimitiveSetIndex
        
            typedef unsigned int ( ::osg::Geometry::*getPrimitiveSetIndex_function_type )( ::osg::PrimitiveSet const * ) const;
            
            Geometry_exposer.def( 
                "getPrimitiveSetIndex"
                , getPrimitiveSetIndex_function_type( &::osg::Geometry::getPrimitiveSetIndex )
                , ( bp::arg("primitiveset") )
                , " Get the index number of a primitive set, return a value between\n 0 and getNumPrimitiveSet()-1 if found, if not found then return getNumPrimitiveSet().\n When checking for a valid find value use if ((value=geometry->getPrimitiveSetIndex(primitive))!=geometry.getNumPrimitiveSet())" );
        
        }
        { //::osg::Geometry::getPrimitiveSetList
        
            typedef ::std::vector< osg::ref_ptr<osg::PrimitiveSet> > & ( ::osg::Geometry::*getPrimitiveSetList_function_type )(  ) ;
            
            Geometry_exposer.def( 
                "getPrimitiveSetList"
                , getPrimitiveSetList_function_type( &::osg::Geometry::getPrimitiveSetList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getPrimitiveSetList
        
            typedef ::std::vector< osg::ref_ptr<osg::PrimitiveSet> > const & ( ::osg::Geometry::*getPrimitiveSetList_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getPrimitiveSetList"
                , getPrimitiveSetList_function_type( &::osg::Geometry::getPrimitiveSetList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getSecondaryColorArray
        
            typedef ::osg::Array * ( ::osg::Geometry::*getSecondaryColorArray_function_type )(  ) ;
            
            Geometry_exposer.def( 
                "getSecondaryColorArray"
                , getSecondaryColorArray_function_type( &::osg::Geometry::getSecondaryColorArray )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getSecondaryColorArray
        
            typedef ::osg::Array const * ( ::osg::Geometry::*getSecondaryColorArray_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getSecondaryColorArray"
                , getSecondaryColorArray_function_type( &::osg::Geometry::getSecondaryColorArray )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getSecondaryColorBinding
        
            typedef ::osg::Geometry::AttributeBinding ( ::osg::Geometry::*getSecondaryColorBinding_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getSecondaryColorBinding"
                , getSecondaryColorBinding_function_type( &::osg::Geometry::getSecondaryColorBinding ) );
        
        }
        { //::osg::Geometry::getTexCoordArray
        
            typedef ::osg::Array * ( ::osg::Geometry::*getTexCoordArray_function_type )( unsigned int ) ;
            
            Geometry_exposer.def( 
                "getTexCoordArray"
                , getTexCoordArray_function_type( &::osg::Geometry::getTexCoordArray )
                , ( bp::arg("unit") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getTexCoordArray
        
            typedef ::osg::Array const * ( ::osg::Geometry::*getTexCoordArray_function_type )( unsigned int ) const;
            
            Geometry_exposer.def( 
                "getTexCoordArray"
                , getTexCoordArray_function_type( &::osg::Geometry::getTexCoordArray )
                , ( bp::arg("unit") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getTexCoordArrayList
        
            typedef ::std::vector< osg::ref_ptr<osg::Array> > & ( ::osg::Geometry::*getTexCoordArrayList_function_type )(  ) ;
            
            Geometry_exposer.def( 
                "getTexCoordArrayList"
                , getTexCoordArrayList_function_type( &::osg::Geometry::getTexCoordArrayList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getTexCoordArrayList
        
            typedef ::std::vector< osg::ref_ptr<osg::Array> > const & ( ::osg::Geometry::*getTexCoordArrayList_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getTexCoordArrayList"
                , getTexCoordArrayList_function_type( &::osg::Geometry::getTexCoordArrayList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getVertexArray
        
            typedef ::osg::Array * ( ::osg::Geometry::*getVertexArray_function_type )(  ) ;
            
            Geometry_exposer.def( 
                "getVertexArray"
                , getVertexArray_function_type( &::osg::Geometry::getVertexArray )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getVertexArray
        
            typedef ::osg::Array const * ( ::osg::Geometry::*getVertexArray_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getVertexArray"
                , getVertexArray_function_type( &::osg::Geometry::getVertexArray )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getVertexAttribArray
        
            typedef ::osg::Array * ( ::osg::Geometry::*getVertexAttribArray_function_type )( unsigned int ) ;
            
            Geometry_exposer.def( 
                "getVertexAttribArray"
                , getVertexAttribArray_function_type( &::osg::Geometry::getVertexAttribArray )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getVertexAttribArray
        
            typedef ::osg::Array const * ( ::osg::Geometry::*getVertexAttribArray_function_type )( unsigned int ) const;
            
            Geometry_exposer.def( 
                "getVertexAttribArray"
                , getVertexAttribArray_function_type( &::osg::Geometry::getVertexAttribArray )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getVertexAttribArrayList
        
            typedef ::std::vector< osg::ref_ptr<osg::Array> > & ( ::osg::Geometry::*getVertexAttribArrayList_function_type )(  ) ;
            
            Geometry_exposer.def( 
                "getVertexAttribArrayList"
                , getVertexAttribArrayList_function_type( &::osg::Geometry::getVertexAttribArrayList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getVertexAttribArrayList
        
            typedef ::std::vector< osg::ref_ptr<osg::Array> > const & ( ::osg::Geometry::*getVertexAttribArrayList_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "getVertexAttribArrayList"
                , getVertexAttribArrayList_function_type( &::osg::Geometry::getVertexAttribArrayList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Geometry::getVertexAttribBinding
        
            typedef ::osg::Geometry::AttributeBinding ( ::osg::Geometry::*getVertexAttribBinding_function_type )( unsigned int ) const;
            
            Geometry_exposer.def( 
                "getVertexAttribBinding"
                , getVertexAttribBinding_function_type( &::osg::Geometry::getVertexAttribBinding )
                , ( bp::arg("index") ) );
        
        }
        { //::osg::Geometry::getVertexAttribNormalize
        
            typedef ::GLboolean ( ::osg::Geometry::*getVertexAttribNormalize_function_type )( unsigned int ) const;
            
            Geometry_exposer.def( 
                "getVertexAttribNormalize"
                , getVertexAttribNormalize_function_type( &::osg::Geometry::getVertexAttribNormalize )
                , ( bp::arg("index") )
                , " deprecated, use array->get*Normalize(..)." );
        
        }
        { //::osg::Geometry::insertPrimitiveSet
        
            typedef bool ( ::osg::Geometry::*insertPrimitiveSet_function_type )( unsigned int,::osg::PrimitiveSet * ) ;
            
            Geometry_exposer.def( 
                "insertPrimitiveSet"
                , insertPrimitiveSet_function_type( &::osg::Geometry::insertPrimitiveSet )
                , ( bp::arg("i"), bp::arg("primitiveset") )
                , " Insert a primitive set to the specified position in geometrys primitive set list." );
        
        }
        { //::osg::Geometry::isSameKindAs
        
            typedef bool ( ::osg::Geometry::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Geometry_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Geometry_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::Geometry::isSameKindAs)
                , default_isSameKindAs_function_type(&Geometry_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::Geometry::libraryName
        
            typedef char const * ( ::osg::Geometry::*libraryName_function_type )(  ) const;
            typedef char const * ( Geometry_wrapper::*default_libraryName_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::Geometry::libraryName)
                , default_libraryName_function_type(&Geometry_wrapper::default_libraryName) );
        
        }
        { //::osg::Geometry::removePrimitiveSet
        
            typedef bool ( ::osg::Geometry::*removePrimitiveSet_function_type )( unsigned int,unsigned int ) ;
            
            Geometry_exposer.def( 
                "removePrimitiveSet"
                , removePrimitiveSet_function_type( &::osg::Geometry::removePrimitiveSet )
                , ( bp::arg("i"), bp::arg("numElementsToRemove")=(unsigned int)(1) )
                , " Remove primitive set(s) from the specified position in geometrys primitive set list." );
        
        }
        { //::osg::Geometry::resizeGLObjectBuffers
        
            typedef void ( ::osg::Geometry::*resizeGLObjectBuffers_function_type )( unsigned int ) ;
            typedef void ( Geometry_wrapper::*default_resizeGLObjectBuffers_function_type )( unsigned int ) ;
            
            Geometry_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::Geometry::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&Geometry_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
        { //::osg::Geometry::setColorArray
        
            typedef void ( ::osg::Geometry::*setColorArray_function_type )( ::osg::Array *,::osg::Array::Binding ) ;
            
            Geometry_exposer.def( 
                "setColorArray"
                , setColorArray_function_type( &::osg::Geometry::setColorArray )
                , ( bp::arg("array"), bp::arg("binding")=::osg::Array::BIND_UNDEFINED ) );
        
        }
        { //::osg::Geometry::setColorBinding
        
            typedef void ( ::osg::Geometry::*setColorBinding_function_type )( ::osg::Geometry::AttributeBinding ) ;
            
            Geometry_exposer.def( 
                "setColorBinding"
                , setColorBinding_function_type( &::osg::Geometry::setColorBinding )
                , ( bp::arg("ab") ) );
        
        }
        { //::osg::Geometry::setFogCoordArray
        
            typedef void ( ::osg::Geometry::*setFogCoordArray_function_type )( ::osg::Array *,::osg::Array::Binding ) ;
            
            Geometry_exposer.def( 
                "setFogCoordArray"
                , setFogCoordArray_function_type( &::osg::Geometry::setFogCoordArray )
                , ( bp::arg("array"), bp::arg("binding")=::osg::Array::BIND_UNDEFINED ) );
        
        }
        { //::osg::Geometry::setFogCoordBinding
        
            typedef void ( ::osg::Geometry::*setFogCoordBinding_function_type )( ::osg::Geometry::AttributeBinding ) ;
            
            Geometry_exposer.def( 
                "setFogCoordBinding"
                , setFogCoordBinding_function_type( &::osg::Geometry::setFogCoordBinding )
                , ( bp::arg("ab") ) );
        
        }
        { //::osg::Geometry::setNormalArray
        
            typedef void ( ::osg::Geometry::*setNormalArray_function_type )( ::osg::Array *,::osg::Array::Binding ) ;
            
            Geometry_exposer.def( 
                "setNormalArray"
                , setNormalArray_function_type( &::osg::Geometry::setNormalArray )
                , ( bp::arg("array"), bp::arg("binding")=::osg::Array::BIND_UNDEFINED ) );
        
        }
        { //::osg::Geometry::setNormalBinding
        
            typedef void ( ::osg::Geometry::*setNormalBinding_function_type )( ::osg::Geometry::AttributeBinding ) ;
            
            Geometry_exposer.def( 
                "setNormalBinding"
                , setNormalBinding_function_type( &::osg::Geometry::setNormalBinding )
                , ( bp::arg("ab") )
                , " deprecated, use array->set*Binding(..)." );
        
        }
        { //::osg::Geometry::setPrimitiveSet
        
            typedef bool ( ::osg::Geometry::*setPrimitiveSet_function_type )( unsigned int,::osg::PrimitiveSet * ) ;
            
            Geometry_exposer.def( 
                "setPrimitiveSet"
                , setPrimitiveSet_function_type( &::osg::Geometry::setPrimitiveSet )
                , ( bp::arg("i"), bp::arg("primitiveset") )
                , " Set a primitive set to the specified position in geometrys primitive set list." );
        
        }
        { //::osg::Geometry::setPrimitiveSetList
        
            typedef void ( ::osg::Geometry::*setPrimitiveSetList_function_type )( ::std::vector< osg::ref_ptr<osg::PrimitiveSet> > const & ) ;
            
            Geometry_exposer.def( 
                "setPrimitiveSetList"
                , setPrimitiveSetList_function_type( &::osg::Geometry::setPrimitiveSetList )
                , ( bp::arg("primitives") ) );
        
        }
        { //::osg::Geometry::setSecondaryColorArray
        
            typedef void ( ::osg::Geometry::*setSecondaryColorArray_function_type )( ::osg::Array *,::osg::Array::Binding ) ;
            
            Geometry_exposer.def( 
                "setSecondaryColorArray"
                , setSecondaryColorArray_function_type( &::osg::Geometry::setSecondaryColorArray )
                , ( bp::arg("array"), bp::arg("binding")=::osg::Array::BIND_UNDEFINED ) );
        
        }
        { //::osg::Geometry::setSecondaryColorBinding
        
            typedef void ( ::osg::Geometry::*setSecondaryColorBinding_function_type )( ::osg::Geometry::AttributeBinding ) ;
            
            Geometry_exposer.def( 
                "setSecondaryColorBinding"
                , setSecondaryColorBinding_function_type( &::osg::Geometry::setSecondaryColorBinding )
                , ( bp::arg("ab") ) );
        
        }
        { //::osg::Geometry::setTexCoordArray
        
            typedef void ( ::osg::Geometry::*setTexCoordArray_function_type )( unsigned int,::osg::Array *,::osg::Array::Binding ) ;
            
            Geometry_exposer.def( 
                "setTexCoordArray"
                , setTexCoordArray_function_type( &::osg::Geometry::setTexCoordArray )
                , ( bp::arg("unit"), bp::arg("array"), bp::arg("binding")=::osg::Array::BIND_UNDEFINED ) );
        
        }
        { //::osg::Geometry::setUseVertexBufferObjects
        
            typedef void ( ::osg::Geometry::*setUseVertexBufferObjects_function_type )( bool ) ;
            typedef void ( Geometry_wrapper::*default_setUseVertexBufferObjects_function_type )( bool ) ;
            
            Geometry_exposer.def( 
                "setUseVertexBufferObjects"
                , setUseVertexBufferObjects_function_type(&::osg::Geometry::setUseVertexBufferObjects)
                , default_setUseVertexBufferObjects_function_type(&Geometry_wrapper::default_setUseVertexBufferObjects)
                , ( bp::arg("flag") ) );
        
        }
        { //::osg::Geometry::setVertexArray
        
            typedef void ( ::osg::Geometry::*setVertexArray_function_type )( ::osg::Array * ) ;
            
            Geometry_exposer.def( 
                "setVertexArray"
                , setVertexArray_function_type( &::osg::Geometry::setVertexArray )
                , ( bp::arg("array") ) );
        
        }
        { //::osg::Geometry::setVertexAttribArray
        
            typedef void ( ::osg::Geometry::*setVertexAttribArray_function_type )( unsigned int,::osg::Array *,::osg::Array::Binding ) ;
            
            Geometry_exposer.def( 
                "setVertexAttribArray"
                , setVertexAttribArray_function_type( &::osg::Geometry::setVertexAttribArray )
                , ( bp::arg("index"), bp::arg("array"), bp::arg("binding")=::osg::Array::BIND_UNDEFINED ) );
        
        }
        { //::osg::Geometry::setVertexAttribBinding
        
            typedef void ( ::osg::Geometry::*setVertexAttribBinding_function_type )( unsigned int,::osg::Geometry::AttributeBinding ) ;
            
            Geometry_exposer.def( 
                "setVertexAttribBinding"
                , setVertexAttribBinding_function_type( &::osg::Geometry::setVertexAttribBinding )
                , ( bp::arg("index"), bp::arg("ab") ) );
        
        }
        { //::osg::Geometry::setVertexAttribNormalize
        
            typedef void ( ::osg::Geometry::*setVertexAttribNormalize_function_type )( unsigned int,::GLboolean ) ;
            
            Geometry_exposer.def( 
                "setVertexAttribNormalize"
                , setVertexAttribNormalize_function_type( &::osg::Geometry::setVertexAttribNormalize )
                , ( bp::arg("index"), bp::arg("norm") )
                , " deprecated, use array->set*Normalize(..)." );
        
        }
        { //::osg::Geometry::supports
        
            typedef bool ( ::osg::Geometry::*supports_function_type )( ::osg::Drawable::AttributeFunctor const & ) const;
            typedef bool ( Geometry_wrapper::*default_supports_function_type )( ::osg::Drawable::AttributeFunctor const & ) const;
            
            Geometry_exposer.def( 
                "supports"
                , supports_function_type(&::osg::Geometry::supports)
                , default_supports_function_type(&Geometry_wrapper::default_supports)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Geometry::supports
        
            typedef bool ( ::osg::Geometry::*supports_function_type )( ::osg::Drawable::ConstAttributeFunctor const & ) const;
            typedef bool ( Geometry_wrapper::*default_supports_function_type )( ::osg::Drawable::ConstAttributeFunctor const & ) const;
            
            Geometry_exposer.def( 
                "supports"
                , supports_function_type(&::osg::Geometry::supports)
                , default_supports_function_type(&Geometry_wrapper::default_supports)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Geometry::supports
        
            typedef bool ( ::osg::Geometry::*supports_function_type )( ::osg::PrimitiveFunctor const & ) const;
            typedef bool ( Geometry_wrapper::*default_supports_function_type )( ::osg::PrimitiveFunctor const & ) const;
            
            Geometry_exposer.def( 
                "supports"
                , supports_function_type(&::osg::Geometry::supports)
                , default_supports_function_type(&Geometry_wrapper::default_supports)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Geometry::supports
        
            typedef bool ( ::osg::Geometry::*supports_function_type )( ::osg::PrimitiveIndexFunctor const & ) const;
            typedef bool ( Geometry_wrapper::*default_supports_function_type )( ::osg::PrimitiveIndexFunctor const & ) const;
            
            Geometry_exposer.def( 
                "supports"
                , supports_function_type(&::osg::Geometry::supports)
                , default_supports_function_type(&Geometry_wrapper::default_supports)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Drawable::computeBound
        
            typedef ::osg::BoundingBox ( ::osg::Drawable::*computeBound_function_type )(  ) const;
            typedef ::osg::BoundingBox ( Geometry_wrapper::*default_computeBound_function_type )(  ) const;
            
            Geometry_exposer.def( 
                "computeBound"
                , computeBound_function_type(&::osg::Drawable::computeBound)
                , default_computeBound_function_type(&Geometry_wrapper::default_computeBound) );
        
        }
        { //::osg::Drawable::computeDataVariance
        
            typedef void ( ::osg::Drawable::*computeDataVariance_function_type )(  ) ;
            typedef void ( Geometry_wrapper::*default_computeDataVariance_function_type )(  ) ;
            
            Geometry_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::Drawable::computeDataVariance)
                , default_computeDataVariance_function_type(&Geometry_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::Drawable::setCullCallback
        
            typedef void ( ::osg::Drawable::*setCullCallback_function_type )( ::osg::Drawable::CullCallback * ) ;
            typedef void ( Geometry_wrapper::*default_setCullCallback_function_type )( ::osg::Drawable::CullCallback * ) ;
            
            Geometry_exposer.def( 
                "setCullCallback"
                , setCullCallback_function_type(&::osg::Drawable::setCullCallback)
                , default_setCullCallback_function_type(&Geometry_wrapper::default_setCullCallback)
                , ( bp::arg("cc") ) );
        
        }
        { //::osg::Drawable::setDrawCallback
        
            typedef void ( ::osg::Drawable::*setDrawCallback_function_type )( ::osg::Drawable::DrawCallback * ) ;
            typedef void ( Geometry_wrapper::*default_setDrawCallback_function_type )( ::osg::Drawable::DrawCallback * ) ;
            
            Geometry_exposer.def( 
                "setDrawCallback"
                , setDrawCallback_function_type(&::osg::Drawable::setDrawCallback)
                , default_setDrawCallback_function_type(&Geometry_wrapper::default_setDrawCallback)
                , ( bp::arg("dc") ) );
        
        }
        { //::osg::Drawable::setEventCallback
        
            typedef void ( ::osg::Drawable::*setEventCallback_function_type )( ::osg::Drawable::EventCallback * ) ;
            typedef void ( Geometry_wrapper::*default_setEventCallback_function_type )( ::osg::Drawable::EventCallback * ) ;
            
            Geometry_exposer.def( 
                "setEventCallback"
                , setEventCallback_function_type(&::osg::Drawable::setEventCallback)
                , default_setEventCallback_function_type(&Geometry_wrapper::default_setEventCallback)
                , ( bp::arg("ac") ) );
        
        }
        { //::osg::Drawable::setThreadSafeRefUnref
        
            typedef void ( ::osg::Drawable::*setThreadSafeRefUnref_function_type )( bool ) ;
            typedef void ( Geometry_wrapper::*default_setThreadSafeRefUnref_function_type )( bool ) ;
            
            Geometry_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Drawable::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&Geometry_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::Drawable::setUpdateCallback
        
            typedef void ( ::osg::Drawable::*setUpdateCallback_function_type )( ::osg::Drawable::UpdateCallback * ) ;
            typedef void ( Geometry_wrapper::*default_setUpdateCallback_function_type )( ::osg::Drawable::UpdateCallback * ) ;
            
            Geometry_exposer.def( 
                "setUpdateCallback"
                , setUpdateCallback_function_type(&::osg::Drawable::setUpdateCallback)
                , default_setUpdateCallback_function_type(&Geometry_wrapper::default_setUpdateCallback)
                , ( bp::arg("ac") ) );
        
        }
    }

}
