// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "Matrixd.pypp.hpp"

namespace bp = boost::python;

void register_Matrixd_class(){

    { //::osg::Matrixd
        typedef bp::class_< osg::Matrixd > Matrixd_exposer_t;
        Matrixd_exposer_t Matrixd_exposer = Matrixd_exposer_t( "Matrixd", bp::init< >() );
        bp::scope Matrixd_scope( Matrixd_exposer );
        Matrixd_exposer.def( bp::init< osg::Matrixd const & >(( bp::arg("mat") )) );
        Matrixd_exposer.def( bp::init< osg::Matrixf const & >(( bp::arg("mat") )) );
        bp::implicitly_convertible< osg::Matrixf const &, osg::Matrixd >();
        Matrixd_exposer.def( bp::init< float const * >(( bp::arg("ptr") )) );
        bp::implicitly_convertible< float const * const, osg::Matrixd >();
        Matrixd_exposer.def( bp::init< double const * >(( bp::arg("ptr") )) );
        bp::implicitly_convertible< double const * const, osg::Matrixd >();
        Matrixd_exposer.def( bp::init< osg::Quat const & >(( bp::arg("quat") )) );
        bp::implicitly_convertible< osg::Quat const &, osg::Matrixd >();
        Matrixd_exposer.def( bp::init< double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double >(( bp::arg("a00"), bp::arg("a01"), bp::arg("a02"), bp::arg("a03"), bp::arg("a10"), bp::arg("a11"), bp::arg("a12"), bp::arg("a13"), bp::arg("a20"), bp::arg("a21"), bp::arg("a22"), bp::arg("a23"), bp::arg("a30"), bp::arg("a31"), bp::arg("a32"), bp::arg("a33") )) );
        { //::osg::Matrixd::compare
        
            typedef int ( ::osg::Matrixd::*compare_function_type )( ::osg::Matrixd const & ) const;
            
            Matrixd_exposer.def( 
                "compare"
                , compare_function_type( &::osg::Matrixd::compare )
                , ( bp::arg("m") ) );
        
        }
        { //::osg::Matrixd::decompose
        
            typedef void ( ::osg::Matrixd::*decompose_function_type )( ::osg::Vec3f &,::osg::Quat &,::osg::Vec3f &,::osg::Quat & ) const;
            
            Matrixd_exposer.def( 
                "decompose"
                , decompose_function_type( &::osg::Matrixd::decompose )
                , ( bp::arg("translation"), bp::arg("rotation"), bp::arg("scale"), bp::arg("so") )
                , "\n decompose the matrix into translation, rotation, scale and scale orientation.\n" );
        
        }
        { //::osg::Matrixd::decompose
        
            typedef void ( ::osg::Matrixd::*decompose_function_type )( ::osg::Vec3d &,::osg::Quat &,::osg::Vec3d &,::osg::Quat & ) const;
            
            Matrixd_exposer.def( 
                "decompose"
                , decompose_function_type( &::osg::Matrixd::decompose )
                , ( bp::arg("translation"), bp::arg("rotation"), bp::arg("scale"), bp::arg("so") )
                , "\n decompose the matrix into translation, rotation, scale and scale orientation.\n" );
        
        }
        { //::osg::Matrixd::frustum
        
            typedef ::osg::Matrixd ( *frustum_function_type )( double,double,double,double,double,double );
            
            Matrixd_exposer.def( 
                "frustum"
                , frustum_function_type( &::osg::Matrixd::frustum )
                , ( bp::arg("left"), bp::arg("right"), bp::arg("bottom"), bp::arg("top"), bp::arg("zNear"), bp::arg("zFar") ) );
        
        }
        { //::osg::Matrixd::get
        
            typedef void ( ::osg::Matrixd::*get_function_type )( ::osg::Quat & ) const;
            
            Matrixd_exposer.def( 
                "get"
                , get_function_type( &::osg::Matrixd::get )
                , ( bp::arg("q") ) );
        
        }
        { //::osg::Matrixd::getFrustum
        
            typedef bool ( ::osg::Matrixd::*getFrustum_function_type )( double &,double &,double &,double &,double &,double & ) const;
            
            Matrixd_exposer.def( 
                "getFrustum"
                , getFrustum_function_type( &::osg::Matrixd::getFrustum )
                , ( bp::arg("left"), bp::arg("right"), bp::arg("bottom"), bp::arg("top"), bp::arg("zNear"), bp::arg("zFar") )
                , "\n Get the frustum settings of a perspective projection matrix.\n Note, if matrix is not a perspective matrix then invalid values\n will be returned.\n" );
        
        }
        { //::osg::Matrixd::getFrustum
        
            typedef bool ( ::osg::Matrixd::*getFrustum_function_type )( float &,float &,float &,float &,float &,float & ) const;
            
            Matrixd_exposer.def( 
                "getFrustum"
                , getFrustum_function_type( &::osg::Matrixd::getFrustum )
                , ( bp::arg("left"), bp::arg("right"), bp::arg("bottom"), bp::arg("top"), bp::arg("zNear"), bp::arg("zFar") )
                , "\n float version of getFrustum(..)\n" );
        
        }
        { //::osg::Matrixd::getLookAt
        
            typedef void ( ::osg::Matrixd::*getLookAt_function_type )( ::osg::Vec3f &,::osg::Vec3f &,::osg::Vec3f &,double ) const;
            
            Matrixd_exposer.def( 
                "getLookAt"
                , getLookAt_function_type( &::osg::Matrixd::getLookAt )
                , ( bp::arg("eye"), bp::arg("center"), bp::arg("up"), bp::arg("lookDistance")=1.0e+0f )
                , "\n Get to the position and orientation of a modelview matrix,\n using the same convention as gluLookAt.\n" );
        
        }
        { //::osg::Matrixd::getLookAt
        
            typedef void ( ::osg::Matrixd::*getLookAt_function_type )( ::osg::Vec3d &,::osg::Vec3d &,::osg::Vec3d &,double ) const;
            
            Matrixd_exposer.def( 
                "getLookAt"
                , getLookAt_function_type( &::osg::Matrixd::getLookAt )
                , ( bp::arg("eye"), bp::arg("center"), bp::arg("up"), bp::arg("lookDistance")=1.0e+0f )
                , "\n Get to the position and orientation of a modelview matrix,\n using the same convention as gluLookAt.\n" );
        
        }
        { //::osg::Matrixd::getOrtho
        
            typedef bool ( ::osg::Matrixd::*getOrtho_function_type )( double &,double &,double &,double &,double &,double & ) const;
            
            Matrixd_exposer.def( 
                "getOrtho"
                , getOrtho_function_type( &::osg::Matrixd::getOrtho )
                , ( bp::arg("left"), bp::arg("right"), bp::arg("bottom"), bp::arg("top"), bp::arg("zNear"), bp::arg("zFar") )
                , "\n Get the orthographic settings of the orthographic projection matrix.\n Note, if matrix is not an orthographic matrix then invalid values\n will be returned.\n" );
        
        }
        { //::osg::Matrixd::getOrtho
        
            typedef bool ( ::osg::Matrixd::*getOrtho_function_type )( float &,float &,float &,float &,float &,float & ) const;
            
            Matrixd_exposer.def( 
                "getOrtho"
                , getOrtho_function_type( &::osg::Matrixd::getOrtho )
                , ( bp::arg("left"), bp::arg("right"), bp::arg("bottom"), bp::arg("top"), bp::arg("zNear"), bp::arg("zFar") )
                , "\n float version of getOrtho(..)\n" );
        
        }
        { //::osg::Matrixd::getPerspective
        
            typedef bool ( ::osg::Matrixd::*getPerspective_function_type )( double &,double &,double &,double & ) const;
            
            Matrixd_exposer.def( 
                "getPerspective"
                , getPerspective_function_type( &::osg::Matrixd::getPerspective )
                , ( bp::arg("fovy"), bp::arg("aspectRatio"), bp::arg("zNear"), bp::arg("zFar") )
                , "\n Get the frustum settings of a symmetric perspective projection\n matrix.\n Return false if matrix is not a perspective matrix,\n where parameter values are undefined.\n Note, if matrix is not a symmetric perspective matrix then the\n shear will be lost.\n Asymmetric matrices occur when stereo, power walls, caves and\n reality center display are used.\n In these configuration one should use the AsFrustum method instead.\n" );
        
        }
        { //::osg::Matrixd::getPerspective
        
            typedef bool ( ::osg::Matrixd::*getPerspective_function_type )( float &,float &,float &,float & ) const;
            
            Matrixd_exposer.def( 
                "getPerspective"
                , getPerspective_function_type( &::osg::Matrixd::getPerspective )
                , ( bp::arg("fovy"), bp::arg("aspectRatio"), bp::arg("zNear"), bp::arg("zFar") )
                , "\n float version of getPerspective(..)\n" );
        
        }
        { //::osg::Matrixd::getRotate
        
            typedef ::osg::Quat ( ::osg::Matrixd::*getRotate_function_type )(  ) const;
            
            Matrixd_exposer.def( 
                "getRotate"
                , getRotate_function_type( &::osg::Matrixd::getRotate )
                , "\n Get the matrix rotation as a Quat. Note that this function\n assumes a non-scaled matrix and will return incorrect results\n for scaled matrixces. Consider decompose() instead.\n" );
        
        }
        { //::osg::Matrixd::getScale
        
            typedef ::osg::Vec3d ( ::osg::Matrixd::*getScale_function_type )(  ) const;
            
            Matrixd_exposer.def( 
                "getScale"
                , getScale_function_type( &::osg::Matrixd::getScale ) );
        
        }
        { //::osg::Matrixd::getTrans
        
            typedef ::osg::Vec3d ( ::osg::Matrixd::*getTrans_function_type )(  ) const;
            
            Matrixd_exposer.def( 
                "getTrans"
                , getTrans_function_type( &::osg::Matrixd::getTrans ) );
        
        }
        { //::osg::Matrixd::identity
        
            typedef ::osg::Matrixd ( *identity_function_type )(  );
            
            Matrixd_exposer.def( 
                "identity"
                , identity_function_type( &::osg::Matrixd::identity ) );
        
        }
        { //::osg::Matrixd::inverse
        
            typedef ::osg::Matrixd ( *inverse_function_type )( ::osg::Matrixd const & );
            
            Matrixd_exposer.def( 
                "inverse"
                , inverse_function_type( &::osg::Matrixd::inverse )
                , ( bp::arg("matrix") ) );
        
        }
        { //::osg::Matrixd::invert
        
            typedef bool ( ::osg::Matrixd::*invert_function_type )( ::osg::Matrixd const & ) ;
            
            Matrixd_exposer.def( 
                "invert"
                , invert_function_type( &::osg::Matrixd::invert )
                , ( bp::arg("rhs") )
                , "\n invert the matrix rhs, automatically select invert_4x3 or invert_4x4.\n" );
        
        }
        { //::osg::Matrixd::invert_4x3
        
            typedef bool ( ::osg::Matrixd::*invert_4x3_function_type )( ::osg::Matrixd const & ) ;
            
            Matrixd_exposer.def( 
                "invert_4x3"
                , invert_4x3_function_type( &::osg::Matrixd::invert_4x3 )
                , ( bp::arg("rhs") )
                , "\n 4x3 matrix invert, not right hand column is assumed to be 0,0,0,1.\n" );
        
        }
        { //::osg::Matrixd::invert_4x4
        
            typedef bool ( ::osg::Matrixd::*invert_4x4_function_type )( ::osg::Matrixd const & ) ;
            
            Matrixd_exposer.def( 
                "invert_4x4"
                , invert_4x4_function_type( &::osg::Matrixd::invert_4x4 )
                , ( bp::arg("rhs") )
                , "\n full 4x4 matrix invert.\n" );
        
        }
        { //::osg::Matrixd::isIdentity
        
            typedef bool ( ::osg::Matrixd::*isIdentity_function_type )(  ) const;
            
            Matrixd_exposer.def( 
                "isIdentity"
                , isIdentity_function_type( &::osg::Matrixd::isIdentity ) );
        
        }
        { //::osg::Matrixd::isNaN
        
            typedef bool ( ::osg::Matrixd::*isNaN_function_type )(  ) const;
            
            Matrixd_exposer.def( 
                "isNaN"
                , isNaN_function_type( &::osg::Matrixd::isNaN ) );
        
        }
        { //::osg::Matrixd::lookAt
        
            typedef ::osg::Matrixd ( *lookAt_function_type )( ::osg::Vec3f const &,::osg::Vec3f const &,::osg::Vec3f const & );
            
            Matrixd_exposer.def( 
                "lookAt"
                , lookAt_function_type( &::osg::Matrixd::lookAt )
                , ( bp::arg("eye"), bp::arg("center"), bp::arg("up") ) );
        
        }
        { //::osg::Matrixd::lookAt
        
            typedef ::osg::Matrixd ( *lookAt_function_type )( ::osg::Vec3d const &,::osg::Vec3d const &,::osg::Vec3d const & );
            
            Matrixd_exposer.def( 
                "lookAt"
                , lookAt_function_type( &::osg::Matrixd::lookAt )
                , ( bp::arg("eye"), bp::arg("center"), bp::arg("up") ) );
        
        }
        { //::osg::Matrixd::makeFrustum
        
            typedef void ( ::osg::Matrixd::*makeFrustum_function_type )( double,double,double,double,double,double ) ;
            
            Matrixd_exposer.def( 
                "makeFrustum"
                , makeFrustum_function_type( &::osg::Matrixd::makeFrustum )
                , ( bp::arg("left"), bp::arg("right"), bp::arg("bottom"), bp::arg("top"), bp::arg("zNear"), bp::arg("zFar") )
                , "\n Set to a perspective projection.\n See glFrustum for further details.\n" );
        
        }
        { //::osg::Matrixd::makeIdentity
        
            typedef void ( ::osg::Matrixd::*makeIdentity_function_type )(  ) ;
            
            Matrixd_exposer.def( 
                "makeIdentity"
                , makeIdentity_function_type( &::osg::Matrixd::makeIdentity ) );
        
        }
        { //::osg::Matrixd::makeLookAt
        
            typedef void ( ::osg::Matrixd::*makeLookAt_function_type )( ::osg::Vec3d const &,::osg::Vec3d const &,::osg::Vec3d const & ) ;
            
            Matrixd_exposer.def( 
                "makeLookAt"
                , makeLookAt_function_type( &::osg::Matrixd::makeLookAt )
                , ( bp::arg("eye"), bp::arg("center"), bp::arg("up") )
                , "\n Set the position and orientation to be a view matrix,\n using the same convention as gluLookAt.\n" );
        
        }
        { //::osg::Matrixd::makeOrtho
        
            typedef void ( ::osg::Matrixd::*makeOrtho_function_type )( double,double,double,double,double,double ) ;
            
            Matrixd_exposer.def( 
                "makeOrtho"
                , makeOrtho_function_type( &::osg::Matrixd::makeOrtho )
                , ( bp::arg("left"), bp::arg("right"), bp::arg("bottom"), bp::arg("top"), bp::arg("zNear"), bp::arg("zFar") )
                , "\n Set to an orthographic projection.\n See glOrtho for further details.\n" );
        
        }
        { //::osg::Matrixd::makeOrtho2D
        
            typedef void ( ::osg::Matrixd::*makeOrtho2D_function_type )( double,double,double,double ) ;
            
            Matrixd_exposer.def( 
                "makeOrtho2D"
                , makeOrtho2D_function_type( &::osg::Matrixd::makeOrtho2D )
                , ( bp::arg("left"), bp::arg("right"), bp::arg("bottom"), bp::arg("top") )
                , "\n Set to a 2D orthographic projection.\n See glOrtho2D for further details.\n" );
        
        }
        { //::osg::Matrixd::makePerspective
        
            typedef void ( ::osg::Matrixd::*makePerspective_function_type )( double,double,double,double ) ;
            
            Matrixd_exposer.def( 
                "makePerspective"
                , makePerspective_function_type( &::osg::Matrixd::makePerspective )
                , ( bp::arg("fovy"), bp::arg("aspectRatio"), bp::arg("zNear"), bp::arg("zFar") )
                , "\n Set to a symmetrical perspective projection.\n See gluPerspective for further details.\n Aspect ratio is defined as width/height.\n" );
        
        }
        { //::osg::Matrixd::makeRotate
        
            typedef void ( ::osg::Matrixd::*makeRotate_function_type )( ::osg::Vec3f const &,::osg::Vec3f const & ) ;
            
            Matrixd_exposer.def( 
                "makeRotate"
                , makeRotate_function_type( &::osg::Matrixd::makeRotate )
                , ( bp::arg("from"), bp::arg("to") ) );
        
        }
        { //::osg::Matrixd::makeRotate
        
            typedef void ( ::osg::Matrixd::*makeRotate_function_type )( ::osg::Vec3d const &,::osg::Vec3d const & ) ;
            
            Matrixd_exposer.def( 
                "makeRotate"
                , makeRotate_function_type( &::osg::Matrixd::makeRotate )
                , ( bp::arg("from"), bp::arg("to") ) );
        
        }
        { //::osg::Matrixd::makeRotate
        
            typedef void ( ::osg::Matrixd::*makeRotate_function_type )( double,::osg::Vec3f const & ) ;
            
            Matrixd_exposer.def( 
                "makeRotate"
                , makeRotate_function_type( &::osg::Matrixd::makeRotate )
                , ( bp::arg("angle"), bp::arg("axis") ) );
        
        }
        { //::osg::Matrixd::makeRotate
        
            typedef void ( ::osg::Matrixd::*makeRotate_function_type )( double,::osg::Vec3d const & ) ;
            
            Matrixd_exposer.def( 
                "makeRotate"
                , makeRotate_function_type( &::osg::Matrixd::makeRotate )
                , ( bp::arg("angle"), bp::arg("axis") ) );
        
        }
        { //::osg::Matrixd::makeRotate
        
            typedef void ( ::osg::Matrixd::*makeRotate_function_type )( double,double,double,double ) ;
            
            Matrixd_exposer.def( 
                "makeRotate"
                , makeRotate_function_type( &::osg::Matrixd::makeRotate )
                , ( bp::arg("angle"), bp::arg("x"), bp::arg("y"), bp::arg("z") ) );
        
        }
        { //::osg::Matrixd::makeRotate
        
            typedef void ( ::osg::Matrixd::*makeRotate_function_type )( ::osg::Quat const & ) ;
            
            Matrixd_exposer.def( 
                "makeRotate"
                , makeRotate_function_type( &::osg::Matrixd::makeRotate )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Matrixd::makeRotate
        
            typedef void ( ::osg::Matrixd::*makeRotate_function_type )( double,::osg::Vec3f const &,double,::osg::Vec3f const &,double,::osg::Vec3f const & ) ;
            
            Matrixd_exposer.def( 
                "makeRotate"
                , makeRotate_function_type( &::osg::Matrixd::makeRotate )
                , ( bp::arg("angle1"), bp::arg("axis1"), bp::arg("angle2"), bp::arg("axis2"), bp::arg("angle3"), bp::arg("axis3") ) );
        
        }
        { //::osg::Matrixd::makeRotate
        
            typedef void ( ::osg::Matrixd::*makeRotate_function_type )( double,::osg::Vec3d const &,double,::osg::Vec3d const &,double,::osg::Vec3d const & ) ;
            
            Matrixd_exposer.def( 
                "makeRotate"
                , makeRotate_function_type( &::osg::Matrixd::makeRotate )
                , ( bp::arg("angle1"), bp::arg("axis1"), bp::arg("angle2"), bp::arg("axis2"), bp::arg("angle3"), bp::arg("axis3") ) );
        
        }
        { //::osg::Matrixd::makeScale
        
            typedef void ( ::osg::Matrixd::*makeScale_function_type )( ::osg::Vec3f const & ) ;
            
            Matrixd_exposer.def( 
                "makeScale"
                , makeScale_function_type( &::osg::Matrixd::makeScale )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Matrixd::makeScale
        
            typedef void ( ::osg::Matrixd::*makeScale_function_type )( ::osg::Vec3d const & ) ;
            
            Matrixd_exposer.def( 
                "makeScale"
                , makeScale_function_type( &::osg::Matrixd::makeScale )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Matrixd::makeScale
        
            typedef void ( ::osg::Matrixd::*makeScale_function_type )( double,double,double ) ;
            
            Matrixd_exposer.def( 
                "makeScale"
                , makeScale_function_type( &::osg::Matrixd::makeScale )
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osg::Matrixd::makeTranslate
        
            typedef void ( ::osg::Matrixd::*makeTranslate_function_type )( ::osg::Vec3f const & ) ;
            
            Matrixd_exposer.def( 
                "makeTranslate"
                , makeTranslate_function_type( &::osg::Matrixd::makeTranslate )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Matrixd::makeTranslate
        
            typedef void ( ::osg::Matrixd::*makeTranslate_function_type )( ::osg::Vec3d const & ) ;
            
            Matrixd_exposer.def( 
                "makeTranslate"
                , makeTranslate_function_type( &::osg::Matrixd::makeTranslate )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Matrixd::makeTranslate
        
            typedef void ( ::osg::Matrixd::*makeTranslate_function_type )( double,double,double ) ;
            
            Matrixd_exposer.def( 
                "makeTranslate"
                , makeTranslate_function_type( &::osg::Matrixd::makeTranslate )
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osg::Matrixd::mult
        
            typedef void ( ::osg::Matrixd::*mult_function_type )( ::osg::Matrixd const &,::osg::Matrixd const & ) ;
            
            Matrixd_exposer.def( 
                "mult"
                , mult_function_type( &::osg::Matrixd::mult )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        Matrixd_exposer.def( bp::self != bp::self );
        { //::osg::Matrixd::operator()
        
            typedef double & ( ::osg::Matrixd::*__call___function_type )( int,int ) ;
            
            Matrixd_exposer.def( 
                "__call__"
                , __call___function_type( &::osg::Matrixd::operator() )
                , ( bp::arg("row"), bp::arg("col") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Matrixd::operator()
        
            typedef double ( ::osg::Matrixd::*__call___function_type )( int,int ) const;
            
            Matrixd_exposer.def( 
                "__call__"
                , __call___function_type( &::osg::Matrixd::operator() )
                , ( bp::arg("row"), bp::arg("col") ) );
        
        }
        Matrixd_exposer.def( bp::self * bp::other< osg::Vec3f >() );
        Matrixd_exposer.def( bp::self * bp::other< osg::Vec3d >() );
        Matrixd_exposer.def( bp::self * bp::other< osg::Vec4f >() );
        Matrixd_exposer.def( bp::self * bp::other< osg::Vec4d >() );
        Matrixd_exposer.def( bp::self * bp::self );
        Matrixd_exposer.def( bp::self *= bp::self );
        Matrixd_exposer.def( bp::self < bp::self );
        { //::osg::Matrixd::operator=
        
            typedef ::osg::Matrixd & ( ::osg::Matrixd::*assign_function_type )( ::osg::Matrixd const & ) ;
            
            Matrixd_exposer.def( 
                "assign"
                , assign_function_type( &::osg::Matrixd::operator= )
                , ( bp::arg("rhs") )
                , bp::return_self< >() );
        
        }
        { //::osg::Matrixd::operator=
        
            typedef ::osg::Matrixd & ( ::osg::Matrixd::*assign_function_type )( ::osg::Matrixf const & ) ;
            
            Matrixd_exposer.def( 
                "assign"
                , assign_function_type( &::osg::Matrixd::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Matrixd_exposer.def( bp::self == bp::self );
        { //::osg::Matrixd::ortho
        
            typedef ::osg::Matrixd ( *ortho_function_type )( double,double,double,double,double,double );
            
            Matrixd_exposer.def( 
                "ortho"
                , ortho_function_type( &::osg::Matrixd::ortho )
                , ( bp::arg("left"), bp::arg("right"), bp::arg("bottom"), bp::arg("top"), bp::arg("zNear"), bp::arg("zFar") ) );
        
        }
        { //::osg::Matrixd::ortho2D
        
            typedef ::osg::Matrixd ( *ortho2D_function_type )( double,double,double,double );
            
            Matrixd_exposer.def( 
                "ortho2D"
                , ortho2D_function_type( &::osg::Matrixd::ortho2D )
                , ( bp::arg("left"), bp::arg("right"), bp::arg("bottom"), bp::arg("top") ) );
        
        }
        { //::osg::Matrixd::orthoNormal
        
            typedef ::osg::Matrixd ( *orthoNormal_function_type )( ::osg::Matrixd const & );
            
            Matrixd_exposer.def( 
                "orthoNormal"
                , orthoNormal_function_type( &::osg::Matrixd::orthoNormal )
                , ( bp::arg("matrix") ) );
        
        }
        { //::osg::Matrixd::orthoNormalize
        
            typedef void ( ::osg::Matrixd::*orthoNormalize_function_type )( ::osg::Matrixd const & ) ;
            
            Matrixd_exposer.def( 
                "orthoNormalize"
                , orthoNormalize_function_type( &::osg::Matrixd::orthoNormalize )
                , ( bp::arg("rhs") )
                , "\n ortho-normalize the 3x3 rotation & scale matrix\n" );
        
        }
        { //::osg::Matrixd::perspective
        
            typedef ::osg::Matrixd ( *perspective_function_type )( double,double,double,double );
            
            Matrixd_exposer.def( 
                "perspective"
                , perspective_function_type( &::osg::Matrixd::perspective )
                , ( bp::arg("fovy"), bp::arg("aspectRatio"), bp::arg("zNear"), bp::arg("zFar") ) );
        
        }
        { //::osg::Matrixd::postMult
        
            typedef ::osg::Vec3f ( ::osg::Matrixd::*postMult_function_type )( ::osg::Vec3f const & ) const;
            
            Matrixd_exposer.def( 
                "postMult"
                , postMult_function_type( &::osg::Matrixd::postMult )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::postMult
        
            typedef ::osg::Vec3d ( ::osg::Matrixd::*postMult_function_type )( ::osg::Vec3d const & ) const;
            
            Matrixd_exposer.def( 
                "postMult"
                , postMult_function_type( &::osg::Matrixd::postMult )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::postMult
        
            typedef ::osg::Vec4f ( ::osg::Matrixd::*postMult_function_type )( ::osg::Vec4f const & ) const;
            
            Matrixd_exposer.def( 
                "postMult"
                , postMult_function_type( &::osg::Matrixd::postMult )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::postMult
        
            typedef ::osg::Vec4d ( ::osg::Matrixd::*postMult_function_type )( ::osg::Vec4d const & ) const;
            
            Matrixd_exposer.def( 
                "postMult"
                , postMult_function_type( &::osg::Matrixd::postMult )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::postMult
        
            typedef void ( ::osg::Matrixd::*postMult_function_type )( ::osg::Matrixd const & ) ;
            
            Matrixd_exposer.def( 
                "postMult"
                , postMult_function_type( &::osg::Matrixd::postMult )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Matrixd::postMultRotate
        
            typedef void ( ::osg::Matrixd::*postMultRotate_function_type )( ::osg::Quat const & ) ;
            
            Matrixd_exposer.def( 
                "postMultRotate"
                , postMultRotate_function_type( &::osg::Matrixd::postMultRotate )
                , ( bp::arg("q") ) );
        
        }
        { //::osg::Matrixd::postMultScale
        
            typedef void ( ::osg::Matrixd::*postMultScale_function_type )( ::osg::Vec3d const & ) ;
            
            Matrixd_exposer.def( 
                "postMultScale"
                , postMultScale_function_type( &::osg::Matrixd::postMultScale )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::postMultScale
        
            typedef void ( ::osg::Matrixd::*postMultScale_function_type )( ::osg::Vec3f const & ) ;
            
            Matrixd_exposer.def( 
                "postMultScale"
                , postMultScale_function_type( &::osg::Matrixd::postMultScale )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::postMultTranslate
        
            typedef void ( ::osg::Matrixd::*postMultTranslate_function_type )( ::osg::Vec3d const & ) ;
            
            Matrixd_exposer.def( 
                "postMultTranslate"
                , postMultTranslate_function_type( &::osg::Matrixd::postMultTranslate )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::postMultTranslate
        
            typedef void ( ::osg::Matrixd::*postMultTranslate_function_type )( ::osg::Vec3f const & ) ;
            
            Matrixd_exposer.def( 
                "postMultTranslate"
                , postMultTranslate_function_type( &::osg::Matrixd::postMultTranslate )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::preMult
        
            typedef ::osg::Vec3f ( ::osg::Matrixd::*preMult_function_type )( ::osg::Vec3f const & ) const;
            
            Matrixd_exposer.def( 
                "preMult"
                , preMult_function_type( &::osg::Matrixd::preMult )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::preMult
        
            typedef ::osg::Vec3d ( ::osg::Matrixd::*preMult_function_type )( ::osg::Vec3d const & ) const;
            
            Matrixd_exposer.def( 
                "preMult"
                , preMult_function_type( &::osg::Matrixd::preMult )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::preMult
        
            typedef ::osg::Vec4f ( ::osg::Matrixd::*preMult_function_type )( ::osg::Vec4f const & ) const;
            
            Matrixd_exposer.def( 
                "preMult"
                , preMult_function_type( &::osg::Matrixd::preMult )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::preMult
        
            typedef ::osg::Vec4d ( ::osg::Matrixd::*preMult_function_type )( ::osg::Vec4d const & ) const;
            
            Matrixd_exposer.def( 
                "preMult"
                , preMult_function_type( &::osg::Matrixd::preMult )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::preMult
        
            typedef void ( ::osg::Matrixd::*preMult_function_type )( ::osg::Matrixd const & ) ;
            
            Matrixd_exposer.def( 
                "preMult"
                , preMult_function_type( &::osg::Matrixd::preMult )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Matrixd::preMultRotate
        
            typedef void ( ::osg::Matrixd::*preMultRotate_function_type )( ::osg::Quat const & ) ;
            
            Matrixd_exposer.def( 
                "preMultRotate"
                , preMultRotate_function_type( &::osg::Matrixd::preMultRotate )
                , ( bp::arg("q") ) );
        
        }
        { //::osg::Matrixd::preMultScale
        
            typedef void ( ::osg::Matrixd::*preMultScale_function_type )( ::osg::Vec3d const & ) ;
            
            Matrixd_exposer.def( 
                "preMultScale"
                , preMultScale_function_type( &::osg::Matrixd::preMultScale )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::preMultScale
        
            typedef void ( ::osg::Matrixd::*preMultScale_function_type )( ::osg::Vec3f const & ) ;
            
            Matrixd_exposer.def( 
                "preMultScale"
                , preMultScale_function_type( &::osg::Matrixd::preMultScale )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::preMultTranslate
        
            typedef void ( ::osg::Matrixd::*preMultTranslate_function_type )( ::osg::Vec3d const & ) ;
            
            Matrixd_exposer.def( 
                "preMultTranslate"
                , preMultTranslate_function_type( &::osg::Matrixd::preMultTranslate )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::preMultTranslate
        
            typedef void ( ::osg::Matrixd::*preMultTranslate_function_type )( ::osg::Vec3f const & ) ;
            
            Matrixd_exposer.def( 
                "preMultTranslate"
                , preMultTranslate_function_type( &::osg::Matrixd::preMultTranslate )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::rotate
        
            typedef ::osg::Matrixd ( *rotate_function_type )( ::osg::Vec3f const &,::osg::Vec3f const & );
            
            Matrixd_exposer.def( 
                "rotate"
                , rotate_function_type( &::osg::Matrixd::rotate )
                , ( bp::arg("from"), bp::arg("to") ) );
        
        }
        { //::osg::Matrixd::rotate
        
            typedef ::osg::Matrixd ( *rotate_function_type )( ::osg::Vec3d const &,::osg::Vec3d const & );
            
            Matrixd_exposer.def( 
                "rotate"
                , rotate_function_type( &::osg::Matrixd::rotate )
                , ( bp::arg("from"), bp::arg("to") ) );
        
        }
        { //::osg::Matrixd::rotate
        
            typedef ::osg::Matrixd ( *rotate_function_type )( double,double,double,double );
            
            Matrixd_exposer.def( 
                "rotate"
                , rotate_function_type( &::osg::Matrixd::rotate )
                , ( bp::arg("angle"), bp::arg("x"), bp::arg("y"), bp::arg("z") ) );
        
        }
        { //::osg::Matrixd::rotate
        
            typedef ::osg::Matrixd ( *rotate_function_type )( double,::osg::Vec3f const & );
            
            Matrixd_exposer.def( 
                "rotate"
                , rotate_function_type( &::osg::Matrixd::rotate )
                , ( bp::arg("angle"), bp::arg("axis") ) );
        
        }
        { //::osg::Matrixd::rotate
        
            typedef ::osg::Matrixd ( *rotate_function_type )( double,::osg::Vec3d const & );
            
            Matrixd_exposer.def( 
                "rotate"
                , rotate_function_type( &::osg::Matrixd::rotate )
                , ( bp::arg("angle"), bp::arg("axis") ) );
        
        }
        { //::osg::Matrixd::rotate
        
            typedef ::osg::Matrixd ( *rotate_function_type )( double,::osg::Vec3f const &,double,::osg::Vec3f const &,double,::osg::Vec3f const & );
            
            Matrixd_exposer.def( 
                "rotate"
                , rotate_function_type( &::osg::Matrixd::rotate )
                , ( bp::arg("angle1"), bp::arg("axis1"), bp::arg("angle2"), bp::arg("axis2"), bp::arg("angle3"), bp::arg("axis3") ) );
        
        }
        { //::osg::Matrixd::rotate
        
            typedef ::osg::Matrixd ( *rotate_function_type )( double,::osg::Vec3d const &,double,::osg::Vec3d const &,double,::osg::Vec3d const & );
            
            Matrixd_exposer.def( 
                "rotate"
                , rotate_function_type( &::osg::Matrixd::rotate )
                , ( bp::arg("angle1"), bp::arg("axis1"), bp::arg("angle2"), bp::arg("axis2"), bp::arg("angle3"), bp::arg("axis3") ) );
        
        }
        { //::osg::Matrixd::rotate
        
            typedef ::osg::Matrixd ( *rotate_function_type )( ::osg::Quat const & );
            
            Matrixd_exposer.def( 
                "rotate"
                , rotate_function_type( &::osg::Matrixd::rotate )
                , ( bp::arg("q") ) );
        
        }
        { //::osg::Matrixd::scale
        
            typedef ::osg::Matrixd ( *scale_function_type )( ::osg::Vec3f const & );
            
            Matrixd_exposer.def( 
                "scale"
                , scale_function_type( &::osg::Matrixd::scale )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::scale
        
            typedef ::osg::Matrixd ( *scale_function_type )( ::osg::Vec3d const & );
            
            Matrixd_exposer.def( 
                "scale"
                , scale_function_type( &::osg::Matrixd::scale )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::scale
        
            typedef ::osg::Matrixd ( *scale_function_type )( double,double,double );
            
            Matrixd_exposer.def( 
                "scale"
                , scale_function_type( &::osg::Matrixd::scale )
                , ( bp::arg("sx"), bp::arg("sy"), bp::arg("sz") ) );
        
        }
        { //::osg::Matrixd::set
        
            typedef void ( ::osg::Matrixd::*set_function_type )( ::osg::Matrixd const & ) ;
            
            Matrixd_exposer.def( 
                "set"
                , set_function_type( &::osg::Matrixd::set )
                , ( bp::arg("rhs") ) );
        
        }
        { //::osg::Matrixd::set
        
            typedef void ( ::osg::Matrixd::*set_function_type )( ::osg::Matrixf const & ) ;
            
            Matrixd_exposer.def( 
                "set"
                , set_function_type( &::osg::Matrixd::set )
                , ( bp::arg("rhs") ) );
        
        }
        { //::osg::Matrixd::set
        
            typedef void ( ::osg::Matrixd::*set_function_type )( float const * const ) ;
            
            Matrixd_exposer.def( 
                "set"
                , set_function_type( &::osg::Matrixd::set )
                , ( bp::arg("ptr") ) );
        
        }
        { //::osg::Matrixd::set
        
            typedef void ( ::osg::Matrixd::*set_function_type )( double const * const ) ;
            
            Matrixd_exposer.def( 
                "set"
                , set_function_type( &::osg::Matrixd::set )
                , ( bp::arg("ptr") ) );
        
        }
        { //::osg::Matrixd::set
        
            typedef void ( ::osg::Matrixd::*set_function_type )( double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double ) ;
            
            Matrixd_exposer.def( 
                "set"
                , set_function_type( &::osg::Matrixd::set )
                , ( bp::arg("a00"), bp::arg("a01"), bp::arg("a02"), bp::arg("a03"), bp::arg("a10"), bp::arg("a11"), bp::arg("a12"), bp::arg("a13"), bp::arg("a20"), bp::arg("a21"), bp::arg("a22"), bp::arg("a23"), bp::arg("a30"), bp::arg("a31"), bp::arg("a32"), bp::arg("a33") ) );
        
        }
        { //::osg::Matrixd::set
        
            typedef void ( ::osg::Matrixd::*set_function_type )( ::osg::Quat const & ) ;
            
            Matrixd_exposer.def( 
                "set"
                , set_function_type( &::osg::Matrixd::set )
                , ( bp::arg("q") ) );
        
        }
        { //::osg::Matrixd::setRotate
        
            typedef void ( ::osg::Matrixd::*setRotate_function_type )( ::osg::Quat const & ) ;
            
            Matrixd_exposer.def( 
                "setRotate"
                , setRotate_function_type( &::osg::Matrixd::setRotate )
                , ( bp::arg("q") ) );
        
        }
        { //::osg::Matrixd::setTrans
        
            typedef void ( ::osg::Matrixd::*setTrans_function_type )( double,double,double ) ;
            
            Matrixd_exposer.def( 
                "setTrans"
                , setTrans_function_type( &::osg::Matrixd::setTrans )
                , ( bp::arg("tx"), bp::arg("ty"), bp::arg("tz") ) );
        
        }
        { //::osg::Matrixd::setTrans
        
            typedef void ( ::osg::Matrixd::*setTrans_function_type )( ::osg::Vec3f const & ) ;
            
            Matrixd_exposer.def( 
                "setTrans"
                , setTrans_function_type( &::osg::Matrixd::setTrans )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::setTrans
        
            typedef void ( ::osg::Matrixd::*setTrans_function_type )( ::osg::Vec3d const & ) ;
            
            Matrixd_exposer.def( 
                "setTrans"
                , setTrans_function_type( &::osg::Matrixd::setTrans )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::transform3x3
        
            typedef ::osg::Vec3f ( *transform3x3_function_type )( ::osg::Vec3f const &,::osg::Matrixd const & );
            
            Matrixd_exposer.def( 
                "transform3x3"
                , transform3x3_function_type( &::osg::Matrixd::transform3x3 )
                , ( bp::arg("v"), bp::arg("m") ) );
        
        }
        { //::osg::Matrixd::transform3x3
        
            typedef ::osg::Vec3d ( *transform3x3_function_type )( ::osg::Vec3d const &,::osg::Matrixd const & );
            
            Matrixd_exposer.def( 
                "transform3x3"
                , transform3x3_function_type( &::osg::Matrixd::transform3x3 )
                , ( bp::arg("v"), bp::arg("m") ) );
        
        }
        { //::osg::Matrixd::transform3x3
        
            typedef ::osg::Vec3f ( *transform3x3_function_type )( ::osg::Matrixd const &,::osg::Vec3f const & );
            
            Matrixd_exposer.def( 
                "transform3x3"
                , transform3x3_function_type( &::osg::Matrixd::transform3x3 )
                , ( bp::arg("m"), bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::transform3x3
        
            typedef ::osg::Vec3d ( *transform3x3_function_type )( ::osg::Matrixd const &,::osg::Vec3d const & );
            
            Matrixd_exposer.def( 
                "transform3x3"
                , transform3x3_function_type( &::osg::Matrixd::transform3x3 )
                , ( bp::arg("m"), bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::translate
        
            typedef ::osg::Matrixd ( *translate_function_type )( ::osg::Vec3f const & );
            
            Matrixd_exposer.def( 
                "translate"
                , translate_function_type( &::osg::Matrixd::translate )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::translate
        
            typedef ::osg::Matrixd ( *translate_function_type )( ::osg::Vec3d const & );
            
            Matrixd_exposer.def( 
                "translate"
                , translate_function_type( &::osg::Matrixd::translate )
                , ( bp::arg("v") ) );
        
        }
        { //::osg::Matrixd::translate
        
            typedef ::osg::Matrixd ( *translate_function_type )( double,double,double );
            
            Matrixd_exposer.def( 
                "translate"
                , translate_function_type( &::osg::Matrixd::translate )
                , ( bp::arg("tx"), bp::arg("ty"), bp::arg("tz") ) );
        
        }
        { //::osg::Matrixd::valid
        
            typedef bool ( ::osg::Matrixd::*valid_function_type )(  ) const;
            
            Matrixd_exposer.def( 
                "valid"
                , valid_function_type( &::osg::Matrixd::valid ) );
        
        }
        Matrixd_exposer.staticmethod( "frustum" );
        Matrixd_exposer.staticmethod( "identity" );
        Matrixd_exposer.staticmethod( "inverse" );
        Matrixd_exposer.staticmethod( "lookAt" );
        Matrixd_exposer.staticmethod( "ortho" );
        Matrixd_exposer.staticmethod( "ortho2D" );
        Matrixd_exposer.staticmethod( "orthoNormal" );
        Matrixd_exposer.staticmethod( "perspective" );
        Matrixd_exposer.staticmethod( "rotate" );
        Matrixd_exposer.staticmethod( "scale" );
        Matrixd_exposer.staticmethod( "transform3x3" );
        Matrixd_exposer.staticmethod( "translate" );
        Matrixd_exposer.def( bp::self_ns::str( bp::self ) );
        Matrixd_exposer.def( bp::self_ns::str(bp::self) );
    }

}
