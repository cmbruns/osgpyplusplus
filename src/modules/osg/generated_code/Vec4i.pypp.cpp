// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "indexing_helpers.h"
#include "Vec4i.pypp.hpp"

namespace bp = boost::python;

void register_Vec4i_class(){

    { //::osg::Vec4i
        typedef bp::class_< osg::Vec4i > Vec4i_exposer_t;
        Vec4i_exposer_t Vec4i_exposer = Vec4i_exposer_t( "Vec4i", "\n General purpose integer quad\n", bp::init< >() );
        bp::scope Vec4i_scope( Vec4i_exposer );
        bp::scope().attr("num_components") = (int)osg::Vec4i::num_components;
        Vec4i_exposer.def( bp::init< int, int, int, int >(( bp::arg("x"), bp::arg("y"), bp::arg("z"), bp::arg("w") )) );
        Vec4i_exposer.def( bp::self != bp::self );
        Vec4i_exposer.def( bp::self * bp::other< int >() );
        Vec4i_exposer.def( bp::self * bp::self );
        Vec4i_exposer.def( bp::self + bp::other< int >() );
        Vec4i_exposer.def( bp::self + bp::self );
        Vec4i_exposer.def( bp::self - bp::other< int >() );
        Vec4i_exposer.def( bp::self - bp::self );
        Vec4i_exposer.def( bp::self / bp::other< int >() );
        Vec4i_exposer.def( bp::self < bp::self );
        Vec4i_exposer.def( bp::self == bp::self );
        { //::osg::Vec4i::operator[]
        
            typedef int & ( ::osg::Vec4i::*__getitem___function_type )( unsigned int ) ;
            
            Vec4i_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Vec4i::operator[] )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::Vec4i::operator[]
        
            typedef int ( ::osg::Vec4i::*__getitem___function_type )( unsigned int ) const;
            
            Vec4i_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::osg::Vec4i::operator[] )
                , ( bp::arg("i") ) );
        
        }
        { //::osg::Vec4i::set
        
            typedef void ( ::osg::Vec4i::*set_function_type )( int,int,int,int ) ;
            
            Vec4i_exposer.def( 
                "set"
                , set_function_type( &::osg::Vec4i::set )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("z"), bp::arg("w") ) );
        
        }
        { //property "x"[fget=::osg::Vec4i::x]
        
            typedef int & ( ::osg::Vec4i::*fget )(  ) ;
            
            Vec4i_exposer.add_property( 
                "x"
                , bp::make_function( 
                      fget( &::osg::Vec4i::x )
                    , bp::return_value_policy< bp::copy_non_const_reference >() )  );
        
        }
        { //property "x"[fget=::osg::Vec4i::x]
        
            typedef int ( ::osg::Vec4i::*fget )(  ) const;
            
            Vec4i_exposer.add_property( 
                "x"
                , fget( &::osg::Vec4i::x ) );
        
        }
        { //property "y"[fget=::osg::Vec4i::y]
        
            typedef int & ( ::osg::Vec4i::*fget )(  ) ;
            
            Vec4i_exposer.add_property( 
                "y"
                , bp::make_function( 
                      fget( &::osg::Vec4i::y )
                    , bp::return_value_policy< bp::copy_non_const_reference >() )  );
        
        }
        { //property "y"[fget=::osg::Vec4i::y]
        
            typedef int ( ::osg::Vec4i::*fget )(  ) const;
            
            Vec4i_exposer.add_property( 
                "y"
                , fget( &::osg::Vec4i::y ) );
        
        }
        { //property "z"[fget=::osg::Vec4i::z]
        
            typedef int & ( ::osg::Vec4i::*fget )(  ) ;
            
            Vec4i_exposer.add_property( 
                "z"
                , bp::make_function( 
                      fget( &::osg::Vec4i::z )
                    , bp::return_value_policy< bp::copy_non_const_reference >() )  );
        
        }
        { //property "z"[fget=::osg::Vec4i::z]
        
            typedef int ( ::osg::Vec4i::*fget )(  ) const;
            
            Vec4i_exposer.add_property( 
                "z"
                , fget( &::osg::Vec4i::z ) );
        
        }
        { //property "w"[fget=::osg::Vec4i::w]
        
            typedef int & ( ::osg::Vec4i::*fget )(  ) ;
            
            Vec4i_exposer.add_property( 
                "w"
                , bp::make_function( 
                      fget( &::osg::Vec4i::w )
                    , bp::return_value_policy< bp::copy_non_const_reference >() )  );
        
        }
        { //property "w"[fget=::osg::Vec4i::w]
        
            typedef int ( ::osg::Vec4i::*fget )(  ) const;
            
            Vec4i_exposer.add_property( 
                "w"
                , fget( &::osg::Vec4i::w ) );
        
        }
        { //property "r"[fget=::osg::Vec4i::r]
        
            typedef int & ( ::osg::Vec4i::*fget )(  ) ;
            
            Vec4i_exposer.add_property( 
                "r"
                , bp::make_function( 
                      fget( &::osg::Vec4i::r )
                    , bp::return_value_policy< bp::copy_non_const_reference >() )  );
        
        }
        { //property "r"[fget=::osg::Vec4i::r]
        
            typedef int ( ::osg::Vec4i::*fget )(  ) const;
            
            Vec4i_exposer.add_property( 
                "r"
                , fget( &::osg::Vec4i::r ) );
        
        }
        { //property "g"[fget=::osg::Vec4i::g]
        
            typedef int & ( ::osg::Vec4i::*fget )(  ) ;
            
            Vec4i_exposer.add_property( 
                "g"
                , bp::make_function( 
                      fget( &::osg::Vec4i::g )
                    , bp::return_value_policy< bp::copy_non_const_reference >() )  );
        
        }
        { //property "g"[fget=::osg::Vec4i::g]
        
            typedef int ( ::osg::Vec4i::*fget )(  ) const;
            
            Vec4i_exposer.add_property( 
                "g"
                , fget( &::osg::Vec4i::g ) );
        
        }
        { //property "b"[fget=::osg::Vec4i::b]
        
            typedef int & ( ::osg::Vec4i::*fget )(  ) ;
            
            Vec4i_exposer.add_property( 
                "b"
                , bp::make_function( 
                      fget( &::osg::Vec4i::b )
                    , bp::return_value_policy< bp::copy_non_const_reference >() )  );
        
        }
        { //property "b"[fget=::osg::Vec4i::b]
        
            typedef int ( ::osg::Vec4i::*fget )(  ) const;
            
            Vec4i_exposer.add_property( 
                "b"
                , fget( &::osg::Vec4i::b ) );
        
        }
        { //property "a"[fget=::osg::Vec4i::a]
        
            typedef int & ( ::osg::Vec4i::*fget )(  ) ;
            
            Vec4i_exposer.add_property( 
                "a"
                , bp::make_function( 
                      fget( &::osg::Vec4i::a )
                    , bp::return_value_policy< bp::copy_non_const_reference >() )  );
        
        }
        { //property "a"[fget=::osg::Vec4i::a]
        
            typedef int ( ::osg::Vec4i::*fget )(  ) const;
            
            Vec4i_exposer.add_property( 
                "a"
                , fget( &::osg::Vec4i::a ) );
        
        }
        Vec4i_exposer.def(bp::indexing::container_suite<
                                    osg::Vec4i, 
                                    bp::indexing::all_methods, 
                                    OsgVec_algorithms<osg::Vec4i, osg::Vec4i::value_type, osg::Vec4i::num_components> >());
    }

}
