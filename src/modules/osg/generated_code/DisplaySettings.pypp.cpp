// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "DisplaySettings.pypp.hpp"

namespace bp = boost::python;

struct DisplaySettings_wrapper : osg::DisplaySettings, bp::wrapper< osg::DisplaySettings > {

    virtual ::osg::Matrixd computeLeftEyeProjectionImplementation( ::osg::Matrixd const & projection ) const  {
        if( bp::override func_computeLeftEyeProjectionImplementation = this->get_override( "computeLeftEyeProjectionImplementation" ) )
            return func_computeLeftEyeProjectionImplementation( boost::ref(projection) );
        else{
            return this->osg::DisplaySettings::computeLeftEyeProjectionImplementation( boost::ref(projection) );
        }
    }
    
    ::osg::Matrixd default_computeLeftEyeProjectionImplementation( ::osg::Matrixd const & projection ) const  {
        return osg::DisplaySettings::computeLeftEyeProjectionImplementation( boost::ref(projection) );
    }

    virtual ::osg::Matrixd computeLeftEyeViewImplementation( ::osg::Matrixd const & view, double eyeSeperationScale=1.0e+0 ) const  {
        if( bp::override func_computeLeftEyeViewImplementation = this->get_override( "computeLeftEyeViewImplementation" ) )
            return func_computeLeftEyeViewImplementation( boost::ref(view), eyeSeperationScale );
        else{
            return this->osg::DisplaySettings::computeLeftEyeViewImplementation( boost::ref(view), eyeSeperationScale );
        }
    }
    
    ::osg::Matrixd default_computeLeftEyeViewImplementation( ::osg::Matrixd const & view, double eyeSeperationScale=1.0e+0 ) const  {
        return osg::DisplaySettings::computeLeftEyeViewImplementation( boost::ref(view), eyeSeperationScale );
    }

    virtual ::osg::Matrixd computeRightEyeProjectionImplementation( ::osg::Matrixd const & projection ) const  {
        if( bp::override func_computeRightEyeProjectionImplementation = this->get_override( "computeRightEyeProjectionImplementation" ) )
            return func_computeRightEyeProjectionImplementation( boost::ref(projection) );
        else{
            return this->osg::DisplaySettings::computeRightEyeProjectionImplementation( boost::ref(projection) );
        }
    }
    
    ::osg::Matrixd default_computeRightEyeProjectionImplementation( ::osg::Matrixd const & projection ) const  {
        return osg::DisplaySettings::computeRightEyeProjectionImplementation( boost::ref(projection) );
    }

    virtual ::osg::Matrixd computeRightEyeViewImplementation( ::osg::Matrixd const & view, double eyeSeperationScale=1.0e+0 ) const  {
        if( bp::override func_computeRightEyeViewImplementation = this->get_override( "computeRightEyeViewImplementation" ) )
            return func_computeRightEyeViewImplementation( boost::ref(view), eyeSeperationScale );
        else{
            return this->osg::DisplaySettings::computeRightEyeViewImplementation( boost::ref(view), eyeSeperationScale );
        }
    }
    
    ::osg::Matrixd default_computeRightEyeViewImplementation( ::osg::Matrixd const & view, double eyeSeperationScale=1.0e+0 ) const  {
        return osg::DisplaySettings::computeRightEyeViewImplementation( boost::ref(view), eyeSeperationScale );
    }

};

void register_DisplaySettings_class(){

    { //::osg::DisplaySettings
        typedef bp::class_< DisplaySettings_wrapper, bp::bases< osg::Referenced >, osg::ref_ptr< ::osg::DisplaySettings >, boost::noncopyable > DisplaySettings_exposer_t;
        DisplaySettings_exposer_t DisplaySettings_exposer = DisplaySettings_exposer_t( "DisplaySettings", "\n DisplaySettings class for encapsulating what visuals are required and\n have been set up, and the status of stereo viewing.\n", bp::no_init );
        bp::scope DisplaySettings_scope( DisplaySettings_exposer );
        bp::enum_< osg::DisplaySettings::DisplayType>("DisplayType")
            .value("MONITOR", osg::DisplaySettings::MONITOR)
            .value("POWERWALL", osg::DisplaySettings::POWERWALL)
            .value("REALITY_CENTER", osg::DisplaySettings::REALITY_CENTER)
            .value("HEAD_MOUNTED_DISPLAY", osg::DisplaySettings::HEAD_MOUNTED_DISPLAY)
            .export_values()
            ;
        bp::enum_< osg::DisplaySettings::ImplicitBufferAttachment>("ImplicitBufferAttachment")
            .value("IMPLICIT_DEPTH_BUFFER_ATTACHMENT", osg::DisplaySettings::IMPLICIT_DEPTH_BUFFER_ATTACHMENT)
            .value("IMPLICIT_STENCIL_BUFFER_ATTACHMENT", osg::DisplaySettings::IMPLICIT_STENCIL_BUFFER_ATTACHMENT)
            .value("IMPLICIT_COLOR_BUFFER_ATTACHMENT", osg::DisplaySettings::IMPLICIT_COLOR_BUFFER_ATTACHMENT)
            .value("DEFAULT_IMPLICIT_BUFFER_ATTACHMENT", osg::DisplaySettings::DEFAULT_IMPLICIT_BUFFER_ATTACHMENT)
            .export_values()
            ;
        bp::enum_< osg::DisplaySettings::SplitStereoHorizontalEyeMapping>("SplitStereoHorizontalEyeMapping")
            .value("LEFT_EYE_LEFT_VIEWPORT", osg::DisplaySettings::LEFT_EYE_LEFT_VIEWPORT)
            .value("LEFT_EYE_RIGHT_VIEWPORT", osg::DisplaySettings::LEFT_EYE_RIGHT_VIEWPORT)
            .export_values()
            ;
        bp::enum_< osg::DisplaySettings::SplitStereoVerticalEyeMapping>("SplitStereoVerticalEyeMapping")
            .value("LEFT_EYE_TOP_VIEWPORT", osg::DisplaySettings::LEFT_EYE_TOP_VIEWPORT)
            .value("LEFT_EYE_BOTTOM_VIEWPORT", osg::DisplaySettings::LEFT_EYE_BOTTOM_VIEWPORT)
            .export_values()
            ;
        bp::enum_< osg::DisplaySettings::StereoMode>("StereoMode")
            .value("QUAD_BUFFER", osg::DisplaySettings::QUAD_BUFFER)
            .value("ANAGLYPHIC", osg::DisplaySettings::ANAGLYPHIC)
            .value("HORIZONTAL_SPLIT", osg::DisplaySettings::HORIZONTAL_SPLIT)
            .value("VERTICAL_SPLIT", osg::DisplaySettings::VERTICAL_SPLIT)
            .value("LEFT_EYE", osg::DisplaySettings::LEFT_EYE)
            .value("RIGHT_EYE", osg::DisplaySettings::RIGHT_EYE)
            .value("HORIZONTAL_INTERLACE", osg::DisplaySettings::HORIZONTAL_INTERLACE)
            .value("VERTICAL_INTERLACE", osg::DisplaySettings::VERTICAL_INTERLACE)
            .value("CHECKERBOARD", osg::DisplaySettings::CHECKERBOARD)
            .export_values()
            ;
        bp::enum_< osg::DisplaySettings::SwapMethod>("SwapMethod")
            .value("SWAP_DEFAULT", osg::DisplaySettings::SWAP_DEFAULT)
            .value("SWAP_EXCHANGE", osg::DisplaySettings::SWAP_EXCHANGE)
            .value("SWAP_COPY", osg::DisplaySettings::SWAP_COPY)
            .value("SWAP_UNDEFINED", osg::DisplaySettings::SWAP_UNDEFINED)
            .export_values()
            ;
        { //::osg::DisplaySettings::computeLeftEyeProjectionImplementation
        
            typedef ::osg::Matrixd ( ::osg::DisplaySettings::*computeLeftEyeProjectionImplementation_function_type )( ::osg::Matrixd const & ) const;
            typedef ::osg::Matrixd ( DisplaySettings_wrapper::*default_computeLeftEyeProjectionImplementation_function_type )( ::osg::Matrixd const & ) const;
            
            DisplaySettings_exposer.def( 
                "computeLeftEyeProjectionImplementation"
                , computeLeftEyeProjectionImplementation_function_type(&::osg::DisplaySettings::computeLeftEyeProjectionImplementation)
                , default_computeLeftEyeProjectionImplementation_function_type(&DisplaySettings_wrapper::default_computeLeftEyeProjectionImplementation)
                , ( bp::arg("projection") ) );
        
        }
        { //::osg::DisplaySettings::computeLeftEyeViewImplementation
        
            typedef ::osg::Matrixd ( ::osg::DisplaySettings::*computeLeftEyeViewImplementation_function_type )( ::osg::Matrixd const &,double ) const;
            typedef ::osg::Matrixd ( DisplaySettings_wrapper::*default_computeLeftEyeViewImplementation_function_type )( ::osg::Matrixd const &,double ) const;
            
            DisplaySettings_exposer.def( 
                "computeLeftEyeViewImplementation"
                , computeLeftEyeViewImplementation_function_type(&::osg::DisplaySettings::computeLeftEyeViewImplementation)
                , default_computeLeftEyeViewImplementation_function_type(&DisplaySettings_wrapper::default_computeLeftEyeViewImplementation)
                , ( bp::arg("view"), bp::arg("eyeSeperationScale")=1.0e+0 ) );
        
        }
        { //::osg::DisplaySettings::computeRightEyeProjectionImplementation
        
            typedef ::osg::Matrixd ( ::osg::DisplaySettings::*computeRightEyeProjectionImplementation_function_type )( ::osg::Matrixd const & ) const;
            typedef ::osg::Matrixd ( DisplaySettings_wrapper::*default_computeRightEyeProjectionImplementation_function_type )( ::osg::Matrixd const & ) const;
            
            DisplaySettings_exposer.def( 
                "computeRightEyeProjectionImplementation"
                , computeRightEyeProjectionImplementation_function_type(&::osg::DisplaySettings::computeRightEyeProjectionImplementation)
                , default_computeRightEyeProjectionImplementation_function_type(&DisplaySettings_wrapper::default_computeRightEyeProjectionImplementation)
                , ( bp::arg("projection") ) );
        
        }
        { //::osg::DisplaySettings::computeRightEyeViewImplementation
        
            typedef ::osg::Matrixd ( ::osg::DisplaySettings::*computeRightEyeViewImplementation_function_type )( ::osg::Matrixd const &,double ) const;
            typedef ::osg::Matrixd ( DisplaySettings_wrapper::*default_computeRightEyeViewImplementation_function_type )( ::osg::Matrixd const &,double ) const;
            
            DisplaySettings_exposer.def( 
                "computeRightEyeViewImplementation"
                , computeRightEyeViewImplementation_function_type(&::osg::DisplaySettings::computeRightEyeViewImplementation)
                , default_computeRightEyeViewImplementation_function_type(&DisplaySettings_wrapper::default_computeRightEyeViewImplementation)
                , ( bp::arg("view"), bp::arg("eyeSeperationScale")=1.0e+0 ) );
        
        }
        { //::osg::DisplaySettings::getAccumBuffer
        
            typedef bool ( ::osg::DisplaySettings::*getAccumBuffer_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getAccumBuffer"
                , getAccumBuffer_function_type( &::osg::DisplaySettings::getAccumBuffer ) );
        
        }
        { //::osg::DisplaySettings::getAlphaBuffer
        
            typedef bool ( ::osg::DisplaySettings::*getAlphaBuffer_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getAlphaBuffer"
                , getAlphaBuffer_function_type( &::osg::DisplaySettings::getAlphaBuffer ) );
        
        }
        { //::osg::DisplaySettings::getApplication
        
            typedef ::std::string const & ( ::osg::DisplaySettings::*getApplication_function_type )(  ) ;
            
            DisplaySettings_exposer.def( 
                "getApplication"
                , getApplication_function_type( &::osg::DisplaySettings::getApplication )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::osg::DisplaySettings::getCompileContextsHint
        
            typedef bool ( ::osg::DisplaySettings::*getCompileContextsHint_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getCompileContextsHint"
                , getCompileContextsHint_function_type( &::osg::DisplaySettings::getCompileContextsHint ) );
        
        }
        { //::osg::DisplaySettings::getDepthBuffer
        
            typedef bool ( ::osg::DisplaySettings::*getDepthBuffer_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getDepthBuffer"
                , getDepthBuffer_function_type( &::osg::DisplaySettings::getDepthBuffer ) );
        
        }
        { //::osg::DisplaySettings::getDisplayType
        
            typedef ::osg::DisplaySettings::DisplayType ( ::osg::DisplaySettings::*getDisplayType_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getDisplayType"
                , getDisplayType_function_type( &::osg::DisplaySettings::getDisplayType ) );
        
        }
        { //::osg::DisplaySettings::getDoubleBuffer
        
            typedef bool ( ::osg::DisplaySettings::*getDoubleBuffer_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getDoubleBuffer"
                , getDoubleBuffer_function_type( &::osg::DisplaySettings::getDoubleBuffer ) );
        
        }
        { //::osg::DisplaySettings::getEyeSeparation
        
            typedef float ( ::osg::DisplaySettings::*getEyeSeparation_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getEyeSeparation"
                , getEyeSeparation_function_type( &::osg::DisplaySettings::getEyeSeparation ) );
        
        }
        { //::osg::DisplaySettings::getGLContextFlags
        
            typedef unsigned int ( ::osg::DisplaySettings::*getGLContextFlags_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getGLContextFlags"
                , getGLContextFlags_function_type( &::osg::DisplaySettings::getGLContextFlags )
                , " Get the hint of the flags to use in when creating graphic contexts." );
        
        }
        { //::osg::DisplaySettings::getGLContextProfileMask
        
            typedef unsigned int ( ::osg::DisplaySettings::*getGLContextProfileMask_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getGLContextProfileMask"
                , getGLContextProfileMask_function_type( &::osg::DisplaySettings::getGLContextProfileMask )
                , " Get the hint of the profile mask to use in when creating graphic contexts." );
        
        }
        { //::osg::DisplaySettings::getGLContextVersion
        
            typedef ::std::string const ( ::osg::DisplaySettings::*getGLContextVersion_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getGLContextVersion"
                , getGLContextVersion_function_type( &::osg::DisplaySettings::getGLContextVersion )
                , " Get the hint of which OpenGL version to attempt to create a graphics context for." );
        
        }
        { //::osg::DisplaySettings::getImplicitBufferAttachmentRenderMask
        
            typedef int ( ::osg::DisplaySettings::*getImplicitBufferAttachmentRenderMask_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getImplicitBufferAttachmentRenderMask"
                , getImplicitBufferAttachmentRenderMask_function_type( &::osg::DisplaySettings::getImplicitBufferAttachmentRenderMask )
                , " Get mask selecting default implict buffer attachments for Cameras primary FBOs." );
        
        }
        { //::osg::DisplaySettings::getImplicitBufferAttachmentResolveMask
        
            typedef int ( ::osg::DisplaySettings::*getImplicitBufferAttachmentResolveMask_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getImplicitBufferAttachmentResolveMask"
                , getImplicitBufferAttachmentResolveMask_function_type( &::osg::DisplaySettings::getImplicitBufferAttachmentResolveMask )
                , " Get mask selecting default implict buffer attachments for Cameras secondary MULTISAMPLE FBOs." );
        
        }
        { //::osg::DisplaySettings::getKeystoneFileNames
        
            typedef ::std::vector< std::string > & ( ::osg::DisplaySettings::*getKeystoneFileNames_function_type )(  ) ;
            
            DisplaySettings_exposer.def( 
                "getKeystoneFileNames"
                , getKeystoneFileNames_function_type( &::osg::DisplaySettings::getKeystoneFileNames )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::DisplaySettings::getKeystoneFileNames
        
            typedef ::std::vector< std::string > const & ( ::osg::DisplaySettings::*getKeystoneFileNames_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getKeystoneFileNames"
                , getKeystoneFileNames_function_type( &::osg::DisplaySettings::getKeystoneFileNames )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::DisplaySettings::getKeystoneHint
        
            typedef bool ( ::osg::DisplaySettings::*getKeystoneHint_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getKeystoneHint"
                , getKeystoneHint_function_type( &::osg::DisplaySettings::getKeystoneHint ) );
        
        }
        { //::osg::DisplaySettings::getKeystones
        
            typedef ::std::vector< osg::ref_ptr<osg::Object> > & ( ::osg::DisplaySettings::*getKeystones_function_type )(  ) ;
            
            DisplaySettings_exposer.def( 
                "getKeystones"
                , getKeystones_function_type( &::osg::DisplaySettings::getKeystones )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::DisplaySettings::getKeystones
        
            typedef ::std::vector< osg::ref_ptr<osg::Object> > const & ( ::osg::DisplaySettings::*getKeystones_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getKeystones"
                , getKeystones_function_type( &::osg::DisplaySettings::getKeystones )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::DisplaySettings::getMaxBufferObjectPoolSize
        
            typedef unsigned int ( ::osg::DisplaySettings::*getMaxBufferObjectPoolSize_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getMaxBufferObjectPoolSize"
                , getMaxBufferObjectPoolSize_function_type( &::osg::DisplaySettings::getMaxBufferObjectPoolSize ) );
        
        }
        { //::osg::DisplaySettings::getMaxNumberOfGraphicsContexts
        
            typedef unsigned int ( ::osg::DisplaySettings::*getMaxNumberOfGraphicsContexts_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getMaxNumberOfGraphicsContexts"
                , getMaxNumberOfGraphicsContexts_function_type( &::osg::DisplaySettings::getMaxNumberOfGraphicsContexts ) );
        
        }
        { //::osg::DisplaySettings::getMaxTexturePoolSize
        
            typedef unsigned int ( ::osg::DisplaySettings::*getMaxTexturePoolSize_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getMaxTexturePoolSize"
                , getMaxTexturePoolSize_function_type( &::osg::DisplaySettings::getMaxTexturePoolSize ) );
        
        }
        { //::osg::DisplaySettings::getMinimumNumAccumAlphaBits
        
            typedef unsigned int ( ::osg::DisplaySettings::*getMinimumNumAccumAlphaBits_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getMinimumNumAccumAlphaBits"
                , getMinimumNumAccumAlphaBits_function_type( &::osg::DisplaySettings::getMinimumNumAccumAlphaBits ) );
        
        }
        { //::osg::DisplaySettings::getMinimumNumAccumBlueBits
        
            typedef unsigned int ( ::osg::DisplaySettings::*getMinimumNumAccumBlueBits_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getMinimumNumAccumBlueBits"
                , getMinimumNumAccumBlueBits_function_type( &::osg::DisplaySettings::getMinimumNumAccumBlueBits ) );
        
        }
        { //::osg::DisplaySettings::getMinimumNumAccumGreenBits
        
            typedef unsigned int ( ::osg::DisplaySettings::*getMinimumNumAccumGreenBits_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getMinimumNumAccumGreenBits"
                , getMinimumNumAccumGreenBits_function_type( &::osg::DisplaySettings::getMinimumNumAccumGreenBits ) );
        
        }
        { //::osg::DisplaySettings::getMinimumNumAccumRedBits
        
            typedef unsigned int ( ::osg::DisplaySettings::*getMinimumNumAccumRedBits_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getMinimumNumAccumRedBits"
                , getMinimumNumAccumRedBits_function_type( &::osg::DisplaySettings::getMinimumNumAccumRedBits ) );
        
        }
        { //::osg::DisplaySettings::getMinimumNumAlphaBits
        
            typedef unsigned int ( ::osg::DisplaySettings::*getMinimumNumAlphaBits_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getMinimumNumAlphaBits"
                , getMinimumNumAlphaBits_function_type( &::osg::DisplaySettings::getMinimumNumAlphaBits ) );
        
        }
        { //::osg::DisplaySettings::getMinimumNumStencilBits
        
            typedef unsigned int ( ::osg::DisplaySettings::*getMinimumNumStencilBits_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getMinimumNumStencilBits"
                , getMinimumNumStencilBits_function_type( &::osg::DisplaySettings::getMinimumNumStencilBits ) );
        
        }
        { //::osg::DisplaySettings::getMultiSamples
        
            typedef bool ( ::osg::DisplaySettings::*getMultiSamples_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getMultiSamples"
                , getMultiSamples_function_type( &::osg::DisplaySettings::getMultiSamples ) );
        
        }
        { //::osg::DisplaySettings::getNumMultiSamples
        
            typedef unsigned int ( ::osg::DisplaySettings::*getNumMultiSamples_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getNumMultiSamples"
                , getNumMultiSamples_function_type( &::osg::DisplaySettings::getNumMultiSamples ) );
        
        }
        { //::osg::DisplaySettings::getNumOfDatabaseThreadsHint
        
            typedef unsigned int ( ::osg::DisplaySettings::*getNumOfDatabaseThreadsHint_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getNumOfDatabaseThreadsHint"
                , getNumOfDatabaseThreadsHint_function_type( &::osg::DisplaySettings::getNumOfDatabaseThreadsHint )
                , " Get the hint for total number of threads in the DatbasePager set up, inclusive of the number of http dedicated threads." );
        
        }
        { //::osg::DisplaySettings::getNumOfHttpDatabaseThreadsHint
        
            typedef unsigned int ( ::osg::DisplaySettings::*getNumOfHttpDatabaseThreadsHint_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getNumOfHttpDatabaseThreadsHint"
                , getNumOfHttpDatabaseThreadsHint_function_type( &::osg::DisplaySettings::getNumOfHttpDatabaseThreadsHint )
                , " Get the hint for number of threads in the DatbasePager dedicated to reading http requests." );
        
        }
        { //::osg::DisplaySettings::getRGB
        
            typedef bool ( ::osg::DisplaySettings::*getRGB_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getRGB"
                , getRGB_function_type( &::osg::DisplaySettings::getRGB ) );
        
        }
        { //::osg::DisplaySettings::getScreenDistance
        
            typedef float ( ::osg::DisplaySettings::*getScreenDistance_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getScreenDistance"
                , getScreenDistance_function_type( &::osg::DisplaySettings::getScreenDistance ) );
        
        }
        { //::osg::DisplaySettings::getScreenHeight
        
            typedef float ( ::osg::DisplaySettings::*getScreenHeight_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getScreenHeight"
                , getScreenHeight_function_type( &::osg::DisplaySettings::getScreenHeight ) );
        
        }
        { //::osg::DisplaySettings::getScreenWidth
        
            typedef float ( ::osg::DisplaySettings::*getScreenWidth_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getScreenWidth"
                , getScreenWidth_function_type( &::osg::DisplaySettings::getScreenWidth ) );
        
        }
        { //::osg::DisplaySettings::getSerializeDrawDispatch
        
            typedef bool ( ::osg::DisplaySettings::*getSerializeDrawDispatch_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getSerializeDrawDispatch"
                , getSerializeDrawDispatch_function_type( &::osg::DisplaySettings::getSerializeDrawDispatch ) );
        
        }
        { //::osg::DisplaySettings::getSplitStereoAutoAdjustAspectRatio
        
            typedef bool ( ::osg::DisplaySettings::*getSplitStereoAutoAdjustAspectRatio_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getSplitStereoAutoAdjustAspectRatio"
                , getSplitStereoAutoAdjustAspectRatio_function_type( &::osg::DisplaySettings::getSplitStereoAutoAdjustAspectRatio ) );
        
        }
        { //::osg::DisplaySettings::getSplitStereoHorizontalEyeMapping
        
            typedef ::osg::DisplaySettings::SplitStereoHorizontalEyeMapping ( ::osg::DisplaySettings::*getSplitStereoHorizontalEyeMapping_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getSplitStereoHorizontalEyeMapping"
                , getSplitStereoHorizontalEyeMapping_function_type( &::osg::DisplaySettings::getSplitStereoHorizontalEyeMapping ) );
        
        }
        { //::osg::DisplaySettings::getSplitStereoHorizontalSeparation
        
            typedef int ( ::osg::DisplaySettings::*getSplitStereoHorizontalSeparation_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getSplitStereoHorizontalSeparation"
                , getSplitStereoHorizontalSeparation_function_type( &::osg::DisplaySettings::getSplitStereoHorizontalSeparation ) );
        
        }
        { //::osg::DisplaySettings::getSplitStereoVerticalEyeMapping
        
            typedef ::osg::DisplaySettings::SplitStereoVerticalEyeMapping ( ::osg::DisplaySettings::*getSplitStereoVerticalEyeMapping_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getSplitStereoVerticalEyeMapping"
                , getSplitStereoVerticalEyeMapping_function_type( &::osg::DisplaySettings::getSplitStereoVerticalEyeMapping ) );
        
        }
        { //::osg::DisplaySettings::getSplitStereoVerticalSeparation
        
            typedef int ( ::osg::DisplaySettings::*getSplitStereoVerticalSeparation_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getSplitStereoVerticalSeparation"
                , getSplitStereoVerticalSeparation_function_type( &::osg::DisplaySettings::getSplitStereoVerticalSeparation ) );
        
        }
        { //::osg::DisplaySettings::getStencilBuffer
        
            typedef bool ( ::osg::DisplaySettings::*getStencilBuffer_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getStencilBuffer"
                , getStencilBuffer_function_type( &::osg::DisplaySettings::getStencilBuffer ) );
        
        }
        { //::osg::DisplaySettings::getStereo
        
            typedef bool ( ::osg::DisplaySettings::*getStereo_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getStereo"
                , getStereo_function_type( &::osg::DisplaySettings::getStereo ) );
        
        }
        { //::osg::DisplaySettings::getStereoMode
        
            typedef ::osg::DisplaySettings::StereoMode ( ::osg::DisplaySettings::*getStereoMode_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getStereoMode"
                , getStereoMode_function_type( &::osg::DisplaySettings::getStereoMode ) );
        
        }
        { //::osg::DisplaySettings::getSwapMethod
        
            typedef ::osg::DisplaySettings::SwapMethod ( ::osg::DisplaySettings::*getSwapMethod_function_type )(  ) ;
            
            DisplaySettings_exposer.def( 
                "getSwapMethod"
                , getSwapMethod_function_type( &::osg::DisplaySettings::getSwapMethod )
                , " Get preferred swap method" );
        
        }
        { //::osg::DisplaySettings::getUseSceneViewForStereoHint
        
            typedef bool ( ::osg::DisplaySettings::*getUseSceneViewForStereoHint_function_type )(  ) const;
            
            DisplaySettings_exposer.def( 
                "getUseSceneViewForStereoHint"
                , getUseSceneViewForStereoHint_function_type( &::osg::DisplaySettings::getUseSceneViewForStereoHint ) );
        
        }
        { //::osg::DisplaySettings::instance
        
            typedef ::osg::ref_ptr< osg::DisplaySettings > & ( *instance_function_type )(  );
            
            DisplaySettings_exposer.def( 
                "instance"
                , instance_function_type( &::osg::DisplaySettings::instance )
                , bp::return_value_policy< bp::copy_non_const_reference >()
                , " Maintain a DisplaySettings singleton for objects to query at runtime." );
        
        }
        { //::osg::DisplaySettings::readCommandLine
        
            typedef void ( ::osg::DisplaySettings::*readCommandLine_function_type )( ::osg::ArgumentParser & ) ;
            
            DisplaySettings_exposer.def( 
                "readCommandLine"
                , readCommandLine_function_type( &::osg::DisplaySettings::readCommandLine )
                , ( bp::arg("arguments") )
                , " read the commandline arguments." );
        
        }
        { //::osg::DisplaySettings::readEnvironmentalVariables
        
            typedef void ( ::osg::DisplaySettings::*readEnvironmentalVariables_function_type )(  ) ;
            
            DisplaySettings_exposer.def( 
                "readEnvironmentalVariables"
                , readEnvironmentalVariables_function_type( &::osg::DisplaySettings::readEnvironmentalVariables )
                , " read the environmental variables." );
        
        }
        { //::osg::DisplaySettings::setApplication
        
            typedef void ( ::osg::DisplaySettings::*setApplication_function_type )( ::std::string const & ) ;
            
            DisplaySettings_exposer.def( 
                "setApplication"
                , setApplication_function_type( &::osg::DisplaySettings::setApplication )
                , ( bp::arg("application") ) );
        
        }
        { //::osg::DisplaySettings::setCompileContextsHint
        
            typedef void ( ::osg::DisplaySettings::*setCompileContextsHint_function_type )( bool ) ;
            
            DisplaySettings_exposer.def( 
                "setCompileContextsHint"
                , setCompileContextsHint_function_type( &::osg::DisplaySettings::setCompileContextsHint )
                , ( bp::arg("useCompileContexts") ) );
        
        }
        { //::osg::DisplaySettings::setDefaults
        
            typedef void ( ::osg::DisplaySettings::*setDefaults_function_type )(  ) ;
            
            DisplaySettings_exposer.def( 
                "setDefaults"
                , setDefaults_function_type( &::osg::DisplaySettings::setDefaults ) );
        
        }
        { //::osg::DisplaySettings::setDepthBuffer
        
            typedef void ( ::osg::DisplaySettings::*setDepthBuffer_function_type )( bool ) ;
            
            DisplaySettings_exposer.def( 
                "setDepthBuffer"
                , setDepthBuffer_function_type( &::osg::DisplaySettings::setDepthBuffer )
                , ( bp::arg("flag") ) );
        
        }
        { //::osg::DisplaySettings::setDisplayType
        
            typedef void ( ::osg::DisplaySettings::*setDisplayType_function_type )( ::osg::DisplaySettings::DisplayType ) ;
            
            DisplaySettings_exposer.def( 
                "setDisplayType"
                , setDisplayType_function_type( &::osg::DisplaySettings::setDisplayType )
                , ( bp::arg("type") ) );
        
        }
        { //::osg::DisplaySettings::setDoubleBuffer
        
            typedef void ( ::osg::DisplaySettings::*setDoubleBuffer_function_type )( bool ) ;
            
            DisplaySettings_exposer.def( 
                "setDoubleBuffer"
                , setDoubleBuffer_function_type( &::osg::DisplaySettings::setDoubleBuffer )
                , ( bp::arg("flag") ) );
        
        }
        { //::osg::DisplaySettings::setEyeSeparation
        
            typedef void ( ::osg::DisplaySettings::*setEyeSeparation_function_type )( float ) ;
            
            DisplaySettings_exposer.def( 
                "setEyeSeparation"
                , setEyeSeparation_function_type( &::osg::DisplaySettings::setEyeSeparation )
                , ( bp::arg("eyeSeparation") ) );
        
        }
        { //::osg::DisplaySettings::setGLContextFlags
        
            typedef void ( ::osg::DisplaySettings::*setGLContextFlags_function_type )( unsigned int ) ;
            
            DisplaySettings_exposer.def( 
                "setGLContextFlags"
                , setGLContextFlags_function_type( &::osg::DisplaySettings::setGLContextFlags )
                , ( bp::arg("flags") )
                , " Set the hint of the flags to use in when creating graphic contexts." );
        
        }
        { //::osg::DisplaySettings::setGLContextProfileMask
        
            typedef void ( ::osg::DisplaySettings::*setGLContextProfileMask_function_type )( unsigned int ) ;
            
            DisplaySettings_exposer.def( 
                "setGLContextProfileMask"
                , setGLContextProfileMask_function_type( &::osg::DisplaySettings::setGLContextProfileMask )
                , ( bp::arg("mask") )
                , " Set the hint of the profile mask to use in when creating graphic contexts." );
        
        }
        { //::osg::DisplaySettings::setGLContextVersion
        
            typedef void ( ::osg::DisplaySettings::*setGLContextVersion_function_type )( ::std::string const & ) ;
            
            DisplaySettings_exposer.def( 
                "setGLContextVersion"
                , setGLContextVersion_function_type( &::osg::DisplaySettings::setGLContextVersion )
                , ( bp::arg("version") )
                , " Set the hint of which OpenGL version to attempt to create a graphics context for." );
        
        }
        { //::osg::DisplaySettings::setImplicitBufferAttachmentMask
        
            typedef void ( ::osg::DisplaySettings::*setImplicitBufferAttachmentMask_function_type )( int,int ) ;
            
            DisplaySettings_exposer.def( 
                "setImplicitBufferAttachmentMask"
                , setImplicitBufferAttachmentMask_function_type( &::osg::DisplaySettings::setImplicitBufferAttachmentMask )
                , ( bp::arg("renderMask")=int(::osg::DisplaySettings::DEFAULT_IMPLICIT_BUFFER_ATTACHMENT), bp::arg("resolveMask")=int(::osg::DisplaySettings::DEFAULT_IMPLICIT_BUFFER_ATTACHMENT) ) );
        
        }
        { //::osg::DisplaySettings::setImplicitBufferAttachmentRenderMask
        
            typedef void ( ::osg::DisplaySettings::*setImplicitBufferAttachmentRenderMask_function_type )( int ) ;
            
            DisplaySettings_exposer.def( 
                "setImplicitBufferAttachmentRenderMask"
                , setImplicitBufferAttachmentRenderMask_function_type( &::osg::DisplaySettings::setImplicitBufferAttachmentRenderMask )
                , ( bp::arg("implicitBufferAttachmentRenderMask") ) );
        
        }
        { //::osg::DisplaySettings::setImplicitBufferAttachmentResolveMask
        
            typedef void ( ::osg::DisplaySettings::*setImplicitBufferAttachmentResolveMask_function_type )( int ) ;
            
            DisplaySettings_exposer.def( 
                "setImplicitBufferAttachmentResolveMask"
                , setImplicitBufferAttachmentResolveMask_function_type( &::osg::DisplaySettings::setImplicitBufferAttachmentResolveMask )
                , ( bp::arg("implicitBufferAttachmentResolveMask") ) );
        
        }
        { //::osg::DisplaySettings::setKeystoneFileNames
        
            typedef void ( ::osg::DisplaySettings::*setKeystoneFileNames_function_type )( ::std::vector< std::string > const & ) ;
            
            DisplaySettings_exposer.def( 
                "setKeystoneFileNames"
                , setKeystoneFileNames_function_type( &::osg::DisplaySettings::setKeystoneFileNames )
                , ( bp::arg("filenames") ) );
        
        }
        { //::osg::DisplaySettings::setKeystoneHint
        
            typedef void ( ::osg::DisplaySettings::*setKeystoneHint_function_type )( bool ) ;
            
            DisplaySettings_exposer.def( 
                "setKeystoneHint"
                , setKeystoneHint_function_type( &::osg::DisplaySettings::setKeystoneHint )
                , ( bp::arg("enabled") ) );
        
        }
        { //::osg::DisplaySettings::setKeystones
        
            typedef void ( ::osg::DisplaySettings::*setKeystones_function_type )( ::std::vector< osg::ref_ptr<osg::Object> > const & ) ;
            
            DisplaySettings_exposer.def( 
                "setKeystones"
                , setKeystones_function_type( &::osg::DisplaySettings::setKeystones )
                , ( bp::arg("objects") ) );
        
        }
        { //::osg::DisplaySettings::setMaxBufferObjectPoolSize
        
            typedef void ( ::osg::DisplaySettings::*setMaxBufferObjectPoolSize_function_type )( unsigned int ) ;
            
            DisplaySettings_exposer.def( 
                "setMaxBufferObjectPoolSize"
                , setMaxBufferObjectPoolSize_function_type( &::osg::DisplaySettings::setMaxBufferObjectPoolSize )
                , ( bp::arg("size") ) );
        
        }
        { //::osg::DisplaySettings::setMaxNumberOfGraphicsContexts
        
            typedef void ( ::osg::DisplaySettings::*setMaxNumberOfGraphicsContexts_function_type )( unsigned int ) ;
            
            DisplaySettings_exposer.def( 
                "setMaxNumberOfGraphicsContexts"
                , setMaxNumberOfGraphicsContexts_function_type( &::osg::DisplaySettings::setMaxNumberOfGraphicsContexts )
                , ( bp::arg("num") ) );
        
        }
        { //::osg::DisplaySettings::setMaxTexturePoolSize
        
            typedef void ( ::osg::DisplaySettings::*setMaxTexturePoolSize_function_type )( unsigned int ) ;
            
            DisplaySettings_exposer.def( 
                "setMaxTexturePoolSize"
                , setMaxTexturePoolSize_function_type( &::osg::DisplaySettings::setMaxTexturePoolSize )
                , ( bp::arg("size") ) );
        
        }
        { //::osg::DisplaySettings::setMinimumNumAccumBits
        
            typedef void ( ::osg::DisplaySettings::*setMinimumNumAccumBits_function_type )( unsigned int,unsigned int,unsigned int,unsigned int ) ;
            
            DisplaySettings_exposer.def( 
                "setMinimumNumAccumBits"
                , setMinimumNumAccumBits_function_type( &::osg::DisplaySettings::setMinimumNumAccumBits )
                , ( bp::arg("red"), bp::arg("green"), bp::arg("blue"), bp::arg("alpha") ) );
        
        }
        { //::osg::DisplaySettings::setMinimumNumAlphaBits
        
            typedef void ( ::osg::DisplaySettings::*setMinimumNumAlphaBits_function_type )( unsigned int ) ;
            
            DisplaySettings_exposer.def( 
                "setMinimumNumAlphaBits"
                , setMinimumNumAlphaBits_function_type( &::osg::DisplaySettings::setMinimumNumAlphaBits )
                , ( bp::arg("bits") ) );
        
        }
        { //::osg::DisplaySettings::setMinimumNumStencilBits
        
            typedef void ( ::osg::DisplaySettings::*setMinimumNumStencilBits_function_type )( unsigned int ) ;
            
            DisplaySettings_exposer.def( 
                "setMinimumNumStencilBits"
                , setMinimumNumStencilBits_function_type( &::osg::DisplaySettings::setMinimumNumStencilBits )
                , ( bp::arg("bits") ) );
        
        }
        { //::osg::DisplaySettings::setNumMultiSamples
        
            typedef void ( ::osg::DisplaySettings::*setNumMultiSamples_function_type )( unsigned int ) ;
            
            DisplaySettings_exposer.def( 
                "setNumMultiSamples"
                , setNumMultiSamples_function_type( &::osg::DisplaySettings::setNumMultiSamples )
                , ( bp::arg("samples") ) );
        
        }
        { //::osg::DisplaySettings::setNumOfDatabaseThreadsHint
        
            typedef void ( ::osg::DisplaySettings::*setNumOfDatabaseThreadsHint_function_type )( unsigned int ) ;
            
            DisplaySettings_exposer.def( 
                "setNumOfDatabaseThreadsHint"
                , setNumOfDatabaseThreadsHint_function_type( &::osg::DisplaySettings::setNumOfDatabaseThreadsHint )
                , ( bp::arg("numThreads") )
                , " Set the hint for the total number of threads in the DatbasePager set up, inclusive of the number of http dedicated threads." );
        
        }
        { //::osg::DisplaySettings::setNumOfHttpDatabaseThreadsHint
        
            typedef void ( ::osg::DisplaySettings::*setNumOfHttpDatabaseThreadsHint_function_type )( unsigned int ) ;
            
            DisplaySettings_exposer.def( 
                "setNumOfHttpDatabaseThreadsHint"
                , setNumOfHttpDatabaseThreadsHint_function_type( &::osg::DisplaySettings::setNumOfHttpDatabaseThreadsHint )
                , ( bp::arg("numThreads") )
                , " Set the hint for number of threads in the DatbasePager to dedicate to reading http requests." );
        
        }
        { //::osg::DisplaySettings::setRGB
        
            typedef void ( ::osg::DisplaySettings::*setRGB_function_type )( bool ) ;
            
            DisplaySettings_exposer.def( 
                "setRGB"
                , setRGB_function_type( &::osg::DisplaySettings::setRGB )
                , ( bp::arg("flag") ) );
        
        }
        { //::osg::DisplaySettings::setScreenDistance
        
            typedef void ( ::osg::DisplaySettings::*setScreenDistance_function_type )( float ) ;
            
            DisplaySettings_exposer.def( 
                "setScreenDistance"
                , setScreenDistance_function_type( &::osg::DisplaySettings::setScreenDistance )
                , ( bp::arg("distance") ) );
        
        }
        { //::osg::DisplaySettings::setScreenHeight
        
            typedef void ( ::osg::DisplaySettings::*setScreenHeight_function_type )( float ) ;
            
            DisplaySettings_exposer.def( 
                "setScreenHeight"
                , setScreenHeight_function_type( &::osg::DisplaySettings::setScreenHeight )
                , ( bp::arg("height") ) );
        
        }
        { //::osg::DisplaySettings::setScreenWidth
        
            typedef void ( ::osg::DisplaySettings::*setScreenWidth_function_type )( float ) ;
            
            DisplaySettings_exposer.def( 
                "setScreenWidth"
                , setScreenWidth_function_type( &::osg::DisplaySettings::setScreenWidth )
                , ( bp::arg("width") ) );
        
        }
        { //::osg::DisplaySettings::setSerializeDrawDispatch
        
            typedef void ( ::osg::DisplaySettings::*setSerializeDrawDispatch_function_type )( bool ) ;
            
            DisplaySettings_exposer.def( 
                "setSerializeDrawDispatch"
                , setSerializeDrawDispatch_function_type( &::osg::DisplaySettings::setSerializeDrawDispatch )
                , ( bp::arg("serializeDrawDispatch") ) );
        
        }
        { //::osg::DisplaySettings::setSplitStereoAutoAdjustAspectRatio
        
            typedef void ( ::osg::DisplaySettings::*setSplitStereoAutoAdjustAspectRatio_function_type )( bool ) ;
            
            DisplaySettings_exposer.def( 
                "setSplitStereoAutoAdjustAspectRatio"
                , setSplitStereoAutoAdjustAspectRatio_function_type( &::osg::DisplaySettings::setSplitStereoAutoAdjustAspectRatio )
                , ( bp::arg("flag") ) );
        
        }
        { //::osg::DisplaySettings::setSplitStereoHorizontalEyeMapping
        
            typedef void ( ::osg::DisplaySettings::*setSplitStereoHorizontalEyeMapping_function_type )( ::osg::DisplaySettings::SplitStereoHorizontalEyeMapping ) ;
            
            DisplaySettings_exposer.def( 
                "setSplitStereoHorizontalEyeMapping"
                , setSplitStereoHorizontalEyeMapping_function_type( &::osg::DisplaySettings::setSplitStereoHorizontalEyeMapping )
                , ( bp::arg("m") ) );
        
        }
        { //::osg::DisplaySettings::setSplitStereoHorizontalSeparation
        
            typedef void ( ::osg::DisplaySettings::*setSplitStereoHorizontalSeparation_function_type )( int ) ;
            
            DisplaySettings_exposer.def( 
                "setSplitStereoHorizontalSeparation"
                , setSplitStereoHorizontalSeparation_function_type( &::osg::DisplaySettings::setSplitStereoHorizontalSeparation )
                , ( bp::arg("s") ) );
        
        }
        { //::osg::DisplaySettings::setSplitStereoVerticalEyeMapping
        
            typedef void ( ::osg::DisplaySettings::*setSplitStereoVerticalEyeMapping_function_type )( ::osg::DisplaySettings::SplitStereoVerticalEyeMapping ) ;
            
            DisplaySettings_exposer.def( 
                "setSplitStereoVerticalEyeMapping"
                , setSplitStereoVerticalEyeMapping_function_type( &::osg::DisplaySettings::setSplitStereoVerticalEyeMapping )
                , ( bp::arg("m") ) );
        
        }
        { //::osg::DisplaySettings::setSplitStereoVerticalSeparation
        
            typedef void ( ::osg::DisplaySettings::*setSplitStereoVerticalSeparation_function_type )( int ) ;
            
            DisplaySettings_exposer.def( 
                "setSplitStereoVerticalSeparation"
                , setSplitStereoVerticalSeparation_function_type( &::osg::DisplaySettings::setSplitStereoVerticalSeparation )
                , ( bp::arg("s") ) );
        
        }
        { //::osg::DisplaySettings::setStereo
        
            typedef void ( ::osg::DisplaySettings::*setStereo_function_type )( bool ) ;
            
            DisplaySettings_exposer.def( 
                "setStereo"
                , setStereo_function_type( &::osg::DisplaySettings::setStereo )
                , ( bp::arg("on") ) );
        
        }
        { //::osg::DisplaySettings::setStereoMode
        
            typedef void ( ::osg::DisplaySettings::*setStereoMode_function_type )( ::osg::DisplaySettings::StereoMode ) ;
            
            DisplaySettings_exposer.def( 
                "setStereoMode"
                , setStereoMode_function_type( &::osg::DisplaySettings::setStereoMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::osg::DisplaySettings::setSwapMethod
        
            typedef void ( ::osg::DisplaySettings::*setSwapMethod_function_type )( ::osg::DisplaySettings::SwapMethod ) ;
            
            DisplaySettings_exposer.def( 
                "setSwapMethod"
                , setSwapMethod_function_type( &::osg::DisplaySettings::setSwapMethod )
                , ( bp::arg("swapMethod") )
                , " Select preferred swap method" );
        
        }
        { //::osg::DisplaySettings::setUseSceneViewForStereoHint
        
            typedef void ( ::osg::DisplaySettings::*setUseSceneViewForStereoHint_function_type )( bool ) ;
            
            DisplaySettings_exposer.def( 
                "setUseSceneViewForStereoHint"
                , setUseSceneViewForStereoHint_function_type( &::osg::DisplaySettings::setUseSceneViewForStereoHint )
                , ( bp::arg("hint") ) );
        
        }
        DisplaySettings_exposer.staticmethod( "instance" );
    }

}
