// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "FrameStamp.pypp.hpp"

namespace bp = boost::python;

void register_FrameStamp_class(){

    { //::osg::FrameStamp
        typedef bp::class_< osg::FrameStamp, bp::bases< osg::Referenced >, osg::ref_ptr< ::osg::FrameStamp > > FrameStamp_exposer_t;
        FrameStamp_exposer_t FrameStamp_exposer = FrameStamp_exposer_t( "FrameStamp", "\n Class which encapsulates the frame number, reference time and calendar\n time of specific frame, used to synchronize operations on the scene graph\n and other machines when using a graphics cluster.  Note the calendar\n time can be an artificial simulation time or capture the real time\n of day etc.\n", bp::init< >("\n Class which encapsulates the frame number, reference time and calendar\n time of specific frame, used to synchronize operations on the scene graph\n and other machines when using a graphics cluster.  Note the calendar\n time can be an artificial simulation time or capture the real time\n of day etc.\n") );
        bp::scope FrameStamp_scope( FrameStamp_exposer );
        FrameStamp_exposer.def( bp::init< osg::FrameStamp const & >(( bp::arg("fs") )) );
        { //::osg::FrameStamp::getCalendarTime
        
            typedef void ( ::osg::FrameStamp::*getCalendarTime_function_type )( ::tm & ) const;
            
            FrameStamp_exposer.def( 
                "getCalendarTime"
                , getCalendarTime_function_type( &::osg::FrameStamp::getCalendarTime )
                , ( bp::arg("calendarTime") ) );
        
        }
        { //::osg::FrameStamp::getFrameNumber
        
            typedef unsigned int ( ::osg::FrameStamp::*getFrameNumber_function_type )(  ) const;
            
            FrameStamp_exposer.def( 
                "getFrameNumber"
                , getFrameNumber_function_type( &::osg::FrameStamp::getFrameNumber ) );
        
        }
        { //::osg::FrameStamp::getReferenceTime
        
            typedef double ( ::osg::FrameStamp::*getReferenceTime_function_type )(  ) const;
            
            FrameStamp_exposer.def( 
                "getReferenceTime"
                , getReferenceTime_function_type( &::osg::FrameStamp::getReferenceTime ) );
        
        }
        { //::osg::FrameStamp::getSimulationTime
        
            typedef double ( ::osg::FrameStamp::*getSimulationTime_function_type )(  ) const;
            
            FrameStamp_exposer.def( 
                "getSimulationTime"
                , getSimulationTime_function_type( &::osg::FrameStamp::getSimulationTime ) );
        
        }
        { //::osg::FrameStamp::setCalendarTime
        
            typedef void ( ::osg::FrameStamp::*setCalendarTime_function_type )( ::tm const & ) ;
            
            FrameStamp_exposer.def( 
                "setCalendarTime"
                , setCalendarTime_function_type( &::osg::FrameStamp::setCalendarTime )
                , ( bp::arg("calendarTime") ) );
        
        }
        { //::osg::FrameStamp::setFrameNumber
        
            typedef void ( ::osg::FrameStamp::*setFrameNumber_function_type )( unsigned int ) ;
            
            FrameStamp_exposer.def( 
                "setFrameNumber"
                , setFrameNumber_function_type( &::osg::FrameStamp::setFrameNumber )
                , ( bp::arg("fnum") ) );
        
        }
        { //::osg::FrameStamp::setReferenceTime
        
            typedef void ( ::osg::FrameStamp::*setReferenceTime_function_type )( double ) ;
            
            FrameStamp_exposer.def( 
                "setReferenceTime"
                , setReferenceTime_function_type( &::osg::FrameStamp::setReferenceTime )
                , ( bp::arg("refTime") ) );
        
        }
        { //::osg::FrameStamp::setSimulationTime
        
            typedef void ( ::osg::FrameStamp::*setSimulationTime_function_type )( double ) ;
            
            FrameStamp_exposer.def( 
                "setSimulationTime"
                , setSimulationTime_function_type( &::osg::FrameStamp::setSimulationTime )
                , ( bp::arg("refTime") ) );
        
        }
    }

}
