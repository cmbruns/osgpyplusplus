// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "StateSet.pypp.hpp"

namespace bp = boost::python;

struct StateSet_wrapper : osg::StateSet, bp::wrapper< osg::StateSet > {

    struct Callback_wrapper : osg::StateSet::Callback, bp::wrapper< osg::StateSet::Callback > {
    
        Callback_wrapper( )
        : osg::StateSet::Callback( )
          , bp::wrapper< osg::StateSet::Callback >(){
            // null constructor
        
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::StateSet::Callback::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::StateSet::Callback::className( );
        }
    
        virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
            if( bp::override func_clone = this->get_override( "clone" ) )
                return func_clone( boost::ref(copyop) );
            else{
                return this->osg::StateSet::Callback::clone( boost::ref(copyop) );
            }
        }
        
        ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
            return osg::StateSet::Callback::clone( boost::ref(copyop) );
        }
    
        virtual ::osg::Object * cloneType(  ) const  {
            if( bp::override func_cloneType = this->get_override( "cloneType" ) )
                return func_cloneType(  );
            else{
                return this->osg::StateSet::Callback::cloneType(  );
            }
        }
        
        ::osg::Object * default_cloneType(  ) const  {
            return osg::StateSet::Callback::cloneType( );
        }
    
        virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
            if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
                return func_isSameKindAs( boost::python::ptr(obj) );
            else{
                return this->osg::StateSet::Callback::isSameKindAs( boost::python::ptr(obj) );
            }
        }
        
        bool default_isSameKindAs( ::osg::Object const * obj ) const  {
            return osg::StateSet::Callback::isSameKindAs( boost::python::ptr(obj) );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::StateSet::Callback::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::StateSet::Callback::libraryName( );
        }
    
    };

    StateSet_wrapper( )
    : osg::StateSet( )
      , bp::wrapper< osg::StateSet >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::StateSet::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::StateSet::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::StateSet::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::StateSet::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::StateSet::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::StateSet::cloneType( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::StateSet::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::StateSet::computeDataVariance( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::StateSet::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::StateSet::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::StateSet::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::StateSet::libraryName( );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::StateSet::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::StateSet::resizeGLObjectBuffers( maxSize );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::StateSet::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::StateSet::setThreadSafeRefUnref( threadSafe );
    }

};

void register_StateSet_class(){

    { //::osg::StateSet
        typedef bp::class_< StateSet_wrapper, bp::bases< osg::Object >, osg::ref_ptr< ::osg::StateSet >, boost::noncopyable > StateSet_exposer_t;
        StateSet_exposer_t StateSet_exposer = StateSet_exposer_t( "StateSet", "\n Stores a set of modes and attributes which represent a set of OpenGL state.\n  Notice that a  StateSet contains just a subset of the whole OpenGL state.\n <p>In OSG, each  Drawable and each  Node has a reference to a\n  StateSet. These <tt>StateSet</tt>s can be shared between\n different <tt>Drawable</tt>s and <tt>Node</tt>s (that is, several\n <tt>Drawable</tt>s and <tt>Node</tt>s can reference the same  StateSet).\n Indeed, this practice is recommended whenever possible,\n as this minimizes expensive state changes in the graphics pipeline.\n", bp::no_init );
        bp::scope StateSet_scope( StateSet_exposer );
        bp::enum_< osg::StateSet::RenderBinMode>("RenderBinMode")
            .value("INHERIT_RENDERBIN_DETAILS", osg::StateSet::INHERIT_RENDERBIN_DETAILS)
            .value("USE_RENDERBIN_DETAILS", osg::StateSet::USE_RENDERBIN_DETAILS)
            .value("OVERRIDE_RENDERBIN_DETAILS", osg::StateSet::OVERRIDE_RENDERBIN_DETAILS)
            .export_values()
            ;
        bp::enum_< osg::StateSet::RenderingHint>("RenderingHint")
            .value("DEFAULT_BIN", osg::StateSet::DEFAULT_BIN)
            .value("OPAQUE_BIN", osg::StateSet::OPAQUE_BIN)
            .value("TRANSPARENT_BIN", osg::StateSet::TRANSPARENT_BIN)
            .export_values()
            ;
        bp::class_< StateSet_wrapper::Callback_wrapper, bp::bases< osg::Object >, osg::ref_ptr< StateSet_wrapper::Callback_wrapper >, boost::noncopyable >( "Callback", bp::init< >() )    
            .def( 
                "className"
                , (char const * ( ::osg::StateSet::Callback::* )(  ) const)(&::osg::StateSet::Callback::className)
                , (char const * ( StateSet_wrapper::Callback_wrapper::* )(  ) const)(&StateSet_wrapper::Callback_wrapper::default_className) )    
            .def( 
                "clone"
                , (::osg::Object * ( ::osg::StateSet::Callback::* )( ::osg::CopyOp const & ) const)(&::osg::StateSet::Callback::clone)
                , (::osg::Object * ( StateSet_wrapper::Callback_wrapper::* )( ::osg::CopyOp const & ) const)(&StateSet_wrapper::Callback_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "cloneType"
                , (::osg::Object * ( ::osg::StateSet::Callback::* )(  ) const)(&::osg::StateSet::Callback::cloneType)
                , (::osg::Object * ( StateSet_wrapper::Callback_wrapper::* )(  ) const)(&StateSet_wrapper::Callback_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "isSameKindAs"
                , (bool ( ::osg::StateSet::Callback::* )( ::osg::Object const * ) const)(&::osg::StateSet::Callback::isSameKindAs)
                , (bool ( StateSet_wrapper::Callback_wrapper::* )( ::osg::Object const * ) const)(&StateSet_wrapper::Callback_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) )    
            .def( 
                "libraryName"
                , (char const * ( ::osg::StateSet::Callback::* )(  ) const)(&::osg::StateSet::Callback::libraryName)
                , (char const * ( StateSet_wrapper::Callback_wrapper::* )(  ) const)(&StateSet_wrapper::Callback_wrapper::default_libraryName) );
        StateSet_exposer.def( bp::init< >("\n Stores a set of modes and attributes which represent a set of OpenGL state.\n  Notice that a  StateSet contains just a subset of the whole OpenGL state.\n <p>In OSG, each  Drawable and each  Node has a reference to a\n  StateSet. These <tt>StateSet</tt>s can be shared between\n different <tt>Drawable</tt>s and <tt>Node</tt>s (that is, several\n <tt>Drawable</tt>s and <tt>Node</tt>s can reference the same  StateSet).\n Indeed, this practice is recommended whenever possible,\n as this minimizes expensive state changes in the graphics pipeline.\n") );
        { //::osg::StateSet::addUniform
        
            typedef void ( ::osg::StateSet::*addUniform_function_type )( ::osg::Uniform *,unsigned int ) ;
            
            StateSet_exposer.def( 
                "addUniform"
                , addUniform_function_type( &::osg::StateSet::addUniform )
                , ( bp::arg("uniform"), bp::arg("value")=(unsigned int)(ON) )
                , " Set this StateSet to contain specified uniform and override flag." );
        
        }
        { //::osg::StateSet::checkValidityOfAssociatedModes
        
            typedef bool ( ::osg::StateSet::*checkValidityOfAssociatedModes_function_type )( ::osg::State & ) const;
            
            StateSet_exposer.def( 
                "checkValidityOfAssociatedModes"
                , checkValidityOfAssociatedModes_function_type( &::osg::StateSet::checkValidityOfAssociatedModes )
                , ( bp::arg("state") )
                , " Check the modes associated with this StateSet are supported by current OpenGL drivers,\n and if not set the associated mode in osg::State to be black listed/invalid.\n Return true if all associated modes are valid." );
        
        }
        { //::osg::StateSet::className
        
            typedef char const * ( ::osg::StateSet::*className_function_type )(  ) const;
            typedef char const * ( StateSet_wrapper::*default_className_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "className"
                , className_function_type(&::osg::StateSet::className)
                , default_className_function_type(&StateSet_wrapper::default_className) );
        
        }
        { //::osg::StateSet::clear
        
            typedef void ( ::osg::StateSet::*clear_function_type )(  ) ;
            
            StateSet_exposer.def( 
                "clear"
                , clear_function_type( &::osg::StateSet::clear )
                , " Clear the StateSet of all modes and attributes." );
        
        }
        { //::osg::StateSet::clone
        
            typedef ::osg::Object * ( ::osg::StateSet::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( StateSet_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            StateSet_exposer.def( 
                "clone"
                , clone_function_type(&::osg::StateSet::clone)
                , default_clone_function_type(&StateSet_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::StateSet::cloneType
        
            typedef ::osg::Object * ( ::osg::StateSet::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( StateSet_wrapper::*default_cloneType_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::StateSet::cloneType)
                , default_cloneType_function_type(&StateSet_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::StateSet::compileGLObjects
        
            typedef void ( ::osg::StateSet::*compileGLObjects_function_type )( ::osg::State & ) const;
            
            StateSet_exposer.def( 
                "compileGLObjects"
                , compileGLObjects_function_type( &::osg::StateSet::compileGLObjects )
                , ( bp::arg("state") )
                , " call compile on all StateAttributes contained within this StateSet." );
        
        }
        { //::osg::StateSet::computeDataVariance
        
            typedef void ( ::osg::StateSet::*computeDataVariance_function_type )(  ) ;
            typedef void ( StateSet_wrapper::*default_computeDataVariance_function_type )(  ) ;
            
            StateSet_exposer.def( 
                "computeDataVariance"
                , computeDataVariance_function_type(&::osg::StateSet::computeDataVariance)
                , default_computeDataVariance_function_type(&StateSet_wrapper::default_computeDataVariance) );
        
        }
        { //::osg::StateSet::getAttribute
        
            typedef ::osg::StateAttribute * ( ::osg::StateSet::*getAttribute_function_type )( ::osg::StateAttribute::Type,unsigned int ) ;
            
            StateSet_exposer.def( 
                "getAttribute"
                , getAttribute_function_type( &::osg::StateSet::getAttribute )
                , ( bp::arg("type"), bp::arg("member")=(unsigned int)(0) )
                , bp::return_internal_reference< >()
                , " Get specified StateAttribute for specified type.\n Returns NULL if no type is contained within StateSet." );
        
        }
        { //::osg::StateSet::getAttribute
        
            typedef ::osg::StateAttribute const * ( ::osg::StateSet::*getAttribute_function_type )( ::osg::StateAttribute::Type,unsigned int ) const;
            
            StateSet_exposer.def( 
                "getAttribute"
                , getAttribute_function_type( &::osg::StateSet::getAttribute )
                , ( bp::arg("type"), bp::arg("member")=(unsigned int)(0) )
                , bp::return_internal_reference< >()
                , " Get specified const StateAttribute for specified type.\n Returns NULL if no type is contained within const StateSet." );
        
        }
        { //::osg::StateSet::getAttributeList
        
            typedef ::std::map< std::pair<osg::StateAttribute::Type, unsigned int>, std::pair<osg::ref_ptr<osg::StateAttribute>, unsigned int> > & ( ::osg::StateSet::*getAttributeList_function_type )(  ) ;
            
            StateSet_exposer.def( 
                "getAttributeList"
                , getAttributeList_function_type( &::osg::StateSet::getAttributeList )
                , bp::return_internal_reference< >()
                , " return the list of all StateAttributes contained in this StateSet." );
        
        }
        { //::osg::StateSet::getAttributeList
        
            typedef ::std::map< std::pair<osg::StateAttribute::Type, unsigned int>, std::pair<osg::ref_ptr<osg::StateAttribute>, unsigned int> > const & ( ::osg::StateSet::*getAttributeList_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "getAttributeList"
                , getAttributeList_function_type( &::osg::StateSet::getAttributeList )
                , bp::return_internal_reference< >()
                , " return the const list of all StateAttributes contained in this const StateSet." );
        
        }
        { //::osg::StateSet::getAttributePair
        
            typedef ::std::pair< osg::ref_ptr< osg::StateAttribute >, unsigned int > const * ( ::osg::StateSet::*getAttributePair_function_type )( ::osg::StateAttribute::Type,unsigned int ) const;
            
            StateSet_exposer.def( 
                "getAttributePair"
                , getAttributePair_function_type( &::osg::StateSet::getAttributePair )
                , ( bp::arg("type"), bp::arg("member")=(unsigned int)(0) )
                , bp::return_internal_reference< >()
                , " Get specified RefAttributePair for specified type.\n Returns NULL if no type is contained within StateSet." );
        
        }
        { //::osg::StateSet::getBinName
        
            typedef ::std::string const & ( ::osg::StateSet::*getBinName_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "getBinName"
                , getBinName_function_type( &::osg::StateSet::getBinName )
                , bp::return_value_policy< bp::copy_const_reference >()
                , " Get the render bin name." );
        
        }
        { //::osg::StateSet::getBinNumber
        
            typedef int ( ::osg::StateSet::*getBinNumber_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "getBinNumber"
                , getBinNumber_function_type( &::osg::StateSet::getBinNumber )
                , " Get the render bin number." );
        
        }
        { //::osg::StateSet::getEventCallback
        
            typedef ::osg::StateSet::Callback * ( ::osg::StateSet::*getEventCallback_function_type )(  ) ;
            
            StateSet_exposer.def( 
                "getEventCallback"
                , getEventCallback_function_type( &::osg::StateSet::getEventCallback )
                , bp::return_internal_reference< >()
                , " Get the non const Event Callback." );
        
        }
        { //::osg::StateSet::getEventCallback
        
            typedef ::osg::StateSet::Callback const * ( ::osg::StateSet::*getEventCallback_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "getEventCallback"
                , getEventCallback_function_type( &::osg::StateSet::getEventCallback )
                , bp::return_internal_reference< >()
                , " Get the const Event Callback." );
        
        }
        { //::osg::StateSet::getMode
        
            typedef unsigned int ( ::osg::StateSet::*getMode_function_type )( ::GLenum ) const;
            
            StateSet_exposer.def( 
                "getMode"
                , getMode_function_type( &::osg::StateSet::getMode )
                , ( bp::arg("mode") )
                , " Get the value for a given  GLMode.\n @param mode: The  GLMode whose value is desired.\n Return: If  mode is contained within this  StateSet, returns the\n         value associated with it. Otherwise, returns\n          StateAttribute::INHERIT.\n Note: Dont use this method to get the value of modes related to\n       textures. For this purpose, use  removeTextureMode(), that\n       accepts an extra parameter specifying which texture unit shall\n       be affected by the call." );
        
        }
        { //::osg::StateSet::getModeList
        
            typedef ::std::map< unsigned int, unsigned int > & ( ::osg::StateSet::*getModeList_function_type )(  ) ;
            
            StateSet_exposer.def( 
                "getModeList"
                , getModeList_function_type( &::osg::StateSet::getModeList )
                , bp::return_internal_reference< >()
                , " Return the list of all <tt>GLMode</tt>s contained in this  StateSet." );
        
        }
        { //::osg::StateSet::getModeList
        
            typedef ::std::map< unsigned int, unsigned int > const & ( ::osg::StateSet::*getModeList_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "getModeList"
                , getModeList_function_type( &::osg::StateSet::getModeList )
                , bp::return_internal_reference< >()
                , " Return the  const list of all <tt>GLMode</tt>s contained in this\n <tt>const StateSet</tt>." );
        
        }
        { //::osg::StateSet::getNestRenderBins
        
            typedef bool ( ::osg::StateSet::*getNestRenderBins_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "getNestRenderBins"
                , getNestRenderBins_function_type( &::osg::StateSet::getNestRenderBins )
                , " Get whether associated RenderBin should be nested within parents RenderBin." );
        
        }
        { //::osg::StateSet::getNumChildrenRequiringEventTraversal
        
            typedef unsigned int ( ::osg::StateSet::*getNumChildrenRequiringEventTraversal_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "getNumChildrenRequiringEventTraversal"
                , getNumChildrenRequiringEventTraversal_function_type( &::osg::StateSet::getNumChildrenRequiringEventTraversal )
                , " Get the number of Objects of this StateSet which require Event traversal,\n since they have an Eevnt Callback attached to them or their children." );
        
        }
        { //::osg::StateSet::getNumChildrenRequiringUpdateTraversal
        
            typedef unsigned int ( ::osg::StateSet::*getNumChildrenRequiringUpdateTraversal_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "getNumChildrenRequiringUpdateTraversal"
                , getNumChildrenRequiringUpdateTraversal_function_type( &::osg::StateSet::getNumChildrenRequiringUpdateTraversal )
                , " Get the number of Objects of this StateSet which require Update traversal,\n since they have an Update Callback attached to them or their children." );
        
        }
        { //::osg::StateSet::getNumParents
        
            typedef unsigned int ( ::osg::StateSet::*getNumParents_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "getNumParents"
                , getNumParents_function_type( &::osg::StateSet::getNumParents )
                , " Get the number of parents of this StateSet.\n Return: the number of parents of this StateSet." );
        
        }
        { //::osg::StateSet::getNumTextureAttributeLists
        
            typedef unsigned int ( ::osg::StateSet::*getNumTextureAttributeLists_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "getNumTextureAttributeLists"
                , getNumTextureAttributeLists_function_type( &::osg::StateSet::getNumTextureAttributeLists )
                , " Return the number of texture units active in the TextureAttributeList." );
        
        }
        { //::osg::StateSet::getNumTextureModeLists
        
            typedef unsigned int ( ::osg::StateSet::*getNumTextureModeLists_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "getNumTextureModeLists"
                , getNumTextureModeLists_function_type( &::osg::StateSet::getNumTextureModeLists )
                , " Return the number texture units active in the TextureModeList." );
        
        }
        { //::osg::StateSet::getOrCreateUniform
        
            typedef ::osg::Uniform * ( ::osg::StateSet::*getOrCreateUniform_function_type )( ::std::string const &,::osg::Uniform::Type,unsigned int ) ;
            
            StateSet_exposer.def( 
                "getOrCreateUniform"
                , getOrCreateUniform_function_type( &::osg::StateSet::getOrCreateUniform )
                , ( bp::arg("name"), bp::arg("type"), bp::arg("numElements")=(unsigned int)(1) )
                , bp::return_internal_reference< >()
                , " Get Uniform for specified name, if one is not available create it, add it to this StateSet and return a pointer to it." );
        
        }
        { //::osg::StateSet::getParent
        
            typedef ::osg::Object * ( ::osg::StateSet::*getParent_function_type )( unsigned int ) ;
            
            StateSet_exposer.def( 
                "getParent"
                , getParent_function_type( &::osg::StateSet::getParent )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateSet::getParent
        
            typedef ::osg::Object const * ( ::osg::StateSet::*getParent_function_type )( unsigned int ) const;
            
            StateSet_exposer.def( 
                "getParent"
                , getParent_function_type( &::osg::StateSet::getParent )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >()
                , " Get a single const parent of this StateSet.\n @param i: index of the parent to get.\n Return: the parent i." );
        
        }
        { //::osg::StateSet::getParents
        
            typedef ::std::vector< osg::Object* > const & ( ::osg::StateSet::*getParents_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "getParents"
                , getParents_function_type( &::osg::StateSet::getParents )
                , bp::return_internal_reference< >()
                , " Get the parent list of this StateSet." );
        
        }
        { //::osg::StateSet::getParents
        
            typedef ::std::vector< osg::Object* > ( ::osg::StateSet::*getParents_function_type )(  ) ;
            
            StateSet_exposer.def( 
                "getParents"
                , getParents_function_type( &::osg::StateSet::getParents )
                , " Get the a copy of parent list of node. A copy is returned to\n prevent modification of the parent list." );
        
        }
        { //::osg::StateSet::getRenderBinMode
        
            typedef ::osg::StateSet::RenderBinMode ( ::osg::StateSet::*getRenderBinMode_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "getRenderBinMode"
                , getRenderBinMode_function_type( &::osg::StateSet::getRenderBinMode )
                , " Get the render bin mode." );
        
        }
        { //::osg::StateSet::getRenderingHint
        
            typedef int ( ::osg::StateSet::*getRenderingHint_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "getRenderingHint"
                , getRenderingHint_function_type( &::osg::StateSet::getRenderingHint )
                , " Get the  RenderingHint of this  StateSet." );
        
        }
        { //::osg::StateSet::getTextureAttribute
        
            typedef ::osg::StateAttribute * ( ::osg::StateSet::*getTextureAttribute_function_type )( unsigned int,::osg::StateAttribute::Type ) ;
            
            StateSet_exposer.def( 
                "getTextureAttribute"
                , getTextureAttribute_function_type( &::osg::StateSet::getTextureAttribute )
                , ( bp::arg("unit"), bp::arg("type") )
                , bp::return_internal_reference< >()
                , " Get specified Texture related StateAttribute for specified type.\n Returns NULL if no type is contained within StateSet." );
        
        }
        { //::osg::StateSet::getTextureAttribute
        
            typedef ::osg::StateAttribute const * ( ::osg::StateSet::*getTextureAttribute_function_type )( unsigned int,::osg::StateAttribute::Type ) const;
            
            StateSet_exposer.def( 
                "getTextureAttribute"
                , getTextureAttribute_function_type( &::osg::StateSet::getTextureAttribute )
                , ( bp::arg("unit"), bp::arg("type") )
                , bp::return_internal_reference< >()
                , " Get specified Texture related const StateAttribute for specified type.\n Returns NULL if no type is contained within const StateSet." );
        
        }
        { //::osg::StateSet::getTextureAttributeList
        
            typedef ::std::vector< std::map< std::pair<osg::StateAttribute::Type, unsigned int>, std::pair<osg::ref_ptr<osg::StateAttribute>, unsigned int> > > & ( ::osg::StateSet::*getTextureAttributeList_function_type )(  ) ;
            
            StateSet_exposer.def( 
                "getTextureAttributeList"
                , getTextureAttributeList_function_type( &::osg::StateSet::getTextureAttributeList )
                , bp::return_internal_reference< >()
                , " Return the list of all Texture related StateAttributes contained in this StateSet." );
        
        }
        { //::osg::StateSet::getTextureAttributeList
        
            typedef ::std::vector< std::map< std::pair<osg::StateAttribute::Type, unsigned int>, std::pair<osg::ref_ptr<osg::StateAttribute>, unsigned int> > > const & ( ::osg::StateSet::*getTextureAttributeList_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "getTextureAttributeList"
                , getTextureAttributeList_function_type( &::osg::StateSet::getTextureAttributeList )
                , bp::return_internal_reference< >()
                , " Return the const list of all Texture related StateAttributes contained in this const StateSet." );
        
        }
        { //::osg::StateSet::getTextureAttributePair
        
            typedef ::std::pair< osg::ref_ptr< osg::StateAttribute >, unsigned int > const * ( ::osg::StateSet::*getTextureAttributePair_function_type )( unsigned int,::osg::StateAttribute::Type ) const;
            
            StateSet_exposer.def( 
                "getTextureAttributePair"
                , getTextureAttributePair_function_type( &::osg::StateSet::getTextureAttributePair )
                , ( bp::arg("unit"), bp::arg("type") )
                , bp::return_internal_reference< >()
                , " Get specified Texture related RefAttributePair for specified type.\n Returns NULL if no type is contained within StateSet." );
        
        }
        { //::osg::StateSet::getTextureMode
        
            typedef unsigned int ( ::osg::StateSet::*getTextureMode_function_type )( unsigned int,::GLenum ) const;
            
            StateSet_exposer.def( 
                "getTextureMode"
                , getTextureMode_function_type( &::osg::StateSet::getTextureMode )
                , ( bp::arg("unit"), bp::arg("mode") )
                , " Get specified GLModeValue for specified GLMode.\n returns INHERIT if no GLModeValue is contained within StateSet." );
        
        }
        { //::osg::StateSet::getTextureModeList
        
            typedef ::std::vector< std::map< unsigned int, unsigned int > > & ( ::osg::StateSet::*getTextureModeList_function_type )(  ) ;
            
            StateSet_exposer.def( 
                "getTextureModeList"
                , getTextureModeList_function_type( &::osg::StateSet::getTextureModeList )
                , bp::return_internal_reference< >()
                , " return the list of all Texture related GLModes contained in this StateSet." );
        
        }
        { //::osg::StateSet::getTextureModeList
        
            typedef ::std::vector< std::map< unsigned int, unsigned int > > const & ( ::osg::StateSet::*getTextureModeList_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "getTextureModeList"
                , getTextureModeList_function_type( &::osg::StateSet::getTextureModeList )
                , bp::return_internal_reference< >()
                , " return the const list of all Texture related GLModes contained in this const StateSet." );
        
        }
        { //::osg::StateSet::getUniform
        
            typedef ::osg::Uniform * ( ::osg::StateSet::*getUniform_function_type )( ::std::string const & ) ;
            
            StateSet_exposer.def( 
                "getUniform"
                , getUniform_function_type( &::osg::StateSet::getUniform )
                , ( bp::arg("name") )
                , bp::return_internal_reference< >()
                , " Get Uniform for specified name.\n Returns NULL if no matching Uniform is contained within StateSet." );
        
        }
        { //::osg::StateSet::getUniform
        
            typedef ::osg::Uniform const * ( ::osg::StateSet::*getUniform_function_type )( ::std::string const & ) const;
            
            StateSet_exposer.def( 
                "getUniform"
                , getUniform_function_type( &::osg::StateSet::getUniform )
                , ( bp::arg("name") )
                , bp::return_internal_reference< >()
                , " Get const Uniform for specified name.\n Returns NULL if no matching Uniform is contained within StateSet." );
        
        }
        { //::osg::StateSet::getUniformList
        
            typedef ::std::map< std::string, std::pair<osg::ref_ptr<osg::Uniform>, unsigned int> > & ( ::osg::StateSet::*getUniformList_function_type )(  ) ;
            
            StateSet_exposer.def( 
                "getUniformList"
                , getUniformList_function_type( &::osg::StateSet::getUniformList )
                , bp::return_internal_reference< >()
                , " return the list of all Uniforms contained in this StateSet." );
        
        }
        { //::osg::StateSet::getUniformList
        
            typedef ::std::map< std::string, std::pair<osg::ref_ptr<osg::Uniform>, unsigned int> > const & ( ::osg::StateSet::*getUniformList_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "getUniformList"
                , getUniformList_function_type( &::osg::StateSet::getUniformList )
                , bp::return_internal_reference< >()
                , " return the const list of all Uniforms contained in this const StateSet." );
        
        }
        { //::osg::StateSet::getUniformPair
        
            typedef ::std::pair< osg::ref_ptr< osg::Uniform >, unsigned int > const * ( ::osg::StateSet::*getUniformPair_function_type )( ::std::string const & ) const;
            
            StateSet_exposer.def( 
                "getUniformPair"
                , getUniformPair_function_type( &::osg::StateSet::getUniformPair )
                , ( bp::arg("name") )
                , bp::return_internal_reference< >()
                , " Get specified RefUniformPair for specified Uniform name.\n Returns NULL if no Uniform is contained within StateSet." );
        
        }
        { //::osg::StateSet::getUpdateCallback
        
            typedef ::osg::StateSet::Callback * ( ::osg::StateSet::*getUpdateCallback_function_type )(  ) ;
            
            StateSet_exposer.def( 
                "getUpdateCallback"
                , getUpdateCallback_function_type( &::osg::StateSet::getUpdateCallback )
                , bp::return_internal_reference< >()
                , " Get the non const Update Callback." );
        
        }
        { //::osg::StateSet::getUpdateCallback
        
            typedef ::osg::StateSet::Callback const * ( ::osg::StateSet::*getUpdateCallback_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "getUpdateCallback"
                , getUpdateCallback_function_type( &::osg::StateSet::getUpdateCallback )
                , bp::return_internal_reference< >()
                , " Get the const Update Callback." );
        
        }
        { //::osg::StateSet::isSameKindAs
        
            typedef bool ( ::osg::StateSet::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( StateSet_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            StateSet_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::StateSet::isSameKindAs)
                , default_isSameKindAs_function_type(&StateSet_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::StateSet::libraryName
        
            typedef char const * ( ::osg::StateSet::*libraryName_function_type )(  ) const;
            typedef char const * ( StateSet_wrapper::*default_libraryName_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::StateSet::libraryName)
                , default_libraryName_function_type(&StateSet_wrapper::default_libraryName) );
        
        }
        { //::osg::StateSet::removeAssociatedModes
        
            typedef void ( ::osg::StateSet::*removeAssociatedModes_function_type )( ::osg::StateAttribute const * ) ;
            
            StateSet_exposer.def( 
                "removeAssociatedModes"
                , removeAssociatedModes_function_type( &::osg::StateSet::removeAssociatedModes )
                , ( bp::arg("attribute") ) );
        
        }
        { //::osg::StateSet::removeAssociatedTextureModes
        
            typedef void ( ::osg::StateSet::*removeAssociatedTextureModes_function_type )( unsigned int,::osg::StateAttribute const * ) ;
            
            StateSet_exposer.def( 
                "removeAssociatedTextureModes"
                , removeAssociatedTextureModes_function_type( &::osg::StateSet::removeAssociatedTextureModes )
                , ( bp::arg("unit"), bp::arg("attribute") ) );
        
        }
        { //::osg::StateSet::removeAttribute
        
            typedef void ( ::osg::StateSet::*removeAttribute_function_type )( ::osg::StateAttribute::Type,unsigned int ) ;
            
            StateSet_exposer.def( 
                "removeAttribute"
                , removeAttribute_function_type( &::osg::StateSet::removeAttribute )
                , ( bp::arg("type"), bp::arg("member")=(unsigned int)(0) )
                , " remove attribute of specified type from StateSet." );
        
        }
        { //::osg::StateSet::removeAttribute
        
            typedef void ( ::osg::StateSet::*removeAttribute_function_type )( ::osg::StateAttribute * ) ;
            
            StateSet_exposer.def( 
                "removeAttribute"
                , removeAttribute_function_type( &::osg::StateSet::removeAttribute )
                , ( bp::arg("attribute") )
                , " remove attribute from StateSet." );
        
        }
        { //::osg::StateSet::removeMode
        
            typedef void ( ::osg::StateSet::*removeMode_function_type )( ::GLenum ) ;
            
            StateSet_exposer.def( 
                "removeMode"
                , removeMode_function_type( &::osg::StateSet::removeMode )
                , ( bp::arg("mode") )
                , " Remove  mode from this  StateSet.\n Note: Dont use this method to remove modes related to textures. For\n       this purpose, use  removeTextureMode(), that accepts an extra\n       parameter specifying which texture unit shall be affected by\n       the call." );
        
        }
        { //::osg::StateSet::removeTextureAttribute
        
            typedef void ( ::osg::StateSet::*removeTextureAttribute_function_type )( unsigned int,::osg::StateAttribute::Type ) ;
            
            StateSet_exposer.def( 
                "removeTextureAttribute"
                , removeTextureAttribute_function_type( &::osg::StateSet::removeTextureAttribute )
                , ( bp::arg("unit"), bp::arg("type") )
                , " remove texture attribute of specified type from StateSet." );
        
        }
        { //::osg::StateSet::removeTextureAttribute
        
            typedef void ( ::osg::StateSet::*removeTextureAttribute_function_type )( unsigned int,::osg::StateAttribute * ) ;
            
            StateSet_exposer.def( 
                "removeTextureAttribute"
                , removeTextureAttribute_function_type( &::osg::StateSet::removeTextureAttribute )
                , ( bp::arg("unit"), bp::arg("attribute") )
                , " remove texture attribute from StateSet." );
        
        }
        { //::osg::StateSet::removeTextureMode
        
            typedef void ( ::osg::StateSet::*removeTextureMode_function_type )( unsigned int,::GLenum ) ;
            
            StateSet_exposer.def( 
                "removeTextureMode"
                , removeTextureMode_function_type( &::osg::StateSet::removeTextureMode )
                , ( bp::arg("unit"), bp::arg("mode") )
                , " Remove texture mode from StateSet." );
        
        }
        { //::osg::StateSet::removeUniform
        
            typedef void ( ::osg::StateSet::*removeUniform_function_type )( ::std::string const & ) ;
            
            StateSet_exposer.def( 
                "removeUniform"
                , removeUniform_function_type( &::osg::StateSet::removeUniform )
                , ( bp::arg("name") )
                , " remove uniform of specified name from StateSet." );
        
        }
        { //::osg::StateSet::removeUniform
        
            typedef void ( ::osg::StateSet::*removeUniform_function_type )( ::osg::Uniform * ) ;
            
            StateSet_exposer.def( 
                "removeUniform"
                , removeUniform_function_type( &::osg::StateSet::removeUniform )
                , ( bp::arg("uniform") )
                , " remove Uniform from StateSet." );
        
        }
        { //::osg::StateSet::requiresEventTraversal
        
            typedef bool ( ::osg::StateSet::*requiresEventTraversal_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "requiresEventTraversal"
                , requiresEventTraversal_function_type( &::osg::StateSet::requiresEventTraversal )
                , " Return whether this StateSet has event callbacks associated with it, and therefore must be traversed." );
        
        }
        { //::osg::StateSet::requiresUpdateTraversal
        
            typedef bool ( ::osg::StateSet::*requiresUpdateTraversal_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "requiresUpdateTraversal"
                , requiresUpdateTraversal_function_type( &::osg::StateSet::requiresUpdateTraversal )
                , " Return whether this StateSet has update callbacks associated with it, and therefore must be traversed." );
        
        }
        { //::osg::StateSet::resizeGLObjectBuffers
        
            typedef void ( ::osg::StateSet::*resizeGLObjectBuffers_function_type )( unsigned int ) ;
            typedef void ( StateSet_wrapper::*default_resizeGLObjectBuffers_function_type )( unsigned int ) ;
            
            StateSet_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::StateSet::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&StateSet_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
        { //::osg::StateSet::runEventCallbacks
        
            typedef void ( ::osg::StateSet::*runEventCallbacks_function_type )( ::osg::NodeVisitor * ) ;
            
            StateSet_exposer.def( 
                "runEventCallbacks"
                , runEventCallbacks_function_type( &::osg::StateSet::runEventCallbacks )
                , ( bp::arg("nv") )
                , " Run the event callbacks attached directly to this StateSet or to its children." );
        
        }
        { //::osg::StateSet::runUpdateCallbacks
        
            typedef void ( ::osg::StateSet::*runUpdateCallbacks_function_type )( ::osg::NodeVisitor * ) ;
            
            StateSet_exposer.def( 
                "runUpdateCallbacks"
                , runUpdateCallbacks_function_type( &::osg::StateSet::runUpdateCallbacks )
                , ( bp::arg("nv") )
                , " Run the update callbacks attached directly to this StateSet or to its children." );
        
        }
        { //::osg::StateSet::setAssociatedModes
        
            typedef void ( ::osg::StateSet::*setAssociatedModes_function_type )( ::osg::StateAttribute const *,unsigned int ) ;
            
            StateSet_exposer.def( 
                "setAssociatedModes"
                , setAssociatedModes_function_type( &::osg::StateSet::setAssociatedModes )
                , ( bp::arg("attribute"), bp::arg("value") ) );
        
        }
        { //::osg::StateSet::setAssociatedTextureModes
        
            typedef void ( ::osg::StateSet::*setAssociatedTextureModes_function_type )( unsigned int,::osg::StateAttribute const *,unsigned int ) ;
            
            StateSet_exposer.def( 
                "setAssociatedTextureModes"
                , setAssociatedTextureModes_function_type( &::osg::StateSet::setAssociatedTextureModes )
                , ( bp::arg("unit"), bp::arg("attribute"), bp::arg("value") ) );
        
        }
        { //::osg::StateSet::setAttribute
        
            typedef void ( ::osg::StateSet::*setAttribute_function_type )( ::osg::StateAttribute *,unsigned int ) ;
            
            StateSet_exposer.def( 
                "setAttribute"
                , setAttribute_function_type( &::osg::StateSet::setAttribute )
                , ( bp::arg("attribute"), bp::arg("value")=(unsigned int)(OFF) )
                , " Set this StateSet to contain specified attribute and override flag." );
        
        }
        { //::osg::StateSet::setAttributeAndModes
        
            typedef void ( ::osg::StateSet::*setAttributeAndModes_function_type )( ::osg::StateAttribute *,unsigned int ) ;
            
            StateSet_exposer.def( 
                "setAttributeAndModes"
                , setAttributeAndModes_function_type( &::osg::StateSet::setAttributeAndModes )
                , ( bp::arg("attribute"), bp::arg("value")=(unsigned int)(ON) )
                , " Set this StateSet to contain specified attribute and set the associated GLModes to specified value." );
        
        }
        { //::osg::StateSet::setAttributeList
        
            typedef void ( ::osg::StateSet::*setAttributeList_function_type )( ::std::map< std::pair<osg::StateAttribute::Type, unsigned int>, std::pair<osg::ref_ptr<osg::StateAttribute>, unsigned int> > & ) ;
            
            StateSet_exposer.def( 
                "setAttributeList"
                , setAttributeList_function_type( &::osg::StateSet::setAttributeList )
                , ( bp::arg("al") )
                , " set the list of all StateAttributes contained in this StateSet." );
        
        }
        { //::osg::StateSet::setBinName
        
            typedef void ( ::osg::StateSet::*setBinName_function_type )( ::std::string const & ) ;
            
            StateSet_exposer.def( 
                "setBinName"
                , setBinName_function_type( &::osg::StateSet::setBinName )
                , ( bp::arg("name") )
                , " Set the render bin name." );
        
        }
        { //::osg::StateSet::setBinNumber
        
            typedef void ( ::osg::StateSet::*setBinNumber_function_type )( int ) ;
            
            StateSet_exposer.def( 
                "setBinNumber"
                , setBinNumber_function_type( &::osg::StateSet::setBinNumber )
                , ( bp::arg("num") )
                , " Set the render bin number." );
        
        }
        { //::osg::StateSet::setEventCallback
        
            typedef void ( ::osg::StateSet::*setEventCallback_function_type )( ::osg::StateSet::Callback * ) ;
            
            StateSet_exposer.def( 
                "setEventCallback"
                , setEventCallback_function_type( &::osg::StateSet::setEventCallback )
                , ( bp::arg("ac") )
                , " Set the Event Callback which allows users to attach customize the updating of an object during the event traversal." );
        
        }
        { //::osg::StateSet::setGlobalDefaults
        
            typedef void ( ::osg::StateSet::*setGlobalDefaults_function_type )(  ) ;
            
            StateSet_exposer.def( 
                "setGlobalDefaults"
                , setGlobalDefaults_function_type( &::osg::StateSet::setGlobalDefaults )
                , " Set all the modes to on or off so that it defines a\n            complete state, typically used for a default global state." );
        
        }
        { //::osg::StateSet::setMode
        
            typedef void ( ::osg::StateSet::*setMode_function_type )( ::GLenum,unsigned int ) ;
            
            StateSet_exposer.def( 
                "setMode"
                , setMode_function_type( &::osg::StateSet::setMode )
                , ( bp::arg("mode"), bp::arg("value") )
                , " Set this  StateSet to contain the specified  GLMode with a given\n value.\n Note: Dont use this method to set modes related to textures. For this\n       purpose, use  setTextureMode(), that accepts an extra parameter\n       specifying which texture unit shall be affected by the call." );
        
        }
        { //::osg::StateSet::setModeList
        
            typedef void ( ::osg::StateSet::*setModeList_function_type )( ::std::map< unsigned int, unsigned int > & ) ;
            
            StateSet_exposer.def( 
                "setModeList"
                , setModeList_function_type( &::osg::StateSet::setModeList )
                , ( bp::arg("ml") )
                , " Set the list of all <tt>GLMode</tt>s contained in this  StateSet." );
        
        }
        { //::osg::StateSet::setNestRenderBins
        
            typedef void ( ::osg::StateSet::*setNestRenderBins_function_type )( bool ) ;
            
            StateSet_exposer.def( 
                "setNestRenderBins"
                , setNestRenderBins_function_type( &::osg::StateSet::setNestRenderBins )
                , ( bp::arg("val") )
                , " By default render bins will be nested within each other dependent\n upon where they are set in the scene graph. This can be problematic\n if a transparent render bin is attached to an opaque render bin\n which is attached to another transparent render bin as these render\n bins will be sorted separately, giving the wrong draw ordering for\n back-to-front transparency. Therefore, to prevent render bins being\n nested, call setNestRenderBins(false)." );
        
        }
        { //::osg::StateSet::setRenderBinDetails
        
            typedef void ( ::osg::StateSet::*setRenderBinDetails_function_type )( int,::std::string const &,::osg::StateSet::RenderBinMode ) ;
            
            StateSet_exposer.def( 
                "setRenderBinDetails"
                , setRenderBinDetails_function_type( &::osg::StateSet::setRenderBinDetails )
                , ( bp::arg("binNum"), bp::arg("binName"), bp::arg("mode")=::osg::StateSet::USE_RENDERBIN_DETAILS )
                , " Set the render bin details." );
        
        }
        { //::osg::StateSet::setRenderBinMode
        
            typedef void ( ::osg::StateSet::*setRenderBinMode_function_type )( ::osg::StateSet::RenderBinMode ) ;
            
            StateSet_exposer.def( 
                "setRenderBinMode"
                , setRenderBinMode_function_type( &::osg::StateSet::setRenderBinMode )
                , ( bp::arg("mode") )
                , " Set the render bin mode." );
        
        }
        { //::osg::StateSet::setRenderBinToInherit
        
            typedef void ( ::osg::StateSet::*setRenderBinToInherit_function_type )(  ) ;
            
            StateSet_exposer.def( 
                "setRenderBinToInherit"
                , setRenderBinToInherit_function_type( &::osg::StateSet::setRenderBinToInherit )
                , " Set the render bin details to inherit." );
        
        }
        { //::osg::StateSet::setRenderingHint
        
            typedef void ( ::osg::StateSet::*setRenderingHint_function_type )( int ) ;
            
            StateSet_exposer.def( 
                "setRenderingHint"
                , setRenderingHint_function_type( &::osg::StateSet::setRenderingHint )
                , ( bp::arg("hint") )
                , " Set the  RenderingHint of this  StateSet.  RenderingHint is\n used by the renderer to determine which draw bin to drop associated\n <tt>osg::Drawable</tt>s in. Typically, users will set this to either\n  StateSet::OPAQUE_BIN or  StateSet::TRANSPARENT_BIN.\n <tt>Drawable</tt>s in the opaque bin are sorted by their\n  StateSet, so that the number of expensive changes in the OpenGL\n state is minimized. <tt>Drawable</tt>s in the transparent bin are\n sorted by depth, so that objects farther from the viewer are\n rendered first (and hence alpha blending works nicely for\n translucent objects)." );
        
        }
        { //::osg::StateSet::setTextureAttribute
        
            typedef void ( ::osg::StateSet::*setTextureAttribute_function_type )( unsigned int,::osg::StateAttribute *,unsigned int ) ;
            
            StateSet_exposer.def( 
                "setTextureAttribute"
                , setTextureAttribute_function_type( &::osg::StateSet::setTextureAttribute )
                , ( bp::arg("unit"), bp::arg("attribute"), bp::arg("value")=(unsigned int)(OFF) )
                , " Set this StateSet to contain specified attribute and override flag." );
        
        }
        { //::osg::StateSet::setTextureAttributeAndModes
        
            typedef void ( ::osg::StateSet::*setTextureAttributeAndModes_function_type )( unsigned int,::osg::StateAttribute *,unsigned int ) ;
            
            StateSet_exposer.def( 
                "setTextureAttributeAndModes"
                , setTextureAttributeAndModes_function_type( &::osg::StateSet::setTextureAttributeAndModes )
                , ( bp::arg("unit"), bp::arg("attribute"), bp::arg("value")=(unsigned int)(ON) )
                , " Set this StateSet to contain specified attribute and set the associated GLModes to specified value." );
        
        }
        { //::osg::StateSet::setTextureAttributeList
        
            typedef void ( ::osg::StateSet::*setTextureAttributeList_function_type )( ::std::vector< std::map< std::pair<osg::StateAttribute::Type, unsigned int>, std::pair<osg::ref_ptr<osg::StateAttribute>, unsigned int> > > & ) ;
            
            StateSet_exposer.def( 
                "setTextureAttributeList"
                , setTextureAttributeList_function_type( &::osg::StateSet::setTextureAttributeList )
                , ( bp::arg("tal") )
                , " Set the list of all Texture related StateAttributes contained in this StateSet." );
        
        }
        { //::osg::StateSet::setTextureMode
        
            typedef void ( ::osg::StateSet::*setTextureMode_function_type )( unsigned int,::GLenum,unsigned int ) ;
            
            StateSet_exposer.def( 
                "setTextureMode"
                , setTextureMode_function_type( &::osg::StateSet::setTextureMode )
                , ( bp::arg("unit"), bp::arg("mode"), bp::arg("value") )
                , " Set this  StateSet to contain specified  GLMode with a given\n  value.\n  @param unit: The texture unit to be affected (used with\n         multi-texturing).\n  @param mode: The OpenGL mode to be added to the  StateSet.\n  @param value: The value to be assigned to  mode." );
        
        }
        { //::osg::StateSet::setTextureModeList
        
            typedef void ( ::osg::StateSet::*setTextureModeList_function_type )( ::std::vector< std::map< unsigned int, unsigned int > > & ) ;
            
            StateSet_exposer.def( 
                "setTextureModeList"
                , setTextureModeList_function_type( &::osg::StateSet::setTextureModeList )
                , ( bp::arg("tml") )
                , " set the list of all Texture related GLModes contained in this StateSet." );
        
        }
        { //::osg::StateSet::setThreadSafeRefUnref
        
            typedef void ( ::osg::StateSet::*setThreadSafeRefUnref_function_type )( bool ) ;
            typedef void ( StateSet_wrapper::*default_setThreadSafeRefUnref_function_type )( bool ) ;
            
            StateSet_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::StateSet::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&StateSet_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osg::StateSet::setUniformList
        
            typedef void ( ::osg::StateSet::*setUniformList_function_type )( ::std::map< std::string, std::pair<osg::ref_ptr<osg::Uniform>, unsigned int> > & ) ;
            
            StateSet_exposer.def( 
                "setUniformList"
                , setUniformList_function_type( &::osg::StateSet::setUniformList )
                , ( bp::arg("al") )
                , " set the list of all Uniforms contained in this StateSet." );
        
        }
        { //::osg::StateSet::setUpdateCallback
        
            typedef void ( ::osg::StateSet::*setUpdateCallback_function_type )( ::osg::StateSet::Callback * ) ;
            
            StateSet_exposer.def( 
                "setUpdateCallback"
                , setUpdateCallback_function_type( &::osg::StateSet::setUpdateCallback )
                , ( bp::arg("ac") )
                , " Set the Update Callback which allows users to attach customize the updating of an object during the update traversal." );
        
        }
        { //::osg::StateSet::useRenderBinDetails
        
            typedef bool ( ::osg::StateSet::*useRenderBinDetails_function_type )(  ) const;
            
            StateSet_exposer.def( 
                "useRenderBinDetails"
                , useRenderBinDetails_function_type( &::osg::StateSet::useRenderBinDetails )
                , " Get whether the render bin details are set and should be used." );
        
        }
    }

}
