// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "DrawElements.pypp.hpp"

namespace bp = boost::python;

struct DrawElements_wrapper : osg::DrawElements, bp::wrapper< osg::DrawElements > {

    virtual void addElement( unsigned int arg0 ){
        bp::override func_addElement = this->get_override( "addElement" );
        func_addElement( arg0 );
    }

    virtual ::osg::DrawElements * getDrawElements(  ) {
        if( bp::override func_getDrawElements = this->get_override( "getDrawElements" ) )
            return func_getDrawElements(  );
        else{
            return this->osg::DrawElements::getDrawElements(  );
        }
    }
    
    ::osg::DrawElements * default_getDrawElements(  ) {
        return osg::DrawElements::getDrawElements( );
    }

    virtual ::osg::DrawElements const * getDrawElements(  ) const  {
        if( bp::override func_getDrawElements = this->get_override( "getDrawElements" ) )
            return func_getDrawElements(  );
        else{
            return this->osg::DrawElements::getDrawElements(  );
        }
    }
    
    ::osg::DrawElements const * default_getDrawElements(  ) const  {
        return osg::DrawElements::getDrawElements( );
    }

    virtual unsigned int getElement( unsigned int arg0 ){
        bp::override func_getElement = this->get_override( "getElement" );
        return func_getElement( arg0 );
    }

    virtual void reserveElements( unsigned int numIndices ){
        bp::override func_reserveElements = this->get_override( "reserveElements" );
        func_reserveElements( numIndices );
    }

    virtual void setElement( unsigned int arg0, unsigned int arg1 ){
        bp::override func_setElement = this->get_override( "setElement" );
        func_setElement( arg0, arg1 );
    }

    virtual void accept( ::osg::PrimitiveFunctor & functor ) const {
        bp::override func_accept = this->get_override( "accept" );
        func_accept( boost::ref(functor) );
    }

    virtual void accept( ::osg::PrimitiveIndexFunctor & functor ) const {
        bp::override func_accept = this->get_override( "accept" );
        func_accept( boost::ref(functor) );
    }

    virtual ::osg::Array * asArray(  ) {
        if( bp::override func_asArray = this->get_override( "asArray" ) )
            return func_asArray(  );
        else{
            return this->osg::BufferData::asArray(  );
        }
    }
    
    ::osg::Array * default_asArray(  ) {
        return osg::BufferData::asArray( );
    }

    virtual ::osg::Array const * asArray(  ) const  {
        if( bp::override func_asArray = this->get_override( "asArray" ) )
            return func_asArray(  );
        else{
            return this->osg::BufferData::asArray(  );
        }
    }
    
    ::osg::Array const * default_asArray(  ) const  {
        return osg::BufferData::asArray( );
    }

    virtual ::osg::PrimitiveSet * asPrimitiveSet(  ) {
        if( bp::override func_asPrimitiveSet = this->get_override( "asPrimitiveSet" ) )
            return func_asPrimitiveSet(  );
        else{
            return this->osg::PrimitiveSet::asPrimitiveSet(  );
        }
    }
    
    ::osg::PrimitiveSet * default_asPrimitiveSet(  ) {
        return osg::PrimitiveSet::asPrimitiveSet( );
    }

    virtual ::osg::PrimitiveSet const * asPrimitiveSet(  ) const  {
        if( bp::override func_asPrimitiveSet = this->get_override( "asPrimitiveSet" ) )
            return func_asPrimitiveSet(  );
        else{
            return this->osg::PrimitiveSet::asPrimitiveSet(  );
        }
    }
    
    ::osg::PrimitiveSet const * default_asPrimitiveSet(  ) const  {
        return osg::PrimitiveSet::asPrimitiveSet( );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::PrimitiveSet::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::PrimitiveSet::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & arg0 ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone( boost::ref(arg0) );
    }

    virtual ::osg::Object * cloneType(  ) const {
        bp::override func_cloneType = this->get_override( "cloneType" );
        return func_cloneType(  );
    }

    virtual void computeRange(  ) const  {
        if( bp::override func_computeRange = this->get_override( "computeRange" ) )
            func_computeRange(  );
        else{
            this->osg::PrimitiveSet::computeRange(  );
        }
    }
    
    void default_computeRange(  ) const  {
        osg::PrimitiveSet::computeRange( );
    }

    virtual void draw( ::osg::State & state, bool useVertexBufferObjects ) const {
        bp::override func_draw = this->get_override( "draw" );
        func_draw( boost::ref(state), useVertexBufferObjects );
    }

    virtual ::GLvoid const * getDataPointer(  ) const  {
        if( bp::override func_getDataPointer = this->get_override( "getDataPointer" ) )
            return func_getDataPointer(  );
        else{
            return this->osg::PrimitiveSet::getDataPointer(  );
        }
    }
    
    ::GLvoid const * default_getDataPointer(  ) const  {
        return osg::PrimitiveSet::getDataPointer( );
    }

    virtual unsigned int getNumIndices(  ) const {
        bp::override func_getNumIndices = this->get_override( "getNumIndices" );
        return func_getNumIndices(  );
    }

    virtual unsigned int getNumPrimitives(  ) const  {
        if( bp::override func_getNumPrimitives = this->get_override( "getNumPrimitives" ) )
            return func_getNumPrimitives(  );
        else{
            return this->osg::PrimitiveSet::getNumPrimitives(  );
        }
    }
    
    unsigned int default_getNumPrimitives(  ) const  {
        return osg::PrimitiveSet::getNumPrimitives( );
    }

    virtual unsigned int getTotalDataSize(  ) const  {
        if( bp::override func_getTotalDataSize = this->get_override( "getTotalDataSize" ) )
            return func_getTotalDataSize(  );
        else{
            return this->osg::PrimitiveSet::getTotalDataSize(  );
        }
    }
    
    unsigned int default_getTotalDataSize(  ) const  {
        return osg::PrimitiveSet::getTotalDataSize( );
    }

    virtual unsigned int index( unsigned int pos ) const {
        bp::override func_index = this->get_override( "index" );
        return func_index( pos );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::PrimitiveSet::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::PrimitiveSet::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::PrimitiveSet::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::PrimitiveSet::libraryName( );
    }

    virtual void offsetIndices( int offset ){
        bp::override func_offsetIndices = this->get_override( "offsetIndices" );
        func_offsetIndices( offset );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::BufferData::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::BufferData::resizeGLObjectBuffers( maxSize );
    }

    virtual bool supportsBufferObject(  ) const  {
        if( bp::override func_supportsBufferObject = this->get_override( "supportsBufferObject" ) )
            return func_supportsBufferObject(  );
        else{
            return this->osg::PrimitiveSet::supportsBufferObject(  );
        }
    }
    
    bool default_supportsBufferObject(  ) const  {
        return osg::PrimitiveSet::supportsBufferObject( );
    }

};

void register_DrawElements_class(){

    bp::class_< DrawElements_wrapper, bp::bases< osg::PrimitiveSet >, osg::ref_ptr< ::osg::DrawElements >, boost::noncopyable >( "DrawElements", bp::no_init )    
        .def( 
            "addElement"
            , bp::pure_virtual( (void ( ::osg::DrawElements::* )( unsigned int ) )(&::osg::DrawElements::addElement) )
            , ( bp::arg("arg0") ) )    
        .def( 
            "getDrawElements"
            , (::osg::DrawElements * ( ::osg::DrawElements::* )(  ) )(&::osg::DrawElements::getDrawElements)
            , (::osg::DrawElements * ( DrawElements_wrapper::* )(  ) )(&DrawElements_wrapper::default_getDrawElements)
            , bp::return_internal_reference< >() )    
        .def( 
            "getDrawElements"
            , (::osg::DrawElements const * ( ::osg::DrawElements::* )(  ) const)(&::osg::DrawElements::getDrawElements)
            , (::osg::DrawElements const * ( DrawElements_wrapper::* )(  ) const)(&DrawElements_wrapper::default_getDrawElements)
            , bp::return_internal_reference< >() )    
        .def( 
            "getElement"
            , bp::pure_virtual( (unsigned int ( ::osg::DrawElements::* )( unsigned int ) )(&::osg::DrawElements::getElement) )
            , ( bp::arg("arg0") ) )    
        .def( 
            "getElementBufferObject"
            , (::osg::ElementBufferObject * ( ::osg::DrawElements::* )(  ) )( &::osg::DrawElements::getElementBufferObject )
            , bp::return_internal_reference< >()
            , " Get the ElementBufferObject. If no EBO is assigned returns NULL" )    
        .def( 
            "getElementBufferObject"
            , (::osg::ElementBufferObject const * ( ::osg::DrawElements::* )(  ) const)( &::osg::DrawElements::getElementBufferObject )
            , bp::return_internal_reference< >()
            , " Get the const ElementBufferObject. If no EBO is assigned returns NULL" )    
        .def( 
            "reserveElements"
            , bp::pure_virtual( (void ( ::osg::DrawElements::* )( unsigned int ) )(&::osg::DrawElements::reserveElements) )
            , ( bp::arg("numIndices") ) )    
        .def( 
            "setElement"
            , bp::pure_virtual( (void ( ::osg::DrawElements::* )( unsigned int,unsigned int ) )(&::osg::DrawElements::setElement) )
            , ( bp::arg("arg0"), bp::arg("arg1") ) )    
        .def( 
            "setElementBufferObject"
            , (void ( ::osg::DrawElements::* )( ::osg::ElementBufferObject * ) )( &::osg::DrawElements::setElementBufferObject )
            , ( bp::arg("ebo") )
            , " Set the ElementBufferObject." )    
        .def( 
            "accept"
            , bp::pure_virtual( (void ( ::osg::PrimitiveSet::* )( ::osg::PrimitiveFunctor & ) const)(&::osg::PrimitiveSet::accept) )
            , ( bp::arg("functor") ) )    
        .def( 
            "accept"
            , bp::pure_virtual( (void ( ::osg::PrimitiveSet::* )( ::osg::PrimitiveIndexFunctor & ) const)(&::osg::PrimitiveSet::accept) )
            , ( bp::arg("functor") ) )    
        .def( 
            "asArray"
            , (::osg::Array * ( ::osg::BufferData::* )(  ) )(&::osg::BufferData::asArray)
            , (::osg::Array * ( DrawElements_wrapper::* )(  ) )(&DrawElements_wrapper::default_asArray)
            , bp::return_internal_reference< >() )    
        .def( 
            "asArray"
            , (::osg::Array const * ( ::osg::BufferData::* )(  ) const)(&::osg::BufferData::asArray)
            , (::osg::Array const * ( DrawElements_wrapper::* )(  ) const)(&DrawElements_wrapper::default_asArray)
            , bp::return_internal_reference< >() )    
        .def( 
            "asPrimitiveSet"
            , (::osg::PrimitiveSet * ( ::osg::PrimitiveSet::* )(  ) )(&::osg::PrimitiveSet::asPrimitiveSet)
            , (::osg::PrimitiveSet * ( DrawElements_wrapper::* )(  ) )(&DrawElements_wrapper::default_asPrimitiveSet)
            , bp::return_internal_reference< >() )    
        .def( 
            "asPrimitiveSet"
            , (::osg::PrimitiveSet const * ( ::osg::PrimitiveSet::* )(  ) const)(&::osg::PrimitiveSet::asPrimitiveSet)
            , (::osg::PrimitiveSet const * ( DrawElements_wrapper::* )(  ) const)(&DrawElements_wrapper::default_asPrimitiveSet)
            , bp::return_internal_reference< >() )    
        .def( 
            "className"
            , (char const * ( ::osg::PrimitiveSet::* )(  ) const)(&::osg::PrimitiveSet::className)
            , (char const * ( DrawElements_wrapper::* )(  ) const)(&DrawElements_wrapper::default_className) )    
        .def( 
            "clone"
            , bp::pure_virtual( (::osg::Object * ( ::osg::Object::* )( ::osg::CopyOp const & ) const)(&::osg::Object::clone) )
            , ( bp::arg("arg0") )
            , bp::return_value_policy< bp::reference_existing_object >()
            , "\n Clone an object, with Object* return type.\n            Must be defined by derived classes.\n" )    
        .def( 
            "cloneType"
            , bp::pure_virtual( (::osg::Object * ( ::osg::Object::* )(  ) const)(&::osg::Object::cloneType) )
            , bp::return_value_policy< bp::reference_existing_object >()
            , "\n Clone the type of an object, with Object* return type.\n            Must be defined by derived classes.\n" )    
        .def( 
            "computeRange"
            , (void ( ::osg::PrimitiveSet::* )(  ) const)(&::osg::PrimitiveSet::computeRange)
            , (void ( DrawElements_wrapper::* )(  ) const)(&DrawElements_wrapper::default_computeRange) )    
        .def( 
            "draw"
            , bp::pure_virtual( (void ( ::osg::PrimitiveSet::* )( ::osg::State &,bool ) const)(&::osg::PrimitiveSet::draw) )
            , ( bp::arg("state"), bp::arg("useVertexBufferObjects") ) )    
        .def( 
            "getDataPointer"
            , (::GLvoid const * ( ::osg::PrimitiveSet::* )(  ) const)(&::osg::PrimitiveSet::getDataPointer)
            , (::GLvoid const * ( DrawElements_wrapper::* )(  ) const)(&DrawElements_wrapper::default_getDataPointer)
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "getNumIndices"
            , bp::pure_virtual( (unsigned int ( ::osg::PrimitiveSet::* )(  ) const)(&::osg::PrimitiveSet::getNumIndices) ) )    
        .def( 
            "getNumPrimitives"
            , (unsigned int ( ::osg::PrimitiveSet::* )(  ) const)(&::osg::PrimitiveSet::getNumPrimitives)
            , (unsigned int ( DrawElements_wrapper::* )(  ) const)(&DrawElements_wrapper::default_getNumPrimitives) )    
        .def( 
            "getTotalDataSize"
            , (unsigned int ( ::osg::PrimitiveSet::* )(  ) const)(&::osg::PrimitiveSet::getTotalDataSize)
            , (unsigned int ( DrawElements_wrapper::* )(  ) const)(&DrawElements_wrapper::default_getTotalDataSize) )    
        .def( 
            "index"
            , bp::pure_virtual( (unsigned int ( ::osg::PrimitiveSet::* )( unsigned int ) const)(&::osg::PrimitiveSet::index) )
            , ( bp::arg("pos") ) )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osg::PrimitiveSet::* )( ::osg::Object const * ) const)(&::osg::PrimitiveSet::isSameKindAs)
            , (bool ( DrawElements_wrapper::* )( ::osg::Object const * ) const)(&DrawElements_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osg::PrimitiveSet::* )(  ) const)(&::osg::PrimitiveSet::libraryName)
            , (char const * ( DrawElements_wrapper::* )(  ) const)(&DrawElements_wrapper::default_libraryName) )    
        .def( 
            "offsetIndices"
            , bp::pure_virtual( (void ( ::osg::PrimitiveSet::* )( int ) )(&::osg::PrimitiveSet::offsetIndices) )
            , ( bp::arg("offset") ) )    
        .def( 
            "resizeGLObjectBuffers"
            , (void ( ::osg::BufferData::* )( unsigned int ) )(&::osg::BufferData::resizeGLObjectBuffers)
            , (void ( DrawElements_wrapper::* )( unsigned int ) )(&DrawElements_wrapper::default_resizeGLObjectBuffers)
            , ( bp::arg("maxSize") ) )    
        .def( 
            "supportsBufferObject"
            , (bool ( ::osg::PrimitiveSet::* )(  ) const)(&::osg::PrimitiveSet::supportsBufferObject)
            , (bool ( DrawElements_wrapper::* )(  ) const)(&DrawElements_wrapper::default_supportsBufferObject) );

}
