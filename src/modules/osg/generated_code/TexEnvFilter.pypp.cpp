// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "TexEnvFilter.pypp.hpp"

namespace bp = boost::python;

struct TexEnvFilter_wrapper : osg::TexEnvFilter, bp::wrapper< osg::TexEnvFilter > {

    TexEnvFilter_wrapper(float lodBias=0.0f )
    : osg::TexEnvFilter( lodBias )
      , bp::wrapper< osg::TexEnvFilter >(){
        // constructor
    
    }

    virtual void apply( ::osg::State & state ) const  {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(state) );
        else{
            this->osg::TexEnvFilter::apply( boost::ref(state) );
        }
    }
    
    void default_apply( ::osg::State & state ) const  {
        osg::TexEnvFilter::apply( boost::ref(state) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::TexEnvFilter::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::TexEnvFilter::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::TexEnvFilter::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::TexEnvFilter::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::TexEnvFilter::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::TexEnvFilter::cloneType( );
    }

    virtual ::osg::StateAttribute::Type getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->osg::TexEnvFilter::getType(  );
        }
    }
    
    ::osg::StateAttribute::Type default_getType(  ) const  {
        return osg::TexEnvFilter::getType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::TexEnvFilter::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::TexEnvFilter::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual bool isTextureAttribute(  ) const  {
        if( bp::override func_isTextureAttribute = this->get_override( "isTextureAttribute" ) )
            return func_isTextureAttribute(  );
        else{
            return this->osg::TexEnvFilter::isTextureAttribute(  );
        }
    }
    
    bool default_isTextureAttribute(  ) const  {
        return osg::TexEnvFilter::isTextureAttribute( );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::TexEnvFilter::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::TexEnvFilter::libraryName( );
    }

    virtual ::osg::Texture * asTexture(  ) {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::StateAttribute::asTexture(  );
        }
    }
    
    ::osg::Texture * default_asTexture(  ) {
        return osg::StateAttribute::asTexture( );
    }

    virtual ::osg::Texture const * asTexture(  ) const  {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::StateAttribute::asTexture(  );
        }
    }
    
    ::osg::Texture const * default_asTexture(  ) const  {
        return osg::StateAttribute::asTexture( );
    }

    virtual bool checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        if( bp::override func_checkValidityOfAssociatedModes = this->get_override( "checkValidityOfAssociatedModes" ) )
            return func_checkValidityOfAssociatedModes( boost::ref(arg0) );
        else{
            return this->osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
        }
    }
    
    bool default_checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        return osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
    }

    virtual void compileGLObjects( ::osg::State & arg0 ) const  {
        if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
            func_compileGLObjects( boost::ref(arg0) );
        else{
            this->osg::StateAttribute::compileGLObjects( boost::ref(arg0) );
        }
    }
    
    void default_compileGLObjects( ::osg::State & arg0 ) const  {
        osg::StateAttribute::compileGLObjects( boost::ref(arg0) );
    }

    virtual unsigned int getMember(  ) const  {
        if( bp::override func_getMember = this->get_override( "getMember" ) )
            return func_getMember(  );
        else{
            return this->osg::StateAttribute::getMember(  );
        }
    }
    
    unsigned int default_getMember(  ) const  {
        return osg::StateAttribute::getMember( );
    }

    virtual bool getModeUsage( ::osg::StateAttribute::ModeUsage & arg0 ) const  {
        if( bp::override func_getModeUsage = this->get_override( "getModeUsage" ) )
            return func_getModeUsage( boost::ref(arg0) );
        else{
            return this->osg::StateAttribute::getModeUsage( boost::ref(arg0) );
        }
    }
    
    bool default_getModeUsage( ::osg::StateAttribute::ModeUsage & arg0 ) const  {
        return osg::StateAttribute::getModeUsage( boost::ref(arg0) );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::StateAttribute::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::StateAttribute::resizeGLObjectBuffers( arg0 );
    }

};

void register_TexEnvFilter_class(){

    { //::osg::TexEnvFilter
        typedef bp::class_< TexEnvFilter_wrapper, bp::bases< osg::StateAttribute >, osg::ref_ptr< ::osg::TexEnvFilter >, boost::noncopyable > TexEnvFilter_exposer_t;
        TexEnvFilter_exposer_t TexEnvFilter_exposer = TexEnvFilter_exposer_t( "TexEnvFilter", "\n TexEnvFilter - encapsulates the OpenGL glTexEnv (GL_TEXTURE_FILTER_CONTROL) state.\n", bp::no_init );
        bp::scope TexEnvFilter_scope( TexEnvFilter_exposer );
        TexEnvFilter_exposer.def( bp::init< bp::optional< float > >(( bp::arg("lodBias")=0.0f ), "\n TexEnvFilter - encapsulates the OpenGL glTexEnv (GL_TEXTURE_FILTER_CONTROL) state.\n") );
        bp::implicitly_convertible< float, osg::TexEnvFilter >();
        { //::osg::TexEnvFilter::apply
        
            typedef void ( ::osg::TexEnvFilter::*apply_function_type )( ::osg::State & ) const;
            typedef void ( TexEnvFilter_wrapper::*default_apply_function_type )( ::osg::State & ) const;
            
            TexEnvFilter_exposer.def( 
                "apply"
                , apply_function_type(&::osg::TexEnvFilter::apply)
                , default_apply_function_type(&TexEnvFilter_wrapper::default_apply)
                , ( bp::arg("state") ) );
        
        }
        { //::osg::TexEnvFilter::className
        
            typedef char const * ( ::osg::TexEnvFilter::*className_function_type )(  ) const;
            typedef char const * ( TexEnvFilter_wrapper::*default_className_function_type )(  ) const;
            
            TexEnvFilter_exposer.def( 
                "className"
                , className_function_type(&::osg::TexEnvFilter::className)
                , default_className_function_type(&TexEnvFilter_wrapper::default_className) );
        
        }
        { //::osg::TexEnvFilter::clone
        
            typedef ::osg::Object * ( ::osg::TexEnvFilter::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( TexEnvFilter_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            TexEnvFilter_exposer.def( 
                "clone"
                , clone_function_type(&::osg::TexEnvFilter::clone)
                , default_clone_function_type(&TexEnvFilter_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::TexEnvFilter::cloneType
        
            typedef ::osg::Object * ( ::osg::TexEnvFilter::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( TexEnvFilter_wrapper::*default_cloneType_function_type )(  ) const;
            
            TexEnvFilter_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::TexEnvFilter::cloneType)
                , default_cloneType_function_type(&TexEnvFilter_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::TexEnvFilter::getLodBias
        
            typedef float ( ::osg::TexEnvFilter::*getLodBias_function_type )(  ) const;
            
            TexEnvFilter_exposer.def( 
                "getLodBias"
                , getLodBias_function_type( &::osg::TexEnvFilter::getLodBias ) );
        
        }
        { //::osg::TexEnvFilter::getType
        
            typedef ::osg::StateAttribute::Type ( ::osg::TexEnvFilter::*getType_function_type )(  ) const;
            typedef ::osg::StateAttribute::Type ( TexEnvFilter_wrapper::*default_getType_function_type )(  ) const;
            
            TexEnvFilter_exposer.def( 
                "getType"
                , getType_function_type(&::osg::TexEnvFilter::getType)
                , default_getType_function_type(&TexEnvFilter_wrapper::default_getType) );
        
        }
        { //::osg::TexEnvFilter::isSameKindAs
        
            typedef bool ( ::osg::TexEnvFilter::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( TexEnvFilter_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            TexEnvFilter_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::TexEnvFilter::isSameKindAs)
                , default_isSameKindAs_function_type(&TexEnvFilter_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::TexEnvFilter::isTextureAttribute
        
            typedef bool ( ::osg::TexEnvFilter::*isTextureAttribute_function_type )(  ) const;
            typedef bool ( TexEnvFilter_wrapper::*default_isTextureAttribute_function_type )(  ) const;
            
            TexEnvFilter_exposer.def( 
                "isTextureAttribute"
                , isTextureAttribute_function_type(&::osg::TexEnvFilter::isTextureAttribute)
                , default_isTextureAttribute_function_type(&TexEnvFilter_wrapper::default_isTextureAttribute) );
        
        }
        { //::osg::TexEnvFilter::libraryName
        
            typedef char const * ( ::osg::TexEnvFilter::*libraryName_function_type )(  ) const;
            typedef char const * ( TexEnvFilter_wrapper::*default_libraryName_function_type )(  ) const;
            
            TexEnvFilter_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::TexEnvFilter::libraryName)
                , default_libraryName_function_type(&TexEnvFilter_wrapper::default_libraryName) );
        
        }
        { //::osg::TexEnvFilter::setLodBias
        
            typedef void ( ::osg::TexEnvFilter::*setLodBias_function_type )( float ) ;
            
            TexEnvFilter_exposer.def( 
                "setLodBias"
                , setLodBias_function_type( &::osg::TexEnvFilter::setLodBias )
                , ( bp::arg("lodBias") ) );
        
        }
        { //::osg::StateAttribute::asTexture
        
            typedef ::osg::Texture * ( ::osg::StateAttribute::*asTexture_function_type )(  ) ;
            typedef ::osg::Texture * ( TexEnvFilter_wrapper::*default_asTexture_function_type )(  ) ;
            
            TexEnvFilter_exposer.def( 
                "asTexture"
                , asTexture_function_type(&::osg::StateAttribute::asTexture)
                , default_asTexture_function_type(&TexEnvFilter_wrapper::default_asTexture)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateAttribute::asTexture
        
            typedef ::osg::Texture const * ( ::osg::StateAttribute::*asTexture_function_type )(  ) const;
            typedef ::osg::Texture const * ( TexEnvFilter_wrapper::*default_asTexture_function_type )(  ) const;
            
            TexEnvFilter_exposer.def( 
                "asTexture"
                , asTexture_function_type(&::osg::StateAttribute::asTexture)
                , default_asTexture_function_type(&TexEnvFilter_wrapper::default_asTexture)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateAttribute::checkValidityOfAssociatedModes
        
            typedef bool ( ::osg::StateAttribute::*checkValidityOfAssociatedModes_function_type )( ::osg::State & ) const;
            typedef bool ( TexEnvFilter_wrapper::*default_checkValidityOfAssociatedModes_function_type )( ::osg::State & ) const;
            
            TexEnvFilter_exposer.def( 
                "checkValidityOfAssociatedModes"
                , checkValidityOfAssociatedModes_function_type(&::osg::StateAttribute::checkValidityOfAssociatedModes)
                , default_checkValidityOfAssociatedModes_function_type(&TexEnvFilter_wrapper::default_checkValidityOfAssociatedModes)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::StateAttribute::compileGLObjects
        
            typedef void ( ::osg::StateAttribute::*compileGLObjects_function_type )( ::osg::State & ) const;
            typedef void ( TexEnvFilter_wrapper::*default_compileGLObjects_function_type )( ::osg::State & ) const;
            
            TexEnvFilter_exposer.def( 
                "compileGLObjects"
                , compileGLObjects_function_type(&::osg::StateAttribute::compileGLObjects)
                , default_compileGLObjects_function_type(&TexEnvFilter_wrapper::default_compileGLObjects)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::StateAttribute::getMember
        
            typedef unsigned int ( ::osg::StateAttribute::*getMember_function_type )(  ) const;
            typedef unsigned int ( TexEnvFilter_wrapper::*default_getMember_function_type )(  ) const;
            
            TexEnvFilter_exposer.def( 
                "getMember"
                , getMember_function_type(&::osg::StateAttribute::getMember)
                , default_getMember_function_type(&TexEnvFilter_wrapper::default_getMember) );
        
        }
        { //::osg::StateAttribute::getModeUsage
        
            typedef bool ( ::osg::StateAttribute::*getModeUsage_function_type )( ::osg::StateAttribute::ModeUsage & ) const;
            typedef bool ( TexEnvFilter_wrapper::*default_getModeUsage_function_type )( ::osg::StateAttribute::ModeUsage & ) const;
            
            TexEnvFilter_exposer.def( 
                "getModeUsage"
                , getModeUsage_function_type(&::osg::StateAttribute::getModeUsage)
                , default_getModeUsage_function_type(&TexEnvFilter_wrapper::default_getModeUsage)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::StateAttribute::resizeGLObjectBuffers
        
            typedef void ( ::osg::StateAttribute::*resizeGLObjectBuffers_function_type )( unsigned int ) ;
            typedef void ( TexEnvFilter_wrapper::*default_resizeGLObjectBuffers_function_type )( unsigned int ) ;
            
            TexEnvFilter_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::StateAttribute::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&TexEnvFilter_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) );
        
        }
    }

}
