// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "PrimitiveSet.pypp.hpp"

namespace bp = boost::python;

struct PrimitiveSet_wrapper : osg::PrimitiveSet, bp::wrapper< osg::PrimitiveSet > {

    virtual void accept( ::osg::PrimitiveFunctor & functor ) const {
        bp::override func_accept = this->get_override( "accept" );
        func_accept( boost::ref(functor) );
    }

    virtual void accept( ::osg::PrimitiveIndexFunctor & functor ) const {
        bp::override func_accept = this->get_override( "accept" );
        func_accept( boost::ref(functor) );
    }

    virtual ::osg::PrimitiveSet * asPrimitiveSet(  ) {
        if( bp::override func_asPrimitiveSet = this->get_override( "asPrimitiveSet" ) )
            return func_asPrimitiveSet(  );
        else{
            return this->osg::PrimitiveSet::asPrimitiveSet(  );
        }
    }
    
    ::osg::PrimitiveSet * default_asPrimitiveSet(  ) {
        return osg::PrimitiveSet::asPrimitiveSet( );
    }

    virtual ::osg::PrimitiveSet const * asPrimitiveSet(  ) const  {
        if( bp::override func_asPrimitiveSet = this->get_override( "asPrimitiveSet" ) )
            return func_asPrimitiveSet(  );
        else{
            return this->osg::PrimitiveSet::asPrimitiveSet(  );
        }
    }
    
    ::osg::PrimitiveSet const * default_asPrimitiveSet(  ) const  {
        return osg::PrimitiveSet::asPrimitiveSet( );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::PrimitiveSet::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::PrimitiveSet::className( );
    }

    virtual void computeRange(  ) const  {
        if( bp::override func_computeRange = this->get_override( "computeRange" ) )
            func_computeRange(  );
        else{
            this->osg::PrimitiveSet::computeRange(  );
        }
    }
    
    void default_computeRange(  ) const  {
        osg::PrimitiveSet::computeRange( );
    }

    virtual void draw( ::osg::State & state, bool useVertexBufferObjects ) const {
        bp::override func_draw = this->get_override( "draw" );
        func_draw( boost::ref(state), useVertexBufferObjects );
    }

    virtual ::GLvoid const * getDataPointer(  ) const  {
        if( bp::override func_getDataPointer = this->get_override( "getDataPointer" ) )
            return func_getDataPointer(  );
        else{
            return this->osg::PrimitiveSet::getDataPointer(  );
        }
    }
    
    ::GLvoid const * default_getDataPointer(  ) const  {
        return osg::PrimitiveSet::getDataPointer( );
    }

    virtual ::osg::DrawElements * getDrawElements(  ) {
        if( bp::override func_getDrawElements = this->get_override( "getDrawElements" ) )
            return func_getDrawElements(  );
        else{
            return this->osg::PrimitiveSet::getDrawElements(  );
        }
    }
    
    ::osg::DrawElements * default_getDrawElements(  ) {
        return osg::PrimitiveSet::getDrawElements( );
    }

    virtual ::osg::DrawElements const * getDrawElements(  ) const  {
        if( bp::override func_getDrawElements = this->get_override( "getDrawElements" ) )
            return func_getDrawElements(  );
        else{
            return this->osg::PrimitiveSet::getDrawElements(  );
        }
    }
    
    ::osg::DrawElements const * default_getDrawElements(  ) const  {
        return osg::PrimitiveSet::getDrawElements( );
    }

    virtual unsigned int getNumIndices(  ) const {
        bp::override func_getNumIndices = this->get_override( "getNumIndices" );
        return func_getNumIndices(  );
    }

    virtual unsigned int getNumPrimitives(  ) const  {
        if( bp::override func_getNumPrimitives = this->get_override( "getNumPrimitives" ) )
            return func_getNumPrimitives(  );
        else{
            return this->osg::PrimitiveSet::getNumPrimitives(  );
        }
    }
    
    unsigned int default_getNumPrimitives(  ) const  {
        return osg::PrimitiveSet::getNumPrimitives( );
    }

    virtual unsigned int getTotalDataSize(  ) const  {
        if( bp::override func_getTotalDataSize = this->get_override( "getTotalDataSize" ) )
            return func_getTotalDataSize(  );
        else{
            return this->osg::PrimitiveSet::getTotalDataSize(  );
        }
    }
    
    unsigned int default_getTotalDataSize(  ) const  {
        return osg::PrimitiveSet::getTotalDataSize( );
    }

    virtual unsigned int index( unsigned int pos ) const {
        bp::override func_index = this->get_override( "index" );
        return func_index( pos );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::PrimitiveSet::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::PrimitiveSet::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::PrimitiveSet::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::PrimitiveSet::libraryName( );
    }

    virtual void offsetIndices( int offset ){
        bp::override func_offsetIndices = this->get_override( "offsetIndices" );
        func_offsetIndices( offset );
    }

    virtual bool supportsBufferObject(  ) const  {
        if( bp::override func_supportsBufferObject = this->get_override( "supportsBufferObject" ) )
            return func_supportsBufferObject(  );
        else{
            return this->osg::PrimitiveSet::supportsBufferObject(  );
        }
    }
    
    bool default_supportsBufferObject(  ) const  {
        return osg::PrimitiveSet::supportsBufferObject( );
    }

    virtual ::osg::Array * asArray(  ) {
        if( bp::override func_asArray = this->get_override( "asArray" ) )
            return func_asArray(  );
        else{
            return this->osg::BufferData::asArray(  );
        }
    }
    
    ::osg::Array * default_asArray(  ) {
        return osg::BufferData::asArray( );
    }

    virtual ::osg::Array const * asArray(  ) const  {
        if( bp::override func_asArray = this->get_override( "asArray" ) )
            return func_asArray(  );
        else{
            return this->osg::BufferData::asArray(  );
        }
    }
    
    ::osg::Array const * default_asArray(  ) const  {
        return osg::BufferData::asArray( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & arg0 ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone( boost::ref(arg0) );
    }

    virtual ::osg::Object * cloneType(  ) const {
        bp::override func_cloneType = this->get_override( "cloneType" );
        return func_cloneType(  );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::BufferData::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::BufferData::resizeGLObjectBuffers( maxSize );
    }

};

void register_PrimitiveSet_class(){

    { //::osg::PrimitiveSet
        typedef bp::class_< PrimitiveSet_wrapper, bp::bases< osg::BufferData >, osg::ref_ptr< ::osg::PrimitiveSet >, boost::noncopyable > PrimitiveSet_exposer_t;
        PrimitiveSet_exposer_t PrimitiveSet_exposer = PrimitiveSet_exposer_t( "PrimitiveSet", bp::no_init );
        bp::scope PrimitiveSet_scope( PrimitiveSet_exposer );
        bp::enum_< osg::PrimitiveSet::Mode>("Mode")
            .value("POINTS", osg::PrimitiveSet::POINTS)
            .value("LINES", osg::PrimitiveSet::LINES)
            .value("LINE_STRIP", osg::PrimitiveSet::LINE_STRIP)
            .value("LINE_LOOP", osg::PrimitiveSet::LINE_LOOP)
            .value("TRIANGLES", osg::PrimitiveSet::TRIANGLES)
            .value("TRIANGLE_STRIP", osg::PrimitiveSet::TRIANGLE_STRIP)
            .value("TRIANGLE_FAN", osg::PrimitiveSet::TRIANGLE_FAN)
            .value("QUADS", osg::PrimitiveSet::QUADS)
            .value("QUAD_STRIP", osg::PrimitiveSet::QUAD_STRIP)
            .value("POLYGON", osg::PrimitiveSet::POLYGON)
            .value("LINES_ADJACENCY", osg::PrimitiveSet::LINES_ADJACENCY)
            .value("LINE_STRIP_ADJACENCY", osg::PrimitiveSet::LINE_STRIP_ADJACENCY)
            .value("TRIANGLES_ADJACENCY", osg::PrimitiveSet::TRIANGLES_ADJACENCY)
            .value("TRIANGLE_STRIP_ADJACENCY", osg::PrimitiveSet::TRIANGLE_STRIP_ADJACENCY)
            .value("PATCHES", osg::PrimitiveSet::PATCHES)
            .export_values()
            ;
        bp::enum_< osg::PrimitiveSet::Type>("Type")
            .value("PrimitiveType", osg::PrimitiveSet::PrimitiveType)
            .value("DrawArraysPrimitiveType", osg::PrimitiveSet::DrawArraysPrimitiveType)
            .value("DrawArrayLengthsPrimitiveType", osg::PrimitiveSet::DrawArrayLengthsPrimitiveType)
            .value("DrawElementsUBytePrimitiveType", osg::PrimitiveSet::DrawElementsUBytePrimitiveType)
            .value("DrawElementsUShortPrimitiveType", osg::PrimitiveSet::DrawElementsUShortPrimitiveType)
            .value("DrawElementsUIntPrimitiveType", osg::PrimitiveSet::DrawElementsUIntPrimitiveType)
            .export_values()
            ;
        { //::osg::PrimitiveSet::accept
        
            typedef void ( ::osg::PrimitiveSet::*accept_function_type )( ::osg::PrimitiveFunctor & ) const;
            
            PrimitiveSet_exposer.def( 
                "accept"
                , bp::pure_virtual( accept_function_type(&::osg::PrimitiveSet::accept) )
                , ( bp::arg("functor") ) );
        
        }
        { //::osg::PrimitiveSet::accept
        
            typedef void ( ::osg::PrimitiveSet::*accept_function_type )( ::osg::PrimitiveIndexFunctor & ) const;
            
            PrimitiveSet_exposer.def( 
                "accept"
                , bp::pure_virtual( accept_function_type(&::osg::PrimitiveSet::accept) )
                , ( bp::arg("functor") ) );
        
        }
        { //::osg::PrimitiveSet::asPrimitiveSet
        
            typedef ::osg::PrimitiveSet * ( ::osg::PrimitiveSet::*asPrimitiveSet_function_type )(  ) ;
            typedef ::osg::PrimitiveSet * ( PrimitiveSet_wrapper::*default_asPrimitiveSet_function_type )(  ) ;
            
            PrimitiveSet_exposer.def( 
                "asPrimitiveSet"
                , asPrimitiveSet_function_type(&::osg::PrimitiveSet::asPrimitiveSet)
                , default_asPrimitiveSet_function_type(&PrimitiveSet_wrapper::default_asPrimitiveSet)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::PrimitiveSet::asPrimitiveSet
        
            typedef ::osg::PrimitiveSet const * ( ::osg::PrimitiveSet::*asPrimitiveSet_function_type )(  ) const;
            typedef ::osg::PrimitiveSet const * ( PrimitiveSet_wrapper::*default_asPrimitiveSet_function_type )(  ) const;
            
            PrimitiveSet_exposer.def( 
                "asPrimitiveSet"
                , asPrimitiveSet_function_type(&::osg::PrimitiveSet::asPrimitiveSet)
                , default_asPrimitiveSet_function_type(&PrimitiveSet_wrapper::default_asPrimitiveSet)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::PrimitiveSet::className
        
            typedef char const * ( ::osg::PrimitiveSet::*className_function_type )(  ) const;
            typedef char const * ( PrimitiveSet_wrapper::*default_className_function_type )(  ) const;
            
            PrimitiveSet_exposer.def( 
                "className"
                , className_function_type(&::osg::PrimitiveSet::className)
                , default_className_function_type(&PrimitiveSet_wrapper::default_className) );
        
        }
        { //::osg::PrimitiveSet::computeRange
        
            typedef void ( ::osg::PrimitiveSet::*computeRange_function_type )(  ) const;
            typedef void ( PrimitiveSet_wrapper::*default_computeRange_function_type )(  ) const;
            
            PrimitiveSet_exposer.def( 
                "computeRange"
                , computeRange_function_type(&::osg::PrimitiveSet::computeRange)
                , default_computeRange_function_type(&PrimitiveSet_wrapper::default_computeRange) );
        
        }
        { //::osg::PrimitiveSet::draw
        
            typedef void ( ::osg::PrimitiveSet::*draw_function_type )( ::osg::State &,bool ) const;
            
            PrimitiveSet_exposer.def( 
                "draw"
                , bp::pure_virtual( draw_function_type(&::osg::PrimitiveSet::draw) )
                , ( bp::arg("state"), bp::arg("useVertexBufferObjects") ) );
        
        }
        { //::osg::PrimitiveSet::getDataPointer
        
            typedef ::GLvoid const * ( ::osg::PrimitiveSet::*getDataPointer_function_type )(  ) const;
            typedef ::GLvoid const * ( PrimitiveSet_wrapper::*default_getDataPointer_function_type )(  ) const;
            
            PrimitiveSet_exposer.def( 
                "getDataPointer"
                , getDataPointer_function_type(&::osg::PrimitiveSet::getDataPointer)
                , default_getDataPointer_function_type(&PrimitiveSet_wrapper::default_getDataPointer)
                , bp::return_value_policy< bp::return_opaque_pointer >() );
        
        }
        { //::osg::PrimitiveSet::getDrawElements
        
            typedef ::osg::DrawElements * ( ::osg::PrimitiveSet::*getDrawElements_function_type )(  ) ;
            typedef ::osg::DrawElements * ( PrimitiveSet_wrapper::*default_getDrawElements_function_type )(  ) ;
            
            PrimitiveSet_exposer.def( 
                "getDrawElements"
                , getDrawElements_function_type(&::osg::PrimitiveSet::getDrawElements)
                , default_getDrawElements_function_type(&PrimitiveSet_wrapper::default_getDrawElements)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::PrimitiveSet::getDrawElements
        
            typedef ::osg::DrawElements const * ( ::osg::PrimitiveSet::*getDrawElements_function_type )(  ) const;
            typedef ::osg::DrawElements const * ( PrimitiveSet_wrapper::*default_getDrawElements_function_type )(  ) const;
            
            PrimitiveSet_exposer.def( 
                "getDrawElements"
                , getDrawElements_function_type(&::osg::PrimitiveSet::getDrawElements)
                , default_getDrawElements_function_type(&PrimitiveSet_wrapper::default_getDrawElements)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::PrimitiveSet::getMode
        
            typedef ::GLenum ( ::osg::PrimitiveSet::*getMode_function_type )(  ) const;
            
            PrimitiveSet_exposer.def( 
                "getMode"
                , getMode_function_type( &::osg::PrimitiveSet::getMode ) );
        
        }
        { //::osg::PrimitiveSet::getNumIndices
        
            typedef unsigned int ( ::osg::PrimitiveSet::*getNumIndices_function_type )(  ) const;
            
            PrimitiveSet_exposer.def( 
                "getNumIndices"
                , bp::pure_virtual( getNumIndices_function_type(&::osg::PrimitiveSet::getNumIndices) ) );
        
        }
        { //::osg::PrimitiveSet::getNumInstances
        
            typedef int ( ::osg::PrimitiveSet::*getNumInstances_function_type )(  ) const;
            
            PrimitiveSet_exposer.def( 
                "getNumInstances"
                , getNumInstances_function_type( &::osg::PrimitiveSet::getNumInstances ) );
        
        }
        { //::osg::PrimitiveSet::getNumPrimitives
        
            typedef unsigned int ( ::osg::PrimitiveSet::*getNumPrimitives_function_type )(  ) const;
            typedef unsigned int ( PrimitiveSet_wrapper::*default_getNumPrimitives_function_type )(  ) const;
            
            PrimitiveSet_exposer.def( 
                "getNumPrimitives"
                , getNumPrimitives_function_type(&::osg::PrimitiveSet::getNumPrimitives)
                , default_getNumPrimitives_function_type(&PrimitiveSet_wrapper::default_getNumPrimitives) );
        
        }
        { //::osg::PrimitiveSet::getTotalDataSize
        
            typedef unsigned int ( ::osg::PrimitiveSet::*getTotalDataSize_function_type )(  ) const;
            typedef unsigned int ( PrimitiveSet_wrapper::*default_getTotalDataSize_function_type )(  ) const;
            
            PrimitiveSet_exposer.def( 
                "getTotalDataSize"
                , getTotalDataSize_function_type(&::osg::PrimitiveSet::getTotalDataSize)
                , default_getTotalDataSize_function_type(&PrimitiveSet_wrapper::default_getTotalDataSize) );
        
        }
        { //::osg::PrimitiveSet::getType
        
            typedef ::osg::PrimitiveSet::Type ( ::osg::PrimitiveSet::*getType_function_type )(  ) const;
            
            PrimitiveSet_exposer.def( 
                "getType"
                , getType_function_type( &::osg::PrimitiveSet::getType ) );
        
        }
        { //::osg::PrimitiveSet::index
        
            typedef unsigned int ( ::osg::PrimitiveSet::*index_function_type )( unsigned int ) const;
            
            PrimitiveSet_exposer.def( 
                "index"
                , bp::pure_virtual( index_function_type(&::osg::PrimitiveSet::index) )
                , ( bp::arg("pos") ) );
        
        }
        { //::osg::PrimitiveSet::isSameKindAs
        
            typedef bool ( ::osg::PrimitiveSet::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( PrimitiveSet_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            PrimitiveSet_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::PrimitiveSet::isSameKindAs)
                , default_isSameKindAs_function_type(&PrimitiveSet_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::PrimitiveSet::libraryName
        
            typedef char const * ( ::osg::PrimitiveSet::*libraryName_function_type )(  ) const;
            typedef char const * ( PrimitiveSet_wrapper::*default_libraryName_function_type )(  ) const;
            
            PrimitiveSet_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::PrimitiveSet::libraryName)
                , default_libraryName_function_type(&PrimitiveSet_wrapper::default_libraryName) );
        
        }
        { //::osg::PrimitiveSet::offsetIndices
        
            typedef void ( ::osg::PrimitiveSet::*offsetIndices_function_type )( int ) ;
            
            PrimitiveSet_exposer.def( 
                "offsetIndices"
                , bp::pure_virtual( offsetIndices_function_type(&::osg::PrimitiveSet::offsetIndices) )
                , ( bp::arg("offset") ) );
        
        }
        { //::osg::PrimitiveSet::setMode
        
            typedef void ( ::osg::PrimitiveSet::*setMode_function_type )( ::GLenum ) ;
            
            PrimitiveSet_exposer.def( 
                "setMode"
                , setMode_function_type( &::osg::PrimitiveSet::setMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::osg::PrimitiveSet::setNumInstances
        
            typedef void ( ::osg::PrimitiveSet::*setNumInstances_function_type )( int ) ;
            
            PrimitiveSet_exposer.def( 
                "setNumInstances"
                , setNumInstances_function_type( &::osg::PrimitiveSet::setNumInstances )
                , ( bp::arg("n") ) );
        
        }
        { //::osg::PrimitiveSet::supportsBufferObject
        
            typedef bool ( ::osg::PrimitiveSet::*supportsBufferObject_function_type )(  ) const;
            typedef bool ( PrimitiveSet_wrapper::*default_supportsBufferObject_function_type )(  ) const;
            
            PrimitiveSet_exposer.def( 
                "supportsBufferObject"
                , supportsBufferObject_function_type(&::osg::PrimitiveSet::supportsBufferObject)
                , default_supportsBufferObject_function_type(&PrimitiveSet_wrapper::default_supportsBufferObject) );
        
        }
        { //::osg::BufferData::asArray
        
            typedef ::osg::Array * ( ::osg::BufferData::*asArray_function_type )(  ) ;
            typedef ::osg::Array * ( PrimitiveSet_wrapper::*default_asArray_function_type )(  ) ;
            
            PrimitiveSet_exposer.def( 
                "asArray"
                , asArray_function_type(&::osg::BufferData::asArray)
                , default_asArray_function_type(&PrimitiveSet_wrapper::default_asArray)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::BufferData::asArray
        
            typedef ::osg::Array const * ( ::osg::BufferData::*asArray_function_type )(  ) const;
            typedef ::osg::Array const * ( PrimitiveSet_wrapper::*default_asArray_function_type )(  ) const;
            
            PrimitiveSet_exposer.def( 
                "asArray"
                , asArray_function_type(&::osg::BufferData::asArray)
                , default_asArray_function_type(&PrimitiveSet_wrapper::default_asArray)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Object::clone
        
            typedef ::osg::Object * ( ::osg::Object::*clone_function_type )( ::osg::CopyOp const & ) const;
            
            PrimitiveSet_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::osg::Object::clone) )
                , ( bp::arg("arg0") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "\n Clone an object, with Object* return type.\n            Must be defined by derived classes.\n" );
        
        }
        { //::osg::Object::cloneType
        
            typedef ::osg::Object * ( ::osg::Object::*cloneType_function_type )(  ) const;
            
            PrimitiveSet_exposer.def( 
                "cloneType"
                , bp::pure_virtual( cloneType_function_type(&::osg::Object::cloneType) )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "\n Clone the type of an object, with Object* return type.\n            Must be defined by derived classes.\n" );
        
        }
        { //::osg::BufferData::resizeGLObjectBuffers
        
            typedef void ( ::osg::BufferData::*resizeGLObjectBuffers_function_type )( unsigned int ) ;
            typedef void ( PrimitiveSet_wrapper::*default_resizeGLObjectBuffers_function_type )( unsigned int ) ;
            
            PrimitiveSet_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::BufferData::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&PrimitiveSet_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
    }

}
