// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "TextureCubeMap.pypp.hpp"

namespace bp = boost::python;

struct TextureCubeMap_wrapper : osg::TextureCubeMap, bp::wrapper< osg::TextureCubeMap > {

    TextureCubeMap_wrapper( )
    : osg::TextureCubeMap( )
      , bp::wrapper< osg::TextureCubeMap >(){
        // null constructor
    
    }

    virtual void apply( ::osg::State & state ) const  {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(state) );
        else{
            this->osg::TextureCubeMap::apply( boost::ref(state) );
        }
    }
    
    void default_apply( ::osg::State & state ) const  {
        osg::TextureCubeMap::apply( boost::ref(state) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::TextureCubeMap::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::TextureCubeMap::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::TextureCubeMap::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::TextureCubeMap::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::TextureCubeMap::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::TextureCubeMap::cloneType( );
    }

    virtual ::osg::Image * getImage( unsigned int face ) {
        if( bp::override func_getImage = this->get_override( "getImage" ) )
            return func_getImage( face );
        else{
            return this->osg::TextureCubeMap::getImage( face );
        }
    }
    
    ::osg::Image * default_getImage( unsigned int face ) {
        return osg::TextureCubeMap::getImage( face );
    }

    virtual ::osg::Image const * getImage( unsigned int face ) const  {
        if( bp::override func_getImage = this->get_override( "getImage" ) )
            return func_getImage( face );
        else{
            return this->osg::TextureCubeMap::getImage( face );
        }
    }
    
    ::osg::Image const * default_getImage( unsigned int face ) const  {
        return osg::TextureCubeMap::getImage( face );
    }

    virtual unsigned int getNumImages(  ) const  {
        if( bp::override func_getNumImages = this->get_override( "getNumImages" ) )
            return func_getNumImages(  );
        else{
            return this->osg::TextureCubeMap::getNumImages(  );
        }
    }
    
    unsigned int default_getNumImages(  ) const  {
        return osg::TextureCubeMap::getNumImages( );
    }

    virtual int getTextureDepth(  ) const  {
        if( bp::override func_getTextureDepth = this->get_override( "getTextureDepth" ) )
            return func_getTextureDepth(  );
        else{
            return this->osg::TextureCubeMap::getTextureDepth(  );
        }
    }
    
    int default_getTextureDepth(  ) const  {
        return osg::TextureCubeMap::getTextureDepth( );
    }

    virtual int getTextureHeight(  ) const  {
        if( bp::override func_getTextureHeight = this->get_override( "getTextureHeight" ) )
            return func_getTextureHeight(  );
        else{
            return this->osg::TextureCubeMap::getTextureHeight(  );
        }
    }
    
    int default_getTextureHeight(  ) const  {
        return osg::TextureCubeMap::getTextureHeight( );
    }

    virtual ::GLenum getTextureTarget(  ) const  {
        if( bp::override func_getTextureTarget = this->get_override( "getTextureTarget" ) )
            return func_getTextureTarget(  );
        else{
            return this->osg::TextureCubeMap::getTextureTarget(  );
        }
    }
    
    ::GLenum default_getTextureTarget(  ) const  {
        return osg::TextureCubeMap::getTextureTarget( );
    }

    virtual int getTextureWidth(  ) const  {
        if( bp::override func_getTextureWidth = this->get_override( "getTextureWidth" ) )
            return func_getTextureWidth(  );
        else{
            return this->osg::TextureCubeMap::getTextureWidth(  );
        }
    }
    
    int default_getTextureWidth(  ) const  {
        return osg::TextureCubeMap::getTextureWidth( );
    }

    virtual ::osg::StateAttribute::Type getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->osg::TextureCubeMap::getType(  );
        }
    }
    
    ::osg::StateAttribute::Type default_getType(  ) const  {
        return osg::TextureCubeMap::getType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::TextureCubeMap::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::TextureCubeMap::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::TextureCubeMap::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::TextureCubeMap::libraryName( );
    }

    virtual void setImage( unsigned int face, ::osg::Image * image ) {
        if( bp::override func_setImage = this->get_override( "setImage" ) )
            func_setImage( face, boost::python::ptr(image) );
        else{
            this->osg::TextureCubeMap::setImage( face, boost::python::ptr(image) );
        }
    }
    
    void default_setImage( unsigned int face, ::osg::Image * image ) {
        osg::TextureCubeMap::setImage( face, boost::python::ptr(image) );
    }

    virtual ::osg::Texture * asTexture(  ) {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::Texture::asTexture(  );
        }
    }
    
    ::osg::Texture * default_asTexture(  ) {
        return osg::Texture::asTexture( );
    }

    virtual ::osg::Texture const * asTexture(  ) const  {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::Texture::asTexture(  );
        }
    }
    
    ::osg::Texture const * default_asTexture(  ) const  {
        return osg::Texture::asTexture( );
    }

    virtual bool checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        if( bp::override func_checkValidityOfAssociatedModes = this->get_override( "checkValidityOfAssociatedModes" ) )
            return func_checkValidityOfAssociatedModes( boost::ref(arg0) );
        else{
            return this->osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
        }
    }
    
    bool default_checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        return osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
    }

    virtual void compileGLObjects( ::osg::State & state ) const  {
        if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
            func_compileGLObjects( boost::ref(state) );
        else{
            this->osg::Texture::compileGLObjects( boost::ref(state) );
        }
    }
    
    void default_compileGLObjects( ::osg::State & state ) const  {
        osg::Texture::compileGLObjects( boost::ref(state) );
    }

    virtual unsigned int getMember(  ) const  {
        if( bp::override func_getMember = this->get_override( "getMember" ) )
            return func_getMember(  );
        else{
            return this->osg::StateAttribute::getMember(  );
        }
    }
    
    unsigned int default_getMember(  ) const  {
        return osg::StateAttribute::getMember( );
    }

    virtual bool getModeUsage( ::osg::StateAttribute::ModeUsage & usage ) const  {
        if( bp::override func_getModeUsage = this->get_override( "getModeUsage" ) )
            return func_getModeUsage( boost::ref(usage) );
        else{
            return this->osg::Texture::getModeUsage( boost::ref(usage) );
        }
    }
    
    bool default_getModeUsage( ::osg::StateAttribute::ModeUsage & usage ) const  {
        return osg::Texture::getModeUsage( boost::ref(usage) );
    }

    virtual bool isTextureAttribute(  ) const  {
        if( bp::override func_isTextureAttribute = this->get_override( "isTextureAttribute" ) )
            return func_isTextureAttribute(  );
        else{
            return this->osg::Texture::isTextureAttribute(  );
        }
    }
    
    bool default_isTextureAttribute(  ) const  {
        return osg::Texture::isTextureAttribute( );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Texture::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Texture::resizeGLObjectBuffers( maxSize );
    }

};

static void lowestCommonDenominator_fc169043dcc4cfa7e9b901e29cbfbf69( ::osg::TextureCubeMap::Extensions & inst, ::osg::TextureCubeMap::Extensions & rhs ){
    inst.lowestCommonDenominator(rhs);
}

void register_TextureCubeMap_class(){

    { //::osg::TextureCubeMap
        typedef bp::class_< TextureCubeMap_wrapper, bp::bases< osg::Texture >, osg::ref_ptr< ::osg::TextureCubeMap >, boost::noncopyable > TextureCubeMap_exposer_t;
        TextureCubeMap_exposer_t TextureCubeMap_exposer = TextureCubeMap_exposer_t( "TextureCubeMap", "\n TextureCubeMap state class which encapsulates OpenGL texture cubemap functionality.\n", bp::no_init );
        bp::scope TextureCubeMap_scope( TextureCubeMap_exposer );
        bp::enum_< osg::TextureCubeMap::Face>("Face")
            .value("POSITIVE_X", osg::TextureCubeMap::POSITIVE_X)
            .value("NEGATIVE_X", osg::TextureCubeMap::NEGATIVE_X)
            .value("POSITIVE_Y", osg::TextureCubeMap::POSITIVE_Y)
            .value("NEGATIVE_Y", osg::TextureCubeMap::NEGATIVE_Y)
            .value("POSITIVE_Z", osg::TextureCubeMap::POSITIVE_Z)
            .value("NEGATIVE_Z", osg::TextureCubeMap::NEGATIVE_Z)
            .export_values()
            ;
        { //::osg::TextureCubeMap::Extensions
            typedef bp::class_< osg::TextureCubeMap::Extensions, bp::bases< osg::Referenced >, osg::ref_ptr< ::osg::TextureCubeMap::Extensions > > Extensions_exposer_t;
            Extensions_exposer_t Extensions_exposer = Extensions_exposer_t( "Extensions", " Extensions class which encapsulates the querying of extensions and\n associated function pointers, and provides convenience wrappers to\n check for the extensions or use the associated functions.", bp::no_init );
            bp::scope Extensions_scope( Extensions_exposer );
            Extensions_exposer.def( bp::init< unsigned int >(( bp::arg("contextID") ), " Extensions class which encapsulates the querying of extensions and\n associated function pointers, and provides convenience wrappers to\n check for the extensions or use the associated functions.") );
            bp::implicitly_convertible< unsigned int, osg::TextureCubeMap::Extensions >();
            { //::osg::TextureCubeMap::Extensions::isCubeMapSupported
            
                typedef bool ( ::osg::TextureCubeMap::Extensions::*isCubeMapSupported_function_type )(  ) const;
                
                Extensions_exposer.def( 
                    "isCubeMapSupported"
                    , isCubeMapSupported_function_type( &::osg::TextureCubeMap::Extensions::isCubeMapSupported ) );
            
            }
            { //::osg::TextureCubeMap::Extensions::lowestCommonDenominator
            
                typedef void ( *lowestCommonDenominator_function_type )( ::osg::TextureCubeMap::Extensions &,::osg::TextureCubeMap::Extensions & );
                
                Extensions_exposer.def( 
                    "lowestCommonDenominator"
                    , lowestCommonDenominator_function_type( &lowestCommonDenominator_fc169043dcc4cfa7e9b901e29cbfbf69 )
                    , ( bp::arg("inst"), bp::arg("rhs") ) );
            
            }
            { //::osg::TextureCubeMap::Extensions::setCubeMapSupported
            
                typedef void ( ::osg::TextureCubeMap::Extensions::*setCubeMapSupported_function_type )( bool ) ;
                
                Extensions_exposer.def( 
                    "setCubeMapSupported"
                    , setCubeMapSupported_function_type( &::osg::TextureCubeMap::Extensions::setCubeMapSupported )
                    , ( bp::arg("flag") ) );
            
            }
            { //::osg::TextureCubeMap::Extensions::setupGLExtensions
            
                typedef void ( ::osg::TextureCubeMap::Extensions::*setupGLExtensions_function_type )( unsigned int ) ;
                
                Extensions_exposer.def( 
                    "setupGLExtensions"
                    , setupGLExtensions_function_type( &::osg::TextureCubeMap::Extensions::setupGLExtensions )
                    , ( bp::arg("contextID") ) );
            
            }
        }
        TextureCubeMap_exposer.def( bp::init< >("\n TextureCubeMap state class which encapsulates OpenGL texture cubemap functionality.\n") );
        { //::osg::TextureCubeMap::apply
        
            typedef void ( ::osg::TextureCubeMap::*apply_function_type )( ::osg::State & ) const;
            typedef void ( TextureCubeMap_wrapper::*default_apply_function_type )( ::osg::State & ) const;
            
            TextureCubeMap_exposer.def( 
                "apply"
                , apply_function_type(&::osg::TextureCubeMap::apply)
                , default_apply_function_type(&TextureCubeMap_wrapper::default_apply)
                , ( bp::arg("state") ) );
        
        }
        { //::osg::TextureCubeMap::className
        
            typedef char const * ( ::osg::TextureCubeMap::*className_function_type )(  ) const;
            typedef char const * ( TextureCubeMap_wrapper::*default_className_function_type )(  ) const;
            
            TextureCubeMap_exposer.def( 
                "className"
                , className_function_type(&::osg::TextureCubeMap::className)
                , default_className_function_type(&TextureCubeMap_wrapper::default_className) );
        
        }
        { //::osg::TextureCubeMap::clone
        
            typedef ::osg::Object * ( ::osg::TextureCubeMap::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( TextureCubeMap_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            TextureCubeMap_exposer.def( 
                "clone"
                , clone_function_type(&::osg::TextureCubeMap::clone)
                , default_clone_function_type(&TextureCubeMap_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::TextureCubeMap::cloneType
        
            typedef ::osg::Object * ( ::osg::TextureCubeMap::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( TextureCubeMap_wrapper::*default_cloneType_function_type )(  ) const;
            
            TextureCubeMap_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::TextureCubeMap::cloneType)
                , default_cloneType_function_type(&TextureCubeMap_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::TextureCubeMap::copyTexSubImageCubeMap
        
            typedef void ( ::osg::TextureCubeMap::*copyTexSubImageCubeMap_function_type )( ::osg::State &,int,int,int,int,int,int,int ) ;
            
            TextureCubeMap_exposer.def( 
                "copyTexSubImageCubeMap"
                , copyTexSubImageCubeMap_function_type( &::osg::TextureCubeMap::copyTexSubImageCubeMap )
                , ( bp::arg("state"), bp::arg("face"), bp::arg("xoffset"), bp::arg("yoffset"), bp::arg("x"), bp::arg("y"), bp::arg("width"), bp::arg("height") )
                , " Copies a two-dimensional texture subimage, as per\n glCopyTexSubImage2D. Updates a portion of an existing OpenGL\n texture object from the current OpenGL background framebuffer\n contents at position C{x,} C{y} with width C{width} and height\n C{height.} Loads framebuffer data into the texture using offsets\n C{xoffset} and C{yoffset.} C{width} and C{height} must be powers\n of two." );
        
        }
        { //::osg::TextureCubeMap::getExtensions
        
            typedef ::osg::TextureCubeMap::Extensions * ( *getExtensions_function_type )( unsigned int,bool );
            
            TextureCubeMap_exposer.def( 
                "getExtensions"
                , getExtensions_function_type( &::osg::TextureCubeMap::getExtensions )
                , ( bp::arg("contextID"), bp::arg("createIfNotInitalized") )
                , bp::return_internal_reference< >()
                , " Function to call to get the extension of a specified context.\n If the Extensions object for that context has not yet been created\n and the createIfNotInitalized flag been set to false then returns NULL.\n If createIfNotInitalized is true then the Extensions object is\n automatically created. However, in this case the extension object will\n only be created with the graphics context associated with ContextID." );
        
        }
        { //::osg::TextureCubeMap::getImage
        
            typedef ::osg::Image * ( ::osg::TextureCubeMap::*getImage_function_type )( unsigned int ) ;
            typedef ::osg::Image * ( TextureCubeMap_wrapper::*default_getImage_function_type )( unsigned int ) ;
            
            TextureCubeMap_exposer.def( 
                "getImage"
                , getImage_function_type(&::osg::TextureCubeMap::getImage)
                , default_getImage_function_type(&TextureCubeMap_wrapper::default_getImage)
                , ( bp::arg("face") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::TextureCubeMap::getImage
        
            typedef ::osg::Image const * ( ::osg::TextureCubeMap::*getImage_function_type )( unsigned int ) const;
            typedef ::osg::Image const * ( TextureCubeMap_wrapper::*default_getImage_function_type )( unsigned int ) const;
            
            TextureCubeMap_exposer.def( 
                "getImage"
                , getImage_function_type(&::osg::TextureCubeMap::getImage)
                , default_getImage_function_type(&TextureCubeMap_wrapper::default_getImage)
                , ( bp::arg("face") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::TextureCubeMap::getModifiedCount
        
            typedef unsigned int & ( ::osg::TextureCubeMap::*getModifiedCount_function_type )( unsigned int,unsigned int ) const;
            
            TextureCubeMap_exposer.def( 
                "getModifiedCount"
                , getModifiedCount_function_type( &::osg::TextureCubeMap::getModifiedCount )
                , ( bp::arg("face"), bp::arg("contextID") )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::osg::TextureCubeMap::getNumImages
        
            typedef unsigned int ( ::osg::TextureCubeMap::*getNumImages_function_type )(  ) const;
            typedef unsigned int ( TextureCubeMap_wrapper::*default_getNumImages_function_type )(  ) const;
            
            TextureCubeMap_exposer.def( 
                "getNumImages"
                , getNumImages_function_type(&::osg::TextureCubeMap::getNumImages)
                , default_getNumImages_function_type(&TextureCubeMap_wrapper::default_getNumImages) );
        
        }
        { //::osg::TextureCubeMap::getNumMipmapLevels
        
            typedef unsigned int ( ::osg::TextureCubeMap::*getNumMipmapLevels_function_type )(  ) const;
            
            TextureCubeMap_exposer.def( 
                "getNumMipmapLevels"
                , getNumMipmapLevels_function_type( &::osg::TextureCubeMap::getNumMipmapLevels )
                , " Get the number of mip map levels the the texture has been created with." );
        
        }
        { //::osg::TextureCubeMap::getSubloadCallback
        
            typedef ::osg::TextureCubeMap::SubloadCallback * ( ::osg::TextureCubeMap::*getSubloadCallback_function_type )(  ) ;
            
            TextureCubeMap_exposer.def( 
                "getSubloadCallback"
                , getSubloadCallback_function_type( &::osg::TextureCubeMap::getSubloadCallback )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::TextureCubeMap::getSubloadCallback
        
            typedef ::osg::TextureCubeMap::SubloadCallback const * ( ::osg::TextureCubeMap::*getSubloadCallback_function_type )(  ) const;
            
            TextureCubeMap_exposer.def( 
                "getSubloadCallback"
                , getSubloadCallback_function_type( &::osg::TextureCubeMap::getSubloadCallback )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::TextureCubeMap::getTextureDepth
        
            typedef int ( ::osg::TextureCubeMap::*getTextureDepth_function_type )(  ) const;
            typedef int ( TextureCubeMap_wrapper::*default_getTextureDepth_function_type )(  ) const;
            
            TextureCubeMap_exposer.def( 
                "getTextureDepth"
                , getTextureDepth_function_type(&::osg::TextureCubeMap::getTextureDepth)
                , default_getTextureDepth_function_type(&TextureCubeMap_wrapper::default_getTextureDepth) );
        
        }
        { //::osg::TextureCubeMap::getTextureHeight
        
            typedef int ( ::osg::TextureCubeMap::*getTextureHeight_function_type )(  ) const;
            typedef int ( TextureCubeMap_wrapper::*default_getTextureHeight_function_type )(  ) const;
            
            TextureCubeMap_exposer.def( 
                "getTextureHeight"
                , getTextureHeight_function_type(&::osg::TextureCubeMap::getTextureHeight)
                , default_getTextureHeight_function_type(&TextureCubeMap_wrapper::default_getTextureHeight) );
        
        }
        { //::osg::TextureCubeMap::getTextureTarget
        
            typedef ::GLenum ( ::osg::TextureCubeMap::*getTextureTarget_function_type )(  ) const;
            typedef ::GLenum ( TextureCubeMap_wrapper::*default_getTextureTarget_function_type )(  ) const;
            
            TextureCubeMap_exposer.def( 
                "getTextureTarget"
                , getTextureTarget_function_type(&::osg::TextureCubeMap::getTextureTarget)
                , default_getTextureTarget_function_type(&TextureCubeMap_wrapper::default_getTextureTarget) );
        
        }
        { //::osg::TextureCubeMap::getTextureWidth
        
            typedef int ( ::osg::TextureCubeMap::*getTextureWidth_function_type )(  ) const;
            typedef int ( TextureCubeMap_wrapper::*default_getTextureWidth_function_type )(  ) const;
            
            TextureCubeMap_exposer.def( 
                "getTextureWidth"
                , getTextureWidth_function_type(&::osg::TextureCubeMap::getTextureWidth)
                , default_getTextureWidth_function_type(&TextureCubeMap_wrapper::default_getTextureWidth) );
        
        }
        { //::osg::TextureCubeMap::getType
        
            typedef ::osg::StateAttribute::Type ( ::osg::TextureCubeMap::*getType_function_type )(  ) const;
            typedef ::osg::StateAttribute::Type ( TextureCubeMap_wrapper::*default_getType_function_type )(  ) const;
            
            TextureCubeMap_exposer.def( 
                "getType"
                , getType_function_type(&::osg::TextureCubeMap::getType)
                , default_getType_function_type(&TextureCubeMap_wrapper::default_getType) );
        
        }
        { //::osg::TextureCubeMap::isSameKindAs
        
            typedef bool ( ::osg::TextureCubeMap::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( TextureCubeMap_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            TextureCubeMap_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::TextureCubeMap::isSameKindAs)
                , default_isSameKindAs_function_type(&TextureCubeMap_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::TextureCubeMap::libraryName
        
            typedef char const * ( ::osg::TextureCubeMap::*libraryName_function_type )(  ) const;
            typedef char const * ( TextureCubeMap_wrapper::*default_libraryName_function_type )(  ) const;
            
            TextureCubeMap_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::TextureCubeMap::libraryName)
                , default_libraryName_function_type(&TextureCubeMap_wrapper::default_libraryName) );
        
        }
        { //::osg::TextureCubeMap::setExtensions
        
            typedef void ( *setExtensions_function_type )( unsigned int,::osg::TextureCubeMap::Extensions * );
            
            TextureCubeMap_exposer.def( 
                "setExtensions"
                , setExtensions_function_type( &::osg::TextureCubeMap::setExtensions )
                , ( bp::arg("contextID"), bp::arg("extensions") )
                , " The setExtensions method allows users to override the extensions across graphics contexts.\n Typically used when you have different extensions supported across graphics pipes\n but need to ensure that they all use the same low common denominator extensions." );
        
        }
        { //::osg::TextureCubeMap::setImage
        
            typedef void ( ::osg::TextureCubeMap::*setImage_function_type )( unsigned int,::osg::Image * ) ;
            typedef void ( TextureCubeMap_wrapper::*default_setImage_function_type )( unsigned int,::osg::Image * ) ;
            
            TextureCubeMap_exposer.def( 
                "setImage"
                , setImage_function_type(&::osg::TextureCubeMap::setImage)
                , default_setImage_function_type(&TextureCubeMap_wrapper::default_setImage)
                , ( bp::arg("face"), bp::arg("image") ) );
        
        }
        { //::osg::TextureCubeMap::setNumMipmapLevels
        
            typedef void ( ::osg::TextureCubeMap::*setNumMipmapLevels_function_type )( unsigned int ) const;
            
            TextureCubeMap_exposer.def( 
                "setNumMipmapLevels"
                , setNumMipmapLevels_function_type( &::osg::TextureCubeMap::setNumMipmapLevels )
                , ( bp::arg("num") )
                , " Set the number of mip map levels the the texture has been created with.\n Should only be called within an osg::Texuture::apply() and custom OpenGL texture load." );
        
        }
        { //::osg::TextureCubeMap::setSubloadCallback
        
            typedef void ( ::osg::TextureCubeMap::*setSubloadCallback_function_type )( ::osg::TextureCubeMap::SubloadCallback * ) ;
            
            TextureCubeMap_exposer.def( 
                "setSubloadCallback"
                , setSubloadCallback_function_type( &::osg::TextureCubeMap::setSubloadCallback )
                , ( bp::arg("cb") ) );
        
        }
        { //::osg::TextureCubeMap::setTextureHeight
        
            typedef void ( ::osg::TextureCubeMap::*setTextureHeight_function_type )( int ) ;
            
            TextureCubeMap_exposer.def( 
                "setTextureHeight"
                , setTextureHeight_function_type( &::osg::TextureCubeMap::setTextureHeight )
                , ( bp::arg("height") ) );
        
        }
        { //::osg::TextureCubeMap::setTextureSize
        
            typedef void ( ::osg::TextureCubeMap::*setTextureSize_function_type )( int,int ) const;
            
            TextureCubeMap_exposer.def( 
                "setTextureSize"
                , setTextureSize_function_type( &::osg::TextureCubeMap::setTextureSize )
                , ( bp::arg("width"), bp::arg("height") )
                , " Set the texture width and height. If width or height are zero then\n the respective size value is calculated from the source image sizes." );
        
        }
        { //::osg::TextureCubeMap::setTextureWidth
        
            typedef void ( ::osg::TextureCubeMap::*setTextureWidth_function_type )( int ) ;
            
            TextureCubeMap_exposer.def( 
                "setTextureWidth"
                , setTextureWidth_function_type( &::osg::TextureCubeMap::setTextureWidth )
                , ( bp::arg("width") ) );
        
        }
        { //::osg::Texture::asTexture
        
            typedef ::osg::Texture * ( ::osg::Texture::*asTexture_function_type )(  ) ;
            typedef ::osg::Texture * ( TextureCubeMap_wrapper::*default_asTexture_function_type )(  ) ;
            
            TextureCubeMap_exposer.def( 
                "asTexture"
                , asTexture_function_type(&::osg::Texture::asTexture)
                , default_asTexture_function_type(&TextureCubeMap_wrapper::default_asTexture)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Texture::asTexture
        
            typedef ::osg::Texture const * ( ::osg::Texture::*asTexture_function_type )(  ) const;
            typedef ::osg::Texture const * ( TextureCubeMap_wrapper::*default_asTexture_function_type )(  ) const;
            
            TextureCubeMap_exposer.def( 
                "asTexture"
                , asTexture_function_type(&::osg::Texture::asTexture)
                , default_asTexture_function_type(&TextureCubeMap_wrapper::default_asTexture)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateAttribute::checkValidityOfAssociatedModes
        
            typedef bool ( ::osg::StateAttribute::*checkValidityOfAssociatedModes_function_type )( ::osg::State & ) const;
            typedef bool ( TextureCubeMap_wrapper::*default_checkValidityOfAssociatedModes_function_type )( ::osg::State & ) const;
            
            TextureCubeMap_exposer.def( 
                "checkValidityOfAssociatedModes"
                , checkValidityOfAssociatedModes_function_type(&::osg::StateAttribute::checkValidityOfAssociatedModes)
                , default_checkValidityOfAssociatedModes_function_type(&TextureCubeMap_wrapper::default_checkValidityOfAssociatedModes)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Texture::compileGLObjects
        
            typedef void ( ::osg::Texture::*compileGLObjects_function_type )( ::osg::State & ) const;
            typedef void ( TextureCubeMap_wrapper::*default_compileGLObjects_function_type )( ::osg::State & ) const;
            
            TextureCubeMap_exposer.def( 
                "compileGLObjects"
                , compileGLObjects_function_type(&::osg::Texture::compileGLObjects)
                , default_compileGLObjects_function_type(&TextureCubeMap_wrapper::default_compileGLObjects)
                , ( bp::arg("state") ) );
        
        }
        { //::osg::StateAttribute::getMember
        
            typedef unsigned int ( ::osg::StateAttribute::*getMember_function_type )(  ) const;
            typedef unsigned int ( TextureCubeMap_wrapper::*default_getMember_function_type )(  ) const;
            
            TextureCubeMap_exposer.def( 
                "getMember"
                , getMember_function_type(&::osg::StateAttribute::getMember)
                , default_getMember_function_type(&TextureCubeMap_wrapper::default_getMember) );
        
        }
        { //::osg::Texture::getModeUsage
        
            typedef bool ( ::osg::Texture::*getModeUsage_function_type )( ::osg::StateAttribute::ModeUsage & ) const;
            typedef bool ( TextureCubeMap_wrapper::*default_getModeUsage_function_type )( ::osg::StateAttribute::ModeUsage & ) const;
            
            TextureCubeMap_exposer.def( 
                "getModeUsage"
                , getModeUsage_function_type(&::osg::Texture::getModeUsage)
                , default_getModeUsage_function_type(&TextureCubeMap_wrapper::default_getModeUsage)
                , ( bp::arg("usage") ) );
        
        }
        { //::osg::Texture::isTextureAttribute
        
            typedef bool ( ::osg::Texture::*isTextureAttribute_function_type )(  ) const;
            typedef bool ( TextureCubeMap_wrapper::*default_isTextureAttribute_function_type )(  ) const;
            
            TextureCubeMap_exposer.def( 
                "isTextureAttribute"
                , isTextureAttribute_function_type(&::osg::Texture::isTextureAttribute)
                , default_isTextureAttribute_function_type(&TextureCubeMap_wrapper::default_isTextureAttribute) );
        
        }
        { //::osg::Texture::resizeGLObjectBuffers
        
            typedef void ( ::osg::Texture::*resizeGLObjectBuffers_function_type )( unsigned int ) ;
            typedef void ( TextureCubeMap_wrapper::*default_resizeGLObjectBuffers_function_type )( unsigned int ) ;
            
            TextureCubeMap_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::Texture::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&TextureCubeMap_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
        TextureCubeMap_exposer.staticmethod( "getExtensions" );
        TextureCubeMap_exposer.staticmethod( "setExtensions" );
    }

}
