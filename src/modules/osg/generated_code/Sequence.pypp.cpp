// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "Sequence.pypp.hpp"

namespace bp = boost::python;

struct Sequence_wrapper : osg::Sequence, bp::wrapper< osg::Sequence > {

    Sequence_wrapper( )
    : osg::Sequence( )
      , bp::wrapper< osg::Sequence >(){
        // null constructor
    
    }

    virtual void accept( ::osg::NodeVisitor & nv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(nv) );
        else{
            this->osg::Sequence::accept( boost::ref(nv) );
        }
    }
    
    void default_accept( ::osg::NodeVisitor & nv ) {
        osg::Sequence::accept( boost::ref(nv) );
    }

    virtual bool addChild( ::osg::Node * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            return func_addChild( boost::python::ptr(child) );
        else{
            return this->osg::Sequence::addChild( boost::python::ptr(child) );
        }
    }
    
    bool default_addChild( ::osg::Node * child ) {
        return osg::Sequence::addChild( boost::python::ptr(child) );
    }

    virtual bool addChild( ::osg::Node * child, double t ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            return func_addChild( boost::python::ptr(child), t );
        else{
            return this->osg::Sequence::addChild( boost::python::ptr(child), t );
        }
    }
    
    bool default_addChild( ::osg::Node * child, double t ) {
        return osg::Sequence::addChild( boost::python::ptr(child), t );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::Sequence::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::Sequence::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::Sequence::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::Sequence::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::Sequence::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::Sequence::cloneType( );
    }

    virtual bool insertChild( unsigned int index, ::osg::Node * child ) {
        if( bp::override func_insertChild = this->get_override( "insertChild" ) )
            return func_insertChild( index, boost::python::ptr(child) );
        else{
            return this->osg::Sequence::insertChild( index, boost::python::ptr(child) );
        }
    }
    
    bool default_insertChild( unsigned int index, ::osg::Node * child ) {
        return osg::Sequence::insertChild( index, boost::python::ptr(child) );
    }

    virtual bool insertChild( unsigned int index, ::osg::Node * child, double t ) {
        if( bp::override func_insertChild = this->get_override( "insertChild" ) )
            return func_insertChild( index, boost::python::ptr(child), t );
        else{
            return this->osg::Sequence::insertChild( index, boost::python::ptr(child), t );
        }
    }
    
    bool default_insertChild( unsigned int index, ::osg::Node * child, double t ) {
        return osg::Sequence::insertChild( index, boost::python::ptr(child), t );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::Sequence::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::Sequence::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::Sequence::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::Sequence::libraryName( );
    }

    virtual bool removeChild( ::osg::Node * child ) {
        if( bp::override func_removeChild = this->get_override( "removeChild" ) )
            return func_removeChild( boost::python::ptr(child) );
        else{
            return this->osg::Sequence::removeChild( boost::python::ptr(child) );
        }
    }
    
    bool default_removeChild( ::osg::Node * child ) {
        return osg::Sequence::removeChild( boost::python::ptr(child) );
    }

    virtual bool removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        if( bp::override func_removeChildren = this->get_override( "removeChildren" ) )
            return func_removeChildren( pos, numChildrenToRemove );
        else{
            return this->osg::Sequence::removeChildren( pos, numChildrenToRemove );
        }
    }
    
    bool default_removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        return osg::Sequence::removeChildren( pos, numChildrenToRemove );
    }

    virtual void traverse( ::osg::NodeVisitor & nv ) {
        if( bp::override func_traverse = this->get_override( "traverse" ) )
            func_traverse( boost::ref(nv) );
        else{
            this->osg::Sequence::traverse( boost::ref(nv) );
        }
    }
    
    void default_traverse( ::osg::NodeVisitor & nv ) {
        osg::Sequence::traverse( boost::ref(nv) );
    }

    virtual ::osg::Camera * asCamera(  ) {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera * default_asCamera(  ) {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Camera const * asCamera(  ) const  {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera const * default_asCamera(  ) const  {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Geode * asGeode(  ) {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode * default_asGeode(  ) {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Geode const * asGeode(  ) const  {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode const * default_asGeode(  ) const  {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Group * asGroup(  ) {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group * default_asGroup(  ) {
        return osg::Group::asGroup( );
    }

    virtual ::osg::Group const * asGroup(  ) const  {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group const * default_asGroup(  ) const  {
        return osg::Group::asGroup( );
    }

    virtual ::osg::Switch * asSwitch(  ) {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch * default_asSwitch(  ) {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Switch const * asSwitch(  ) const  {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch const * default_asSwitch(  ) const  {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Transform * asTransform(  ) {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Node::asTransform(  );
        }
    }
    
    ::osg::Transform * default_asTransform(  ) {
        return osg::Node::asTransform( );
    }

    virtual ::osg::Transform const * asTransform(  ) const  {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Node::asTransform(  );
        }
    }
    
    ::osg::Transform const * default_asTransform(  ) const  {
        return osg::Node::asTransform( );
    }

    virtual void ascend( ::osg::NodeVisitor & nv ) {
        if( bp::override func_ascend = this->get_override( "ascend" ) )
            func_ascend( boost::ref(nv) );
        else{
            this->osg::Node::ascend( boost::ref(nv) );
        }
    }
    
    void default_ascend( ::osg::NodeVisitor & nv ) {
        osg::Node::ascend( boost::ref(nv) );
    }

    virtual ::osg::BoundingSphere computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osg::Group::computeBound(  );
        }
    }
    
    ::osg::BoundingSphere default_computeBound(  ) const  {
        return osg::Group::computeBound( );
    }

    virtual bool replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        if( bp::override func_replaceChild = this->get_override( "replaceChild" ) )
            return func_replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        else{
            return this->osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        }
    }
    
    bool default_replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        return osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Group::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Group::resizeGLObjectBuffers( maxSize );
    }

    virtual bool setChild( unsigned int i, ::osg::Node * node ) {
        if( bp::override func_setChild = this->get_override( "setChild" ) )
            return func_setChild( i, boost::python::ptr(node) );
        else{
            return this->osg::Group::setChild( i, boost::python::ptr(node) );
        }
    }
    
    bool default_setChild( unsigned int i, ::osg::Node * node ) {
        return osg::Group::setChild( i, boost::python::ptr(node) );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Group::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Group::setThreadSafeRefUnref( threadSafe );
    }

};

void register_Sequence_class(){

    { //::osg::Sequence
        typedef bp::class_< Sequence_wrapper, bp::bases< osg::Group >, osg::ref_ptr< ::osg::Sequence >, boost::noncopyable > Sequence_exposer_t;
        Sequence_exposer_t Sequence_exposer = Sequence_exposer_t( "Sequence", "\n Sequence is a Group node which allows automatic, time based\nswitching between children.\n", bp::no_init );
        bp::scope Sequence_scope( Sequence_exposer );
        bp::enum_< osg::Sequence::LoopMode>("LoopMode")
            .value("LOOP", osg::Sequence::LOOP)
            .value("SWING", osg::Sequence::SWING)
            .export_values()
            ;
        bp::enum_< osg::Sequence::SequenceMode>("SequenceMode")
            .value("START", osg::Sequence::START)
            .value("STOP", osg::Sequence::STOP)
            .value("PAUSE", osg::Sequence::PAUSE)
            .value("RESUME", osg::Sequence::RESUME)
            .export_values()
            ;
        Sequence_exposer.def( bp::init< >("\n Sequence is a Group node which allows automatic, time based\nswitching between children.\n") );
        { //::osg::Sequence::accept
        
            typedef void ( ::osg::Sequence::*accept_function_type )( ::osg::NodeVisitor & ) ;
            typedef void ( Sequence_wrapper::*default_accept_function_type )( ::osg::NodeVisitor & ) ;
            
            Sequence_exposer.def( 
                "accept"
                , accept_function_type(&::osg::Sequence::accept)
                , default_accept_function_type(&Sequence_wrapper::default_accept)
                , ( bp::arg("nv") ) );
        
        }
        { //::osg::Sequence::addChild
        
            typedef bool ( ::osg::Sequence::*addChild_function_type )( ::osg::Node * ) ;
            typedef bool ( Sequence_wrapper::*default_addChild_function_type )( ::osg::Node * ) ;
            
            Sequence_exposer.def( 
                "addChild"
                , addChild_function_type(&::osg::Sequence::addChild)
                , default_addChild_function_type(&Sequence_wrapper::default_addChild)
                , ( bp::arg("child") ) );
        
        }
        { //::osg::Sequence::addChild
        
            typedef bool ( ::osg::Sequence::*addChild_function_type )( ::osg::Node *,double ) ;
            typedef bool ( Sequence_wrapper::*default_addChild_function_type )( ::osg::Node *,double ) ;
            
            Sequence_exposer.def( 
                "addChild"
                , addChild_function_type(&::osg::Sequence::addChild)
                , default_addChild_function_type(&Sequence_wrapper::default_addChild)
                , ( bp::arg("child"), bp::arg("t") ) );
        
        }
        { //::osg::Sequence::className
        
            typedef char const * ( ::osg::Sequence::*className_function_type )(  ) const;
            typedef char const * ( Sequence_wrapper::*default_className_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "className"
                , className_function_type(&::osg::Sequence::className)
                , default_className_function_type(&Sequence_wrapper::default_className) );
        
        }
        { //::osg::Sequence::clone
        
            typedef ::osg::Object * ( ::osg::Sequence::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Sequence_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Sequence_exposer.def( 
                "clone"
                , clone_function_type(&::osg::Sequence::clone)
                , default_clone_function_type(&Sequence_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Sequence::cloneType
        
            typedef ::osg::Object * ( ::osg::Sequence::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Sequence_wrapper::*default_cloneType_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::Sequence::cloneType)
                , default_cloneType_function_type(&Sequence_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Sequence::getBegin
        
            typedef int ( ::osg::Sequence::*getBegin_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "getBegin"
                , getBegin_function_type( &::osg::Sequence::getBegin )
                , " Get interval beginning." );
        
        }
        { //::osg::Sequence::getClearOnStop
        
            typedef bool ( ::osg::Sequence::*getClearOnStop_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "getClearOnStop"
                , getClearOnStop_function_type( &::osg::Sequence::getClearOnStop )
                , " Get whether to show no child nodes after stopping" );
        
        }
        { //::osg::Sequence::getDefaultTime
        
            typedef double ( ::osg::Sequence::*getDefaultTime_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "getDefaultTime"
                , getDefaultTime_function_type( &::osg::Sequence::getDefaultTime )
                , " Get default time in seconds for new child." );
        
        }
        { //::osg::Sequence::getDuration
        
            typedef void ( ::osg::Sequence::*getDuration_function_type )( float &,int & ) const;
            
            Sequence_exposer.def( 
                "getDuration"
                , getDuration_function_type( &::osg::Sequence::getDuration )
                , ( bp::arg("speed"), bp::arg("nreps") )
                , " Get duration & number of repeats." );
        
        }
        { //::osg::Sequence::getEnd
        
            typedef int ( ::osg::Sequence::*getEnd_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "getEnd"
                , getEnd_function_type( &::osg::Sequence::getEnd )
                , " Get interval ending." );
        
        }
        { //::osg::Sequence::getInterval
        
            typedef void ( ::osg::Sequence::*getInterval_function_type )( ::osg::Sequence::LoopMode &,int &,int & ) const;
            
            Sequence_exposer.def( 
                "getInterval"
                , getInterval_function_type( &::osg::Sequence::getInterval )
                , ( bp::arg("mode"), bp::arg("begin"), bp::arg("end") )
                , " Get sequence mode & interval." );
        
        }
        { //::osg::Sequence::getLastFrameTime
        
            typedef double ( ::osg::Sequence::*getLastFrameTime_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "getLastFrameTime"
                , getLastFrameTime_function_type( &::osg::Sequence::getLastFrameTime )
                , " Get last frame time in seconds" );
        
        }
        { //::osg::Sequence::getLoopMode
        
            typedef ::osg::Sequence::LoopMode ( ::osg::Sequence::*getLoopMode_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "getLoopMode"
                , getLoopMode_function_type( &::osg::Sequence::getLoopMode )
                , " Get sequence mode." );
        
        }
        { //::osg::Sequence::getMode
        
            typedef ::osg::Sequence::SequenceMode ( ::osg::Sequence::*getMode_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "getMode"
                , getMode_function_type( &::osg::Sequence::getMode )
                , " Get sequence mode." );
        
        }
        { //::osg::Sequence::getNumFrames
        
            typedef unsigned int ( ::osg::Sequence::*getNumFrames_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "getNumFrames"
                , getNumFrames_function_type( &::osg::Sequence::getNumFrames )
                , " Get number of frames" );
        
        }
        { //::osg::Sequence::getNumRepeats
        
            typedef int ( ::osg::Sequence::*getNumRepeats_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "getNumRepeats"
                , getNumRepeats_function_type( &::osg::Sequence::getNumRepeats )
                , " Get number of repeats." );
        
        }
        { //::osg::Sequence::getSpeed
        
            typedef float ( ::osg::Sequence::*getSpeed_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "getSpeed"
                , getSpeed_function_type( &::osg::Sequence::getSpeed )
                , " Get speed." );
        
        }
        { //::osg::Sequence::getSync
        
            typedef bool ( ::osg::Sequence::*getSync_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "getSync"
                , getSync_function_type( &::osg::Sequence::getSync )
                , " Get sync value" );
        
        }
        { //::osg::Sequence::getTime
        
            typedef double ( ::osg::Sequence::*getTime_function_type )( unsigned int ) const;
            
            Sequence_exposer.def( 
                "getTime"
                , getTime_function_type( &::osg::Sequence::getTime )
                , ( bp::arg("frame") )
                , " Get time for child." );
        
        }
        { //::osg::Sequence::getTimeList
        
            typedef ::std::vector< double > const & ( ::osg::Sequence::*getTimeList_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "getTimeList"
                , getTimeList_function_type( &::osg::Sequence::getTimeList )
                , bp::return_internal_reference< >()
                , " Get the time list for children." );
        
        }
        { //::osg::Sequence::getValue
        
            typedef int ( ::osg::Sequence::*getValue_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "getValue"
                , getValue_function_type( &::osg::Sequence::getValue ) );
        
        }
        { //::osg::Sequence::insertChild
        
            typedef bool ( ::osg::Sequence::*insertChild_function_type )( unsigned int,::osg::Node * ) ;
            typedef bool ( Sequence_wrapper::*default_insertChild_function_type )( unsigned int,::osg::Node * ) ;
            
            Sequence_exposer.def( 
                "insertChild"
                , insertChild_function_type(&::osg::Sequence::insertChild)
                , default_insertChild_function_type(&Sequence_wrapper::default_insertChild)
                , ( bp::arg("index"), bp::arg("child") ) );
        
        }
        { //::osg::Sequence::insertChild
        
            typedef bool ( ::osg::Sequence::*insertChild_function_type )( unsigned int,::osg::Node *,double ) ;
            typedef bool ( Sequence_wrapper::*default_insertChild_function_type )( unsigned int,::osg::Node *,double ) ;
            
            Sequence_exposer.def( 
                "insertChild"
                , insertChild_function_type(&::osg::Sequence::insertChild)
                , default_insertChild_function_type(&Sequence_wrapper::default_insertChild)
                , ( bp::arg("index"), bp::arg("child"), bp::arg("t") ) );
        
        }
        { //::osg::Sequence::isSameKindAs
        
            typedef bool ( ::osg::Sequence::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Sequence_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Sequence_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::Sequence::isSameKindAs)
                , default_isSameKindAs_function_type(&Sequence_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::Sequence::libraryName
        
            typedef char const * ( ::osg::Sequence::*libraryName_function_type )(  ) const;
            typedef char const * ( Sequence_wrapper::*default_libraryName_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::Sequence::libraryName)
                , default_libraryName_function_type(&Sequence_wrapper::default_libraryName) );
        
        }
        { //::osg::Sequence::removeChild
        
            typedef bool ( ::osg::Sequence::*removeChild_function_type )( ::osg::Node * ) ;
            typedef bool ( Sequence_wrapper::*default_removeChild_function_type )( ::osg::Node * ) ;
            
            Sequence_exposer.def( 
                "removeChild"
                , removeChild_function_type(&::osg::Sequence::removeChild)
                , default_removeChild_function_type(&Sequence_wrapper::default_removeChild)
                , ( bp::arg("child") ) );
        
        }
        { //::osg::Sequence::removeChildren
        
            typedef bool ( ::osg::Sequence::*removeChildren_function_type )( unsigned int,unsigned int ) ;
            typedef bool ( Sequence_wrapper::*default_removeChildren_function_type )( unsigned int,unsigned int ) ;
            
            Sequence_exposer.def( 
                "removeChildren"
                , removeChildren_function_type(&::osg::Sequence::removeChildren)
                , default_removeChildren_function_type(&Sequence_wrapper::default_removeChildren)
                , ( bp::arg("pos"), bp::arg("numChildrenToRemove") ) );
        
        }
        { //::osg::Sequence::setBegin
        
            typedef void ( ::osg::Sequence::*setBegin_function_type )( int ) ;
            
            Sequence_exposer.def( 
                "setBegin"
                , setBegin_function_type( &::osg::Sequence::setBegin )
                , ( bp::arg("begin") )
                , " Set interval beginning." );
        
        }
        { //::osg::Sequence::setClearOnStop
        
            typedef void ( ::osg::Sequence::*setClearOnStop_function_type )( bool ) ;
            
            Sequence_exposer.def( 
                "setClearOnStop"
                , setClearOnStop_function_type( &::osg::Sequence::setClearOnStop )
                , ( bp::arg("clearOnStop") )
                , " If true, show no child nodes after stopping" );
        
        }
        { //::osg::Sequence::setDefaultTime
        
            typedef void ( ::osg::Sequence::*setDefaultTime_function_type )( double ) ;
            
            Sequence_exposer.def( 
                "setDefaultTime"
                , setDefaultTime_function_type( &::osg::Sequence::setDefaultTime )
                , ( bp::arg("t") )
                , " Set default time in seconds for new child.\n            if t<0, t=0" );
        
        }
        { //::osg::Sequence::setDuration
        
            typedef void ( ::osg::Sequence::*setDuration_function_type )( float,int ) ;
            
            Sequence_exposer.def( 
                "setDuration"
                , setDuration_function_type( &::osg::Sequence::setDuration )
                , ( bp::arg("speed"), bp::arg("nreps")=(int)(-0x00000000000000001) )
                , " Set duration: speed-up & number of repeats" );
        
        }
        { //::osg::Sequence::setEnd
        
            typedef void ( ::osg::Sequence::*setEnd_function_type )( int ) ;
            
            Sequence_exposer.def( 
                "setEnd"
                , setEnd_function_type( &::osg::Sequence::setEnd )
                , ( bp::arg("end") )
                , " Set interval ending." );
        
        }
        { //::osg::Sequence::setInterval
        
            typedef void ( ::osg::Sequence::*setInterval_function_type )( ::osg::Sequence::LoopMode,int,int ) ;
            
            Sequence_exposer.def( 
                "setInterval"
                , setInterval_function_type( &::osg::Sequence::setInterval )
                , ( bp::arg("mode"), bp::arg("begin"), bp::arg("end") )
                , " Set sequence mode & interval (range of children to be displayed)." );
        
        }
        { //::osg::Sequence::setLastFrameTime
        
            typedef void ( ::osg::Sequence::*setLastFrameTime_function_type )( double ) ;
            
            Sequence_exposer.def( 
                "setLastFrameTime"
                , setLastFrameTime_function_type( &::osg::Sequence::setLastFrameTime )
                , ( bp::arg("t") )
                , " Set time of last frame of last loop, in seconds.\n            if t<= 0, then ignored" );
        
        }
        { //::osg::Sequence::setLoopMode
        
            typedef void ( ::osg::Sequence::*setLoopMode_function_type )( ::osg::Sequence::LoopMode ) ;
            
            Sequence_exposer.def( 
                "setLoopMode"
                , setLoopMode_function_type( &::osg::Sequence::setLoopMode )
                , ( bp::arg("mode") )
                , " Set sequence mode." );
        
        }
        { //::osg::Sequence::setMode
        
            typedef void ( ::osg::Sequence::*setMode_function_type )( ::osg::Sequence::SequenceMode ) ;
            
            Sequence_exposer.def( 
                "setMode"
                , setMode_function_type( &::osg::Sequence::setMode )
                , ( bp::arg("mode") )
                , " Set sequence mode. Start/stop & pause/resume." );
        
        }
        { //::osg::Sequence::setNumRepeats
        
            typedef void ( ::osg::Sequence::*setNumRepeats_function_type )( int ) ;
            
            Sequence_exposer.def( 
                "setNumRepeats"
                , setNumRepeats_function_type( &::osg::Sequence::setNumRepeats )
                , ( bp::arg("nreps") )
                , " Set number of repeats." );
        
        }
        { //::osg::Sequence::setSpeed
        
            typedef void ( ::osg::Sequence::*setSpeed_function_type )( float ) ;
            
            Sequence_exposer.def( 
                "setSpeed"
                , setSpeed_function_type( &::osg::Sequence::setSpeed )
                , ( bp::arg("speed") )
                , " Set speed." );
        
        }
        { //::osg::Sequence::setSync
        
            typedef void ( ::osg::Sequence::*setSync_function_type )( bool ) ;
            
            Sequence_exposer.def( 
                "setSync"
                , setSync_function_type( &::osg::Sequence::setSync )
                , ( bp::arg("sync") )
                , " If false (default), frames will not be syncd to frameTime.  If\n            true, frames will be syncd to frameTime." );
        
        }
        { //::osg::Sequence::setTime
        
            typedef void ( ::osg::Sequence::*setTime_function_type )( unsigned int,double ) ;
            
            Sequence_exposer.def( 
                "setTime"
                , setTime_function_type( &::osg::Sequence::setTime )
                , ( bp::arg("frame"), bp::arg("t") )
                , " Set time in seconds for child." );
        
        }
        { //::osg::Sequence::setTimeList
        
            typedef void ( ::osg::Sequence::*setTimeList_function_type )( ::std::vector< double > const & ) ;
            
            Sequence_exposer.def( 
                "setTimeList"
                , setTimeList_function_type( &::osg::Sequence::setTimeList )
                , ( bp::arg("timeList") )
                , " Set the time list for children." );
        
        }
        { //::osg::Sequence::setValue
        
            typedef void ( ::osg::Sequence::*setValue_function_type )( int ) ;
            
            Sequence_exposer.def( 
                "setValue"
                , setValue_function_type( &::osg::Sequence::setValue )
                , ( bp::arg("value") )
                , " value is which child node is to be displayed" );
        
        }
        { //::osg::Sequence::traverse
        
            typedef void ( ::osg::Sequence::*traverse_function_type )( ::osg::NodeVisitor & ) ;
            typedef void ( Sequence_wrapper::*default_traverse_function_type )( ::osg::NodeVisitor & ) ;
            
            Sequence_exposer.def( 
                "traverse"
                , traverse_function_type(&::osg::Sequence::traverse)
                , default_traverse_function_type(&Sequence_wrapper::default_traverse)
                , ( bp::arg("nv") ) );
        
        }
        { //::osg::Node::asCamera
        
            typedef ::osg::Camera * ( ::osg::Node::*asCamera_function_type )(  ) ;
            typedef ::osg::Camera * ( Sequence_wrapper::*default_asCamera_function_type )(  ) ;
            
            Sequence_exposer.def( 
                "asCamera"
                , asCamera_function_type(&::osg::Node::asCamera)
                , default_asCamera_function_type(&Sequence_wrapper::default_asCamera)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asCamera
        
            typedef ::osg::Camera const * ( ::osg::Node::*asCamera_function_type )(  ) const;
            typedef ::osg::Camera const * ( Sequence_wrapper::*default_asCamera_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "asCamera"
                , asCamera_function_type(&::osg::Node::asCamera)
                , default_asCamera_function_type(&Sequence_wrapper::default_asCamera)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asGeode
        
            typedef ::osg::Geode * ( ::osg::Node::*asGeode_function_type )(  ) ;
            typedef ::osg::Geode * ( Sequence_wrapper::*default_asGeode_function_type )(  ) ;
            
            Sequence_exposer.def( 
                "asGeode"
                , asGeode_function_type(&::osg::Node::asGeode)
                , default_asGeode_function_type(&Sequence_wrapper::default_asGeode)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asGeode
        
            typedef ::osg::Geode const * ( ::osg::Node::*asGeode_function_type )(  ) const;
            typedef ::osg::Geode const * ( Sequence_wrapper::*default_asGeode_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "asGeode"
                , asGeode_function_type(&::osg::Node::asGeode)
                , default_asGeode_function_type(&Sequence_wrapper::default_asGeode)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Group::asGroup
        
            typedef ::osg::Group * ( ::osg::Group::*asGroup_function_type )(  ) ;
            typedef ::osg::Group * ( Sequence_wrapper::*default_asGroup_function_type )(  ) ;
            
            Sequence_exposer.def( 
                "asGroup"
                , asGroup_function_type(&::osg::Group::asGroup)
                , default_asGroup_function_type(&Sequence_wrapper::default_asGroup)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Group::asGroup
        
            typedef ::osg::Group const * ( ::osg::Group::*asGroup_function_type )(  ) const;
            typedef ::osg::Group const * ( Sequence_wrapper::*default_asGroup_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "asGroup"
                , asGroup_function_type(&::osg::Group::asGroup)
                , default_asGroup_function_type(&Sequence_wrapper::default_asGroup)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asSwitch
        
            typedef ::osg::Switch * ( ::osg::Node::*asSwitch_function_type )(  ) ;
            typedef ::osg::Switch * ( Sequence_wrapper::*default_asSwitch_function_type )(  ) ;
            
            Sequence_exposer.def( 
                "asSwitch"
                , asSwitch_function_type(&::osg::Node::asSwitch)
                , default_asSwitch_function_type(&Sequence_wrapper::default_asSwitch)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asSwitch
        
            typedef ::osg::Switch const * ( ::osg::Node::*asSwitch_function_type )(  ) const;
            typedef ::osg::Switch const * ( Sequence_wrapper::*default_asSwitch_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "asSwitch"
                , asSwitch_function_type(&::osg::Node::asSwitch)
                , default_asSwitch_function_type(&Sequence_wrapper::default_asSwitch)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asTransform
        
            typedef ::osg::Transform * ( ::osg::Node::*asTransform_function_type )(  ) ;
            typedef ::osg::Transform * ( Sequence_wrapper::*default_asTransform_function_type )(  ) ;
            
            Sequence_exposer.def( 
                "asTransform"
                , asTransform_function_type(&::osg::Node::asTransform)
                , default_asTransform_function_type(&Sequence_wrapper::default_asTransform)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asTransform
        
            typedef ::osg::Transform const * ( ::osg::Node::*asTransform_function_type )(  ) const;
            typedef ::osg::Transform const * ( Sequence_wrapper::*default_asTransform_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "asTransform"
                , asTransform_function_type(&::osg::Node::asTransform)
                , default_asTransform_function_type(&Sequence_wrapper::default_asTransform)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::ascend
        
            typedef void ( ::osg::Node::*ascend_function_type )( ::osg::NodeVisitor & ) ;
            typedef void ( Sequence_wrapper::*default_ascend_function_type )( ::osg::NodeVisitor & ) ;
            
            Sequence_exposer.def( 
                "ascend"
                , ascend_function_type(&::osg::Node::ascend)
                , default_ascend_function_type(&Sequence_wrapper::default_ascend)
                , ( bp::arg("nv") ) );
        
        }
        { //::osg::Group::computeBound
        
            typedef ::osg::BoundingSphere ( ::osg::Group::*computeBound_function_type )(  ) const;
            typedef ::osg::BoundingSphere ( Sequence_wrapper::*default_computeBound_function_type )(  ) const;
            
            Sequence_exposer.def( 
                "computeBound"
                , computeBound_function_type(&::osg::Group::computeBound)
                , default_computeBound_function_type(&Sequence_wrapper::default_computeBound) );
        
        }
        { //::osg::Group::replaceChild
        
            typedef bool ( ::osg::Group::*replaceChild_function_type )( ::osg::Node *,::osg::Node * ) ;
            typedef bool ( Sequence_wrapper::*default_replaceChild_function_type )( ::osg::Node *,::osg::Node * ) ;
            
            Sequence_exposer.def( 
                "replaceChild"
                , replaceChild_function_type(&::osg::Group::replaceChild)
                , default_replaceChild_function_type(&Sequence_wrapper::default_replaceChild)
                , ( bp::arg("origChild"), bp::arg("newChild") ) );
        
        }
        { //::osg::Group::resizeGLObjectBuffers
        
            typedef void ( ::osg::Group::*resizeGLObjectBuffers_function_type )( unsigned int ) ;
            typedef void ( Sequence_wrapper::*default_resizeGLObjectBuffers_function_type )( unsigned int ) ;
            
            Sequence_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::Group::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&Sequence_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
        { //::osg::Group::setChild
        
            typedef bool ( ::osg::Group::*setChild_function_type )( unsigned int,::osg::Node * ) ;
            typedef bool ( Sequence_wrapper::*default_setChild_function_type )( unsigned int,::osg::Node * ) ;
            
            Sequence_exposer.def( 
                "setChild"
                , setChild_function_type(&::osg::Group::setChild)
                , default_setChild_function_type(&Sequence_wrapper::default_setChild)
                , ( bp::arg("i"), bp::arg("node") ) );
        
        }
        { //::osg::Group::setThreadSafeRefUnref
        
            typedef void ( ::osg::Group::*setThreadSafeRefUnref_function_type )( bool ) ;
            typedef void ( Sequence_wrapper::*default_setThreadSafeRefUnref_function_type )( bool ) ;
            
            Sequence_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Group::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&Sequence_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
    }

}
