// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "PagedLOD.pypp.hpp"

namespace bp = boost::python;

struct PagedLOD_wrapper : osg::PagedLOD, bp::wrapper< osg::PagedLOD > {

    PagedLOD_wrapper( )
    : osg::PagedLOD( )
      , bp::wrapper< osg::PagedLOD >(){
        // null constructor
    
    }

    virtual void accept( ::osg::NodeVisitor & nv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(nv) );
        else{
            this->osg::PagedLOD::accept( boost::ref(nv) );
        }
    }
    
    void default_accept( ::osg::NodeVisitor & nv ) {
        osg::PagedLOD::accept( boost::ref(nv) );
    }

    virtual bool addChild( ::osg::Node * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            return func_addChild( boost::python::ptr(child) );
        else{
            return this->osg::PagedLOD::addChild( boost::python::ptr(child) );
        }
    }
    
    bool default_addChild( ::osg::Node * child ) {
        return osg::PagedLOD::addChild( boost::python::ptr(child) );
    }

    virtual bool addChild( ::osg::Node * child, float min, float max ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            return func_addChild( boost::python::ptr(child), min, max );
        else{
            return this->osg::PagedLOD::addChild( boost::python::ptr(child), min, max );
        }
    }
    
    bool default_addChild( ::osg::Node * child, float min, float max ) {
        return osg::PagedLOD::addChild( boost::python::ptr(child), min, max );
    }

    virtual bool addChild( ::osg::Node * child, float min, float max, ::std::string const & filename, float priorityOffset=0.0f, float priorityScale=1.0e+0f ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            return func_addChild( boost::python::ptr(child), min, max, filename, priorityOffset, priorityScale );
        else{
            return this->osg::PagedLOD::addChild( boost::python::ptr(child), min, max, filename, priorityOffset, priorityScale );
        }
    }
    
    bool default_addChild( ::osg::Node * child, float min, float max, ::std::string const & filename, float priorityOffset=0.0f, float priorityScale=1.0e+0f ) {
        return osg::PagedLOD::addChild( boost::python::ptr(child), min, max, filename, priorityOffset, priorityScale );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::PagedLOD::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::PagedLOD::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::PagedLOD::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::PagedLOD::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::PagedLOD::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::PagedLOD::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::PagedLOD::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::PagedLOD::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::PagedLOD::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::PagedLOD::libraryName( );
    }

    virtual bool removeChildren( unsigned int pos, unsigned int numChildrenToRemove=1 ) {
        if( bp::override func_removeChildren = this->get_override( "removeChildren" ) )
            return func_removeChildren( pos, numChildrenToRemove );
        else{
            return this->osg::PagedLOD::removeChildren( pos, numChildrenToRemove );
        }
    }
    
    bool default_removeChildren( unsigned int pos, unsigned int numChildrenToRemove=1 ) {
        return osg::PagedLOD::removeChildren( pos, numChildrenToRemove );
    }

    virtual bool removeExpiredChildren( double expiryTime, unsigned int expiryFrame, ::osg::NodeList & removedChildren ) {
        if( bp::override func_removeExpiredChildren = this->get_override( "removeExpiredChildren" ) )
            return func_removeExpiredChildren( expiryTime, expiryFrame, boost::ref(removedChildren) );
        else{
            return this->osg::PagedLOD::removeExpiredChildren( expiryTime, expiryFrame, boost::ref(removedChildren) );
        }
    }
    
    bool default_removeExpiredChildren( double expiryTime, unsigned int expiryFrame, ::osg::NodeList & removedChildren ) {
        return osg::PagedLOD::removeExpiredChildren( expiryTime, expiryFrame, boost::ref(removedChildren) );
    }

    virtual void traverse( ::osg::NodeVisitor & nv ) {
        if( bp::override func_traverse = this->get_override( "traverse" ) )
            func_traverse( boost::ref(nv) );
        else{
            this->osg::PagedLOD::traverse( boost::ref(nv) );
        }
    }
    
    void default_traverse( ::osg::NodeVisitor & nv ) {
        osg::PagedLOD::traverse( boost::ref(nv) );
    }

    virtual ::osg::Camera * asCamera(  ) {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera * default_asCamera(  ) {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Camera const * asCamera(  ) const  {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera const * default_asCamera(  ) const  {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Geode * asGeode(  ) {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode * default_asGeode(  ) {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Geode const * asGeode(  ) const  {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode const * default_asGeode(  ) const  {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Group * asGroup(  ) {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group * default_asGroup(  ) {
        return osg::Group::asGroup( );
    }

    virtual ::osg::Group const * asGroup(  ) const  {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group const * default_asGroup(  ) const  {
        return osg::Group::asGroup( );
    }

    virtual ::osg::Switch * asSwitch(  ) {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch * default_asSwitch(  ) {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Switch const * asSwitch(  ) const  {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch const * default_asSwitch(  ) const  {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Transform * asTransform(  ) {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Node::asTransform(  );
        }
    }
    
    ::osg::Transform * default_asTransform(  ) {
        return osg::Node::asTransform( );
    }

    virtual ::osg::Transform const * asTransform(  ) const  {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Node::asTransform(  );
        }
    }
    
    ::osg::Transform const * default_asTransform(  ) const  {
        return osg::Node::asTransform( );
    }

    virtual void ascend( ::osg::NodeVisitor & nv ) {
        if( bp::override func_ascend = this->get_override( "ascend" ) )
            func_ascend( boost::ref(nv) );
        else{
            this->osg::Node::ascend( boost::ref(nv) );
        }
    }
    
    void default_ascend( ::osg::NodeVisitor & nv ) {
        osg::Node::ascend( boost::ref(nv) );
    }

    virtual ::osg::BoundingSphere computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osg::LOD::computeBound(  );
        }
    }
    
    ::osg::BoundingSphere default_computeBound(  ) const  {
        return osg::LOD::computeBound( );
    }

    virtual bool insertChild( unsigned int index, ::osg::Node * child ) {
        if( bp::override func_insertChild = this->get_override( "insertChild" ) )
            return func_insertChild( index, boost::python::ptr(child) );
        else{
            return this->osg::Group::insertChild( index, boost::python::ptr(child) );
        }
    }
    
    bool default_insertChild( unsigned int index, ::osg::Node * child ) {
        return osg::Group::insertChild( index, boost::python::ptr(child) );
    }

    virtual bool replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        if( bp::override func_replaceChild = this->get_override( "replaceChild" ) )
            return func_replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        else{
            return this->osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        }
    }
    
    bool default_replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        return osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Group::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Group::resizeGLObjectBuffers( maxSize );
    }

    virtual bool setChild( unsigned int i, ::osg::Node * node ) {
        if( bp::override func_setChild = this->get_override( "setChild" ) )
            return func_setChild( i, boost::python::ptr(node) );
        else{
            return this->osg::Group::setChild( i, boost::python::ptr(node) );
        }
    }
    
    bool default_setChild( unsigned int i, ::osg::Node * node ) {
        return osg::Group::setChild( i, boost::python::ptr(node) );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Group::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Group::setThreadSafeRefUnref( threadSafe );
    }

};

void register_PagedLOD_class(){

    { //::osg::PagedLOD
        typedef bp::class_< PagedLOD_wrapper, bp::bases< osg::LOD >, osg::ref_ptr< ::osg::PagedLOD >, boost::noncopyable > PagedLOD_exposer_t;
        PagedLOD_exposer_t PagedLOD_exposer = PagedLOD_exposer_t( "PagedLOD", "\n PagedLOD.\n", bp::no_init );
        bp::scope PagedLOD_scope( PagedLOD_exposer );
        { //::osg::PagedLOD::PerRangeData
            typedef bp::class_< osg::PagedLOD::PerRangeData > PerRangeData_exposer_t;
            PerRangeData_exposer_t PerRangeData_exposer = PerRangeData_exposer_t( "PerRangeData", bp::init< >() );
            bp::scope PerRangeData_scope( PerRangeData_exposer );
            PerRangeData_exposer.def( bp::init< osg::PagedLOD::PerRangeData const & >(( bp::arg("prd") )) );
            PerRangeData_exposer.def_readwrite( "_databaseRequest", &osg::PagedLOD::PerRangeData::_databaseRequest );
            PerRangeData_exposer.def_readwrite( "_filename", &osg::PagedLOD::PerRangeData::_filename );
            PerRangeData_exposer.def_readwrite( "_frameNumber", &osg::PagedLOD::PerRangeData::_frameNumber );
            PerRangeData_exposer.def_readwrite( "_frameNumberOfLastReleaseGLObjects", &osg::PagedLOD::PerRangeData::_frameNumberOfLastReleaseGLObjects );
            PerRangeData_exposer.def_readwrite( "_minExpiryFrames", &osg::PagedLOD::PerRangeData::_minExpiryFrames );
            PerRangeData_exposer.def_readwrite( "_minExpiryTime", &osg::PagedLOD::PerRangeData::_minExpiryTime );
            PerRangeData_exposer.def_readwrite( "_priorityOffset", &osg::PagedLOD::PerRangeData::_priorityOffset );
            PerRangeData_exposer.def_readwrite( "_priorityScale", &osg::PagedLOD::PerRangeData::_priorityScale );
            PerRangeData_exposer.def_readwrite( "_timeStamp", &osg::PagedLOD::PerRangeData::_timeStamp );
        }
        PagedLOD_exposer.def( bp::init< >("\n PagedLOD.\n") );
        { //::osg::PagedLOD::accept
        
            typedef void ( ::osg::PagedLOD::*accept_function_type )( ::osg::NodeVisitor & ) ;
            typedef void ( PagedLOD_wrapper::*default_accept_function_type )( ::osg::NodeVisitor & ) ;
            
            PagedLOD_exposer.def( 
                "accept"
                , accept_function_type(&::osg::PagedLOD::accept)
                , default_accept_function_type(&PagedLOD_wrapper::default_accept)
                , ( bp::arg("nv") ) );
        
        }
        { //::osg::PagedLOD::addChild
        
            typedef bool ( ::osg::PagedLOD::*addChild_function_type )( ::osg::Node * ) ;
            typedef bool ( PagedLOD_wrapper::*default_addChild_function_type )( ::osg::Node * ) ;
            
            PagedLOD_exposer.def( 
                "addChild"
                , addChild_function_type(&::osg::PagedLOD::addChild)
                , default_addChild_function_type(&PagedLOD_wrapper::default_addChild)
                , ( bp::arg("child") ) );
        
        }
        { //::osg::PagedLOD::addChild
        
            typedef bool ( ::osg::PagedLOD::*addChild_function_type )( ::osg::Node *,float,float ) ;
            typedef bool ( PagedLOD_wrapper::*default_addChild_function_type )( ::osg::Node *,float,float ) ;
            
            PagedLOD_exposer.def( 
                "addChild"
                , addChild_function_type(&::osg::PagedLOD::addChild)
                , default_addChild_function_type(&PagedLOD_wrapper::default_addChild)
                , ( bp::arg("child"), bp::arg("min"), bp::arg("max") ) );
        
        }
        { //::osg::PagedLOD::addChild
        
            typedef bool ( ::osg::PagedLOD::*addChild_function_type )( ::osg::Node *,float,float,::std::string const &,float,float ) ;
            typedef bool ( PagedLOD_wrapper::*default_addChild_function_type )( ::osg::Node *,float,float,::std::string const &,float,float ) ;
            
            PagedLOD_exposer.def( 
                "addChild"
                , addChild_function_type(&::osg::PagedLOD::addChild)
                , default_addChild_function_type(&PagedLOD_wrapper::default_addChild)
                , ( bp::arg("child"), bp::arg("min"), bp::arg("max"), bp::arg("filename"), bp::arg("priorityOffset")=0.0f, bp::arg("priorityScale")=1.0e+0f ) );
        
        }
        { //::osg::PagedLOD::className
        
            typedef char const * ( ::osg::PagedLOD::*className_function_type )(  ) const;
            typedef char const * ( PagedLOD_wrapper::*default_className_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "className"
                , className_function_type(&::osg::PagedLOD::className)
                , default_className_function_type(&PagedLOD_wrapper::default_className) );
        
        }
        { //::osg::PagedLOD::clone
        
            typedef ::osg::Object * ( ::osg::PagedLOD::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( PagedLOD_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            PagedLOD_exposer.def( 
                "clone"
                , clone_function_type(&::osg::PagedLOD::clone)
                , default_clone_function_type(&PagedLOD_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::PagedLOD::cloneType
        
            typedef ::osg::Object * ( ::osg::PagedLOD::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( PagedLOD_wrapper::*default_cloneType_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::PagedLOD::cloneType)
                , default_cloneType_function_type(&PagedLOD_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::PagedLOD::getDatabaseOptions
        
            typedef ::osg::Referenced * ( ::osg::PagedLOD::*getDatabaseOptions_function_type )(  ) ;
            
            PagedLOD_exposer.def( 
                "getDatabaseOptions"
                , getDatabaseOptions_function_type( &::osg::PagedLOD::getDatabaseOptions )
                , bp::return_internal_reference< >()
                , "\n Get the optional database osgDB::Options object used when reading children.\n" );
        
        }
        { //::osg::PagedLOD::getDatabaseOptions
        
            typedef ::osg::Referenced const * ( ::osg::PagedLOD::*getDatabaseOptions_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "getDatabaseOptions"
                , getDatabaseOptions_function_type( &::osg::PagedLOD::getDatabaseOptions )
                , bp::return_internal_reference< >()
                , "\n Get the optional database osgDB::Options object used when reading children.\n" );
        
        }
        { //::osg::PagedLOD::getDatabasePath
        
            typedef ::std::string const & ( ::osg::PagedLOD::*getDatabasePath_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "getDatabasePath"
                , getDatabasePath_function_type( &::osg::PagedLOD::getDatabasePath )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "\n Get the database path used to prepend to childrens filenames.\n" );
        
        }
        { //::osg::PagedLOD::getDatabaseRequest
        
            typedef ::osg::ref_ptr< osg::Referenced > & ( ::osg::PagedLOD::*getDatabaseRequest_function_type )( unsigned int ) ;
            
            PagedLOD_exposer.def( 
                "getDatabaseRequest"
                , getDatabaseRequest_function_type( &::osg::PagedLOD::getDatabaseRequest )
                , ( bp::arg("childNo") )
                , bp::return_internal_reference< >()
                , "\n Return the DatabaseRequest object used by the DatabasePager to keep track of file load requests\n being carried on behalf of the DatabasePager.\n Note, in normal OSG usage you should not set this value yourself, as this will be managed by\n the osgDB::DatabasePager.\n" );
        
        }
        { //::osg::PagedLOD::getDatabaseRequest
        
            typedef ::osg::ref_ptr< osg::Referenced > const & ( ::osg::PagedLOD::*getDatabaseRequest_function_type )( unsigned int ) const;
            
            PagedLOD_exposer.def( 
                "getDatabaseRequest"
                , getDatabaseRequest_function_type( &::osg::PagedLOD::getDatabaseRequest )
                , ( bp::arg("childNo") )
                , bp::return_internal_reference< >()
                , "\n Return the const DatabaseRequest object.\n" );
        
        }
        { //::osg::PagedLOD::getDisableExternalChildrenPaging
        
            typedef bool ( ::osg::PagedLOD::*getDisableExternalChildrenPaging_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "getDisableExternalChildrenPaging"
                , getDisableExternalChildrenPaging_function_type( &::osg::PagedLOD::getDisableExternalChildrenPaging ) );
        
        }
        { //::osg::PagedLOD::getFileName
        
            typedef ::std::string const & ( ::osg::PagedLOD::*getFileName_function_type )( unsigned int ) const;
            
            PagedLOD_exposer.def( 
                "getFileName"
                , getFileName_function_type( &::osg::PagedLOD::getFileName )
                , ( bp::arg("childNo") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::osg::PagedLOD::getFrameNumber
        
            typedef unsigned int ( ::osg::PagedLOD::*getFrameNumber_function_type )( unsigned int ) const;
            
            PagedLOD_exposer.def( 
                "getFrameNumber"
                , getFrameNumber_function_type( &::osg::PagedLOD::getFrameNumber )
                , ( bp::arg("childNo") ) );
        
        }
        { //::osg::PagedLOD::getFrameNumberOfLastTraversal
        
            typedef unsigned int ( ::osg::PagedLOD::*getFrameNumberOfLastTraversal_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "getFrameNumberOfLastTraversal"
                , getFrameNumberOfLastTraversal_function_type( &::osg::PagedLOD::getFrameNumberOfLastTraversal )
                , "\n Get the frame number of the last time that this PageLOD node was traversed.\n" );
        
        }
        { //::osg::PagedLOD::getMinimumExpiryFrames
        
            typedef unsigned int ( ::osg::PagedLOD::*getMinimumExpiryFrames_function_type )( unsigned int ) const;
            
            PagedLOD_exposer.def( 
                "getMinimumExpiryFrames"
                , getMinimumExpiryFrames_function_type( &::osg::PagedLOD::getMinimumExpiryFrames )
                , ( bp::arg("childNo") ) );
        
        }
        { //::osg::PagedLOD::getMinimumExpiryTime
        
            typedef double ( ::osg::PagedLOD::*getMinimumExpiryTime_function_type )( unsigned int ) const;
            
            PagedLOD_exposer.def( 
                "getMinimumExpiryTime"
                , getMinimumExpiryTime_function_type( &::osg::PagedLOD::getMinimumExpiryTime )
                , ( bp::arg("childNo") ) );
        
        }
        { //::osg::PagedLOD::getNumChildrenThatCannotBeExpired
        
            typedef unsigned int ( ::osg::PagedLOD::*getNumChildrenThatCannotBeExpired_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "getNumChildrenThatCannotBeExpired"
                , getNumChildrenThatCannotBeExpired_function_type( &::osg::PagedLOD::getNumChildrenThatCannotBeExpired )
                , "\n Get the number of children that the PagedLOD must keep around, even if they are older than their expiry time.\n" );
        
        }
        { //::osg::PagedLOD::getNumFileNames
        
            typedef unsigned int ( ::osg::PagedLOD::*getNumFileNames_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "getNumFileNames"
                , getNumFileNames_function_type( &::osg::PagedLOD::getNumFileNames ) );
        
        }
        { //::osg::PagedLOD::getNumFrameNumbers
        
            typedef unsigned int ( ::osg::PagedLOD::*getNumFrameNumbers_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "getNumFrameNumbers"
                , getNumFrameNumbers_function_type( &::osg::PagedLOD::getNumFrameNumbers ) );
        
        }
        { //::osg::PagedLOD::getNumMinimumExpiryFrames
        
            typedef unsigned int ( ::osg::PagedLOD::*getNumMinimumExpiryFrames_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "getNumMinimumExpiryFrames"
                , getNumMinimumExpiryFrames_function_type( &::osg::PagedLOD::getNumMinimumExpiryFrames ) );
        
        }
        { //::osg::PagedLOD::getNumMinimumExpiryTimes
        
            typedef unsigned int ( ::osg::PagedLOD::*getNumMinimumExpiryTimes_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "getNumMinimumExpiryTimes"
                , getNumMinimumExpiryTimes_function_type( &::osg::PagedLOD::getNumMinimumExpiryTimes ) );
        
        }
        { //::osg::PagedLOD::getNumPriorityOffsets
        
            typedef unsigned int ( ::osg::PagedLOD::*getNumPriorityOffsets_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "getNumPriorityOffsets"
                , getNumPriorityOffsets_function_type( &::osg::PagedLOD::getNumPriorityOffsets ) );
        
        }
        { //::osg::PagedLOD::getNumPriorityScales
        
            typedef unsigned int ( ::osg::PagedLOD::*getNumPriorityScales_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "getNumPriorityScales"
                , getNumPriorityScales_function_type( &::osg::PagedLOD::getNumPriorityScales ) );
        
        }
        { //::osg::PagedLOD::getNumTimeStamps
        
            typedef unsigned int ( ::osg::PagedLOD::*getNumTimeStamps_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "getNumTimeStamps"
                , getNumTimeStamps_function_type( &::osg::PagedLOD::getNumTimeStamps ) );
        
        }
        { //::osg::PagedLOD::getPriorityOffset
        
            typedef float ( ::osg::PagedLOD::*getPriorityOffset_function_type )( unsigned int ) const;
            
            PagedLOD_exposer.def( 
                "getPriorityOffset"
                , getPriorityOffset_function_type( &::osg::PagedLOD::getPriorityOffset )
                , ( bp::arg("childNo") ) );
        
        }
        { //::osg::PagedLOD::getPriorityScale
        
            typedef float ( ::osg::PagedLOD::*getPriorityScale_function_type )( unsigned int ) const;
            
            PagedLOD_exposer.def( 
                "getPriorityScale"
                , getPriorityScale_function_type( &::osg::PagedLOD::getPriorityScale )
                , ( bp::arg("childNo") ) );
        
        }
        { //::osg::PagedLOD::getTimeStamp
        
            typedef double ( ::osg::PagedLOD::*getTimeStamp_function_type )( unsigned int ) const;
            
            PagedLOD_exposer.def( 
                "getTimeStamp"
                , getTimeStamp_function_type( &::osg::PagedLOD::getTimeStamp )
                , ( bp::arg("childNo") ) );
        
        }
        { //::osg::PagedLOD::isSameKindAs
        
            typedef bool ( ::osg::PagedLOD::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( PagedLOD_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            PagedLOD_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::PagedLOD::isSameKindAs)
                , default_isSameKindAs_function_type(&PagedLOD_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::PagedLOD::libraryName
        
            typedef char const * ( ::osg::PagedLOD::*libraryName_function_type )(  ) const;
            typedef char const * ( PagedLOD_wrapper::*default_libraryName_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::PagedLOD::libraryName)
                , default_libraryName_function_type(&PagedLOD_wrapper::default_libraryName) );
        
        }
        { //::osg::PagedLOD::removeChildren
        
            typedef bool ( ::osg::PagedLOD::*removeChildren_function_type )( unsigned int,unsigned int ) ;
            typedef bool ( PagedLOD_wrapper::*default_removeChildren_function_type )( unsigned int,unsigned int ) ;
            
            PagedLOD_exposer.def( 
                "removeChildren"
                , removeChildren_function_type(&::osg::PagedLOD::removeChildren)
                , default_removeChildren_function_type(&PagedLOD_wrapper::default_removeChildren)
                , ( bp::arg("pos"), bp::arg("numChildrenToRemove")=(unsigned int)(1) ) );
        
        }
        { //::osg::PagedLOD::removeExpiredChildren
        
            typedef bool ( ::osg::PagedLOD::*removeExpiredChildren_function_type )( double,unsigned int,::osg::NodeList & ) ;
            typedef bool ( PagedLOD_wrapper::*default_removeExpiredChildren_function_type )( double,unsigned int,::osg::NodeList & ) ;
            
            PagedLOD_exposer.def( 
                "removeExpiredChildren"
                , removeExpiredChildren_function_type(&::osg::PagedLOD::removeExpiredChildren)
                , default_removeExpiredChildren_function_type(&PagedLOD_wrapper::default_removeExpiredChildren)
                , ( bp::arg("expiryTime"), bp::arg("expiryFrame"), bp::arg("removedChildren") ) );
        
        }
        { //::osg::PagedLOD::setDatabaseOptions
        
            typedef void ( ::osg::PagedLOD::*setDatabaseOptions_function_type )( ::osg::Referenced * ) ;
            
            PagedLOD_exposer.def( 
                "setDatabaseOptions"
                , setDatabaseOptions_function_type( &::osg::PagedLOD::setDatabaseOptions )
                , ( bp::arg("options") )
                , "\n Set the optional database osgDB::Options object to use when reading children.\n" );
        
        }
        { //::osg::PagedLOD::setDatabasePath
        
            typedef void ( ::osg::PagedLOD::*setDatabasePath_function_type )( ::std::string const & ) ;
            
            PagedLOD_exposer.def( 
                "setDatabasePath"
                , setDatabasePath_function_type( &::osg::PagedLOD::setDatabasePath )
                , ( bp::arg("path") )
                , "\n Set the database path to prepend to childrens filenames.\n" );
        
        }
        { //::osg::PagedLOD::setDisableExternalChildrenPaging
        
            typedef void ( ::osg::PagedLOD::*setDisableExternalChildrenPaging_function_type )( bool ) ;
            
            PagedLOD_exposer.def( 
                "setDisableExternalChildrenPaging"
                , setDisableExternalChildrenPaging_function_type( &::osg::PagedLOD::setDisableExternalChildrenPaging )
                , ( bp::arg("flag") )
                , "\n Set wether you want to disable the paging in of external nodes.\n" );
        
        }
        { //::osg::PagedLOD::setFileName
        
            typedef void ( ::osg::PagedLOD::*setFileName_function_type )( unsigned int,::std::string const & ) ;
            
            PagedLOD_exposer.def( 
                "setFileName"
                , setFileName_function_type( &::osg::PagedLOD::setFileName )
                , ( bp::arg("childNo"), bp::arg("filename") ) );
        
        }
        { //::osg::PagedLOD::setFrameNumber
        
            typedef void ( ::osg::PagedLOD::*setFrameNumber_function_type )( unsigned int,unsigned int ) ;
            
            PagedLOD_exposer.def( 
                "setFrameNumber"
                , setFrameNumber_function_type( &::osg::PagedLOD::setFrameNumber )
                , ( bp::arg("childNo"), bp::arg("frameNumber") ) );
        
        }
        { //::osg::PagedLOD::setFrameNumberOfLastTraversal
        
            typedef void ( ::osg::PagedLOD::*setFrameNumberOfLastTraversal_function_type )( unsigned int ) ;
            
            PagedLOD_exposer.def( 
                "setFrameNumberOfLastTraversal"
                , setFrameNumberOfLastTraversal_function_type( &::osg::PagedLOD::setFrameNumberOfLastTraversal )
                , ( bp::arg("frameNumber") )
                , "\n Set the frame number of the last time that this PageLOD node was traversed.\n Note, this frame number is automatically set by the traverse() method for all traversals (update, cull etc.).\n" );
        
        }
        { //::osg::PagedLOD::setMinimumExpiryFrames
        
            typedef void ( ::osg::PagedLOD::*setMinimumExpiryFrames_function_type )( unsigned int,unsigned int ) ;
            
            PagedLOD_exposer.def( 
                "setMinimumExpiryFrames"
                , setMinimumExpiryFrames_function_type( &::osg::PagedLOD::setMinimumExpiryFrames )
                , ( bp::arg("childNo"), bp::arg("minFrames") )
                , "\n Sets the minimum number of frames that must be rendered without a child being traversed before it can be expired.\n" );
        
        }
        { //::osg::PagedLOD::setMinimumExpiryTime
        
            typedef void ( ::osg::PagedLOD::*setMinimumExpiryTime_function_type )( unsigned int,double ) ;
            
            PagedLOD_exposer.def( 
                "setMinimumExpiryTime"
                , setMinimumExpiryTime_function_type( &::osg::PagedLOD::setMinimumExpiryTime )
                , ( bp::arg("childNo"), bp::arg("minTime") )
                , "\n Sets the minimum amount of time, in seconds, that must pass without a child being traversed before it can be expired.\n" );
        
        }
        { //::osg::PagedLOD::setNumChildrenThatCannotBeExpired
        
            typedef void ( ::osg::PagedLOD::*setNumChildrenThatCannotBeExpired_function_type )( unsigned int ) ;
            
            PagedLOD_exposer.def( 
                "setNumChildrenThatCannotBeExpired"
                , setNumChildrenThatCannotBeExpired_function_type( &::osg::PagedLOD::setNumChildrenThatCannotBeExpired )
                , ( bp::arg("num") )
                , "\n Set the number of children that the PagedLOD must keep around, even if they are older than their expiry time.\n" );
        
        }
        { //::osg::PagedLOD::setPriorityOffset
        
            typedef void ( ::osg::PagedLOD::*setPriorityOffset_function_type )( unsigned int,float ) ;
            
            PagedLOD_exposer.def( 
                "setPriorityOffset"
                , setPriorityOffset_function_type( &::osg::PagedLOD::setPriorityOffset )
                , ( bp::arg("childNo"), bp::arg("priorityOffset") ) );
        
        }
        { //::osg::PagedLOD::setPriorityScale
        
            typedef void ( ::osg::PagedLOD::*setPriorityScale_function_type )( unsigned int,float ) ;
            
            PagedLOD_exposer.def( 
                "setPriorityScale"
                , setPriorityScale_function_type( &::osg::PagedLOD::setPriorityScale )
                , ( bp::arg("childNo"), bp::arg("priorityScale") ) );
        
        }
        { //::osg::PagedLOD::setTimeStamp
        
            typedef void ( ::osg::PagedLOD::*setTimeStamp_function_type )( unsigned int,double ) ;
            
            PagedLOD_exposer.def( 
                "setTimeStamp"
                , setTimeStamp_function_type( &::osg::PagedLOD::setTimeStamp )
                , ( bp::arg("childNo"), bp::arg("timeStamp") ) );
        
        }
        { //::osg::PagedLOD::traverse
        
            typedef void ( ::osg::PagedLOD::*traverse_function_type )( ::osg::NodeVisitor & ) ;
            typedef void ( PagedLOD_wrapper::*default_traverse_function_type )( ::osg::NodeVisitor & ) ;
            
            PagedLOD_exposer.def( 
                "traverse"
                , traverse_function_type(&::osg::PagedLOD::traverse)
                , default_traverse_function_type(&PagedLOD_wrapper::default_traverse)
                , ( bp::arg("nv") ) );
        
        }
        { //::osg::Node::asCamera
        
            typedef ::osg::Camera * ( ::osg::Node::*asCamera_function_type )(  ) ;
            typedef ::osg::Camera * ( PagedLOD_wrapper::*default_asCamera_function_type )(  ) ;
            
            PagedLOD_exposer.def( 
                "asCamera"
                , asCamera_function_type(&::osg::Node::asCamera)
                , default_asCamera_function_type(&PagedLOD_wrapper::default_asCamera)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asCamera
        
            typedef ::osg::Camera const * ( ::osg::Node::*asCamera_function_type )(  ) const;
            typedef ::osg::Camera const * ( PagedLOD_wrapper::*default_asCamera_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "asCamera"
                , asCamera_function_type(&::osg::Node::asCamera)
                , default_asCamera_function_type(&PagedLOD_wrapper::default_asCamera)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asGeode
        
            typedef ::osg::Geode * ( ::osg::Node::*asGeode_function_type )(  ) ;
            typedef ::osg::Geode * ( PagedLOD_wrapper::*default_asGeode_function_type )(  ) ;
            
            PagedLOD_exposer.def( 
                "asGeode"
                , asGeode_function_type(&::osg::Node::asGeode)
                , default_asGeode_function_type(&PagedLOD_wrapper::default_asGeode)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asGeode
        
            typedef ::osg::Geode const * ( ::osg::Node::*asGeode_function_type )(  ) const;
            typedef ::osg::Geode const * ( PagedLOD_wrapper::*default_asGeode_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "asGeode"
                , asGeode_function_type(&::osg::Node::asGeode)
                , default_asGeode_function_type(&PagedLOD_wrapper::default_asGeode)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Group::asGroup
        
            typedef ::osg::Group * ( ::osg::Group::*asGroup_function_type )(  ) ;
            typedef ::osg::Group * ( PagedLOD_wrapper::*default_asGroup_function_type )(  ) ;
            
            PagedLOD_exposer.def( 
                "asGroup"
                , asGroup_function_type(&::osg::Group::asGroup)
                , default_asGroup_function_type(&PagedLOD_wrapper::default_asGroup)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Group::asGroup
        
            typedef ::osg::Group const * ( ::osg::Group::*asGroup_function_type )(  ) const;
            typedef ::osg::Group const * ( PagedLOD_wrapper::*default_asGroup_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "asGroup"
                , asGroup_function_type(&::osg::Group::asGroup)
                , default_asGroup_function_type(&PagedLOD_wrapper::default_asGroup)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asSwitch
        
            typedef ::osg::Switch * ( ::osg::Node::*asSwitch_function_type )(  ) ;
            typedef ::osg::Switch * ( PagedLOD_wrapper::*default_asSwitch_function_type )(  ) ;
            
            PagedLOD_exposer.def( 
                "asSwitch"
                , asSwitch_function_type(&::osg::Node::asSwitch)
                , default_asSwitch_function_type(&PagedLOD_wrapper::default_asSwitch)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asSwitch
        
            typedef ::osg::Switch const * ( ::osg::Node::*asSwitch_function_type )(  ) const;
            typedef ::osg::Switch const * ( PagedLOD_wrapper::*default_asSwitch_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "asSwitch"
                , asSwitch_function_type(&::osg::Node::asSwitch)
                , default_asSwitch_function_type(&PagedLOD_wrapper::default_asSwitch)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asTransform
        
            typedef ::osg::Transform * ( ::osg::Node::*asTransform_function_type )(  ) ;
            typedef ::osg::Transform * ( PagedLOD_wrapper::*default_asTransform_function_type )(  ) ;
            
            PagedLOD_exposer.def( 
                "asTransform"
                , asTransform_function_type(&::osg::Node::asTransform)
                , default_asTransform_function_type(&PagedLOD_wrapper::default_asTransform)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asTransform
        
            typedef ::osg::Transform const * ( ::osg::Node::*asTransform_function_type )(  ) const;
            typedef ::osg::Transform const * ( PagedLOD_wrapper::*default_asTransform_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "asTransform"
                , asTransform_function_type(&::osg::Node::asTransform)
                , default_asTransform_function_type(&PagedLOD_wrapper::default_asTransform)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::ascend
        
            typedef void ( ::osg::Node::*ascend_function_type )( ::osg::NodeVisitor & ) ;
            typedef void ( PagedLOD_wrapper::*default_ascend_function_type )( ::osg::NodeVisitor & ) ;
            
            PagedLOD_exposer.def( 
                "ascend"
                , ascend_function_type(&::osg::Node::ascend)
                , default_ascend_function_type(&PagedLOD_wrapper::default_ascend)
                , ( bp::arg("nv") ) );
        
        }
        { //::osg::LOD::computeBound
        
            typedef ::osg::BoundingSphere ( ::osg::LOD::*computeBound_function_type )(  ) const;
            typedef ::osg::BoundingSphere ( PagedLOD_wrapper::*default_computeBound_function_type )(  ) const;
            
            PagedLOD_exposer.def( 
                "computeBound"
                , computeBound_function_type(&::osg::LOD::computeBound)
                , default_computeBound_function_type(&PagedLOD_wrapper::default_computeBound) );
        
        }
        { //::osg::Group::insertChild
        
            typedef bool ( ::osg::Group::*insertChild_function_type )( unsigned int,::osg::Node * ) ;
            typedef bool ( PagedLOD_wrapper::*default_insertChild_function_type )( unsigned int,::osg::Node * ) ;
            
            PagedLOD_exposer.def( 
                "insertChild"
                , insertChild_function_type(&::osg::Group::insertChild)
                , default_insertChild_function_type(&PagedLOD_wrapper::default_insertChild)
                , ( bp::arg("index"), bp::arg("child") ) );
        
        }
        { //::osg::Group::replaceChild
        
            typedef bool ( ::osg::Group::*replaceChild_function_type )( ::osg::Node *,::osg::Node * ) ;
            typedef bool ( PagedLOD_wrapper::*default_replaceChild_function_type )( ::osg::Node *,::osg::Node * ) ;
            
            PagedLOD_exposer.def( 
                "replaceChild"
                , replaceChild_function_type(&::osg::Group::replaceChild)
                , default_replaceChild_function_type(&PagedLOD_wrapper::default_replaceChild)
                , ( bp::arg("origChild"), bp::arg("newChild") ) );
        
        }
        { //::osg::Group::resizeGLObjectBuffers
        
            typedef void ( ::osg::Group::*resizeGLObjectBuffers_function_type )( unsigned int ) ;
            typedef void ( PagedLOD_wrapper::*default_resizeGLObjectBuffers_function_type )( unsigned int ) ;
            
            PagedLOD_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::Group::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&PagedLOD_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
        { //::osg::Group::setChild
        
            typedef bool ( ::osg::Group::*setChild_function_type )( unsigned int,::osg::Node * ) ;
            typedef bool ( PagedLOD_wrapper::*default_setChild_function_type )( unsigned int,::osg::Node * ) ;
            
            PagedLOD_exposer.def( 
                "setChild"
                , setChild_function_type(&::osg::Group::setChild)
                , default_setChild_function_type(&PagedLOD_wrapper::default_setChild)
                , ( bp::arg("i"), bp::arg("node") ) );
        
        }
        { //::osg::Group::setThreadSafeRefUnref
        
            typedef void ( ::osg::Group::*setThreadSafeRefUnref_function_type )( bool ) ;
            typedef void ( PagedLOD_wrapper::*default_setThreadSafeRefUnref_function_type )( bool ) ;
            
            PagedLOD_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Group::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&PagedLOD_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
    }

}
