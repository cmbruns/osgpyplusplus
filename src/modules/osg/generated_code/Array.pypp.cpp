// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "Array.pypp.hpp"

namespace bp = boost::python;

struct Array_wrapper : osg::Array, bp::wrapper< osg::Array > {

    virtual void accept( ::osg::ArrayVisitor & arg0 ){
        bp::override func_accept = this->get_override( "accept" );
        func_accept( boost::ref(arg0) );
    }

    virtual void accept( ::osg::ConstArrayVisitor & arg0 ) const {
        bp::override func_accept = this->get_override( "accept" );
        func_accept( boost::ref(arg0) );
    }

    virtual void accept( unsigned int index, ::osg::ValueVisitor & arg1 ){
        bp::override func_accept = this->get_override( "accept" );
        func_accept( index, boost::ref(arg1) );
    }

    virtual void accept( unsigned int index, ::osg::ConstValueVisitor & arg1 ) const {
        bp::override func_accept = this->get_override( "accept" );
        func_accept( index, boost::ref(arg1) );
    }

    virtual ::osg::Array * asArray(  ) {
        if( bp::override func_asArray = this->get_override( "asArray" ) )
            return func_asArray(  );
        else{
            return this->osg::Array::asArray(  );
        }
    }
    
    ::osg::Array * default_asArray(  ) {
        return osg::Array::asArray( );
    }

    virtual ::osg::Array const * asArray(  ) const  {
        if( bp::override func_asArray = this->get_override( "asArray" ) )
            return func_asArray(  );
        else{
            return this->osg::Array::asArray(  );
        }
    }
    
    ::osg::Array const * default_asArray(  ) const  {
        return osg::Array::asArray( );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::Array::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::Array::className( );
    }

    virtual int compare( unsigned int lhs, unsigned int rhs ) const {
        bp::override func_compare = this->get_override( "compare" );
        return func_compare( lhs, rhs );
    }

    virtual ::GLvoid const * getDataPointer(  ) const {
        bp::override func_getDataPointer = this->get_override( "getDataPointer" );
        return func_getDataPointer(  );
    }

    virtual unsigned int getElementSize(  ) const {
        bp::override func_getElementSize = this->get_override( "getElementSize" );
        return func_getElementSize(  );
    }

    virtual unsigned int getNumElements(  ) const {
        bp::override func_getNumElements = this->get_override( "getNumElements" );
        return func_getNumElements(  );
    }

    virtual unsigned int getTotalDataSize(  ) const {
        bp::override func_getTotalDataSize = this->get_override( "getTotalDataSize" );
        return func_getTotalDataSize(  );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::Array::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::Array::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::Array::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::Array::libraryName( );
    }

    virtual void reserveArray( unsigned int num ){
        bp::override func_reserveArray = this->get_override( "reserveArray" );
        func_reserveArray( num );
    }

    virtual void resizeArray( unsigned int num ){
        bp::override func_resizeArray = this->get_override( "resizeArray" );
        func_resizeArray( num );
    }

    virtual void trim(  ) {
        if( bp::override func_trim = this->get_override( "trim" ) )
            func_trim(  );
        else{
            this->osg::Array::trim(  );
        }
    }
    
    void default_trim(  ) {
        osg::Array::trim( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & arg0 ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone( boost::ref(arg0) );
    }

    virtual ::osg::Object * cloneType(  ) const {
        bp::override func_cloneType = this->get_override( "cloneType" );
        return func_cloneType(  );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::BufferData::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::BufferData::resizeGLObjectBuffers( maxSize );
    }

};

void register_Array_class(){

    { //::osg::Array
        typedef bp::class_< Array_wrapper, bp::bases< osg::BufferData >, osg::ref_ptr< ::osg::Array >, boost::noncopyable > Array_exposer_t;
        Array_exposer_t Array_exposer = Array_exposer_t( "Array", bp::no_init );
        bp::scope Array_scope( Array_exposer );
        bp::enum_< osg::Array::Binding>("Binding")
            .value("BIND_UNDEFINED", osg::Array::BIND_UNDEFINED)
            .value("BIND_OFF", osg::Array::BIND_OFF)
            .value("BIND_OVERALL", osg::Array::BIND_OVERALL)
            .value("BIND_PER_PRIMITIVE_SET", osg::Array::BIND_PER_PRIMITIVE_SET)
            .value("BIND_PER_VERTEX", osg::Array::BIND_PER_VERTEX)
            .export_values()
            ;
        bp::enum_< osg::Array::Type>("Type")
            .value("ArrayType", osg::Array::ArrayType)
            .value("ByteArrayType", osg::Array::ByteArrayType)
            .value("ShortArrayType", osg::Array::ShortArrayType)
            .value("IntArrayType", osg::Array::IntArrayType)
            .value("UByteArrayType", osg::Array::UByteArrayType)
            .value("UShortArrayType", osg::Array::UShortArrayType)
            .value("UIntArrayType", osg::Array::UIntArrayType)
            .value("FloatArrayType", osg::Array::FloatArrayType)
            .value("DoubleArrayType", osg::Array::DoubleArrayType)
            .value("Vec2bArrayType", osg::Array::Vec2bArrayType)
            .value("Vec3bArrayType", osg::Array::Vec3bArrayType)
            .value("Vec4bArrayType", osg::Array::Vec4bArrayType)
            .value("Vec2sArrayType", osg::Array::Vec2sArrayType)
            .value("Vec3sArrayType", osg::Array::Vec3sArrayType)
            .value("Vec4sArrayType", osg::Array::Vec4sArrayType)
            .value("Vec2iArrayType", osg::Array::Vec2iArrayType)
            .value("Vec3iArrayType", osg::Array::Vec3iArrayType)
            .value("Vec4iArrayType", osg::Array::Vec4iArrayType)
            .value("Vec2ubArrayType", osg::Array::Vec2ubArrayType)
            .value("Vec3ubArrayType", osg::Array::Vec3ubArrayType)
            .value("Vec4ubArrayType", osg::Array::Vec4ubArrayType)
            .value("Vec2usArrayType", osg::Array::Vec2usArrayType)
            .value("Vec3usArrayType", osg::Array::Vec3usArrayType)
            .value("Vec4usArrayType", osg::Array::Vec4usArrayType)
            .value("Vec2uiArrayType", osg::Array::Vec2uiArrayType)
            .value("Vec3uiArrayType", osg::Array::Vec3uiArrayType)
            .value("Vec4uiArrayType", osg::Array::Vec4uiArrayType)
            .value("Vec2ArrayType", osg::Array::Vec2ArrayType)
            .value("Vec3ArrayType", osg::Array::Vec3ArrayType)
            .value("Vec4ArrayType", osg::Array::Vec4ArrayType)
            .value("Vec2dArrayType", osg::Array::Vec2dArrayType)
            .value("Vec3dArrayType", osg::Array::Vec3dArrayType)
            .value("Vec4dArrayType", osg::Array::Vec4dArrayType)
            .value("MatrixArrayType", osg::Array::MatrixArrayType)
            .value("MatrixdArrayType", osg::Array::MatrixdArrayType)
            .export_values()
            ;
        { //::osg::Array::accept
        
            typedef void ( ::osg::Array::*accept_function_type )( ::osg::ArrayVisitor & ) ;
            
            Array_exposer.def( 
                "accept"
                , bp::pure_virtual( accept_function_type(&::osg::Array::accept) )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Array::accept
        
            typedef void ( ::osg::Array::*accept_function_type )( ::osg::ConstArrayVisitor & ) const;
            
            Array_exposer.def( 
                "accept"
                , bp::pure_virtual( accept_function_type(&::osg::Array::accept) )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Array::accept
        
            typedef void ( ::osg::Array::*accept_function_type )( unsigned int,::osg::ValueVisitor & ) ;
            
            Array_exposer.def( 
                "accept"
                , bp::pure_virtual( accept_function_type(&::osg::Array::accept) )
                , ( bp::arg("index"), bp::arg("arg1") ) );
        
        }
        { //::osg::Array::accept
        
            typedef void ( ::osg::Array::*accept_function_type )( unsigned int,::osg::ConstValueVisitor & ) const;
            
            Array_exposer.def( 
                "accept"
                , bp::pure_virtual( accept_function_type(&::osg::Array::accept) )
                , ( bp::arg("index"), bp::arg("arg1") ) );
        
        }
        { //::osg::Array::asArray
        
            typedef ::osg::Array * ( ::osg::Array::*asArray_function_type )(  ) ;
            typedef ::osg::Array * ( Array_wrapper::*default_asArray_function_type )(  ) ;
            
            Array_exposer.def( 
                "asArray"
                , asArray_function_type(&::osg::Array::asArray)
                , default_asArray_function_type(&Array_wrapper::default_asArray)
                , bp::return_self< >() );
        
        }
        { //::osg::Array::asArray
        
            typedef ::osg::Array const * ( ::osg::Array::*asArray_function_type )(  ) const;
            typedef ::osg::Array const * ( Array_wrapper::*default_asArray_function_type )(  ) const;
            
            Array_exposer.def( 
                "asArray"
                , asArray_function_type(&::osg::Array::asArray)
                , default_asArray_function_type(&Array_wrapper::default_asArray)
                , bp::return_self< >() );
        
        }
        { //::osg::Array::className
        
            typedef char const * ( ::osg::Array::*className_function_type )(  ) const;
            typedef char const * ( Array_wrapper::*default_className_function_type )(  ) const;
            
            Array_exposer.def( 
                "className"
                , className_function_type(&::osg::Array::className)
                , default_className_function_type(&Array_wrapper::default_className) );
        
        }
        { //::osg::Array::compare
        
            typedef int ( ::osg::Array::*compare_function_type )( unsigned int,unsigned int ) const;
            
            Array_exposer.def( 
                "compare"
                , bp::pure_virtual( compare_function_type(&::osg::Array::compare) )
                , ( bp::arg("lhs"), bp::arg("rhs") )
                , "\n Return -1 if lhs element is less than rhs element, 0 if equal,\n 1 if lhs element is greater than rhs element.\n" );
        
        }
        { //::osg::Array::getBinding
        
            typedef ::osg::Array::Binding ( ::osg::Array::*getBinding_function_type )(  ) const;
            
            Array_exposer.def( 
                "getBinding"
                , getBinding_function_type( &::osg::Array::getBinding )
                , " Get how this array should be passed to OpenGL." );
        
        }
        { //::osg::Array::getDataPointer
        
            typedef ::GLvoid const * ( ::osg::Array::*getDataPointer_function_type )(  ) const;
            
            Array_exposer.def( 
                "getDataPointer"
                , bp::pure_virtual( getDataPointer_function_type(&::osg::Array::getDataPointer) )
                , bp::return_value_policy< bp::return_opaque_pointer >() );
        
        }
        { //::osg::Array::getDataSize
        
            typedef ::GLint ( ::osg::Array::*getDataSize_function_type )(  ) const;
            
            Array_exposer.def( 
                "getDataSize"
                , getDataSize_function_type( &::osg::Array::getDataSize ) );
        
        }
        { //::osg::Array::getDataType
        
            typedef ::GLenum ( ::osg::Array::*getDataType_function_type )(  ) const;
            
            Array_exposer.def( 
                "getDataType"
                , getDataType_function_type( &::osg::Array::getDataType ) );
        
        }
        { //::osg::Array::getElementSize
        
            typedef unsigned int ( ::osg::Array::*getElementSize_function_type )(  ) const;
            
            Array_exposer.def( 
                "getElementSize"
                , bp::pure_virtual( getElementSize_function_type(&::osg::Array::getElementSize) ) );
        
        }
        { //::osg::Array::getNormalize
        
            typedef bool ( ::osg::Array::*getNormalize_function_type )(  ) const;
            
            Array_exposer.def( 
                "getNormalize"
                , getNormalize_function_type( &::osg::Array::getNormalize )
                , " Get whether the array data should be normalized by OpenGL." );
        
        }
        { //::osg::Array::getNumElements
        
            typedef unsigned int ( ::osg::Array::*getNumElements_function_type )(  ) const;
            
            Array_exposer.def( 
                "getNumElements"
                , bp::pure_virtual( getNumElements_function_type(&::osg::Array::getNumElements) ) );
        
        }
        { //::osg::Array::getPreserveDataType
        
            typedef bool ( ::osg::Array::*getPreserveDataType_function_type )(  ) const;
            
            Array_exposer.def( 
                "getPreserveDataType"
                , getPreserveDataType_function_type( &::osg::Array::getPreserveDataType )
                , " Get hint to ask that the array data is passed via integer or double, or normal setVertexAttribPointer function." );
        
        }
        { //::osg::Array::getTotalDataSize
        
            typedef unsigned int ( ::osg::Array::*getTotalDataSize_function_type )(  ) const;
            
            Array_exposer.def( 
                "getTotalDataSize"
                , bp::pure_virtual( getTotalDataSize_function_type(&::osg::Array::getTotalDataSize) ) );
        
        }
        { //::osg::Array::getType
        
            typedef ::osg::Array::Type ( ::osg::Array::*getType_function_type )(  ) const;
            
            Array_exposer.def( 
                "getType"
                , getType_function_type( &::osg::Array::getType ) );
        
        }
        { //::osg::Array::getVertexBufferObject
        
            typedef ::osg::VertexBufferObject * ( ::osg::Array::*getVertexBufferObject_function_type )(  ) ;
            
            Array_exposer.def( 
                "getVertexBufferObject"
                , getVertexBufferObject_function_type( &::osg::Array::getVertexBufferObject )
                , bp::return_internal_reference< >()
                , " Get the VertexBufferObject. If no VBO is assigned returns NULL" );
        
        }
        { //::osg::Array::getVertexBufferObject
        
            typedef ::osg::VertexBufferObject const * ( ::osg::Array::*getVertexBufferObject_function_type )(  ) const;
            
            Array_exposer.def( 
                "getVertexBufferObject"
                , getVertexBufferObject_function_type( &::osg::Array::getVertexBufferObject )
                , bp::return_internal_reference< >()
                , " Get the const VertexBufferObject. If no VBO is assigned returns NULL" );
        
        }
        { //::osg::Array::isSameKindAs
        
            typedef bool ( ::osg::Array::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Array_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Array_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::Array::isSameKindAs)
                , default_isSameKindAs_function_type(&Array_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::Array::libraryName
        
            typedef char const * ( ::osg::Array::*libraryName_function_type )(  ) const;
            typedef char const * ( Array_wrapper::*default_libraryName_function_type )(  ) const;
            
            Array_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::Array::libraryName)
                , default_libraryName_function_type(&Array_wrapper::default_libraryName) );
        
        }
        { //::osg::Array::reserveArray
        
            typedef void ( ::osg::Array::*reserveArray_function_type )( unsigned int ) ;
            
            Array_exposer.def( 
                "reserveArray"
                , bp::pure_virtual( reserveArray_function_type(&::osg::Array::reserveArray) )
                , ( bp::arg("num") ) );
        
        }
        { //::osg::Array::resizeArray
        
            typedef void ( ::osg::Array::*resizeArray_function_type )( unsigned int ) ;
            
            Array_exposer.def( 
                "resizeArray"
                , bp::pure_virtual( resizeArray_function_type(&::osg::Array::resizeArray) )
                , ( bp::arg("num") ) );
        
        }
        { //::osg::Array::setBinding
        
            typedef void ( ::osg::Array::*setBinding_function_type )( ::osg::Array::Binding ) ;
            
            Array_exposer.def( 
                "setBinding"
                , setBinding_function_type( &::osg::Array::setBinding )
                , ( bp::arg("binding") )
                , " Specify how this array should be passed to OpenGL." );
        
        }
        { //::osg::Array::setNormalize
        
            typedef void ( ::osg::Array::*setNormalize_function_type )( bool ) ;
            
            Array_exposer.def( 
                "setNormalize"
                , setNormalize_function_type( &::osg::Array::setNormalize )
                , ( bp::arg("normalize") )
                , " Specify whether the array data should be normalized by OpenGL." );
        
        }
        { //::osg::Array::setPreserveDataType
        
            typedef void ( ::osg::Array::*setPreserveDataType_function_type )( bool ) ;
            
            Array_exposer.def( 
                "setPreserveDataType"
                , setPreserveDataType_function_type( &::osg::Array::setPreserveDataType )
                , ( bp::arg("preserve") )
                , " Set hint to ask that the array data is passed via integer or double, or normal setVertexAttribPointer function." );
        
        }
        { //::osg::Array::setVertexBufferObject
        
            typedef void ( ::osg::Array::*setVertexBufferObject_function_type )( ::osg::VertexBufferObject * ) ;
            
            Array_exposer.def( 
                "setVertexBufferObject"
                , setVertexBufferObject_function_type( &::osg::Array::setVertexBufferObject )
                , ( bp::arg("vbo") )
                , " Set the VertexBufferObject." );
        
        }
        { //::osg::Array::trim
        
            typedef void ( ::osg::Array::*trim_function_type )(  ) ;
            typedef void ( Array_wrapper::*default_trim_function_type )(  ) ;
            
            Array_exposer.def( 
                "trim"
                , trim_function_type(&::osg::Array::trim)
                , default_trim_function_type(&Array_wrapper::default_trim) );
        
        }
        { //::osg::Object::clone
        
            typedef ::osg::Object * ( ::osg::Object::*clone_function_type )( ::osg::CopyOp const & ) const;
            
            Array_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::osg::Object::clone) )
                , ( bp::arg("arg0") )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "\n Clone an object, with Object* return type.\n            Must be defined by derived classes.\n" );
        
        }
        { //::osg::Object::cloneType
        
            typedef ::osg::Object * ( ::osg::Object::*cloneType_function_type )(  ) const;
            
            Array_exposer.def( 
                "cloneType"
                , bp::pure_virtual( cloneType_function_type(&::osg::Object::cloneType) )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "\n Clone the type of an object, with Object* return type.\n            Must be defined by derived classes.\n" );
        
        }
        { //::osg::BufferData::resizeGLObjectBuffers
        
            typedef void ( ::osg::BufferData::*resizeGLObjectBuffers_function_type )( unsigned int ) ;
            typedef void ( Array_wrapper::*default_resizeGLObjectBuffers_function_type )( unsigned int ) ;
            
            Array_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::BufferData::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&Array_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
    }

}
