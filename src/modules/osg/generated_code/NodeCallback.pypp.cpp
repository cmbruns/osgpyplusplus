// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "NodeCallback.pypp.hpp"

namespace bp = boost::python;

struct NodeCallback_wrapper : osg::NodeCallback, bp::wrapper< osg::NodeCallback > {

    NodeCallback_wrapper( )
    : osg::NodeCallback( )
      , bp::wrapper< osg::NodeCallback >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::NodeCallback::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::NodeCallback::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::NodeCallback::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::NodeCallback::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::NodeCallback::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::NodeCallback::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::NodeCallback::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::NodeCallback::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::NodeCallback::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::NodeCallback::libraryName( );
    }

    virtual void operator()( ::osg::Node * node, ::osg::NodeVisitor * nv ) {
        if( bp::override func___call__ = this->get_override( "__call__" ) )
            func___call__( boost::python::ptr(node), boost::python::ptr(nv) );
        else{
            this->osg::NodeCallback::operator()( boost::python::ptr(node), boost::python::ptr(nv) );
        }
    }
    
    void default___call__( ::osg::Node * node, ::osg::NodeVisitor * nv ) {
        osg::NodeCallback::operator()( boost::python::ptr(node), boost::python::ptr(nv) );
    }

};

void register_NodeCallback_class(){

    bp::class_< NodeCallback_wrapper, bp::bases< osg::Object >, osg::ref_ptr< NodeCallback_wrapper >, boost::noncopyable >( "NodeCallback", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "addNestedCallback"
            , (void ( ::osg::NodeCallback::* )( ::osg::NodeCallback * ) )( &::osg::NodeCallback::addNestedCallback )
            , ( bp::arg("nc") ) )    
        .def( 
            "className"
            , (char const * ( ::osg::NodeCallback::* )(  ) const)(&::osg::NodeCallback::className)
            , (char const * ( NodeCallback_wrapper::* )(  ) const)(&NodeCallback_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osg::NodeCallback::* )( ::osg::CopyOp const & ) const)(&::osg::NodeCallback::clone)
            , (::osg::Object * ( NodeCallback_wrapper::* )( ::osg::CopyOp const & ) const)(&NodeCallback_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osg::NodeCallback::* )(  ) const)(&::osg::NodeCallback::cloneType)
            , (::osg::Object * ( NodeCallback_wrapper::* )(  ) const)(&NodeCallback_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getNestedCallback"
            , (::osg::NodeCallback * ( ::osg::NodeCallback::* )(  ) )( &::osg::NodeCallback::getNestedCallback )
            , bp::return_internal_reference< >() )    
        .def( 
            "getNestedCallback"
            , (::osg::NodeCallback const * ( ::osg::NodeCallback::* )(  ) const)( &::osg::NodeCallback::getNestedCallback )
            , bp::return_internal_reference< >() )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osg::NodeCallback::* )( ::osg::Object const * ) const)(&::osg::NodeCallback::isSameKindAs)
            , (bool ( NodeCallback_wrapper::* )( ::osg::Object const * ) const)(&NodeCallback_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osg::NodeCallback::* )(  ) const)(&::osg::NodeCallback::libraryName)
            , (char const * ( NodeCallback_wrapper::* )(  ) const)(&NodeCallback_wrapper::default_libraryName) )    
        .def( 
            "__call__"
            , (void ( ::osg::NodeCallback::* )( ::osg::Node *,::osg::NodeVisitor * ) )(&::osg::NodeCallback::operator())
            , (void ( NodeCallback_wrapper::* )( ::osg::Node *,::osg::NodeVisitor * ) )(&NodeCallback_wrapper::default___call__)
            , ( bp::arg("node"), bp::arg("nv") ) )    
        .def( 
            "removeNestedCallback"
            , (void ( ::osg::NodeCallback::* )( ::osg::NodeCallback * ) )( &::osg::NodeCallback::removeNestedCallback )
            , ( bp::arg("nc") ) )    
        .def( 
            "setNestedCallback"
            , (void ( ::osg::NodeCallback::* )( ::osg::NodeCallback * ) )( &::osg::NodeCallback::setNestedCallback )
            , ( bp::arg("nc") ) )    
        .def( 
            "traverse"
            , (void ( ::osg::NodeCallback::* )( ::osg::Node *,::osg::NodeVisitor * ) )( &::osg::NodeCallback::traverse )
            , ( bp::arg("node"), bp::arg("nv") )
            , " Call any nested callbacks and then traverse the scene graph." )    
        .def_readwrite( "_nestedCallback", &osg::NodeCallback::_nestedCallback );

}
