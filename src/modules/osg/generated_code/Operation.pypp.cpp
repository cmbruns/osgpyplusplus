// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "Operation.pypp.hpp"

namespace bp = boost::python;

struct Operation_wrapper : osg::Operation, bp::wrapper< osg::Operation > {

    virtual void operator()( ::osg::Object * arg0 ){
        bp::override func___call__ = this->get_override( "__call__" );
        func___call__( boost::python::ptr(arg0) );
    }

    virtual void release(  ) {
        if( bp::override func_release = this->get_override( "release" ) )
            func_release(  );
        else{
            this->osg::Operation::release(  );
        }
    }
    
    void default_release(  ) {
        osg::Operation::release( );
    }

};

void register_Operation_class(){

    bp::class_< Operation_wrapper, bp::bases< osg::Referenced >, osg::ref_ptr< ::osg::Operation >, boost::noncopyable >( "Operation", "\n Base class for implementing graphics operations.\n", bp::no_init )    
        .def( 
            "getKeep"
            , (bool ( ::osg::Operation::* )(  ) const)( &::osg::Operation::getKeep )
            , " Get whether the operation should be kept once its been applied." )    
        .def( 
            "getName"
            , (::std::string const & ( ::osg::Operation::* )(  ) const)( &::osg::Operation::getName )
            , bp::return_value_policy< bp::copy_const_reference >()
            , " Get the human readable name of the operation." )    
        .def( 
            "__call__"
            , bp::pure_virtual( (void ( ::osg::Operation::* )( ::osg::Object * ) )(&::osg::Operation::operator()) )
            , ( bp::arg("arg0") )
            , "\n Do the actual task of this operation.\n" )    
        .def( 
            "release"
            , (void ( ::osg::Operation::* )(  ) )(&::osg::Operation::release)
            , (void ( Operation_wrapper::* )(  ) )(&Operation_wrapper::default_release) )    
        .def( 
            "setKeep"
            , (void ( ::osg::Operation::* )( bool ) )( &::osg::Operation::setKeep )
            , ( bp::arg("keep") )
            , " Set whether the operation should be kept once its been applied." )    
        .def( 
            "setName"
            , (void ( ::osg::Operation::* )( ::std::string const & ) )( &::osg::Operation::setName )
            , ( bp::arg("name") )
            , " Set the human readable name of the operation." );

}
