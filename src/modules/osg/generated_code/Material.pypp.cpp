// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "Material.pypp.hpp"

namespace bp = boost::python;

struct Material_wrapper : osg::Material, bp::wrapper< osg::Material > {

    Material_wrapper( )
    : osg::Material( )
      , bp::wrapper< osg::Material >(){
        // null constructor
    
    }

    virtual void apply( ::osg::State & state ) const  {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(state) );
        else{
            this->osg::Material::apply( boost::ref(state) );
        }
    }
    
    void default_apply( ::osg::State & state ) const  {
        osg::Material::apply( boost::ref(state) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::Material::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::Material::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::Material::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::Material::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::Material::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::Material::cloneType( );
    }

    virtual bool getModeUsage( ::osg::StateAttribute::ModeUsage & arg0 ) const  {
        if( bp::override func_getModeUsage = this->get_override( "getModeUsage" ) )
            return func_getModeUsage( boost::ref(arg0) );
        else{
            return this->osg::Material::getModeUsage( boost::ref(arg0) );
        }
    }
    
    bool default_getModeUsage( ::osg::StateAttribute::ModeUsage & arg0 ) const  {
        return osg::Material::getModeUsage( boost::ref(arg0) );
    }

    virtual ::osg::StateAttribute::Type getType(  ) const  {
        if( bp::override func_getType = this->get_override( "getType" ) )
            return func_getType(  );
        else{
            return this->osg::Material::getType(  );
        }
    }
    
    ::osg::StateAttribute::Type default_getType(  ) const  {
        return osg::Material::getType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::Material::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::Material::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::Material::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::Material::libraryName( );
    }

    virtual ::osg::Texture * asTexture(  ) {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::StateAttribute::asTexture(  );
        }
    }
    
    ::osg::Texture * default_asTexture(  ) {
        return osg::StateAttribute::asTexture( );
    }

    virtual ::osg::Texture const * asTexture(  ) const  {
        if( bp::override func_asTexture = this->get_override( "asTexture" ) )
            return func_asTexture(  );
        else{
            return this->osg::StateAttribute::asTexture(  );
        }
    }
    
    ::osg::Texture const * default_asTexture(  ) const  {
        return osg::StateAttribute::asTexture( );
    }

    virtual bool checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        if( bp::override func_checkValidityOfAssociatedModes = this->get_override( "checkValidityOfAssociatedModes" ) )
            return func_checkValidityOfAssociatedModes( boost::ref(arg0) );
        else{
            return this->osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
        }
    }
    
    bool default_checkValidityOfAssociatedModes( ::osg::State & arg0 ) const  {
        return osg::StateAttribute::checkValidityOfAssociatedModes( boost::ref(arg0) );
    }

    virtual void compileGLObjects( ::osg::State & arg0 ) const  {
        if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
            func_compileGLObjects( boost::ref(arg0) );
        else{
            this->osg::StateAttribute::compileGLObjects( boost::ref(arg0) );
        }
    }
    
    void default_compileGLObjects( ::osg::State & arg0 ) const  {
        osg::StateAttribute::compileGLObjects( boost::ref(arg0) );
    }

    virtual unsigned int getMember(  ) const  {
        if( bp::override func_getMember = this->get_override( "getMember" ) )
            return func_getMember(  );
        else{
            return this->osg::StateAttribute::getMember(  );
        }
    }
    
    unsigned int default_getMember(  ) const  {
        return osg::StateAttribute::getMember( );
    }

    virtual bool isTextureAttribute(  ) const  {
        if( bp::override func_isTextureAttribute = this->get_override( "isTextureAttribute" ) )
            return func_isTextureAttribute(  );
        else{
            return this->osg::StateAttribute::isTextureAttribute(  );
        }
    }
    
    bool default_isTextureAttribute(  ) const  {
        return osg::StateAttribute::isTextureAttribute( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::StateAttribute::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::StateAttribute::resizeGLObjectBuffers( arg0 );
    }

};

void register_Material_class(){

    { //::osg::Material
        typedef bp::class_< Material_wrapper, bp::bases< osg::StateAttribute >, osg::ref_ptr< ::osg::Material >, boost::noncopyable > Material_exposer_t;
        Material_exposer_t Material_exposer = Material_exposer_t( "Material", "\n Material - encapsulates OpenGL glMaterial state.\n", bp::no_init );
        bp::scope Material_scope( Material_exposer );
        bp::enum_< osg::Material::ColorMode>("ColorMode")
            .value("AMBIENT", osg::Material::AMBIENT)
            .value("DIFFUSE", osg::Material::DIFFUSE)
            .value("SPECULAR", osg::Material::SPECULAR)
            .value("EMISSION", osg::Material::EMISSION)
            .value("AMBIENT_AND_DIFFUSE", osg::Material::AMBIENT_AND_DIFFUSE)
            .value("OFF", osg::Material::OFF)
            .export_values()
            ;
        bp::enum_< osg::Material::Face>("Face")
            .value("FRONT", osg::Material::FRONT)
            .value("BACK", osg::Material::BACK)
            .value("FRONT_AND_BACK", osg::Material::FRONT_AND_BACK)
            .export_values()
            ;
        Material_exposer.def( bp::init< >("\n Material - encapsulates OpenGL glMaterial state.\n") );
        { //::osg::Material::apply
        
            typedef void ( ::osg::Material::*apply_function_type )( ::osg::State & ) const;
            typedef void ( Material_wrapper::*default_apply_function_type )( ::osg::State & ) const;
            
            Material_exposer.def( 
                "apply"
                , apply_function_type(&::osg::Material::apply)
                , default_apply_function_type(&Material_wrapper::default_apply)
                , ( bp::arg("state") ) );
        
        }
        { //::osg::Material::className
        
            typedef char const * ( ::osg::Material::*className_function_type )(  ) const;
            typedef char const * ( Material_wrapper::*default_className_function_type )(  ) const;
            
            Material_exposer.def( 
                "className"
                , className_function_type(&::osg::Material::className)
                , default_className_function_type(&Material_wrapper::default_className) );
        
        }
        { //::osg::Material::clone
        
            typedef ::osg::Object * ( ::osg::Material::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Material_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Material_exposer.def( 
                "clone"
                , clone_function_type(&::osg::Material::clone)
                , default_clone_function_type(&Material_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Material::cloneType
        
            typedef ::osg::Object * ( ::osg::Material::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Material_wrapper::*default_cloneType_function_type )(  ) const;
            
            Material_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::Material::cloneType)
                , default_cloneType_function_type(&Material_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Material::getAmbient
        
            typedef ::osg::Vec4 const & ( ::osg::Material::*getAmbient_function_type )( ::osg::Material::Face ) const;
            
            Material_exposer.def( 
                "getAmbient"
                , getAmbient_function_type( &::osg::Material::getAmbient )
                , ( bp::arg("face") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Material::getAmbientFrontAndBack
        
            typedef bool ( ::osg::Material::*getAmbientFrontAndBack_function_type )(  ) const;
            
            Material_exposer.def( 
                "getAmbientFrontAndBack"
                , getAmbientFrontAndBack_function_type( &::osg::Material::getAmbientFrontAndBack ) );
        
        }
        { //::osg::Material::getColorMode
        
            typedef ::osg::Material::ColorMode ( ::osg::Material::*getColorMode_function_type )(  ) const;
            
            Material_exposer.def( 
                "getColorMode"
                , getColorMode_function_type( &::osg::Material::getColorMode ) );
        
        }
        { //::osg::Material::getDiffuse
        
            typedef ::osg::Vec4 const & ( ::osg::Material::*getDiffuse_function_type )( ::osg::Material::Face ) const;
            
            Material_exposer.def( 
                "getDiffuse"
                , getDiffuse_function_type( &::osg::Material::getDiffuse )
                , ( bp::arg("face") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Material::getDiffuseFrontAndBack
        
            typedef bool ( ::osg::Material::*getDiffuseFrontAndBack_function_type )(  ) const;
            
            Material_exposer.def( 
                "getDiffuseFrontAndBack"
                , getDiffuseFrontAndBack_function_type( &::osg::Material::getDiffuseFrontAndBack ) );
        
        }
        { //::osg::Material::getEmission
        
            typedef ::osg::Vec4 const & ( ::osg::Material::*getEmission_function_type )( ::osg::Material::Face ) const;
            
            Material_exposer.def( 
                "getEmission"
                , getEmission_function_type( &::osg::Material::getEmission )
                , ( bp::arg("face") )
                , bp::return_internal_reference< >()
                , " Get the emission value for specified face." );
        
        }
        { //::osg::Material::getEmissionFrontAndBack
        
            typedef bool ( ::osg::Material::*getEmissionFrontAndBack_function_type )(  ) const;
            
            Material_exposer.def( 
                "getEmissionFrontAndBack"
                , getEmissionFrontAndBack_function_type( &::osg::Material::getEmissionFrontAndBack )
                , " Return whether emission values are equal for front and back faces\n or not." );
        
        }
        { //::osg::Material::getModeUsage
        
            typedef bool ( ::osg::Material::*getModeUsage_function_type )( ::osg::StateAttribute::ModeUsage & ) const;
            typedef bool ( Material_wrapper::*default_getModeUsage_function_type )( ::osg::StateAttribute::ModeUsage & ) const;
            
            Material_exposer.def( 
                "getModeUsage"
                , getModeUsage_function_type(&::osg::Material::getModeUsage)
                , default_getModeUsage_function_type(&Material_wrapper::default_getModeUsage)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::Material::getShininess
        
            typedef float ( ::osg::Material::*getShininess_function_type )( ::osg::Material::Face ) const;
            
            Material_exposer.def( 
                "getShininess"
                , getShininess_function_type( &::osg::Material::getShininess )
                , ( bp::arg("face") )
                , " Get the shininess value for specified face." );
        
        }
        { //::osg::Material::getShininessFrontAndBack
        
            typedef bool ( ::osg::Material::*getShininessFrontAndBack_function_type )(  ) const;
            
            Material_exposer.def( 
                "getShininessFrontAndBack"
                , getShininessFrontAndBack_function_type( &::osg::Material::getShininessFrontAndBack )
                , " Return whether shininess values are equal for front and back faces\n or not." );
        
        }
        { //::osg::Material::getSpecular
        
            typedef ::osg::Vec4 const & ( ::osg::Material::*getSpecular_function_type )( ::osg::Material::Face ) const;
            
            Material_exposer.def( 
                "getSpecular"
                , getSpecular_function_type( &::osg::Material::getSpecular )
                , ( bp::arg("face") )
                , bp::return_internal_reference< >()
                , " Get the specular value for specified face." );
        
        }
        { //::osg::Material::getSpecularFrontAndBack
        
            typedef bool ( ::osg::Material::*getSpecularFrontAndBack_function_type )(  ) const;
            
            Material_exposer.def( 
                "getSpecularFrontAndBack"
                , getSpecularFrontAndBack_function_type( &::osg::Material::getSpecularFrontAndBack )
                , " Return whether specular values are equal for front and back faces\n or not." );
        
        }
        { //::osg::Material::getType
        
            typedef ::osg::StateAttribute::Type ( ::osg::Material::*getType_function_type )(  ) const;
            typedef ::osg::StateAttribute::Type ( Material_wrapper::*default_getType_function_type )(  ) const;
            
            Material_exposer.def( 
                "getType"
                , getType_function_type(&::osg::Material::getType)
                , default_getType_function_type(&Material_wrapper::default_getType) );
        
        }
        { //::osg::Material::isSameKindAs
        
            typedef bool ( ::osg::Material::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Material_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Material_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::Material::isSameKindAs)
                , default_isSameKindAs_function_type(&Material_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::Material::libraryName
        
            typedef char const * ( ::osg::Material::*libraryName_function_type )(  ) const;
            typedef char const * ( Material_wrapper::*default_libraryName_function_type )(  ) const;
            
            Material_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::Material::libraryName)
                , default_libraryName_function_type(&Material_wrapper::default_libraryName) );
        
        }
        { //::osg::Material::setAlpha
        
            typedef void ( ::osg::Material::*setAlpha_function_type )( ::osg::Material::Face,float ) ;
            
            Material_exposer.def( 
                "setAlpha"
                , setAlpha_function_type( &::osg::Material::setAlpha )
                , ( bp::arg("face"), bp::arg("alpha") )
                , " Set the alpha value of ambient, diffuse, specular and emission\n colors. Valid transparency range is 0.0 to 1.0." );
        
        }
        { //::osg::Material::setAmbient
        
            typedef void ( ::osg::Material::*setAmbient_function_type )( ::osg::Material::Face,::osg::Vec4 const & ) ;
            
            Material_exposer.def( 
                "setAmbient"
                , setAmbient_function_type( &::osg::Material::setAmbient )
                , ( bp::arg("face"), bp::arg("ambient") ) );
        
        }
        { //::osg::Material::setColorMode
        
            typedef void ( ::osg::Material::*setColorMode_function_type )( ::osg::Material::ColorMode ) ;
            
            Material_exposer.def( 
                "setColorMode"
                , setColorMode_function_type( &::osg::Material::setColorMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::osg::Material::setDiffuse
        
            typedef void ( ::osg::Material::*setDiffuse_function_type )( ::osg::Material::Face,::osg::Vec4 const & ) ;
            
            Material_exposer.def( 
                "setDiffuse"
                , setDiffuse_function_type( &::osg::Material::setDiffuse )
                , ( bp::arg("face"), bp::arg("diffuse") ) );
        
        }
        { //::osg::Material::setEmission
        
            typedef void ( ::osg::Material::*setEmission_function_type )( ::osg::Material::Face,::osg::Vec4 const & ) ;
            
            Material_exposer.def( 
                "setEmission"
                , setEmission_function_type( &::osg::Material::setEmission )
                , ( bp::arg("face"), bp::arg("emission") )
                , " Set emission value of specified face(s) of the material,\n valid emission[0..3] range is 0.0 to 1.0." );
        
        }
        { //::osg::Material::setShininess
        
            typedef void ( ::osg::Material::*setShininess_function_type )( ::osg::Material::Face,float ) ;
            
            Material_exposer.def( 
                "setShininess"
                , setShininess_function_type( &::osg::Material::setShininess )
                , ( bp::arg("face"), bp::arg("shininess") )
                , " Set shininess of specified face(s) of the material.\n valid shininess range is 0.0 to 128.0." );
        
        }
        { //::osg::Material::setSpecular
        
            typedef void ( ::osg::Material::*setSpecular_function_type )( ::osg::Material::Face,::osg::Vec4 const & ) ;
            
            Material_exposer.def( 
                "setSpecular"
                , setSpecular_function_type( &::osg::Material::setSpecular )
                , ( bp::arg("face"), bp::arg("specular") )
                , " Set specular value of specified face(s) of the material,\n valid specular[0..3] range is 0.0 to 1.0." );
        
        }
        { //::osg::Material::setTransparency
        
            typedef void ( ::osg::Material::*setTransparency_function_type )( ::osg::Material::Face,float ) ;
            
            Material_exposer.def( 
                "setTransparency"
                , setTransparency_function_type( &::osg::Material::setTransparency )
                , ( bp::arg("face"), bp::arg("trans") )
                , " Set the alpha value of ambient, diffuse, specular and emission\n colors of specified face, to 1-transparency.\n Valid transparency range is 0.0 to 1.0." );
        
        }
        { //::osg::StateAttribute::asTexture
        
            typedef ::osg::Texture * ( ::osg::StateAttribute::*asTexture_function_type )(  ) ;
            typedef ::osg::Texture * ( Material_wrapper::*default_asTexture_function_type )(  ) ;
            
            Material_exposer.def( 
                "asTexture"
                , asTexture_function_type(&::osg::StateAttribute::asTexture)
                , default_asTexture_function_type(&Material_wrapper::default_asTexture)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateAttribute::asTexture
        
            typedef ::osg::Texture const * ( ::osg::StateAttribute::*asTexture_function_type )(  ) const;
            typedef ::osg::Texture const * ( Material_wrapper::*default_asTexture_function_type )(  ) const;
            
            Material_exposer.def( 
                "asTexture"
                , asTexture_function_type(&::osg::StateAttribute::asTexture)
                , default_asTexture_function_type(&Material_wrapper::default_asTexture)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::StateAttribute::checkValidityOfAssociatedModes
        
            typedef bool ( ::osg::StateAttribute::*checkValidityOfAssociatedModes_function_type )( ::osg::State & ) const;
            typedef bool ( Material_wrapper::*default_checkValidityOfAssociatedModes_function_type )( ::osg::State & ) const;
            
            Material_exposer.def( 
                "checkValidityOfAssociatedModes"
                , checkValidityOfAssociatedModes_function_type(&::osg::StateAttribute::checkValidityOfAssociatedModes)
                , default_checkValidityOfAssociatedModes_function_type(&Material_wrapper::default_checkValidityOfAssociatedModes)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::StateAttribute::compileGLObjects
        
            typedef void ( ::osg::StateAttribute::*compileGLObjects_function_type )( ::osg::State & ) const;
            typedef void ( Material_wrapper::*default_compileGLObjects_function_type )( ::osg::State & ) const;
            
            Material_exposer.def( 
                "compileGLObjects"
                , compileGLObjects_function_type(&::osg::StateAttribute::compileGLObjects)
                , default_compileGLObjects_function_type(&Material_wrapper::default_compileGLObjects)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osg::StateAttribute::getMember
        
            typedef unsigned int ( ::osg::StateAttribute::*getMember_function_type )(  ) const;
            typedef unsigned int ( Material_wrapper::*default_getMember_function_type )(  ) const;
            
            Material_exposer.def( 
                "getMember"
                , getMember_function_type(&::osg::StateAttribute::getMember)
                , default_getMember_function_type(&Material_wrapper::default_getMember) );
        
        }
        { //::osg::StateAttribute::isTextureAttribute
        
            typedef bool ( ::osg::StateAttribute::*isTextureAttribute_function_type )(  ) const;
            typedef bool ( Material_wrapper::*default_isTextureAttribute_function_type )(  ) const;
            
            Material_exposer.def( 
                "isTextureAttribute"
                , isTextureAttribute_function_type(&::osg::StateAttribute::isTextureAttribute)
                , default_isTextureAttribute_function_type(&Material_wrapper::default_isTextureAttribute) );
        
        }
        { //::osg::StateAttribute::resizeGLObjectBuffers
        
            typedef void ( ::osg::StateAttribute::*resizeGLObjectBuffers_function_type )( unsigned int ) ;
            typedef void ( Material_wrapper::*default_resizeGLObjectBuffers_function_type )( unsigned int ) ;
            
            Material_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::StateAttribute::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&Material_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("arg0") ) );
        
        }
    }

}
