// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "AnimationPath.pypp.hpp"

namespace bp = boost::python;

struct AnimationPath_wrapper : osg::AnimationPath, bp::wrapper< osg::AnimationPath > {

    AnimationPath_wrapper( )
    : osg::AnimationPath( )
      , bp::wrapper< osg::AnimationPath >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::AnimationPath::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::AnimationPath::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::AnimationPath::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::AnimationPath::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::AnimationPath::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::AnimationPath::cloneType( );
    }

    virtual bool getInterpolatedControlPoint( double time, ::osg::AnimationPath::ControlPoint & controlPoint ) const  {
        if( bp::override func_getInterpolatedControlPoint = this->get_override( "getInterpolatedControlPoint" ) )
            return func_getInterpolatedControlPoint( time, boost::ref(controlPoint) );
        else{
            return this->osg::AnimationPath::getInterpolatedControlPoint( time, boost::ref(controlPoint) );
        }
    }
    
    bool default_getInterpolatedControlPoint( double time, ::osg::AnimationPath::ControlPoint & controlPoint ) const  {
        return osg::AnimationPath::getInterpolatedControlPoint( time, boost::ref(controlPoint) );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::AnimationPath::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::AnimationPath::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::AnimationPath::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::AnimationPath::libraryName( );
    }

};

void register_AnimationPath_class(){

    { //::osg::AnimationPath
        typedef bp::class_< AnimationPath_wrapper, bp::bases< osg::Object >, osg::ref_ptr< ::osg::AnimationPath >, boost::noncopyable > AnimationPath_exposer_t;
        AnimationPath_exposer_t AnimationPath_exposer = AnimationPath_exposer_t( "AnimationPath", "\n AnimationPath encapsulates a time varying transformation pathway. Can be\n used for updating camera position and model object position.\n AnimationPathCallback can be attached directly to Transform nodes to\n move subgraphs around the scene.\n", bp::no_init );
        bp::scope AnimationPath_scope( AnimationPath_exposer );
        bp::enum_< osg::AnimationPath::LoopMode>("LoopMode")
            .value("SWING", osg::AnimationPath::SWING)
            .value("LOOP", osg::AnimationPath::LOOP)
            .value("NO_LOOPING", osg::AnimationPath::NO_LOOPING)
            .export_values()
            ;
        { //::osg::AnimationPath::ControlPoint
            typedef bp::class_< osg::AnimationPath::ControlPoint > ControlPoint_exposer_t;
            ControlPoint_exposer_t ControlPoint_exposer = ControlPoint_exposer_t( "ControlPoint", bp::init< >() );
            bp::scope ControlPoint_scope( ControlPoint_exposer );
            ControlPoint_exposer.def( bp::init< osg::Vec3d const & >(( bp::arg("position") )) );
            bp::implicitly_convertible< osg::Vec3d const &, osg::AnimationPath::ControlPoint >();
            ControlPoint_exposer.def( bp::init< osg::Vec3d const &, osg::Quat const & >(( bp::arg("position"), bp::arg("rotation") )) );
            ControlPoint_exposer.def( bp::init< osg::Vec3d const &, osg::Quat const &, osg::Vec3d const & >(( bp::arg("position"), bp::arg("rotation"), bp::arg("scale") )) );
            { //::osg::AnimationPath::ControlPoint::getInverse
            
                typedef void ( ::osg::AnimationPath::ControlPoint::*getInverse_function_type )( ::osg::Matrixf & ) const;
                
                ControlPoint_exposer.def( 
                    "getInverse"
                    , getInverse_function_type( &::osg::AnimationPath::ControlPoint::getInverse )
                    , ( bp::arg("matrix") ) );
            
            }
            { //::osg::AnimationPath::ControlPoint::getInverse
            
                typedef void ( ::osg::AnimationPath::ControlPoint::*getInverse_function_type )( ::osg::Matrixd & ) const;
                
                ControlPoint_exposer.def( 
                    "getInverse"
                    , getInverse_function_type( &::osg::AnimationPath::ControlPoint::getInverse )
                    , ( bp::arg("matrix") ) );
            
            }
            { //::osg::AnimationPath::ControlPoint::getMatrix
            
                typedef void ( ::osg::AnimationPath::ControlPoint::*getMatrix_function_type )( ::osg::Matrixf & ) const;
                
                ControlPoint_exposer.def( 
                    "getMatrix"
                    , getMatrix_function_type( &::osg::AnimationPath::ControlPoint::getMatrix )
                    , ( bp::arg("matrix") ) );
            
            }
            { //::osg::AnimationPath::ControlPoint::getMatrix
            
                typedef void ( ::osg::AnimationPath::ControlPoint::*getMatrix_function_type )( ::osg::Matrixd & ) const;
                
                ControlPoint_exposer.def( 
                    "getMatrix"
                    , getMatrix_function_type( &::osg::AnimationPath::ControlPoint::getMatrix )
                    , ( bp::arg("matrix") ) );
            
            }
            { //::osg::AnimationPath::ControlPoint::getPosition
            
                typedef ::osg::Vec3d const & ( ::osg::AnimationPath::ControlPoint::*getPosition_function_type )(  ) const;
                
                ControlPoint_exposer.def( 
                    "getPosition"
                    , getPosition_function_type( &::osg::AnimationPath::ControlPoint::getPosition )
                    , bp::return_internal_reference< >() );
            
            }
            { //::osg::AnimationPath::ControlPoint::getRotation
            
                typedef ::osg::Quat const & ( ::osg::AnimationPath::ControlPoint::*getRotation_function_type )(  ) const;
                
                ControlPoint_exposer.def( 
                    "getRotation"
                    , getRotation_function_type( &::osg::AnimationPath::ControlPoint::getRotation )
                    , bp::return_internal_reference< >() );
            
            }
            { //::osg::AnimationPath::ControlPoint::getScale
            
                typedef ::osg::Vec3d const & ( ::osg::AnimationPath::ControlPoint::*getScale_function_type )(  ) const;
                
                ControlPoint_exposer.def( 
                    "getScale"
                    , getScale_function_type( &::osg::AnimationPath::ControlPoint::getScale )
                    , bp::return_internal_reference< >() );
            
            }
            { //::osg::AnimationPath::ControlPoint::interpolate
            
                typedef void ( ::osg::AnimationPath::ControlPoint::*interpolate_function_type )( float,::osg::AnimationPath::ControlPoint const &,::osg::AnimationPath::ControlPoint const & ) ;
                
                ControlPoint_exposer.def( 
                    "interpolate"
                    , interpolate_function_type( &::osg::AnimationPath::ControlPoint::interpolate )
                    , ( bp::arg("ratio"), bp::arg("first"), bp::arg("second") ) );
            
            }
            { //::osg::AnimationPath::ControlPoint::interpolate
            
                typedef void ( ::osg::AnimationPath::ControlPoint::*interpolate_function_type )( double,::osg::AnimationPath::ControlPoint const &,::osg::AnimationPath::ControlPoint const & ) ;
                
                ControlPoint_exposer.def( 
                    "interpolate"
                    , interpolate_function_type( &::osg::AnimationPath::ControlPoint::interpolate )
                    , ( bp::arg("ratio"), bp::arg("first"), bp::arg("second") ) );
            
            }
            { //::osg::AnimationPath::ControlPoint::setPosition
            
                typedef void ( ::osg::AnimationPath::ControlPoint::*setPosition_function_type )( ::osg::Vec3d const & ) ;
                
                ControlPoint_exposer.def( 
                    "setPosition"
                    , setPosition_function_type( &::osg::AnimationPath::ControlPoint::setPosition )
                    , ( bp::arg("position") ) );
            
            }
            { //::osg::AnimationPath::ControlPoint::setRotation
            
                typedef void ( ::osg::AnimationPath::ControlPoint::*setRotation_function_type )( ::osg::Quat const & ) ;
                
                ControlPoint_exposer.def( 
                    "setRotation"
                    , setRotation_function_type( &::osg::AnimationPath::ControlPoint::setRotation )
                    , ( bp::arg("rotation") ) );
            
            }
            { //::osg::AnimationPath::ControlPoint::setScale
            
                typedef void ( ::osg::AnimationPath::ControlPoint::*setScale_function_type )( ::osg::Vec3d const & ) ;
                
                ControlPoint_exposer.def( 
                    "setScale"
                    , setScale_function_type( &::osg::AnimationPath::ControlPoint::setScale )
                    , ( bp::arg("scale") ) );
            
            }
        }
        AnimationPath_exposer.def( bp::init< >("\n AnimationPath encapsulates a time varying transformation pathway. Can be\n used for updating camera position and model object position.\n AnimationPathCallback can be attached directly to Transform nodes to\n move subgraphs around the scene.\n") );
        { //::osg::AnimationPath::className
        
            typedef char const * ( ::osg::AnimationPath::*className_function_type )(  ) const;
            typedef char const * ( AnimationPath_wrapper::*default_className_function_type )(  ) const;
            
            AnimationPath_exposer.def( 
                "className"
                , className_function_type(&::osg::AnimationPath::className)
                , default_className_function_type(&AnimationPath_wrapper::default_className) );
        
        }
        { //::osg::AnimationPath::clear
        
            typedef void ( ::osg::AnimationPath::*clear_function_type )(  ) ;
            
            AnimationPath_exposer.def( 
                "clear"
                , clear_function_type( &::osg::AnimationPath::clear ) );
        
        }
        { //::osg::AnimationPath::clone
        
            typedef ::osg::Object * ( ::osg::AnimationPath::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( AnimationPath_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            AnimationPath_exposer.def( 
                "clone"
                , clone_function_type(&::osg::AnimationPath::clone)
                , default_clone_function_type(&AnimationPath_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::AnimationPath::cloneType
        
            typedef ::osg::Object * ( ::osg::AnimationPath::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( AnimationPath_wrapper::*default_cloneType_function_type )(  ) const;
            
            AnimationPath_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::AnimationPath::cloneType)
                , default_cloneType_function_type(&AnimationPath_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::AnimationPath::empty
        
            typedef bool ( ::osg::AnimationPath::*empty_function_type )(  ) const;
            
            AnimationPath_exposer.def( 
                "empty"
                , empty_function_type( &::osg::AnimationPath::empty ) );
        
        }
        { //::osg::AnimationPath::getFirstTime
        
            typedef double ( ::osg::AnimationPath::*getFirstTime_function_type )(  ) const;
            
            AnimationPath_exposer.def( 
                "getFirstTime"
                , getFirstTime_function_type( &::osg::AnimationPath::getFirstTime ) );
        
        }
        { //::osg::AnimationPath::getInterpolatedControlPoint
        
            typedef bool ( ::osg::AnimationPath::*getInterpolatedControlPoint_function_type )( double,::osg::AnimationPath::ControlPoint & ) const;
            typedef bool ( AnimationPath_wrapper::*default_getInterpolatedControlPoint_function_type )( double,::osg::AnimationPath::ControlPoint & ) const;
            
            AnimationPath_exposer.def( 
                "getInterpolatedControlPoint"
                , getInterpolatedControlPoint_function_type(&::osg::AnimationPath::getInterpolatedControlPoint)
                , default_getInterpolatedControlPoint_function_type(&AnimationPath_wrapper::default_getInterpolatedControlPoint)
                , ( bp::arg("time"), bp::arg("controlPoint") ) );
        
        }
        { //::osg::AnimationPath::getInverse
        
            typedef bool ( ::osg::AnimationPath::*getInverse_function_type )( double,::osg::Matrixf & ) const;
            
            AnimationPath_exposer.def( 
                "getInverse"
                , getInverse_function_type( &::osg::AnimationPath::getInverse )
                , ( bp::arg("time"), bp::arg("matrix") )
                , " Given a specific time, return the inverse transformation matrix for a point." );
        
        }
        { //::osg::AnimationPath::getInverse
        
            typedef bool ( ::osg::AnimationPath::*getInverse_function_type )( double,::osg::Matrixd & ) const;
            
            AnimationPath_exposer.def( 
                "getInverse"
                , getInverse_function_type( &::osg::AnimationPath::getInverse )
                , ( bp::arg("time"), bp::arg("matrix") ) );
        
        }
        { //::osg::AnimationPath::getLastTime
        
            typedef double ( ::osg::AnimationPath::*getLastTime_function_type )(  ) const;
            
            AnimationPath_exposer.def( 
                "getLastTime"
                , getLastTime_function_type( &::osg::AnimationPath::getLastTime ) );
        
        }
        { //::osg::AnimationPath::getLoopMode
        
            typedef ::osg::AnimationPath::LoopMode ( ::osg::AnimationPath::*getLoopMode_function_type )(  ) const;
            
            AnimationPath_exposer.def( 
                "getLoopMode"
                , getLoopMode_function_type( &::osg::AnimationPath::getLoopMode ) );
        
        }
        { //::osg::AnimationPath::getMatrix
        
            typedef bool ( ::osg::AnimationPath::*getMatrix_function_type )( double,::osg::Matrixf & ) const;
            
            AnimationPath_exposer.def( 
                "getMatrix"
                , getMatrix_function_type( &::osg::AnimationPath::getMatrix )
                , ( bp::arg("time"), bp::arg("matrix") )
                , " Given a specific time, return the transformation matrix for a point." );
        
        }
        { //::osg::AnimationPath::getMatrix
        
            typedef bool ( ::osg::AnimationPath::*getMatrix_function_type )( double,::osg::Matrixd & ) const;
            
            AnimationPath_exposer.def( 
                "getMatrix"
                , getMatrix_function_type( &::osg::AnimationPath::getMatrix )
                , ( bp::arg("time"), bp::arg("matrix") )
                , " Given a specific time, return the transformation matrix for a point." );
        
        }
        { //::osg::AnimationPath::getPeriod
        
            typedef double ( ::osg::AnimationPath::*getPeriod_function_type )(  ) const;
            
            AnimationPath_exposer.def( 
                "getPeriod"
                , getPeriod_function_type( &::osg::AnimationPath::getPeriod ) );
        
        }
        { //::osg::AnimationPath::getTimeControlPointMap
        
            typedef ::std::map< double, osg::AnimationPath::ControlPoint > & ( ::osg::AnimationPath::*getTimeControlPointMap_function_type )(  ) ;
            
            AnimationPath_exposer.def( 
                "getTimeControlPointMap"
                , getTimeControlPointMap_function_type( &::osg::AnimationPath::getTimeControlPointMap )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::AnimationPath::getTimeControlPointMap
        
            typedef ::std::map< double, osg::AnimationPath::ControlPoint > const & ( ::osg::AnimationPath::*getTimeControlPointMap_function_type )(  ) const;
            
            AnimationPath_exposer.def( 
                "getTimeControlPointMap"
                , getTimeControlPointMap_function_type( &::osg::AnimationPath::getTimeControlPointMap )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::AnimationPath::insert
        
            typedef void ( ::osg::AnimationPath::*insert_function_type )( double,::osg::AnimationPath::ControlPoint const & ) ;
            
            AnimationPath_exposer.def( 
                "insert"
                , insert_function_type( &::osg::AnimationPath::insert )
                , ( bp::arg("time"), bp::arg("controlPoint") )
                , " Insert a control point into the AnimationPath." );
        
        }
        { //::osg::AnimationPath::isSameKindAs
        
            typedef bool ( ::osg::AnimationPath::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( AnimationPath_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            AnimationPath_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::AnimationPath::isSameKindAs)
                , default_isSameKindAs_function_type(&AnimationPath_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::AnimationPath::libraryName
        
            typedef char const * ( ::osg::AnimationPath::*libraryName_function_type )(  ) const;
            typedef char const * ( AnimationPath_wrapper::*default_libraryName_function_type )(  ) const;
            
            AnimationPath_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::AnimationPath::libraryName)
                , default_libraryName_function_type(&AnimationPath_wrapper::default_libraryName) );
        
        }
        { //::osg::AnimationPath::read
        
            typedef void ( ::osg::AnimationPath::*read_function_type )( ::std::istream & ) ;
            
            AnimationPath_exposer.def( 
                "read"
                , read_function_type( &::osg::AnimationPath::read )
                , ( bp::arg("in") )
                , " Read the animation path from a flat ASCII file stream." );
        
        }
        { //::osg::AnimationPath::setLoopMode
        
            typedef void ( ::osg::AnimationPath::*setLoopMode_function_type )( ::osg::AnimationPath::LoopMode ) ;
            
            AnimationPath_exposer.def( 
                "setLoopMode"
                , setLoopMode_function_type( &::osg::AnimationPath::setLoopMode )
                , ( bp::arg("lm") ) );
        
        }
        { //::osg::AnimationPath::setTimeControlPointMap
        
            typedef void ( ::osg::AnimationPath::*setTimeControlPointMap_function_type )( ::std::map< double, osg::AnimationPath::ControlPoint > & ) ;
            
            AnimationPath_exposer.def( 
                "setTimeControlPointMap"
                , setTimeControlPointMap_function_type( &::osg::AnimationPath::setTimeControlPointMap )
                , ( bp::arg("tcpm") ) );
        
        }
        { //::osg::AnimationPath::write
        
            typedef void ( ::osg::AnimationPath::*write_function_type )( ::std::ostream & ) const;
            
            AnimationPath_exposer.def( 
                "write"
                , write_function_type( &::osg::AnimationPath::write )
                , ( bp::arg("out") )
                , " Write the animation path to a flat ASCII file stream." );
        
        }
        { //::osg::AnimationPath::write
        
            typedef void ( ::osg::AnimationPath::*write_function_type )( ::std::_Rb_tree_const_iterator< std::pair< double const, osg::AnimationPath::ControlPoint > >,::std::ostream & ) const;
            
            AnimationPath_exposer.def( 
                "write"
                , write_function_type( &::osg::AnimationPath::write )
                , ( bp::arg("itr"), bp::arg("out") )
                , " Write the control point to a flat ASCII file stream." );
        
        }
    }

}
