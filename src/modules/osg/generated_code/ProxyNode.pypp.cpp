// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "ProxyNode.pypp.hpp"

namespace bp = boost::python;

struct ProxyNode_wrapper : osg::ProxyNode, bp::wrapper< osg::ProxyNode > {

    ProxyNode_wrapper( )
    : osg::ProxyNode( )
      , bp::wrapper< osg::ProxyNode >(){
        // null constructor
    
    }

    virtual void accept( ::osg::NodeVisitor & nv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(nv) );
        else{
            this->osg::ProxyNode::accept( boost::ref(nv) );
        }
    }
    
    void default_accept( ::osg::NodeVisitor & nv ) {
        osg::ProxyNode::accept( boost::ref(nv) );
    }

    virtual bool addChild( ::osg::Node * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            return func_addChild( boost::python::ptr(child) );
        else{
            return this->osg::ProxyNode::addChild( boost::python::ptr(child) );
        }
    }
    
    bool default_addChild( ::osg::Node * child ) {
        return osg::ProxyNode::addChild( boost::python::ptr(child) );
    }

    virtual bool addChild( ::osg::Node * child, ::std::string const & filename ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            return func_addChild( boost::python::ptr(child), filename );
        else{
            return this->osg::ProxyNode::addChild( boost::python::ptr(child), filename );
        }
    }
    
    bool default_addChild( ::osg::Node * child, ::std::string const & filename ) {
        return osg::ProxyNode::addChild( boost::python::ptr(child), filename );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::ProxyNode::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::ProxyNode::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::ProxyNode::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::ProxyNode::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::ProxyNode::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::ProxyNode::cloneType( );
    }

    virtual ::osg::BoundingSphere computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osg::ProxyNode::computeBound(  );
        }
    }
    
    ::osg::BoundingSphere default_computeBound(  ) const  {
        return osg::ProxyNode::computeBound( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::ProxyNode::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::ProxyNode::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::ProxyNode::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::ProxyNode::libraryName( );
    }

    virtual bool removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        if( bp::override func_removeChildren = this->get_override( "removeChildren" ) )
            return func_removeChildren( pos, numChildrenToRemove );
        else{
            return this->osg::ProxyNode::removeChildren( pos, numChildrenToRemove );
        }
    }
    
    bool default_removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        return osg::ProxyNode::removeChildren( pos, numChildrenToRemove );
    }

    virtual void traverse( ::osg::NodeVisitor & nv ) {
        if( bp::override func_traverse = this->get_override( "traverse" ) )
            func_traverse( boost::ref(nv) );
        else{
            this->osg::ProxyNode::traverse( boost::ref(nv) );
        }
    }
    
    void default_traverse( ::osg::NodeVisitor & nv ) {
        osg::ProxyNode::traverse( boost::ref(nv) );
    }

    virtual ::osg::Camera * asCamera(  ) {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera * default_asCamera(  ) {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Camera const * asCamera(  ) const  {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera const * default_asCamera(  ) const  {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Geode * asGeode(  ) {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode * default_asGeode(  ) {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Geode const * asGeode(  ) const  {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode const * default_asGeode(  ) const  {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Group * asGroup(  ) {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group * default_asGroup(  ) {
        return osg::Group::asGroup( );
    }

    virtual ::osg::Group const * asGroup(  ) const  {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group const * default_asGroup(  ) const  {
        return osg::Group::asGroup( );
    }

    virtual ::osg::Switch * asSwitch(  ) {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch * default_asSwitch(  ) {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Switch const * asSwitch(  ) const  {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch const * default_asSwitch(  ) const  {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Transform * asTransform(  ) {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Node::asTransform(  );
        }
    }
    
    ::osg::Transform * default_asTransform(  ) {
        return osg::Node::asTransform( );
    }

    virtual ::osg::Transform const * asTransform(  ) const  {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Node::asTransform(  );
        }
    }
    
    ::osg::Transform const * default_asTransform(  ) const  {
        return osg::Node::asTransform( );
    }

    virtual void ascend( ::osg::NodeVisitor & nv ) {
        if( bp::override func_ascend = this->get_override( "ascend" ) )
            func_ascend( boost::ref(nv) );
        else{
            this->osg::Node::ascend( boost::ref(nv) );
        }
    }
    
    void default_ascend( ::osg::NodeVisitor & nv ) {
        osg::Node::ascend( boost::ref(nv) );
    }

    virtual bool insertChild( unsigned int index, ::osg::Node * child ) {
        if( bp::override func_insertChild = this->get_override( "insertChild" ) )
            return func_insertChild( index, boost::python::ptr(child) );
        else{
            return this->osg::Group::insertChild( index, boost::python::ptr(child) );
        }
    }
    
    bool default_insertChild( unsigned int index, ::osg::Node * child ) {
        return osg::Group::insertChild( index, boost::python::ptr(child) );
    }

    virtual bool replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        if( bp::override func_replaceChild = this->get_override( "replaceChild" ) )
            return func_replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        else{
            return this->osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        }
    }
    
    bool default_replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        return osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Group::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Group::resizeGLObjectBuffers( maxSize );
    }

    virtual bool setChild( unsigned int i, ::osg::Node * node ) {
        if( bp::override func_setChild = this->get_override( "setChild" ) )
            return func_setChild( i, boost::python::ptr(node) );
        else{
            return this->osg::Group::setChild( i, boost::python::ptr(node) );
        }
    }
    
    bool default_setChild( unsigned int i, ::osg::Node * node ) {
        return osg::Group::setChild( i, boost::python::ptr(node) );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Group::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Group::setThreadSafeRefUnref( threadSafe );
    }

};

void register_ProxyNode_class(){

    { //::osg::ProxyNode
        typedef bp::class_< ProxyNode_wrapper, bp::bases< osg::Group >, osg::ref_ptr< ::osg::ProxyNode >, boost::noncopyable > ProxyNode_exposer_t;
        ProxyNode_exposer_t ProxyNode_exposer = ProxyNode_exposer_t( "ProxyNode", "\n ProxyNode.\n", bp::no_init );
        bp::scope ProxyNode_scope( ProxyNode_exposer );
        bp::enum_< osg::ProxyNode::CenterMode>("CenterMode")
            .value("USE_BOUNDING_SPHERE_CENTER", osg::ProxyNode::USE_BOUNDING_SPHERE_CENTER)
            .value("USER_DEFINED_CENTER", osg::ProxyNode::USER_DEFINED_CENTER)
            .value("UNION_OF_BOUNDING_SPHERE_AND_USER_DEFINED", osg::ProxyNode::UNION_OF_BOUNDING_SPHERE_AND_USER_DEFINED)
            .export_values()
            ;
        bp::enum_< osg::ProxyNode::LoadingExternalReferenceMode>("LoadingExternalReferenceMode")
            .value("LOAD_IMMEDIATELY", osg::ProxyNode::LOAD_IMMEDIATELY)
            .value("DEFER_LOADING_TO_DATABASE_PAGER", osg::ProxyNode::DEFER_LOADING_TO_DATABASE_PAGER)
            .value("NO_AUTOMATIC_LOADING", osg::ProxyNode::NO_AUTOMATIC_LOADING)
            .export_values()
            ;
        ProxyNode_exposer.def( bp::init< >("\n ProxyNode.\n") );
        { //::osg::ProxyNode::accept
        
            typedef void ( ::osg::ProxyNode::*accept_function_type )( ::osg::NodeVisitor & ) ;
            typedef void ( ProxyNode_wrapper::*default_accept_function_type )( ::osg::NodeVisitor & ) ;
            
            ProxyNode_exposer.def( 
                "accept"
                , accept_function_type(&::osg::ProxyNode::accept)
                , default_accept_function_type(&ProxyNode_wrapper::default_accept)
                , ( bp::arg("nv") ) );
        
        }
        { //::osg::ProxyNode::addChild
        
            typedef bool ( ::osg::ProxyNode::*addChild_function_type )( ::osg::Node * ) ;
            typedef bool ( ProxyNode_wrapper::*default_addChild_function_type )( ::osg::Node * ) ;
            
            ProxyNode_exposer.def( 
                "addChild"
                , addChild_function_type(&::osg::ProxyNode::addChild)
                , default_addChild_function_type(&ProxyNode_wrapper::default_addChild)
                , ( bp::arg("child") ) );
        
        }
        { //::osg::ProxyNode::addChild
        
            typedef bool ( ::osg::ProxyNode::*addChild_function_type )( ::osg::Node *,::std::string const & ) ;
            typedef bool ( ProxyNode_wrapper::*default_addChild_function_type )( ::osg::Node *,::std::string const & ) ;
            
            ProxyNode_exposer.def( 
                "addChild"
                , addChild_function_type(&::osg::ProxyNode::addChild)
                , default_addChild_function_type(&ProxyNode_wrapper::default_addChild)
                , ( bp::arg("child"), bp::arg("filename") ) );
        
        }
        { //::osg::ProxyNode::className
        
            typedef char const * ( ::osg::ProxyNode::*className_function_type )(  ) const;
            typedef char const * ( ProxyNode_wrapper::*default_className_function_type )(  ) const;
            
            ProxyNode_exposer.def( 
                "className"
                , className_function_type(&::osg::ProxyNode::className)
                , default_className_function_type(&ProxyNode_wrapper::default_className) );
        
        }
        { //::osg::ProxyNode::clone
        
            typedef ::osg::Object * ( ::osg::ProxyNode::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( ProxyNode_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            ProxyNode_exposer.def( 
                "clone"
                , clone_function_type(&::osg::ProxyNode::clone)
                , default_clone_function_type(&ProxyNode_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::ProxyNode::cloneType
        
            typedef ::osg::Object * ( ::osg::ProxyNode::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( ProxyNode_wrapper::*default_cloneType_function_type )(  ) const;
            
            ProxyNode_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::ProxyNode::cloneType)
                , default_cloneType_function_type(&ProxyNode_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::ProxyNode::computeBound
        
            typedef ::osg::BoundingSphere ( ::osg::ProxyNode::*computeBound_function_type )(  ) const;
            typedef ::osg::BoundingSphere ( ProxyNode_wrapper::*default_computeBound_function_type )(  ) const;
            
            ProxyNode_exposer.def( 
                "computeBound"
                , computeBound_function_type(&::osg::ProxyNode::computeBound)
                , default_computeBound_function_type(&ProxyNode_wrapper::default_computeBound) );
        
        }
        { //::osg::ProxyNode::getCenter
        
            typedef ::osg::Vec3f const & ( ::osg::ProxyNode::*getCenter_function_type )(  ) const;
            
            ProxyNode_exposer.def( 
                "getCenter"
                , getCenter_function_type( &::osg::ProxyNode::getCenter )
                , bp::return_internal_reference< >()
                , " Return the ProxyNode center point." );
        
        }
        { //::osg::ProxyNode::getCenterMode
        
            typedef ::osg::ProxyNode::CenterMode ( ::osg::ProxyNode::*getCenterMode_function_type )(  ) const;
            
            ProxyNode_exposer.def( 
                "getCenterMode"
                , getCenterMode_function_type( &::osg::ProxyNode::getCenterMode )
                , " Get how the center of object should be determined when computing which child is active." );
        
        }
        { //::osg::ProxyNode::getDatabaseOptions
        
            typedef ::osg::Referenced * ( ::osg::ProxyNode::*getDatabaseOptions_function_type )(  ) ;
            
            ProxyNode_exposer.def( 
                "getDatabaseOptions"
                , getDatabaseOptions_function_type( &::osg::ProxyNode::getDatabaseOptions )
                , bp::return_internal_reference< >()
                , " Get the optional database osgDB::Options object used when loading children." );
        
        }
        { //::osg::ProxyNode::getDatabaseOptions
        
            typedef ::osg::Referenced const * ( ::osg::ProxyNode::*getDatabaseOptions_function_type )(  ) const;
            
            ProxyNode_exposer.def( 
                "getDatabaseOptions"
                , getDatabaseOptions_function_type( &::osg::ProxyNode::getDatabaseOptions )
                , bp::return_internal_reference< >()
                , " Get the optional database osgDB::Options object used when loading children." );
        
        }
        { //::osg::ProxyNode::getDatabasePath
        
            typedef ::std::string const & ( ::osg::ProxyNode::*getDatabasePath_function_type )(  ) const;
            
            ProxyNode_exposer.def( 
                "getDatabasePath"
                , getDatabasePath_function_type( &::osg::ProxyNode::getDatabasePath )
                , bp::return_value_policy< bp::copy_const_reference >()
                , " Get the database path used to prepend to childrens filenames." );
        
        }
        { //::osg::ProxyNode::getDatabaseRequest
        
            typedef ::osg::ref_ptr< osg::Referenced > & ( ::osg::ProxyNode::*getDatabaseRequest_function_type )( unsigned int ) ;
            
            ProxyNode_exposer.def( 
                "getDatabaseRequest"
                , getDatabaseRequest_function_type( &::osg::ProxyNode::getDatabaseRequest )
                , ( bp::arg("childNo") )
                , bp::return_internal_reference< >()
                , " Return the DatabaseRequest object used by the DatabasePager to keep track of file load requests\n being carried out on behalf of the DatabasePager.\n Note, in normal OSG usage you should not set this value yourself, as this will be managed by\n the osgDB::DatabasePager." );
        
        }
        { //::osg::ProxyNode::getDatabaseRequest
        
            typedef ::osg::ref_ptr< osg::Referenced > const & ( ::osg::ProxyNode::*getDatabaseRequest_function_type )( unsigned int ) const;
            
            ProxyNode_exposer.def( 
                "getDatabaseRequest"
                , getDatabaseRequest_function_type( &::osg::ProxyNode::getDatabaseRequest )
                , ( bp::arg("childNo") )
                , bp::return_internal_reference< >()
                , " Return the const DatabaseRequest object." );
        
        }
        { //::osg::ProxyNode::getFileName
        
            typedef ::std::string const & ( ::osg::ProxyNode::*getFileName_function_type )( unsigned int ) const;
            
            ProxyNode_exposer.def( 
                "getFileName"
                , getFileName_function_type( &::osg::ProxyNode::getFileName )
                , ( bp::arg("childNo") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::osg::ProxyNode::getLoadingExternalReferenceMode
        
            typedef ::osg::ProxyNode::LoadingExternalReferenceMode ( ::osg::ProxyNode::*getLoadingExternalReferenceMode_function_type )(  ) const;
            
            ProxyNode_exposer.def( 
                "getLoadingExternalReferenceMode"
                , getLoadingExternalReferenceMode_function_type( &::osg::ProxyNode::getLoadingExternalReferenceMode )
                , " Get the loading mode." );
        
        }
        { //::osg::ProxyNode::getNumFileNames
        
            typedef unsigned int ( ::osg::ProxyNode::*getNumFileNames_function_type )(  ) const;
            
            ProxyNode_exposer.def( 
                "getNumFileNames"
                , getNumFileNames_function_type( &::osg::ProxyNode::getNumFileNames ) );
        
        }
        { //::osg::ProxyNode::getRadius
        
            typedef float ( ::osg::ProxyNode::*getRadius_function_type )(  ) const;
            
            ProxyNode_exposer.def( 
                "getRadius"
                , getRadius_function_type( &::osg::ProxyNode::getRadius )
                , " Get the object-space radius of the volume enclosed by the ProxyNode." );
        
        }
        { //::osg::ProxyNode::isSameKindAs
        
            typedef bool ( ::osg::ProxyNode::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( ProxyNode_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            ProxyNode_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::ProxyNode::isSameKindAs)
                , default_isSameKindAs_function_type(&ProxyNode_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::ProxyNode::libraryName
        
            typedef char const * ( ::osg::ProxyNode::*libraryName_function_type )(  ) const;
            typedef char const * ( ProxyNode_wrapper::*default_libraryName_function_type )(  ) const;
            
            ProxyNode_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::ProxyNode::libraryName)
                , default_libraryName_function_type(&ProxyNode_wrapper::default_libraryName) );
        
        }
        { //::osg::ProxyNode::removeChildren
        
            typedef bool ( ::osg::ProxyNode::*removeChildren_function_type )( unsigned int,unsigned int ) ;
            typedef bool ( ProxyNode_wrapper::*default_removeChildren_function_type )( unsigned int,unsigned int ) ;
            
            ProxyNode_exposer.def( 
                "removeChildren"
                , removeChildren_function_type(&::osg::ProxyNode::removeChildren)
                , default_removeChildren_function_type(&ProxyNode_wrapper::default_removeChildren)
                , ( bp::arg("pos"), bp::arg("numChildrenToRemove") ) );
        
        }
        { //::osg::ProxyNode::setCenter
        
            typedef void ( ::osg::ProxyNode::*setCenter_function_type )( ::osg::Vec3f const & ) ;
            
            ProxyNode_exposer.def( 
                "setCenter"
                , setCenter_function_type( &::osg::ProxyNode::setCenter )
                , ( bp::arg("center") )
                , " Sets the object-space point which defines the center of the osg::ProxyNode.\n            Center is affected by any transforms in the hierarchy above the osg::ProxyNode." );
        
        }
        { //::osg::ProxyNode::setCenterMode
        
            typedef void ( ::osg::ProxyNode::*setCenterMode_function_type )( ::osg::ProxyNode::CenterMode ) ;
            
            ProxyNode_exposer.def( 
                "setCenterMode"
                , setCenterMode_function_type( &::osg::ProxyNode::setCenterMode )
                , ( bp::arg("mode") )
                , " Set how the center of object should be determined when computing which child is active." );
        
        }
        { //::osg::ProxyNode::setDatabaseOptions
        
            typedef void ( ::osg::ProxyNode::*setDatabaseOptions_function_type )( ::osg::Referenced * ) ;
            
            ProxyNode_exposer.def( 
                "setDatabaseOptions"
                , setDatabaseOptions_function_type( &::osg::ProxyNode::setDatabaseOptions )
                , ( bp::arg("options") )
                , " Set the optional database osgDB::Options object to use when loading children." );
        
        }
        { //::osg::ProxyNode::setDatabasePath
        
            typedef void ( ::osg::ProxyNode::*setDatabasePath_function_type )( ::std::string const & ) ;
            
            ProxyNode_exposer.def( 
                "setDatabasePath"
                , setDatabasePath_function_type( &::osg::ProxyNode::setDatabasePath )
                , ( bp::arg("path") )
                , " Set the database path to prepend to childrens filenames." );
        
        }
        { //::osg::ProxyNode::setFileName
        
            typedef void ( ::osg::ProxyNode::*setFileName_function_type )( unsigned int,::std::string const & ) ;
            
            ProxyNode_exposer.def( 
                "setFileName"
                , setFileName_function_type( &::osg::ProxyNode::setFileName )
                , ( bp::arg("childNo"), bp::arg("filename") ) );
        
        }
        { //::osg::ProxyNode::setLoadingExternalReferenceMode
        
            typedef void ( ::osg::ProxyNode::*setLoadingExternalReferenceMode_function_type )( ::osg::ProxyNode::LoadingExternalReferenceMode ) ;
            
            ProxyNode_exposer.def( 
                "setLoadingExternalReferenceMode"
                , setLoadingExternalReferenceMode_function_type( &::osg::ProxyNode::setLoadingExternalReferenceMode )
                , ( bp::arg("mode") )
                , " Set how the child loading is done." );
        
        }
        { //::osg::ProxyNode::setRadius
        
            typedef void ( ::osg::ProxyNode::*setRadius_function_type )( float ) ;
            
            ProxyNode_exposer.def( 
                "setRadius"
                , setRadius_function_type( &::osg::ProxyNode::setRadius )
                , ( bp::arg("radius") )
                , " Set the object-space reference radius of the volume enclosed by the ProxyNode.\n Used to determine the bounding sphere of the ProxyNode in the absence of any children." );
        
        }
        { //::osg::ProxyNode::traverse
        
            typedef void ( ::osg::ProxyNode::*traverse_function_type )( ::osg::NodeVisitor & ) ;
            typedef void ( ProxyNode_wrapper::*default_traverse_function_type )( ::osg::NodeVisitor & ) ;
            
            ProxyNode_exposer.def( 
                "traverse"
                , traverse_function_type(&::osg::ProxyNode::traverse)
                , default_traverse_function_type(&ProxyNode_wrapper::default_traverse)
                , ( bp::arg("nv") ) );
        
        }
        { //::osg::Node::asCamera
        
            typedef ::osg::Camera * ( ::osg::Node::*asCamera_function_type )(  ) ;
            typedef ::osg::Camera * ( ProxyNode_wrapper::*default_asCamera_function_type )(  ) ;
            
            ProxyNode_exposer.def( 
                "asCamera"
                , asCamera_function_type(&::osg::Node::asCamera)
                , default_asCamera_function_type(&ProxyNode_wrapper::default_asCamera)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asCamera
        
            typedef ::osg::Camera const * ( ::osg::Node::*asCamera_function_type )(  ) const;
            typedef ::osg::Camera const * ( ProxyNode_wrapper::*default_asCamera_function_type )(  ) const;
            
            ProxyNode_exposer.def( 
                "asCamera"
                , asCamera_function_type(&::osg::Node::asCamera)
                , default_asCamera_function_type(&ProxyNode_wrapper::default_asCamera)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asGeode
        
            typedef ::osg::Geode * ( ::osg::Node::*asGeode_function_type )(  ) ;
            typedef ::osg::Geode * ( ProxyNode_wrapper::*default_asGeode_function_type )(  ) ;
            
            ProxyNode_exposer.def( 
                "asGeode"
                , asGeode_function_type(&::osg::Node::asGeode)
                , default_asGeode_function_type(&ProxyNode_wrapper::default_asGeode)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asGeode
        
            typedef ::osg::Geode const * ( ::osg::Node::*asGeode_function_type )(  ) const;
            typedef ::osg::Geode const * ( ProxyNode_wrapper::*default_asGeode_function_type )(  ) const;
            
            ProxyNode_exposer.def( 
                "asGeode"
                , asGeode_function_type(&::osg::Node::asGeode)
                , default_asGeode_function_type(&ProxyNode_wrapper::default_asGeode)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Group::asGroup
        
            typedef ::osg::Group * ( ::osg::Group::*asGroup_function_type )(  ) ;
            typedef ::osg::Group * ( ProxyNode_wrapper::*default_asGroup_function_type )(  ) ;
            
            ProxyNode_exposer.def( 
                "asGroup"
                , asGroup_function_type(&::osg::Group::asGroup)
                , default_asGroup_function_type(&ProxyNode_wrapper::default_asGroup)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Group::asGroup
        
            typedef ::osg::Group const * ( ::osg::Group::*asGroup_function_type )(  ) const;
            typedef ::osg::Group const * ( ProxyNode_wrapper::*default_asGroup_function_type )(  ) const;
            
            ProxyNode_exposer.def( 
                "asGroup"
                , asGroup_function_type(&::osg::Group::asGroup)
                , default_asGroup_function_type(&ProxyNode_wrapper::default_asGroup)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asSwitch
        
            typedef ::osg::Switch * ( ::osg::Node::*asSwitch_function_type )(  ) ;
            typedef ::osg::Switch * ( ProxyNode_wrapper::*default_asSwitch_function_type )(  ) ;
            
            ProxyNode_exposer.def( 
                "asSwitch"
                , asSwitch_function_type(&::osg::Node::asSwitch)
                , default_asSwitch_function_type(&ProxyNode_wrapper::default_asSwitch)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asSwitch
        
            typedef ::osg::Switch const * ( ::osg::Node::*asSwitch_function_type )(  ) const;
            typedef ::osg::Switch const * ( ProxyNode_wrapper::*default_asSwitch_function_type )(  ) const;
            
            ProxyNode_exposer.def( 
                "asSwitch"
                , asSwitch_function_type(&::osg::Node::asSwitch)
                , default_asSwitch_function_type(&ProxyNode_wrapper::default_asSwitch)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asTransform
        
            typedef ::osg::Transform * ( ::osg::Node::*asTransform_function_type )(  ) ;
            typedef ::osg::Transform * ( ProxyNode_wrapper::*default_asTransform_function_type )(  ) ;
            
            ProxyNode_exposer.def( 
                "asTransform"
                , asTransform_function_type(&::osg::Node::asTransform)
                , default_asTransform_function_type(&ProxyNode_wrapper::default_asTransform)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::asTransform
        
            typedef ::osg::Transform const * ( ::osg::Node::*asTransform_function_type )(  ) const;
            typedef ::osg::Transform const * ( ProxyNode_wrapper::*default_asTransform_function_type )(  ) const;
            
            ProxyNode_exposer.def( 
                "asTransform"
                , asTransform_function_type(&::osg::Node::asTransform)
                , default_asTransform_function_type(&ProxyNode_wrapper::default_asTransform)
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Node::ascend
        
            typedef void ( ::osg::Node::*ascend_function_type )( ::osg::NodeVisitor & ) ;
            typedef void ( ProxyNode_wrapper::*default_ascend_function_type )( ::osg::NodeVisitor & ) ;
            
            ProxyNode_exposer.def( 
                "ascend"
                , ascend_function_type(&::osg::Node::ascend)
                , default_ascend_function_type(&ProxyNode_wrapper::default_ascend)
                , ( bp::arg("nv") ) );
        
        }
        { //::osg::Group::insertChild
        
            typedef bool ( ::osg::Group::*insertChild_function_type )( unsigned int,::osg::Node * ) ;
            typedef bool ( ProxyNode_wrapper::*default_insertChild_function_type )( unsigned int,::osg::Node * ) ;
            
            ProxyNode_exposer.def( 
                "insertChild"
                , insertChild_function_type(&::osg::Group::insertChild)
                , default_insertChild_function_type(&ProxyNode_wrapper::default_insertChild)
                , ( bp::arg("index"), bp::arg("child") ) );
        
        }
        { //::osg::Group::replaceChild
        
            typedef bool ( ::osg::Group::*replaceChild_function_type )( ::osg::Node *,::osg::Node * ) ;
            typedef bool ( ProxyNode_wrapper::*default_replaceChild_function_type )( ::osg::Node *,::osg::Node * ) ;
            
            ProxyNode_exposer.def( 
                "replaceChild"
                , replaceChild_function_type(&::osg::Group::replaceChild)
                , default_replaceChild_function_type(&ProxyNode_wrapper::default_replaceChild)
                , ( bp::arg("origChild"), bp::arg("newChild") ) );
        
        }
        { //::osg::Group::resizeGLObjectBuffers
        
            typedef void ( ::osg::Group::*resizeGLObjectBuffers_function_type )( unsigned int ) ;
            typedef void ( ProxyNode_wrapper::*default_resizeGLObjectBuffers_function_type )( unsigned int ) ;
            
            ProxyNode_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osg::Group::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&ProxyNode_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
        { //::osg::Group::setChild
        
            typedef bool ( ::osg::Group::*setChild_function_type )( unsigned int,::osg::Node * ) ;
            typedef bool ( ProxyNode_wrapper::*default_setChild_function_type )( unsigned int,::osg::Node * ) ;
            
            ProxyNode_exposer.def( 
                "setChild"
                , setChild_function_type(&::osg::Group::setChild)
                , default_setChild_function_type(&ProxyNode_wrapper::default_setChild)
                , ( bp::arg("i"), bp::arg("node") ) );
        
        }
        { //::osg::Group::setThreadSafeRefUnref
        
            typedef void ( ::osg::Group::*setThreadSafeRefUnref_function_type )( bool ) ;
            typedef void ( ProxyNode_wrapper::*default_setThreadSafeRefUnref_function_type )( bool ) ;
            
            ProxyNode_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osg::Group::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&ProxyNode_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
    }

}
