// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "KdTree.pypp.hpp"

namespace bp = boost::python;

struct KdTree_wrapper : osg::KdTree, bp::wrapper< osg::KdTree > {

    KdTree_wrapper( )
    : osg::KdTree( )
      , bp::wrapper< osg::KdTree >(){
        // null constructor
    
    }

    virtual void accept( ::osg::ShapeVisitor & sv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(sv) );
        else{
            this->osg::KdTree::accept( boost::ref(sv) );
        }
    }
    
    void default_accept( ::osg::ShapeVisitor & sv ) {
        osg::KdTree::accept( boost::ref(sv) );
    }

    virtual void accept( ::osg::ConstShapeVisitor & csv ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(csv) );
        else{
            this->osg::KdTree::accept( boost::ref(csv) );
        }
    }
    
    void default_accept( ::osg::ConstShapeVisitor & csv ) const  {
        osg::KdTree::accept( boost::ref(csv) );
    }

    virtual bool build( ::osg::KdTree::BuildOptions & buildOptions, ::osg::Geometry * geometry ) {
        if( bp::override func_build = this->get_override( "build" ) )
            return func_build( boost::ref(buildOptions), boost::python::ptr(geometry) );
        else{
            return this->osg::KdTree::build( boost::ref(buildOptions), boost::python::ptr(geometry) );
        }
    }
    
    bool default_build( ::osg::KdTree::BuildOptions & buildOptions, ::osg::Geometry * geometry ) {
        return osg::KdTree::build( boost::ref(buildOptions), boost::python::ptr(geometry) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::KdTree::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::KdTree::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::KdTree::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::KdTree::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::KdTree::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::KdTree::cloneType( );
    }

    virtual bool intersect( ::osg::Vec3d const & start, ::osg::Vec3d const & end, ::std::vector< osg::KdTree::LineSegmentIntersection > & intersections ) const  {
        if( bp::override func_intersect = this->get_override( "intersect" ) )
            return func_intersect( boost::ref(start), boost::ref(end), boost::ref(intersections) );
        else{
            return this->osg::KdTree::intersect( boost::ref(start), boost::ref(end), boost::ref(intersections) );
        }
    }
    
    bool default_intersect( ::osg::Vec3d const & start, ::osg::Vec3d const & end, ::std::vector< osg::KdTree::LineSegmentIntersection > & intersections ) const  {
        return osg::KdTree::intersect( boost::ref(start), boost::ref(end), boost::ref(intersections) );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::KdTree::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::KdTree::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::KdTree::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::KdTree::libraryName( );
    }

};

void register_KdTree_class(){

    { //::osg::KdTree
        typedef bp::class_< KdTree_wrapper, bp::bases< osg::Shape >, osg::ref_ptr< ::osg::KdTree >, boost::noncopyable > KdTree_exposer_t;
        KdTree_exposer_t KdTree_exposer = KdTree_exposer_t( "KdTree", "\n Implementation of a kdtree for Geometry leaves, to enable fast intersection tests.\n", bp::init< >("\n Implementation of a kdtree for Geometry leaves, to enable fast intersection tests.\n") );
        bp::scope KdTree_scope( KdTree_exposer );
        bp::class_< osg::KdTree::BuildOptions >( "BuildOptions", bp::init< >() )    
            .def_readwrite( "_maxNumLevels", &osg::KdTree::BuildOptions::_maxNumLevels )    
            .def_readwrite( "_numVerticesProcessed", &osg::KdTree::BuildOptions::_numVerticesProcessed )    
            .def_readwrite( "_targetNumTrianglesPerLeaf", &osg::KdTree::BuildOptions::_targetNumTrianglesPerLeaf );
        bp::class_< osg::KdTree::KdNode >( "KdNode", bp::init< >() )    
            .def( bp::init< int, int >(( bp::arg("f"), bp::arg("s") )) )    
            .def_readwrite( "bb", &osg::KdTree::KdNode::bb )    
            .def_readwrite( "first", &osg::KdTree::KdNode::first )    
            .def_readwrite( "second", &osg::KdTree::KdNode::second );
        bp::class_< osg::KdTree::LineSegmentIntersection >( "LineSegmentIntersection", bp::init< >() )    
            .def( bp::self < bp::self )    
            .def_readwrite( "intersectionNormal", &osg::KdTree::LineSegmentIntersection::intersectionNormal )    
            .def_readwrite( "intersectionPoint", &osg::KdTree::LineSegmentIntersection::intersectionPoint )    
            .def_readwrite( "p0", &osg::KdTree::LineSegmentIntersection::p0 )    
            .def_readwrite( "p1", &osg::KdTree::LineSegmentIntersection::p1 )    
            .def_readwrite( "p2", &osg::KdTree::LineSegmentIntersection::p2 )    
            .def_readwrite( "primitiveIndex", &osg::KdTree::LineSegmentIntersection::primitiveIndex )    
            .def_readwrite( "r0", &osg::KdTree::LineSegmentIntersection::r0 )    
            .def_readwrite( "r1", &osg::KdTree::LineSegmentIntersection::r1 )    
            .def_readwrite( "r2", &osg::KdTree::LineSegmentIntersection::r2 )    
            .def_readwrite( "ratio", &osg::KdTree::LineSegmentIntersection::ratio );
        bp::class_< osg::KdTree::Triangle >( "Triangle", bp::init< >() )    
            .def( bp::init< unsigned int, unsigned int, unsigned int >(( bp::arg("ip0"), bp::arg("ip1"), bp::arg("ip2") )) )    
            .def( bp::self < bp::self )    
            .def_readwrite( "p0", &osg::KdTree::Triangle::p0 )    
            .def_readwrite( "p1", &osg::KdTree::Triangle::p1 )    
            .def_readwrite( "p2", &osg::KdTree::Triangle::p2 );
        { //::osg::KdTree::accept
        
            typedef void ( ::osg::KdTree::*accept_function_type )( ::osg::ShapeVisitor & ) ;
            typedef void ( KdTree_wrapper::*default_accept_function_type )( ::osg::ShapeVisitor & ) ;
            
            KdTree_exposer.def( 
                "accept"
                , accept_function_type(&::osg::KdTree::accept)
                , default_accept_function_type(&KdTree_wrapper::default_accept)
                , ( bp::arg("sv") ) );
        
        }
        { //::osg::KdTree::accept
        
            typedef void ( ::osg::KdTree::*accept_function_type )( ::osg::ConstShapeVisitor & ) const;
            typedef void ( KdTree_wrapper::*default_accept_function_type )( ::osg::ConstShapeVisitor & ) const;
            
            KdTree_exposer.def( 
                "accept"
                , accept_function_type(&::osg::KdTree::accept)
                , default_accept_function_type(&KdTree_wrapper::default_accept)
                , ( bp::arg("csv") ) );
        
        }
        { //::osg::KdTree::addNode
        
            typedef int ( ::osg::KdTree::*addNode_function_type )( ::osg::KdTree::KdNode const & ) ;
            
            KdTree_exposer.def( 
                "addNode"
                , addNode_function_type( &::osg::KdTree::addNode )
                , ( bp::arg("node") ) );
        
        }
        { //::osg::KdTree::addTriangle
        
            typedef unsigned int ( ::osg::KdTree::*addTriangle_function_type )( ::osg::KdTree::Triangle const & ) ;
            
            KdTree_exposer.def( 
                "addTriangle"
                , addTriangle_function_type( &::osg::KdTree::addTriangle )
                , ( bp::arg("tri") ) );
        
        }
        { //::osg::KdTree::build
        
            typedef bool ( ::osg::KdTree::*build_function_type )( ::osg::KdTree::BuildOptions &,::osg::Geometry * ) ;
            typedef bool ( KdTree_wrapper::*default_build_function_type )( ::osg::KdTree::BuildOptions &,::osg::Geometry * ) ;
            
            KdTree_exposer.def( 
                "build"
                , build_function_type(&::osg::KdTree::build)
                , default_build_function_type(&KdTree_wrapper::default_build)
                , ( bp::arg("buildOptions"), bp::arg("geometry") ) );
        
        }
        { //::osg::KdTree::className
        
            typedef char const * ( ::osg::KdTree::*className_function_type )(  ) const;
            typedef char const * ( KdTree_wrapper::*default_className_function_type )(  ) const;
            
            KdTree_exposer.def( 
                "className"
                , className_function_type(&::osg::KdTree::className)
                , default_className_function_type(&KdTree_wrapper::default_className) );
        
        }
        { //::osg::KdTree::clone
        
            typedef ::osg::Object * ( ::osg::KdTree::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( KdTree_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            KdTree_exposer.def( 
                "clone"
                , clone_function_type(&::osg::KdTree::clone)
                , default_clone_function_type(&KdTree_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::KdTree::cloneType
        
            typedef ::osg::Object * ( ::osg::KdTree::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( KdTree_wrapper::*default_cloneType_function_type )(  ) const;
            
            KdTree_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::KdTree::cloneType)
                , default_cloneType_function_type(&KdTree_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::KdTree::getNode
        
            typedef ::osg::KdTree::KdNode & ( ::osg::KdTree::*getNode_function_type )( int ) ;
            
            KdTree_exposer.def( 
                "getNode"
                , getNode_function_type( &::osg::KdTree::getNode )
                , ( bp::arg("nodeNum") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::KdTree::getNode
        
            typedef ::osg::KdTree::KdNode const & ( ::osg::KdTree::*getNode_function_type )( int ) const;
            
            KdTree_exposer.def( 
                "getNode"
                , getNode_function_type( &::osg::KdTree::getNode )
                , ( bp::arg("nodeNum") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::KdTree::getNodes
        
            typedef ::std::vector< osg::KdTree::KdNode > & ( ::osg::KdTree::*getNodes_function_type )(  ) ;
            
            KdTree_exposer.def( 
                "getNodes"
                , getNodes_function_type( &::osg::KdTree::getNodes )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::KdTree::getNodes
        
            typedef ::std::vector< osg::KdTree::KdNode > const & ( ::osg::KdTree::*getNodes_function_type )(  ) const;
            
            KdTree_exposer.def( 
                "getNodes"
                , getNodes_function_type( &::osg::KdTree::getNodes )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::KdTree::getTriangle
        
            typedef ::osg::KdTree::Triangle & ( ::osg::KdTree::*getTriangle_function_type )( unsigned int ) ;
            
            KdTree_exposer.def( 
                "getTriangle"
                , getTriangle_function_type( &::osg::KdTree::getTriangle )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::KdTree::getTriangle
        
            typedef ::osg::KdTree::Triangle const & ( ::osg::KdTree::*getTriangle_function_type )( unsigned int ) const;
            
            KdTree_exposer.def( 
                "getTriangle"
                , getTriangle_function_type( &::osg::KdTree::getTriangle )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::KdTree::getTriangles
        
            typedef ::std::vector< osg::KdTree::Triangle > & ( ::osg::KdTree::*getTriangles_function_type )(  ) ;
            
            KdTree_exposer.def( 
                "getTriangles"
                , getTriangles_function_type( &::osg::KdTree::getTriangles )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::KdTree::getTriangles
        
            typedef ::std::vector< osg::KdTree::Triangle > const & ( ::osg::KdTree::*getTriangles_function_type )(  ) const;
            
            KdTree_exposer.def( 
                "getTriangles"
                , getTriangles_function_type( &::osg::KdTree::getTriangles )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::KdTree::getVertices
        
            typedef ::osg::Vec3Array const * ( ::osg::KdTree::*getVertices_function_type )(  ) const;
            
            KdTree_exposer.def( 
                "getVertices"
                , getVertices_function_type( &::osg::KdTree::getVertices )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::KdTree::intersect
        
            typedef bool ( ::osg::KdTree::*intersect_function_type )( ::osg::Vec3d const &,::osg::Vec3d const &,::std::vector< osg::KdTree::LineSegmentIntersection > & ) const;
            typedef bool ( KdTree_wrapper::*default_intersect_function_type )( ::osg::Vec3d const &,::osg::Vec3d const &,::std::vector< osg::KdTree::LineSegmentIntersection > & ) const;
            
            KdTree_exposer.def( 
                "intersect"
                , intersect_function_type(&::osg::KdTree::intersect)
                , default_intersect_function_type(&KdTree_wrapper::default_intersect)
                , ( bp::arg("start"), bp::arg("end"), bp::arg("intersections") ) );
        
        }
        { //::osg::KdTree::isSameKindAs
        
            typedef bool ( ::osg::KdTree::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( KdTree_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            KdTree_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::KdTree::isSameKindAs)
                , default_isSameKindAs_function_type(&KdTree_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::KdTree::libraryName
        
            typedef char const * ( ::osg::KdTree::*libraryName_function_type )(  ) const;
            typedef char const * ( KdTree_wrapper::*default_libraryName_function_type )(  ) const;
            
            KdTree_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::KdTree::libraryName)
                , default_libraryName_function_type(&KdTree_wrapper::default_libraryName) );
        
        }
        { //::osg::KdTree::setVertices
        
            typedef void ( ::osg::KdTree::*setVertices_function_type )( ::osg::Vec3Array * ) ;
            
            KdTree_exposer.def( 
                "setVertices"
                , setVertices_function_type( &::osg::KdTree::setVertices )
                , ( bp::arg("vertices") ) );
        
        }
    }

}
