// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "TessellationHints.pypp.hpp"

namespace bp = boost::python;

struct TessellationHints_wrapper : osg::TessellationHints, bp::wrapper< osg::TessellationHints > {

    TessellationHints_wrapper( )
    : osg::TessellationHints( )
      , bp::wrapper< osg::TessellationHints >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::TessellationHints::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::TessellationHints::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::TessellationHints::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::TessellationHints::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::TessellationHints::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::TessellationHints::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::TessellationHints::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::TessellationHints::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::TessellationHints::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::TessellationHints::libraryName( );
    }

};

void register_TessellationHints_class(){

    { //::osg::TessellationHints
        typedef bp::class_< TessellationHints_wrapper, bp::bases< osg::Object >, osg::ref_ptr< ::osg::TessellationHints >, boost::noncopyable > TessellationHints_exposer_t;
        TessellationHints_exposer_t TessellationHints_exposer = TessellationHints_exposer_t( "TessellationHints", "\n Describe several hints that can be passed to a Tessellator (like the one used\n  by  ShapeDrawable) as a mean to try to influence the way it works.\n", bp::no_init );
        bp::scope TessellationHints_scope( TessellationHints_exposer );
        bp::enum_< osg::TessellationHints::TessellationMode>("TessellationMode")
            .value("USE_SHAPE_DEFAULTS", osg::TessellationHints::USE_SHAPE_DEFAULTS)
            .value("USE_TARGET_NUM_FACES", osg::TessellationHints::USE_TARGET_NUM_FACES)
            .export_values()
            ;
        TessellationHints_exposer.def( bp::init< >("\n Describe several hints that can be passed to a Tessellator (like the one used\n  by  ShapeDrawable) as a mean to try to influence the way it works.\n") );
        { //::osg::TessellationHints::className
        
            typedef char const * ( ::osg::TessellationHints::*className_function_type )(  ) const;
            typedef char const * ( TessellationHints_wrapper::*default_className_function_type )(  ) const;
            
            TessellationHints_exposer.def( 
                "className"
                , className_function_type(&::osg::TessellationHints::className)
                , default_className_function_type(&TessellationHints_wrapper::default_className) );
        
        }
        { //::osg::TessellationHints::clone
        
            typedef ::osg::Object * ( ::osg::TessellationHints::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( TessellationHints_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            TessellationHints_exposer.def( 
                "clone"
                , clone_function_type(&::osg::TessellationHints::clone)
                , default_clone_function_type(&TessellationHints_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::TessellationHints::cloneType
        
            typedef ::osg::Object * ( ::osg::TessellationHints::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( TessellationHints_wrapper::*default_cloneType_function_type )(  ) const;
            
            TessellationHints_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::TessellationHints::cloneType)
                , default_cloneType_function_type(&TessellationHints_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::TessellationHints::getCreateBackFace
        
            typedef bool ( ::osg::TessellationHints::*getCreateBackFace_function_type )(  ) const;
            
            TessellationHints_exposer.def( 
                "getCreateBackFace"
                , getCreateBackFace_function_type( &::osg::TessellationHints::getCreateBackFace ) );
        
        }
        { //::osg::TessellationHints::getCreateBody
        
            typedef bool ( ::osg::TessellationHints::*getCreateBody_function_type )(  ) const;
            
            TessellationHints_exposer.def( 
                "getCreateBody"
                , getCreateBody_function_type( &::osg::TessellationHints::getCreateBody ) );
        
        }
        { //::osg::TessellationHints::getCreateBottom
        
            typedef bool ( ::osg::TessellationHints::*getCreateBottom_function_type )(  ) const;
            
            TessellationHints_exposer.def( 
                "getCreateBottom"
                , getCreateBottom_function_type( &::osg::TessellationHints::getCreateBottom ) );
        
        }
        { //::osg::TessellationHints::getCreateFrontFace
        
            typedef bool ( ::osg::TessellationHints::*getCreateFrontFace_function_type )(  ) const;
            
            TessellationHints_exposer.def( 
                "getCreateFrontFace"
                , getCreateFrontFace_function_type( &::osg::TessellationHints::getCreateFrontFace ) );
        
        }
        { //::osg::TessellationHints::getCreateNormals
        
            typedef bool ( ::osg::TessellationHints::*getCreateNormals_function_type )(  ) const;
            
            TessellationHints_exposer.def( 
                "getCreateNormals"
                , getCreateNormals_function_type( &::osg::TessellationHints::getCreateNormals ) );
        
        }
        { //::osg::TessellationHints::getCreateTextureCoords
        
            typedef bool ( ::osg::TessellationHints::*getCreateTextureCoords_function_type )(  ) const;
            
            TessellationHints_exposer.def( 
                "getCreateTextureCoords"
                , getCreateTextureCoords_function_type( &::osg::TessellationHints::getCreateTextureCoords ) );
        
        }
        { //::osg::TessellationHints::getCreateTop
        
            typedef bool ( ::osg::TessellationHints::*getCreateTop_function_type )(  ) const;
            
            TessellationHints_exposer.def( 
                "getCreateTop"
                , getCreateTop_function_type( &::osg::TessellationHints::getCreateTop ) );
        
        }
        { //::osg::TessellationHints::getDetailRatio
        
            typedef float ( ::osg::TessellationHints::*getDetailRatio_function_type )(  ) const;
            
            TessellationHints_exposer.def( 
                "getDetailRatio"
                , getDetailRatio_function_type( &::osg::TessellationHints::getDetailRatio ) );
        
        }
        { //::osg::TessellationHints::getTargetNumFaces
        
            typedef unsigned int ( ::osg::TessellationHints::*getTargetNumFaces_function_type )(  ) const;
            
            TessellationHints_exposer.def( 
                "getTargetNumFaces"
                , getTargetNumFaces_function_type( &::osg::TessellationHints::getTargetNumFaces ) );
        
        }
        { //::osg::TessellationHints::getTessellationMode
        
            typedef ::osg::TessellationHints::TessellationMode ( ::osg::TessellationHints::*getTessellationMode_function_type )(  ) const;
            
            TessellationHints_exposer.def( 
                "getTessellationMode"
                , getTessellationMode_function_type( &::osg::TessellationHints::getTessellationMode ) );
        
        }
        { //::osg::TessellationHints::isSameKindAs
        
            typedef bool ( ::osg::TessellationHints::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( TessellationHints_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            TessellationHints_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::TessellationHints::isSameKindAs)
                , default_isSameKindAs_function_type(&TessellationHints_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::TessellationHints::libraryName
        
            typedef char const * ( ::osg::TessellationHints::*libraryName_function_type )(  ) const;
            typedef char const * ( TessellationHints_wrapper::*default_libraryName_function_type )(  ) const;
            
            TessellationHints_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::TessellationHints::libraryName)
                , default_libraryName_function_type(&TessellationHints_wrapper::default_libraryName) );
        
        }
        { //::osg::TessellationHints::setCreateBackFace
        
            typedef void ( ::osg::TessellationHints::*setCreateBackFace_function_type )( bool ) ;
            
            TessellationHints_exposer.def( 
                "setCreateBackFace"
                , setCreateBackFace_function_type( &::osg::TessellationHints::setCreateBackFace )
                , ( bp::arg("on") ) );
        
        }
        { //::osg::TessellationHints::setCreateBody
        
            typedef void ( ::osg::TessellationHints::*setCreateBody_function_type )( bool ) ;
            
            TessellationHints_exposer.def( 
                "setCreateBody"
                , setCreateBody_function_type( &::osg::TessellationHints::setCreateBody )
                , ( bp::arg("on") ) );
        
        }
        { //::osg::TessellationHints::setCreateBottom
        
            typedef void ( ::osg::TessellationHints::*setCreateBottom_function_type )( bool ) ;
            
            TessellationHints_exposer.def( 
                "setCreateBottom"
                , setCreateBottom_function_type( &::osg::TessellationHints::setCreateBottom )
                , ( bp::arg("on") ) );
        
        }
        { //::osg::TessellationHints::setCreateFrontFace
        
            typedef void ( ::osg::TessellationHints::*setCreateFrontFace_function_type )( bool ) ;
            
            TessellationHints_exposer.def( 
                "setCreateFrontFace"
                , setCreateFrontFace_function_type( &::osg::TessellationHints::setCreateFrontFace )
                , ( bp::arg("on") ) );
        
        }
        { //::osg::TessellationHints::setCreateNormals
        
            typedef void ( ::osg::TessellationHints::*setCreateNormals_function_type )( bool ) ;
            
            TessellationHints_exposer.def( 
                "setCreateNormals"
                , setCreateNormals_function_type( &::osg::TessellationHints::setCreateNormals )
                , ( bp::arg("on") ) );
        
        }
        { //::osg::TessellationHints::setCreateTextureCoords
        
            typedef void ( ::osg::TessellationHints::*setCreateTextureCoords_function_type )( bool ) ;
            
            TessellationHints_exposer.def( 
                "setCreateTextureCoords"
                , setCreateTextureCoords_function_type( &::osg::TessellationHints::setCreateTextureCoords )
                , ( bp::arg("on") ) );
        
        }
        { //::osg::TessellationHints::setCreateTop
        
            typedef void ( ::osg::TessellationHints::*setCreateTop_function_type )( bool ) ;
            
            TessellationHints_exposer.def( 
                "setCreateTop"
                , setCreateTop_function_type( &::osg::TessellationHints::setCreateTop )
                , ( bp::arg("on") ) );
        
        }
        { //::osg::TessellationHints::setDetailRatio
        
            typedef void ( ::osg::TessellationHints::*setDetailRatio_function_type )( float ) ;
            
            TessellationHints_exposer.def( 
                "setDetailRatio"
                , setDetailRatio_function_type( &::osg::TessellationHints::setDetailRatio )
                , ( bp::arg("ratio") ) );
        
        }
        { //::osg::TessellationHints::setTargetNumFaces
        
            typedef void ( ::osg::TessellationHints::*setTargetNumFaces_function_type )( unsigned int ) ;
            
            TessellationHints_exposer.def( 
                "setTargetNumFaces"
                , setTargetNumFaces_function_type( &::osg::TessellationHints::setTargetNumFaces )
                , ( bp::arg("target") ) );
        
        }
        { //::osg::TessellationHints::setTessellationMode
        
            typedef void ( ::osg::TessellationHints::*setTessellationMode_function_type )( ::osg::TessellationHints::TessellationMode ) ;
            
            TessellationHints_exposer.def( 
                "setTessellationMode"
                , setTessellationMode_function_type( &::osg::TessellationHints::setTessellationMode )
                , ( bp::arg("mode") ) );
        
        }
    }

}
