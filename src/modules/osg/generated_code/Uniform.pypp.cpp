// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "Uniform.pypp.hpp"

namespace bp = boost::python;

struct Uniform_wrapper : osg::Uniform, bp::wrapper< osg::Uniform > {

    struct Callback_wrapper : osg::Uniform::Callback, bp::wrapper< osg::Uniform::Callback > {
    
        Callback_wrapper( )
        : osg::Uniform::Callback( )
          , bp::wrapper< osg::Uniform::Callback >(){
            // null constructor
        
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::Uniform::Callback::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::Uniform::Callback::className( );
        }
    
        virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
            if( bp::override func_clone = this->get_override( "clone" ) )
                return func_clone( boost::ref(copyop) );
            else{
                return this->osg::Uniform::Callback::clone( boost::ref(copyop) );
            }
        }
        
        ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
            return osg::Uniform::Callback::clone( boost::ref(copyop) );
        }
    
        virtual ::osg::Object * cloneType(  ) const  {
            if( bp::override func_cloneType = this->get_override( "cloneType" ) )
                return func_cloneType(  );
            else{
                return this->osg::Uniform::Callback::cloneType(  );
            }
        }
        
        ::osg::Object * default_cloneType(  ) const  {
            return osg::Uniform::Callback::cloneType( );
        }
    
        virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
            if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
                return func_isSameKindAs( boost::python::ptr(obj) );
            else{
                return this->osg::Uniform::Callback::isSameKindAs( boost::python::ptr(obj) );
            }
        }
        
        bool default_isSameKindAs( ::osg::Object const * obj ) const  {
            return osg::Uniform::Callback::isSameKindAs( boost::python::ptr(obj) );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::Uniform::Callback::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::Uniform::Callback::libraryName( );
        }
    
        virtual void operator()( ::osg::Uniform * arg0, ::osg::NodeVisitor * arg1 ) {
            if( bp::override func___call__ = this->get_override( "__call__" ) )
                func___call__( boost::python::ptr(arg0), boost::python::ptr(arg1) );
            else{
                this->osg::Uniform::Callback::operator()( boost::python::ptr(arg0), boost::python::ptr(arg1) );
            }
        }
        
        void default___call__( ::osg::Uniform * arg0, ::osg::NodeVisitor * arg1 ) {
            osg::Uniform::Callback::operator()( boost::python::ptr(arg0), boost::python::ptr(arg1) );
        }
    
    };

    Uniform_wrapper( )
    : osg::Uniform( )
      , bp::wrapper< osg::Uniform >(){
        // null constructor
    
    }

    Uniform_wrapper(::osg::Uniform::Type type, ::std::string const & name, int numElements=1 )
    : osg::Uniform( type, name, numElements )
      , bp::wrapper< osg::Uniform >(){
        // constructor
    
    }

    Uniform_wrapper(char const * name, int i0, int i1 )
    : osg::Uniform( name, i0, i1 )
      , bp::wrapper< osg::Uniform >(){
        // constructor
    
    }

    Uniform_wrapper(char const * name, int i0, int i1, int i2 )
    : osg::Uniform( name, i0, i1, i2 )
      , bp::wrapper< osg::Uniform >(){
        // constructor
    
    }

    Uniform_wrapper(char const * name, int i0, int i1, int i2, int i3 )
    : osg::Uniform( name, i0, i1, i2, i3 )
      , bp::wrapper< osg::Uniform >(){
        // constructor
    
    }

    Uniform_wrapper(char const * name, unsigned int ui0, unsigned int ui1 )
    : osg::Uniform( name, ui0, ui1 )
      , bp::wrapper< osg::Uniform >(){
        // constructor
    
    }

    Uniform_wrapper(char const * name, unsigned int ui0, unsigned int ui1, unsigned int ui2 )
    : osg::Uniform( name, ui0, ui1, ui2 )
      , bp::wrapper< osg::Uniform >(){
        // constructor
    
    }

    Uniform_wrapper(char const * name, unsigned int ui0, unsigned int ui1, unsigned int ui2, unsigned int ui3 )
    : osg::Uniform( name, ui0, ui1, ui2, ui3 )
      , bp::wrapper< osg::Uniform >(){
        // constructor
    
    }

    Uniform_wrapper(char const * name, bool b0, bool b1 )
    : osg::Uniform( name, b0, b1 )
      , bp::wrapper< osg::Uniform >(){
        // constructor
    
    }

    Uniform_wrapper(char const * name, bool b0, bool b1, bool b2 )
    : osg::Uniform( name, b0, b1, b2 )
      , bp::wrapper< osg::Uniform >(){
        // constructor
    
    }

    Uniform_wrapper(char const * name, bool b0, bool b1, bool b2, bool b3 )
    : osg::Uniform( name, b0, b1, b2, b3 )
      , bp::wrapper< osg::Uniform >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::Uniform::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::Uniform::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::Uniform::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::Uniform::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::Uniform::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::Uniform::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::Uniform::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::Uniform::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::Uniform::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::Uniform::libraryName( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Uniform::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Uniform::setName( name );
    }

};

void register_Uniform_class(){

    { //::osg::Uniform
        typedef bp::class_< Uniform_wrapper, bp::bases< osg::Object >, osg::ref_ptr< ::osg::Uniform >, boost::noncopyable > Uniform_exposer_t;
        Uniform_exposer_t Uniform_exposer = Uniform_exposer_t( "Uniform", "\n Uniform encapsulates glUniform values\n", bp::no_init );
        bp::scope Uniform_scope( Uniform_exposer );
        bp::enum_< osg::Uniform::Type>("Type")
            .value("FLOAT", osg::Uniform::FLOAT)
            .value("FLOAT_VEC2", osg::Uniform::FLOAT_VEC2)
            .value("FLOAT_VEC3", osg::Uniform::FLOAT_VEC3)
            .value("FLOAT_VEC4", osg::Uniform::FLOAT_VEC4)
            .value("DOUBLE", osg::Uniform::DOUBLE)
            .value("DOUBLE_VEC2", osg::Uniform::DOUBLE_VEC2)
            .value("DOUBLE_VEC3", osg::Uniform::DOUBLE_VEC3)
            .value("DOUBLE_VEC4", osg::Uniform::DOUBLE_VEC4)
            .value("INT", osg::Uniform::INT)
            .value("INT_VEC2", osg::Uniform::INT_VEC2)
            .value("INT_VEC3", osg::Uniform::INT_VEC3)
            .value("INT_VEC4", osg::Uniform::INT_VEC4)
            .value("UNSIGNED_INT", osg::Uniform::UNSIGNED_INT)
            .value("UNSIGNED_INT_VEC2", osg::Uniform::UNSIGNED_INT_VEC2)
            .value("UNSIGNED_INT_VEC3", osg::Uniform::UNSIGNED_INT_VEC3)
            .value("UNSIGNED_INT_VEC4", osg::Uniform::UNSIGNED_INT_VEC4)
            .value("BOOL", osg::Uniform::BOOL)
            .value("BOOL_VEC2", osg::Uniform::BOOL_VEC2)
            .value("BOOL_VEC3", osg::Uniform::BOOL_VEC3)
            .value("BOOL_VEC4", osg::Uniform::BOOL_VEC4)
            .value("FLOAT_MAT2", osg::Uniform::FLOAT_MAT2)
            .value("FLOAT_MAT3", osg::Uniform::FLOAT_MAT3)
            .value("FLOAT_MAT4", osg::Uniform::FLOAT_MAT4)
            .value("FLOAT_MAT2x3", osg::Uniform::FLOAT_MAT2x3)
            .value("FLOAT_MAT2x4", osg::Uniform::FLOAT_MAT2x4)
            .value("FLOAT_MAT3x2", osg::Uniform::FLOAT_MAT3x2)
            .value("FLOAT_MAT3x4", osg::Uniform::FLOAT_MAT3x4)
            .value("FLOAT_MAT4x2", osg::Uniform::FLOAT_MAT4x2)
            .value("FLOAT_MAT4x3", osg::Uniform::FLOAT_MAT4x3)
            .value("DOUBLE_MAT2", osg::Uniform::DOUBLE_MAT2)
            .value("DOUBLE_MAT3", osg::Uniform::DOUBLE_MAT3)
            .value("DOUBLE_MAT4", osg::Uniform::DOUBLE_MAT4)
            .value("DOUBLE_MAT2x3", osg::Uniform::DOUBLE_MAT2x3)
            .value("DOUBLE_MAT2x4", osg::Uniform::DOUBLE_MAT2x4)
            .value("DOUBLE_MAT3x2", osg::Uniform::DOUBLE_MAT3x2)
            .value("DOUBLE_MAT3x4", osg::Uniform::DOUBLE_MAT3x4)
            .value("DOUBLE_MAT4x2", osg::Uniform::DOUBLE_MAT4x2)
            .value("DOUBLE_MAT4x3", osg::Uniform::DOUBLE_MAT4x3)
            .value("SAMPLER_1D", osg::Uniform::SAMPLER_1D)
            .value("SAMPLER_2D", osg::Uniform::SAMPLER_2D)
            .value("SAMPLER_3D", osg::Uniform::SAMPLER_3D)
            .value("SAMPLER_CUBE", osg::Uniform::SAMPLER_CUBE)
            .value("SAMPLER_1D_SHADOW", osg::Uniform::SAMPLER_1D_SHADOW)
            .value("SAMPLER_2D_SHADOW", osg::Uniform::SAMPLER_2D_SHADOW)
            .value("SAMPLER_1D_ARRAY", osg::Uniform::SAMPLER_1D_ARRAY)
            .value("SAMPLER_2D_ARRAY", osg::Uniform::SAMPLER_2D_ARRAY)
            .value("SAMPLER_CUBE_MAP_ARRAY", osg::Uniform::SAMPLER_CUBE_MAP_ARRAY)
            .value("SAMPLER_1D_ARRAY_SHADOW", osg::Uniform::SAMPLER_1D_ARRAY_SHADOW)
            .value("SAMPLER_2D_ARRAY_SHADOW", osg::Uniform::SAMPLER_2D_ARRAY_SHADOW)
            .value("SAMPLER_2D_MULTISAMPLE", osg::Uniform::SAMPLER_2D_MULTISAMPLE)
            .value("SAMPLER_2D_MULTISAMPLE_ARRAY", osg::Uniform::SAMPLER_2D_MULTISAMPLE_ARRAY)
            .value("SAMPLER_CUBE_SHADOW", osg::Uniform::SAMPLER_CUBE_SHADOW)
            .value("SAMPLER_CUBE_MAP_ARRAY_SHADOW", osg::Uniform::SAMPLER_CUBE_MAP_ARRAY_SHADOW)
            .value("SAMPLER_BUFFER", osg::Uniform::SAMPLER_BUFFER)
            .value("SAMPLER_2D_RECT", osg::Uniform::SAMPLER_2D_RECT)
            .value("SAMPLER_2D_RECT_SHADOW", osg::Uniform::SAMPLER_2D_RECT_SHADOW)
            .value("INT_SAMPLER_1D", osg::Uniform::INT_SAMPLER_1D)
            .value("INT_SAMPLER_2D", osg::Uniform::INT_SAMPLER_2D)
            .value("INT_SAMPLER_3D", osg::Uniform::INT_SAMPLER_3D)
            .value("INT_SAMPLER_CUBE", osg::Uniform::INT_SAMPLER_CUBE)
            .value("INT_SAMPLER_1D_ARRAY", osg::Uniform::INT_SAMPLER_1D_ARRAY)
            .value("INT_SAMPLER_2D_ARRAY", osg::Uniform::INT_SAMPLER_2D_ARRAY)
            .value("INT_SAMPLER_CUBE_MAP_ARRAY", osg::Uniform::INT_SAMPLER_CUBE_MAP_ARRAY)
            .value("INT_SAMPLER_2D_MULTISAMPLE", osg::Uniform::INT_SAMPLER_2D_MULTISAMPLE)
            .value("INT_SAMPLER_2D_MULTISAMPLE_ARRAY", osg::Uniform::INT_SAMPLER_2D_MULTISAMPLE_ARRAY)
            .value("INT_SAMPLER_BUFFER", osg::Uniform::INT_SAMPLER_BUFFER)
            .value("INT_SAMPLER_2D_RECT", osg::Uniform::INT_SAMPLER_2D_RECT)
            .value("UNSIGNED_INT_SAMPLER_1D", osg::Uniform::UNSIGNED_INT_SAMPLER_1D)
            .value("UNSIGNED_INT_SAMPLER_2D", osg::Uniform::UNSIGNED_INT_SAMPLER_2D)
            .value("UNSIGNED_INT_SAMPLER_3D", osg::Uniform::UNSIGNED_INT_SAMPLER_3D)
            .value("UNSIGNED_INT_SAMPLER_CUBE", osg::Uniform::UNSIGNED_INT_SAMPLER_CUBE)
            .value("UNSIGNED_INT_SAMPLER_1D_ARRAY", osg::Uniform::UNSIGNED_INT_SAMPLER_1D_ARRAY)
            .value("UNSIGNED_INT_SAMPLER_2D_ARRAY", osg::Uniform::UNSIGNED_INT_SAMPLER_2D_ARRAY)
            .value("UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY", osg::Uniform::UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY)
            .value("UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE", osg::Uniform::UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE)
            .value("UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY", osg::Uniform::UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY)
            .value("UNSIGNED_INT_SAMPLER_BUFFER", osg::Uniform::UNSIGNED_INT_SAMPLER_BUFFER)
            .value("UNSIGNED_INT_SAMPLER_2D_RECT", osg::Uniform::UNSIGNED_INT_SAMPLER_2D_RECT)
            .value("IMAGE_1D", osg::Uniform::IMAGE_1D)
            .value("IMAGE_2D", osg::Uniform::IMAGE_2D)
            .value("IMAGE_3D", osg::Uniform::IMAGE_3D)
            .value("IMAGE_2D_RECT", osg::Uniform::IMAGE_2D_RECT)
            .value("IMAGE_CUBE", osg::Uniform::IMAGE_CUBE)
            .value("IMAGE_BUFFER", osg::Uniform::IMAGE_BUFFER)
            .value("IMAGE_1D_ARRAY", osg::Uniform::IMAGE_1D_ARRAY)
            .value("IMAGE_2D_ARRAY", osg::Uniform::IMAGE_2D_ARRAY)
            .value("IMAGE_CUBE_MAP_ARRAY", osg::Uniform::IMAGE_CUBE_MAP_ARRAY)
            .value("IMAGE_2D_MULTISAMPLE", osg::Uniform::IMAGE_2D_MULTISAMPLE)
            .value("IMAGE_2D_MULTISAMPLE_ARRAY", osg::Uniform::IMAGE_2D_MULTISAMPLE_ARRAY)
            .value("INT_IMAGE_1D", osg::Uniform::INT_IMAGE_1D)
            .value("INT_IMAGE_2D", osg::Uniform::INT_IMAGE_2D)
            .value("INT_IMAGE_3D", osg::Uniform::INT_IMAGE_3D)
            .value("INT_IMAGE_2D_RECT", osg::Uniform::INT_IMAGE_2D_RECT)
            .value("INT_IMAGE_CUBE", osg::Uniform::INT_IMAGE_CUBE)
            .value("INT_IMAGE_BUFFER", osg::Uniform::INT_IMAGE_BUFFER)
            .value("INT_IMAGE_1D_ARRAY", osg::Uniform::INT_IMAGE_1D_ARRAY)
            .value("INT_IMAGE_2D_ARRAY", osg::Uniform::INT_IMAGE_2D_ARRAY)
            .value("INT_IMAGE_CUBE_MAP_ARRAY", osg::Uniform::INT_IMAGE_CUBE_MAP_ARRAY)
            .value("INT_IMAGE_2D_MULTISAMPLE", osg::Uniform::INT_IMAGE_2D_MULTISAMPLE)
            .value("INT_IMAGE_2D_MULTISAMPLE_ARRAY", osg::Uniform::INT_IMAGE_2D_MULTISAMPLE_ARRAY)
            .value("UNSIGNED_INT_IMAGE_1D", osg::Uniform::UNSIGNED_INT_IMAGE_1D)
            .value("UNSIGNED_INT_IMAGE_2D", osg::Uniform::UNSIGNED_INT_IMAGE_2D)
            .value("UNSIGNED_INT_IMAGE_3D", osg::Uniform::UNSIGNED_INT_IMAGE_3D)
            .value("UNSIGNED_INT_IMAGE_2D_RECT", osg::Uniform::UNSIGNED_INT_IMAGE_2D_RECT)
            .value("UNSIGNED_INT_IMAGE_CUBE", osg::Uniform::UNSIGNED_INT_IMAGE_CUBE)
            .value("UNSIGNED_INT_IMAGE_BUFFER", osg::Uniform::UNSIGNED_INT_IMAGE_BUFFER)
            .value("UNSIGNED_INT_IMAGE_1D_ARRAY", osg::Uniform::UNSIGNED_INT_IMAGE_1D_ARRAY)
            .value("UNSIGNED_INT_IMAGE_2D_ARRAY", osg::Uniform::UNSIGNED_INT_IMAGE_2D_ARRAY)
            .value("UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY", osg::Uniform::UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY)
            .value("UNSIGNED_INT_IMAGE_2D_MULTISAMPLE", osg::Uniform::UNSIGNED_INT_IMAGE_2D_MULTISAMPLE)
            .value("UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY", osg::Uniform::UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY)
            .value("UNDEFINED", osg::Uniform::UNDEFINED)
            .export_values()
            ;
        bp::class_< Uniform_wrapper::Callback_wrapper, bp::bases< osg::Object >, osg::ref_ptr< Uniform_wrapper::Callback_wrapper >, boost::noncopyable >( "Callback", bp::init< >() )    
            .def( 
                "className"
                , (char const * ( ::osg::Uniform::Callback::* )(  ) const)(&::osg::Uniform::Callback::className)
                , (char const * ( Uniform_wrapper::Callback_wrapper::* )(  ) const)(&Uniform_wrapper::Callback_wrapper::default_className) )    
            .def( 
                "clone"
                , (::osg::Object * ( ::osg::Uniform::Callback::* )( ::osg::CopyOp const & ) const)(&::osg::Uniform::Callback::clone)
                , (::osg::Object * ( Uniform_wrapper::Callback_wrapper::* )( ::osg::CopyOp const & ) const)(&Uniform_wrapper::Callback_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "cloneType"
                , (::osg::Object * ( ::osg::Uniform::Callback::* )(  ) const)(&::osg::Uniform::Callback::cloneType)
                , (::osg::Object * ( Uniform_wrapper::Callback_wrapper::* )(  ) const)(&Uniform_wrapper::Callback_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "isSameKindAs"
                , (bool ( ::osg::Uniform::Callback::* )( ::osg::Object const * ) const)(&::osg::Uniform::Callback::isSameKindAs)
                , (bool ( Uniform_wrapper::Callback_wrapper::* )( ::osg::Object const * ) const)(&Uniform_wrapper::Callback_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) )    
            .def( 
                "libraryName"
                , (char const * ( ::osg::Uniform::Callback::* )(  ) const)(&::osg::Uniform::Callback::libraryName)
                , (char const * ( Uniform_wrapper::Callback_wrapper::* )(  ) const)(&Uniform_wrapper::Callback_wrapper::default_libraryName) )    
            .def( 
                "__call__"
                , (void ( ::osg::Uniform::Callback::* )( ::osg::Uniform *,::osg::NodeVisitor * ) )(&::osg::Uniform::Callback::operator())
                , (void ( Uniform_wrapper::Callback_wrapper::* )( ::osg::Uniform *,::osg::NodeVisitor * ) )(&Uniform_wrapper::Callback_wrapper::default___call__)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        Uniform_exposer.def( bp::init< >() );
        Uniform_exposer.def( bp::init< osg::Uniform::Type, std::string const &, bp::optional< int > >(( bp::arg("type"), bp::arg("name"), bp::arg("numElements")=(int)(1) )) );
        Uniform_exposer.def( bp::init< char const *, int, int >(( bp::arg("name"), bp::arg("i0"), bp::arg("i1") )) );
        Uniform_exposer.def( bp::init< char const *, int, int, int >(( bp::arg("name"), bp::arg("i0"), bp::arg("i1"), bp::arg("i2") )) );
        Uniform_exposer.def( bp::init< char const *, int, int, int, int >(( bp::arg("name"), bp::arg("i0"), bp::arg("i1"), bp::arg("i2"), bp::arg("i3") )) );
        Uniform_exposer.def( bp::init< char const *, unsigned int, unsigned int >(( bp::arg("name"), bp::arg("ui0"), bp::arg("ui1") )) );
        Uniform_exposer.def( bp::init< char const *, unsigned int, unsigned int, unsigned int >(( bp::arg("name"), bp::arg("ui0"), bp::arg("ui1"), bp::arg("ui2") )) );
        Uniform_exposer.def( bp::init< char const *, unsigned int, unsigned int, unsigned int, unsigned int >(( bp::arg("name"), bp::arg("ui0"), bp::arg("ui1"), bp::arg("ui2"), bp::arg("ui3") )) );
        Uniform_exposer.def( bp::init< char const *, bool, bool >(( bp::arg("name"), bp::arg("b0"), bp::arg("b1") )) );
        Uniform_exposer.def( bp::init< char const *, bool, bool, bool >(( bp::arg("name"), bp::arg("b0"), bp::arg("b1"), bp::arg("b2") )) );
        Uniform_exposer.def( bp::init< char const *, bool, bool, bool, bool >(( bp::arg("name"), bp::arg("b0"), bp::arg("b1"), bp::arg("b2"), bp::arg("b3") )) );
        { //::osg::Uniform::apply
        
            typedef void ( ::osg::Uniform::*apply_function_type )( ::osg::GL2Extensions const *,::GLint ) const;
            
            Uniform_exposer.def( 
                "apply"
                , apply_function_type( &::osg::Uniform::apply )
                , ( bp::arg("ext"), bp::arg("location") ) );
        
        }
        { //::osg::Uniform::className
        
            typedef char const * ( ::osg::Uniform::*className_function_type )(  ) const;
            typedef char const * ( Uniform_wrapper::*default_className_function_type )(  ) const;
            
            Uniform_exposer.def( 
                "className"
                , className_function_type(&::osg::Uniform::className)
                , default_className_function_type(&Uniform_wrapper::default_className) );
        
        }
        { //::osg::Uniform::clone
        
            typedef ::osg::Object * ( ::osg::Uniform::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Uniform_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Uniform_exposer.def( 
                "clone"
                , clone_function_type(&::osg::Uniform::clone)
                , default_clone_function_type(&Uniform_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Uniform::cloneType
        
            typedef ::osg::Object * ( ::osg::Uniform::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Uniform_wrapper::*default_cloneType_function_type )(  ) const;
            
            Uniform_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osg::Uniform::cloneType)
                , default_cloneType_function_type(&Uniform_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::Uniform::dirty
        
            typedef void ( ::osg::Uniform::*dirty_function_type )(  ) ;
            
            Uniform_exposer.def( 
                "dirty"
                , dirty_function_type( &::osg::Uniform::dirty )
                , " Increment the modified count on the Uniform so Programs watching it know it update themselves.\n NOTE: automatically called during osg::Uniform::set*();\n you must call if modifying the internal data array directly." );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( float & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("f") )
                , " convenient scalar (non-array) value query" );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( double & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("d") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( int & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("i") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( unsigned int & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("ui") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( bool & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("b") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Vec2 & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("v2") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Vec3 & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("v3") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Vec4 & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("v4") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Vec2d & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("v2") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Vec3d & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("v3") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Vec4d & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("v4") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Matrix2 & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("m2") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Matrix3 & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("m3") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Matrixf & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("m4") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Matrix2x3 & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("m2x3") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Matrix2x4 & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("m2x4") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Matrix3x2 & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("m3x2") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Matrix3x4 & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("m3x4") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Matrix4x2 & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("m4x2") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Matrix4x3 & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("m4x3") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Matrix2d & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("m2") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Matrix3d & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("m3") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Matrixd & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("m4") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Matrix2x3d & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("m2x3") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Matrix2x4d & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("m2x4") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Matrix3x2d & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("m3x2") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Matrix3x4d & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("m3x4") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Matrix4x2d & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("m4x2") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( ::osg::Matrix4x3d & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("m4x3") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( int &,int & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("i0"), bp::arg("i1") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( int &,int &,int & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("i0"), bp::arg("i1"), bp::arg("i2") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( int &,int &,int &,int & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("i0"), bp::arg("i1"), bp::arg("i2"), bp::arg("i3") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( unsigned int &,unsigned int & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("ui0"), bp::arg("ui1") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( unsigned int &,unsigned int &,unsigned int & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("ui0"), bp::arg("ui1"), bp::arg("ui2") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( unsigned int &,unsigned int &,unsigned int &,unsigned int & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("ui0"), bp::arg("ui1"), bp::arg("ui2"), bp::arg("ui3") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( bool &,bool & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("b0"), bp::arg("b1") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( bool &,bool &,bool & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("b0"), bp::arg("b1"), bp::arg("b2") ) );
        
        }
        { //::osg::Uniform::get
        
            typedef bool ( ::osg::Uniform::*get_function_type )( bool &,bool &,bool &,bool & ) const;
            
            Uniform_exposer.def( 
                "get"
                , get_function_type( &::osg::Uniform::get )
                , ( bp::arg("b0"), bp::arg("b1"), bp::arg("b2"), bp::arg("b3") ) );
        
        }
        { //::osg::Uniform::getDoubleArray
        
            typedef ::osg::DoubleArray * ( ::osg::Uniform::*getDoubleArray_function_type )(  ) ;
            
            Uniform_exposer.def( 
                "getDoubleArray"
                , getDoubleArray_function_type( &::osg::Uniform::getDoubleArray )
                , bp::return_internal_reference< >()
                , " Get the internal data array for a double osg::Uniform." );
        
        }
        { //::osg::Uniform::getDoubleArray
        
            typedef ::osg::DoubleArray const * ( ::osg::Uniform::*getDoubleArray_function_type )(  ) const;
            
            Uniform_exposer.def( 
                "getDoubleArray"
                , getDoubleArray_function_type( &::osg::Uniform::getDoubleArray )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,float & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("f") )
                , " value query for array uniforms" );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,double & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("d") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,int & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("i") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,unsigned int & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("ui") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,bool & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("b") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Vec2 & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("v2") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Vec3 & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("v3") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Vec4 & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("v4") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Vec2d & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("v2") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Vec3d & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("v3") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Vec4d & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("v4") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Matrix2 & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("m2") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Matrix3 & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("m3") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Matrixf & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("m4") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Matrix2x3 & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("m2x3") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Matrix2x4 & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("m2x4") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Matrix3x2 & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("m3x2") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Matrix3x4 & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("m3x4") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Matrix4x2 & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("m4x2") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Matrix4x3 & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("m4x3") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Matrix2d & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("m2") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Matrix3d & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("m3") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Matrixd & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("m4") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Matrix2x3d & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("m2x3") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Matrix2x4d & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("m2x4") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Matrix3x2d & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("m3x2") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Matrix3x4d & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("m3x4") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Matrix4x2d & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("m4x2") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,::osg::Matrix4x3d & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("m4x3") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,int &,int & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("i0"), bp::arg("i1") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,int &,int &,int & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("i0"), bp::arg("i1"), bp::arg("i2") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,int &,int &,int &,int & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("i0"), bp::arg("i1"), bp::arg("i2"), bp::arg("i3") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,unsigned int &,unsigned int & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("ui0"), bp::arg("ui1") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,unsigned int &,unsigned int &,unsigned int & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("ui0"), bp::arg("ui1"), bp::arg("ui2") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,unsigned int &,unsigned int &,unsigned int &,unsigned int & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("ui0"), bp::arg("ui1"), bp::arg("ui2"), bp::arg("ui3") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,bool &,bool & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("b0"), bp::arg("b1") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,bool &,bool &,bool & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("b0"), bp::arg("b1"), bp::arg("b2") ) );
        
        }
        { //::osg::Uniform::getElement
        
            typedef bool ( ::osg::Uniform::*getElement_function_type )( unsigned int,bool &,bool &,bool &,bool & ) const;
            
            Uniform_exposer.def( 
                "getElement"
                , getElement_function_type( &::osg::Uniform::getElement )
                , ( bp::arg("index"), bp::arg("b0"), bp::arg("b1"), bp::arg("b2"), bp::arg("b3") ) );
        
        }
        { //::osg::Uniform::getEventCallback
        
            typedef ::osg::Uniform::Callback * ( ::osg::Uniform::*getEventCallback_function_type )(  ) ;
            
            Uniform_exposer.def( 
                "getEventCallback"
                , getEventCallback_function_type( &::osg::Uniform::getEventCallback )
                , bp::return_internal_reference< >()
                , " Get the non const EventCallback." );
        
        }
        { //::osg::Uniform::getEventCallback
        
            typedef ::osg::Uniform::Callback const * ( ::osg::Uniform::*getEventCallback_function_type )(  ) const;
            
            Uniform_exposer.def( 
                "getEventCallback"
                , getEventCallback_function_type( &::osg::Uniform::getEventCallback )
                , bp::return_internal_reference< >()
                , " Get the const EventCallback." );
        
        }
        { //::osg::Uniform::getFloatArray
        
            typedef ::osg::FloatArray * ( ::osg::Uniform::*getFloatArray_function_type )(  ) ;
            
            Uniform_exposer.def( 
                "getFloatArray"
                , getFloatArray_function_type( &::osg::Uniform::getFloatArray )
                , bp::return_internal_reference< >()
                , " Get the internal data array for a float osg::Uniform." );
        
        }
        { //::osg::Uniform::getFloatArray
        
            typedef ::osg::FloatArray const * ( ::osg::Uniform::*getFloatArray_function_type )(  ) const;
            
            Uniform_exposer.def( 
                "getFloatArray"
                , getFloatArray_function_type( &::osg::Uniform::getFloatArray )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Uniform::getGlApiType
        
            typedef ::osg::Uniform::Type ( *getGlApiType_function_type )( ::osg::Uniform::Type );
            
            Uniform_exposer.def( 
                "getGlApiType"
                , getGlApiType_function_type( &::osg::Uniform::getGlApiType )
                , ( bp::arg("t") )
                , " Return the GL API type corresponding to a GLSL type" );
        
        }
        { //::osg::Uniform::getIntArray
        
            typedef ::osg::IntArray * ( ::osg::Uniform::*getIntArray_function_type )(  ) ;
            
            Uniform_exposer.def( 
                "getIntArray"
                , getIntArray_function_type( &::osg::Uniform::getIntArray )
                , bp::return_internal_reference< >()
                , " Get the internal data array for an int osg::Uniform." );
        
        }
        { //::osg::Uniform::getIntArray
        
            typedef ::osg::IntArray const * ( ::osg::Uniform::*getIntArray_function_type )(  ) const;
            
            Uniform_exposer.def( 
                "getIntArray"
                , getIntArray_function_type( &::osg::Uniform::getIntArray )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Uniform::getInternalArrayNumElements
        
            typedef unsigned int ( ::osg::Uniform::*getInternalArrayNumElements_function_type )(  ) const;
            
            Uniform_exposer.def( 
                "getInternalArrayNumElements"
                , getInternalArrayNumElements_function_type( &::osg::Uniform::getInternalArrayNumElements )
                , " Get the number of elements required for the internal data array.\n Returns 0 if the osg::Uniform is not properly configured." );
        
        }
        { //::osg::Uniform::getInternalArrayType
        
            typedef ::GLenum ( *getInternalArrayType_function_type )( ::osg::Uniform::Type );
            
            Uniform_exposer.def( 
                "getInternalArrayType"
                , getInternalArrayType_function_type( &::osg::Uniform::getInternalArrayType )
                , ( bp::arg("t") )
                , " Return the internal data array type corresponding to a GLSL type" );
        
        }
        { //::osg::Uniform::getModifiedCount
        
            typedef unsigned int ( ::osg::Uniform::*getModifiedCount_function_type )(  ) const;
            
            Uniform_exposer.def( 
                "getModifiedCount"
                , getModifiedCount_function_type( &::osg::Uniform::getModifiedCount ) );
        
        }
        { //::osg::Uniform::getNameID
        
            typedef unsigned int ( *getNameID_function_type )( ::std::string const & );
            
            Uniform_exposer.def( 
                "getNameID"
                , getNameID_function_type( &::osg::Uniform::getNameID )
                , ( bp::arg("name") )
                , " Return the number that the name maps to uniquely" );
        
        }
        { //::osg::Uniform::getNameID
        
            typedef unsigned int ( ::osg::Uniform::*getNameID_function_type )(  ) const;
            
            Uniform_exposer.def( 
                "getNameID"
                , getNameID_function_type( &::osg::Uniform::getNameID )
                , " Get the number that the Uniforms name maps to uniquely" );
        
        }
        { //::osg::Uniform::getNumElements
        
            typedef unsigned int ( ::osg::Uniform::*getNumElements_function_type )(  ) const;
            
            Uniform_exposer.def( 
                "getNumElements"
                , getNumElements_function_type( &::osg::Uniform::getNumElements )
                , " Get the number of GLSL elements of the osg::Uniform (1==scalar)" );
        
        }
        { //::osg::Uniform::getNumParents
        
            typedef unsigned int ( ::osg::Uniform::*getNumParents_function_type )(  ) const;
            
            Uniform_exposer.def( 
                "getNumParents"
                , getNumParents_function_type( &::osg::Uniform::getNumParents )
                , " Get the number of parents of this Uniform.\n Return: the number of parents of this Uniform." );
        
        }
        { //::osg::Uniform::getParent
        
            typedef ::osg::StateSet * ( ::osg::Uniform::*getParent_function_type )( unsigned int ) ;
            
            Uniform_exposer.def( 
                "getParent"
                , getParent_function_type( &::osg::Uniform::getParent )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Uniform::getParent
        
            typedef ::osg::StateSet const * ( ::osg::Uniform::*getParent_function_type )( unsigned int ) const;
            
            Uniform_exposer.def( 
                "getParent"
                , getParent_function_type( &::osg::Uniform::getParent )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >()
                , " Get a single const parent of this Uniform.\n @param i: index of the parent to get.\n Return: the parent i." );
        
        }
        { //::osg::Uniform::getParents
        
            typedef ::std::vector< osg::StateSet* > const & ( ::osg::Uniform::*getParents_function_type )(  ) const;
            
            Uniform_exposer.def( 
                "getParents"
                , getParents_function_type( &::osg::Uniform::getParents )
                , bp::return_internal_reference< >()
                , " Get the parent list of this Uniform." );
        
        }
        { //::osg::Uniform::getParents
        
            typedef ::std::vector< osg::StateSet* > ( ::osg::Uniform::*getParents_function_type )(  ) ;
            
            Uniform_exposer.def( 
                "getParents"
                , getParents_function_type( &::osg::Uniform::getParents )
                , " Get the a copy of parent list of node. A copy is returned to\n prevent modification of the parent list." );
        
        }
        { //::osg::Uniform::getType
        
            typedef ::osg::Uniform::Type ( ::osg::Uniform::*getType_function_type )(  ) const;
            
            Uniform_exposer.def( 
                "getType"
                , getType_function_type( &::osg::Uniform::getType )
                , " Get the type of glUniform as enum." );
        
        }
        { //::osg::Uniform::getTypeId
        
            typedef ::osg::Uniform::Type ( *getTypeId_function_type )( ::std::string const & );
            
            Uniform_exposer.def( 
                "getTypeId"
                , getTypeId_function_type( &::osg::Uniform::getTypeId )
                , ( bp::arg("tname") )
                , " Return the Type enum of a Uniform typename string" );
        
        }
        { //::osg::Uniform::getTypeNumComponents
        
            typedef int ( *getTypeNumComponents_function_type )( ::osg::Uniform::Type );
            
            Uniform_exposer.def( 
                "getTypeNumComponents"
                , getTypeNumComponents_function_type( &::osg::Uniform::getTypeNumComponents )
                , ( bp::arg("t") )
                , " Return the the number of components for a GLSL type." );
        
        }
        { //::osg::Uniform::getTypename
        
            typedef char const * ( *getTypename_function_type )( ::osg::Uniform::Type );
            
            Uniform_exposer.def( 
                "getTypename"
                , getTypename_function_type( &::osg::Uniform::getTypename )
                , ( bp::arg("t") )
                , " Return the name of a Type enum as string." );
        
        }
        { //::osg::Uniform::getUIntArray
        
            typedef ::osg::UIntArray * ( ::osg::Uniform::*getUIntArray_function_type )(  ) ;
            
            Uniform_exposer.def( 
                "getUIntArray"
                , getUIntArray_function_type( &::osg::Uniform::getUIntArray )
                , bp::return_internal_reference< >()
                , " Get the internal data array for an unsigned int osg::Uniform." );
        
        }
        { //::osg::Uniform::getUIntArray
        
            typedef ::osg::UIntArray const * ( ::osg::Uniform::*getUIntArray_function_type )(  ) const;
            
            Uniform_exposer.def( 
                "getUIntArray"
                , getUIntArray_function_type( &::osg::Uniform::getUIntArray )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::Uniform::getUpdateCallback
        
            typedef ::osg::Uniform::Callback * ( ::osg::Uniform::*getUpdateCallback_function_type )(  ) ;
            
            Uniform_exposer.def( 
                "getUpdateCallback"
                , getUpdateCallback_function_type( &::osg::Uniform::getUpdateCallback )
                , bp::return_internal_reference< >()
                , " Get the non const UpdateCallback." );
        
        }
        { //::osg::Uniform::getUpdateCallback
        
            typedef ::osg::Uniform::Callback const * ( ::osg::Uniform::*getUpdateCallback_function_type )(  ) const;
            
            Uniform_exposer.def( 
                "getUpdateCallback"
                , getUpdateCallback_function_type( &::osg::Uniform::getUpdateCallback )
                , bp::return_internal_reference< >()
                , " Get the const UpdateCallback." );
        
        }
        { //::osg::Uniform::isSameKindAs
        
            typedef bool ( ::osg::Uniform::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Uniform_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Uniform_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osg::Uniform::isSameKindAs)
                , default_isSameKindAs_function_type(&Uniform_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osg::Uniform::libraryName
        
            typedef char const * ( ::osg::Uniform::*libraryName_function_type )(  ) const;
            typedef char const * ( Uniform_wrapper::*default_libraryName_function_type )(  ) const;
            
            Uniform_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osg::Uniform::libraryName)
                , default_libraryName_function_type(&Uniform_wrapper::default_libraryName) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( float ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("f") )
                , " convenient scalar (non-array) value assignment" );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( double ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("d") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( int ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("i") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( unsigned int ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("ui") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( bool ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("b") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Vec2 const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("v2") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Vec3 const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("v3") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Vec4 const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("v4") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Vec2d const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("v2") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Vec3d const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("v3") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Vec4d const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("v4") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Matrix2 const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("m2") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Matrix3 const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("m3") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Matrixf const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("m4") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Matrix2x3 const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("m2x3") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Matrix2x4 const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("m2x4") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Matrix3x2 const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("m3x2") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Matrix3x4 const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("m3x4") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Matrix4x2 const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("m4x2") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Matrix4x3 const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("m4x3") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Matrix2d const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("m2") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Matrix3d const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("m3") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Matrixd const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("m4") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Matrix2x3d const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("m2x3") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Matrix2x4d const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("m2x4") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Matrix3x2d const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("m3x2") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Matrix3x4d const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("m3x4") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Matrix4x2d const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("m4x2") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( ::osg::Matrix4x3d const & ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("m4x3") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( int,int ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("i0"), bp::arg("i1") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( int,int,int ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("i0"), bp::arg("i1"), bp::arg("i2") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( int,int,int,int ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("i0"), bp::arg("i1"), bp::arg("i2"), bp::arg("i3") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( unsigned int,unsigned int ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("ui0"), bp::arg("ui1") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( unsigned int,unsigned int,unsigned int ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("ui0"), bp::arg("ui1"), bp::arg("ui2") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( unsigned int,unsigned int,unsigned int,unsigned int ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("ui0"), bp::arg("ui1"), bp::arg("ui2"), bp::arg("ui3") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( bool,bool ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("b0"), bp::arg("b1") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( bool,bool,bool ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("b0"), bp::arg("b1"), bp::arg("b2") ) );
        
        }
        { //::osg::Uniform::set
        
            typedef bool ( ::osg::Uniform::*set_function_type )( bool,bool,bool,bool ) ;
            
            Uniform_exposer.def( 
                "set"
                , set_function_type( &::osg::Uniform::set )
                , ( bp::arg("b0"), bp::arg("b1"), bp::arg("b2"), bp::arg("b3") ) );
        
        }
        { //::osg::Uniform::setArray
        
            typedef bool ( ::osg::Uniform::*setArray_function_type )( ::osg::FloatArray * ) ;
            
            Uniform_exposer.def( 
                "setArray"
                , setArray_function_type( &::osg::Uniform::setArray )
                , ( bp::arg("array") )
                , " Set the internal data array for a osg::Uniform" );
        
        }
        { //::osg::Uniform::setArray
        
            typedef bool ( ::osg::Uniform::*setArray_function_type )( ::osg::DoubleArray * ) ;
            
            Uniform_exposer.def( 
                "setArray"
                , setArray_function_type( &::osg::Uniform::setArray )
                , ( bp::arg("array") ) );
        
        }
        { //::osg::Uniform::setArray
        
            typedef bool ( ::osg::Uniform::*setArray_function_type )( ::osg::IntArray * ) ;
            
            Uniform_exposer.def( 
                "setArray"
                , setArray_function_type( &::osg::Uniform::setArray )
                , ( bp::arg("array") ) );
        
        }
        { //::osg::Uniform::setArray
        
            typedef bool ( ::osg::Uniform::*setArray_function_type )( ::osg::UIntArray * ) ;
            
            Uniform_exposer.def( 
                "setArray"
                , setArray_function_type( &::osg::Uniform::setArray )
                , ( bp::arg("array") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,float ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("f") )
                , " value assignment for array uniforms" );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,double ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("d") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,int ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("i") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,unsigned int ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("ui") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,bool ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("b") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Vec2 const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("v2") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Vec3 const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("v3") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Vec4 const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("v4") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Vec2d const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("v2") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Vec3d const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("v3") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Vec4d const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("v4") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Matrix2 const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("m2") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Matrix3 const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("m3") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Matrixf const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("m4") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Matrix2x3 const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("m2x3") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Matrix2x4 const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("m2x4") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Matrix3x2 const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("m3x2") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Matrix3x4 const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("m3x4") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Matrix4x2 const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("m4x2") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Matrix4x3 const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("m4x3") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Matrix2d const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("m2") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Matrix3d const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("m3") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Matrixd const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("m4") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Matrix2x3d const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("m2x3") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Matrix2x4d const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("m2x4") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Matrix3x2d const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("m3x2") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Matrix3x4d const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("m3x4") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Matrix4x2d const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("m4x2") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,::osg::Matrix4x3d const & ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("m4x3") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,int,int ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("i0"), bp::arg("i1") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,int,int,int ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("i0"), bp::arg("i1"), bp::arg("i2") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,int,int,int,int ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("i0"), bp::arg("i1"), bp::arg("i2"), bp::arg("i3") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,unsigned int,unsigned int ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("ui0"), bp::arg("ui1") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,unsigned int,unsigned int,unsigned int ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("ui0"), bp::arg("ui1"), bp::arg("ui2") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,unsigned int,unsigned int,unsigned int,unsigned int ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("ui0"), bp::arg("ui1"), bp::arg("ui2"), bp::arg("ui3") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,bool,bool ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("b0"), bp::arg("b1") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,bool,bool,bool ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("b0"), bp::arg("b1"), bp::arg("b2") ) );
        
        }
        { //::osg::Uniform::setElement
        
            typedef bool ( ::osg::Uniform::*setElement_function_type )( unsigned int,bool,bool,bool,bool ) ;
            
            Uniform_exposer.def( 
                "setElement"
                , setElement_function_type( &::osg::Uniform::setElement )
                , ( bp::arg("index"), bp::arg("b0"), bp::arg("b1"), bp::arg("b2"), bp::arg("b3") ) );
        
        }
        { //::osg::Uniform::setEventCallback
        
            typedef void ( ::osg::Uniform::*setEventCallback_function_type )( ::osg::Uniform::Callback * ) ;
            
            Uniform_exposer.def( 
                "setEventCallback"
                , setEventCallback_function_type( &::osg::Uniform::setEventCallback )
                , ( bp::arg("ec") )
                , " Set the EventCallback which allows users to attach customize the updating of an object during the Event traversal." );
        
        }
        { //::osg::Uniform::setModifiedCount
        
            typedef void ( ::osg::Uniform::*setModifiedCount_function_type )( unsigned int ) ;
            
            Uniform_exposer.def( 
                "setModifiedCount"
                , setModifiedCount_function_type( &::osg::Uniform::setModifiedCount )
                , ( bp::arg("mc") ) );
        
        }
        { //::osg::Uniform::setName
        
            typedef void ( ::osg::Uniform::*setName_function_type )( ::std::string const & ) ;
            typedef void ( Uniform_wrapper::*default_setName_function_type )( ::std::string const & ) ;
            
            Uniform_exposer.def( 
                "setName"
                , setName_function_type(&::osg::Uniform::setName)
                , default_setName_function_type(&Uniform_wrapper::default_setName)
                , ( bp::arg("name") ) );
        
        }
        { //::osg::Uniform::setNumElements
        
            typedef void ( ::osg::Uniform::*setNumElements_function_type )( unsigned int ) ;
            
            Uniform_exposer.def( 
                "setNumElements"
                , setNumElements_function_type( &::osg::Uniform::setNumElements )
                , ( bp::arg("numElements") )
                , " Set the length of a uniform, ensuring it is only set once (1==scalar)" );
        
        }
        { //::osg::Uniform::setType
        
            typedef bool ( ::osg::Uniform::*setType_function_type )( ::osg::Uniform::Type ) ;
            
            Uniform_exposer.def( 
                "setType"
                , setType_function_type( &::osg::Uniform::setType )
                , ( bp::arg("t") )
                , " Set the type of glUniform, ensuring it is only set once." );
        
        }
        { //::osg::Uniform::setUpdateCallback
        
            typedef void ( ::osg::Uniform::*setUpdateCallback_function_type )( ::osg::Uniform::Callback * ) ;
            
            Uniform_exposer.def( 
                "setUpdateCallback"
                , setUpdateCallback_function_type( &::osg::Uniform::setUpdateCallback )
                , ( bp::arg("uc") )
                , " Set the UpdateCallback which allows users to attach customize the updating of an object during the update traversal." );
        
        }
        Uniform_exposer.staticmethod( "getGlApiType" );
        Uniform_exposer.staticmethod( "getInternalArrayType" );
        Uniform_exposer.staticmethod( "getNameID" );
        Uniform_exposer.staticmethod( "getTypeId" );
        Uniform_exposer.staticmethod( "getTypeNumComponents" );
        Uniform_exposer.staticmethod( "getTypename" );
    }

}
