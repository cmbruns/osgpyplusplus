// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "Atomic.pypp.hpp"

namespace bp = boost::python;

static void wrap_increment_Atomic(OpenThreads::Atomic& val) {++val;}

static void wrap_decrement_Atomic(OpenThreads::Atomic& val) {--val;}

void register_Atomic_class(){

    { //::OpenThreads::Atomic
        typedef bp::class_< OpenThreads::Atomic, boost::noncopyable > Atomic_exposer_t;
        Atomic_exposer_t Atomic_exposer = Atomic_exposer_t( "Atomic", "\n  Class: Atomic\n   This class provides an atomic increment and decrement operation.\n", bp::init< bp::optional< unsigned int > >(( bp::arg("value")=(unsigned int)(0) ), "\n  Class: Atomic\n   This class provides an atomic increment and decrement operation.\n") );
        bp::scope Atomic_scope( Atomic_exposer );
        bp::implicitly_convertible< unsigned int, OpenThreads::Atomic >();
        { //::OpenThreads::Atomic::AND
        
            typedef unsigned int ( ::OpenThreads::Atomic::*AND_function_type )( unsigned int ) ;
            
            Atomic_exposer.def( 
                "AND"
                , AND_function_type( &::OpenThreads::Atomic::AND )
                , ( bp::arg("value") ) );
        
        }
        { //::OpenThreads::Atomic::OR
        
            typedef unsigned int ( ::OpenThreads::Atomic::*OR_function_type )( unsigned int ) ;
            
            Atomic_exposer.def( 
                "OR"
                , OR_function_type( &::OpenThreads::Atomic::OR )
                , ( bp::arg("value") ) );
        
        }
        { //::OpenThreads::Atomic::XOR
        
            typedef unsigned int ( ::OpenThreads::Atomic::*XOR_function_type )( unsigned int ) ;
            
            Atomic_exposer.def( 
                "XOR"
                , XOR_function_type( &::OpenThreads::Atomic::XOR )
                , ( bp::arg("value") ) );
        
        }
        { //::OpenThreads::Atomic::exchange
        
            typedef unsigned int ( ::OpenThreads::Atomic::*exchange_function_type )( unsigned int ) ;
            
            Atomic_exposer.def( 
                "exchange"
                , exchange_function_type( &::OpenThreads::Atomic::exchange )
                , ( bp::arg("value")=(unsigned int)(0) ) );
        
        }
        Atomic_exposer.def( "__int__", &OpenThreads::Atomic::operator unsigned int  );
        Atomic_exposer.def("increment", &wrap_increment_Atomic);
        Atomic_exposer.def("decrement", &wrap_decrement_Atomic);
    }

}
