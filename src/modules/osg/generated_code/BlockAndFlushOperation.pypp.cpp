// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "BlockAndFlushOperation.pypp.hpp"

namespace bp = boost::python;

struct BlockAndFlushOperation_wrapper : osg::BlockAndFlushOperation, bp::wrapper< osg::BlockAndFlushOperation > {

    BlockAndFlushOperation_wrapper( )
    : osg::BlockAndFlushOperation( )
      , bp::wrapper< osg::BlockAndFlushOperation >(){
        // null constructor
    
    }

    virtual void operator()( ::osg::GraphicsContext * arg0 ) {
        if( bp::override func___call__ = this->get_override( "__call__" ) )
            func___call__( boost::python::ptr(arg0) );
        else{
            this->osg::BlockAndFlushOperation::operator()( boost::python::ptr(arg0) );
        }
    }
    
    void default___call__( ::osg::GraphicsContext * arg0 ) {
        osg::BlockAndFlushOperation::operator()( boost::python::ptr(arg0) );
    }

    virtual void release(  ) {
        if( bp::override func_release = this->get_override( "release" ) )
            func_release(  );
        else{
            this->osg::BlockAndFlushOperation::release(  );
        }
    }
    
    void default_release(  ) {
        osg::BlockAndFlushOperation::release( );
    }

};

void register_BlockAndFlushOperation_class(){

    bp::class_< BlockAndFlushOperation_wrapper, bp::bases< osg::GraphicsOperation, OpenThreads::Block >, osg::ref_ptr< ::osg::BlockAndFlushOperation >, boost::noncopyable >( "BlockAndFlushOperation", bp::init< >() )    
        .def( 
            "__call__"
            , (void ( ::osg::BlockAndFlushOperation::* )( ::osg::GraphicsContext * ) )(&::osg::BlockAndFlushOperation::operator())
            , (void ( BlockAndFlushOperation_wrapper::* )( ::osg::GraphicsContext * ) )(&BlockAndFlushOperation_wrapper::default___call__)
            , ( bp::arg("arg0") ) )    
        .def( 
            "release"
            , (void ( ::osg::BlockAndFlushOperation::* )(  ) )(&::osg::BlockAndFlushOperation::release)
            , (void ( BlockAndFlushOperation_wrapper::* )(  ) )(&BlockAndFlushOperation_wrapper::default_release) );

}
