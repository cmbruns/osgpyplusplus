// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "ShaderComposer.pypp.hpp"

namespace bp = boost::python;

struct ShaderComposer_wrapper : osg::ShaderComposer, bp::wrapper< osg::ShaderComposer > {

    ShaderComposer_wrapper( )
    : osg::ShaderComposer( )
      , bp::wrapper< osg::ShaderComposer >(){
        // null constructor
    
    }

    virtual void addShaderToProgram( ::osg::Program * program, ::std::vector< const osg::Shader* > const & shaders ) {
        if( bp::override func_addShaderToProgram = this->get_override( "addShaderToProgram" ) )
            func_addShaderToProgram( boost::python::ptr(program), boost::ref(shaders) );
        else{
            this->osg::ShaderComposer::addShaderToProgram( boost::python::ptr(program), boost::ref(shaders) );
        }
    }
    
    void default_addShaderToProgram( ::osg::Program * program, ::std::vector< const osg::Shader* > const & shaders ) {
        osg::ShaderComposer::addShaderToProgram( boost::python::ptr(program), boost::ref(shaders) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::ShaderComposer::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::ShaderComposer::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::ShaderComposer::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::ShaderComposer::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::ShaderComposer::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::ShaderComposer::cloneType( );
    }

    virtual ::osg::Shader * composeMain( ::std::vector< const osg::Shader* > const & shaders ) {
        if( bp::override func_composeMain = this->get_override( "composeMain" ) )
            return func_composeMain( boost::ref(shaders) );
        else{
            return this->osg::ShaderComposer::composeMain( boost::ref(shaders) );
        }
    }
    
    ::osg::Shader * default_composeMain( ::std::vector< const osg::Shader* > const & shaders ) {
        return osg::ShaderComposer::composeMain( boost::ref(shaders) );
    }

    virtual ::osg::Program * getOrCreateProgram( ::osg::ShaderComponents const & shaderComponents ) {
        if( bp::override func_getOrCreateProgram = this->get_override( "getOrCreateProgram" ) )
            return func_getOrCreateProgram( boost::ref(shaderComponents) );
        else{
            return this->osg::ShaderComposer::getOrCreateProgram( boost::ref(shaderComponents) );
        }
    }
    
    ::osg::Program * default_getOrCreateProgram( ::osg::ShaderComponents const & shaderComponents ) {
        return osg::ShaderComposer::getOrCreateProgram( boost::ref(shaderComponents) );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::ShaderComposer::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::ShaderComposer::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::ShaderComposer::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::ShaderComposer::libraryName( );
    }

};

void register_ShaderComposer_class(){

    bp::class_< ShaderComposer_wrapper, bp::bases< osg::Object >, osg::ref_ptr< ::osg::ShaderComposer >, boost::noncopyable >( "ShaderComposer", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "addShaderToProgram"
            , (void ( ::osg::ShaderComposer::* )( ::osg::Program *,::std::vector< const osg::Shader* > const & ) )(&::osg::ShaderComposer::addShaderToProgram)
            , (void ( ShaderComposer_wrapper::* )( ::osg::Program *,::std::vector< const osg::Shader* > const & ) )(&ShaderComposer_wrapper::default_addShaderToProgram)
            , ( bp::arg("program"), bp::arg("shaders") ) )    
        .def( 
            "className"
            , (char const * ( ::osg::ShaderComposer::* )(  ) const)(&::osg::ShaderComposer::className)
            , (char const * ( ShaderComposer_wrapper::* )(  ) const)(&ShaderComposer_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osg::ShaderComposer::* )( ::osg::CopyOp const & ) const)(&::osg::ShaderComposer::clone)
            , (::osg::Object * ( ShaderComposer_wrapper::* )( ::osg::CopyOp const & ) const)(&ShaderComposer_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osg::ShaderComposer::* )(  ) const)(&::osg::ShaderComposer::cloneType)
            , (::osg::Object * ( ShaderComposer_wrapper::* )(  ) const)(&ShaderComposer_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "composeMain"
            , (::osg::Shader * ( ::osg::ShaderComposer::* )( ::std::vector< const osg::Shader* > const & ) )(&::osg::ShaderComposer::composeMain)
            , (::osg::Shader * ( ShaderComposer_wrapper::* )( ::std::vector< const osg::Shader* > const & ) )(&ShaderComposer_wrapper::default_composeMain)
            , ( bp::arg("shaders") )
            , bp::return_internal_reference< >() )    
        .def( 
            "getOrCreateProgram"
            , (::osg::Program * ( ::osg::ShaderComposer::* )( ::osg::ShaderComponents const & ) )(&::osg::ShaderComposer::getOrCreateProgram)
            , (::osg::Program * ( ShaderComposer_wrapper::* )( ::osg::ShaderComponents const & ) )(&ShaderComposer_wrapper::default_getOrCreateProgram)
            , ( bp::arg("shaderComponents") )
            , bp::return_internal_reference< >() )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osg::ShaderComposer::* )( ::osg::Object const * ) const)(&::osg::ShaderComposer::isSameKindAs)
            , (bool ( ShaderComposer_wrapper::* )( ::osg::Object const * ) const)(&ShaderComposer_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osg::ShaderComposer::* )(  ) const)(&::osg::ShaderComposer::libraryName)
            , (char const * ( ShaderComposer_wrapper::* )(  ) const)(&ShaderComposer_wrapper::default_libraryName) );

}
