// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osg.h"
#include "wrap_referenced.h"
#include "ObserverSet.pypp.hpp"

namespace bp = boost::python;

void register_ObserverSet_class(){

    { //::osg::ObserverSet
        typedef bp::class_< osg::ObserverSet, bp::bases< osg::Referenced >, osg::ref_ptr< ::osg::ObserverSet >, boost::noncopyable > ObserverSet_exposer_t;
        ObserverSet_exposer_t ObserverSet_exposer = ObserverSet_exposer_t( "ObserverSet", "\n Class used by osg::Referenced to track the observers associated with it.\n", bp::no_init );
        bp::scope ObserverSet_scope( ObserverSet_exposer );
        ObserverSet_exposer.def( bp::init< osg::Referenced const * >(( bp::arg("observedObject") ), "\n Class used by osg::Referenced to track the observers associated with it.\n") );
        bp::implicitly_convertible< osg::Referenced const *, osg::ObserverSet >();
        { //::osg::ObserverSet::addObserver
        
            typedef void ( ::osg::ObserverSet::*addObserver_function_type )( ::osg::Observer * ) ;
            
            ObserverSet_exposer.def( 
                "addObserver"
                , addObserver_function_type( &::osg::ObserverSet::addObserver )
                , ( bp::arg("observer") ) );
        
        }
        { //::osg::ObserverSet::addRefLock
        
            typedef ::osg::Referenced * ( ::osg::ObserverSet::*addRefLock_function_type )(  ) ;
            
            ObserverSet_exposer.def( 
                "addRefLock"
                , addRefLock_function_type( &::osg::ObserverSet::addRefLock )
                , bp::return_value_policy< bp::reference_existing_object >()
                , "\n Lock a Referenced object i.e., protect it from being deleted\n  by incrementing its reference count.\n\n returns null if object doesnt exist anymore.\n" );
        
        }
        { //::osg::ObserverSet::getObserverSetMutex
        
            typedef ::OpenThreads::Mutex * ( ::osg::ObserverSet::*getObserverSetMutex_function_type )(  ) const;
            
            ObserverSet_exposer.def( 
                "getObserverSetMutex"
                , getObserverSetMutex_function_type( &::osg::ObserverSet::getObserverSetMutex )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::ObserverSet::getObserverdObject
        
            typedef ::osg::Referenced * ( ::osg::ObserverSet::*getObserverdObject_function_type )(  ) ;
            
            ObserverSet_exposer.def( 
                "getObserverdObject"
                , getObserverdObject_function_type( &::osg::ObserverSet::getObserverdObject )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::ObserverSet::getObserverdObject
        
            typedef ::osg::Referenced const * ( ::osg::ObserverSet::*getObserverdObject_function_type )(  ) const;
            
            ObserverSet_exposer.def( 
                "getObserverdObject"
                , getObserverdObject_function_type( &::osg::ObserverSet::getObserverdObject )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osg::ObserverSet::getObservers
        
            typedef ::std::set< osg::Observer* > & ( ::osg::ObserverSet::*getObservers_function_type )(  ) ;
            
            ObserverSet_exposer.def( 
                "getObservers"
                , getObservers_function_type( &::osg::ObserverSet::getObservers )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::ObserverSet::getObservers
        
            typedef ::std::set< osg::Observer* > const & ( ::osg::ObserverSet::*getObservers_function_type )(  ) const;
            
            ObserverSet_exposer.def( 
                "getObservers"
                , getObservers_function_type( &::osg::ObserverSet::getObservers )
                , bp::return_internal_reference< >() );
        
        }
        { //::osg::ObserverSet::removeObserver
        
            typedef void ( ::osg::ObserverSet::*removeObserver_function_type )( ::osg::Observer * ) ;
            
            ObserverSet_exposer.def( 
                "removeObserver"
                , removeObserver_function_type( &::osg::ObserverSet::removeObserver )
                , ( bp::arg("observer") ) );
        
        }
        { //::osg::ObserverSet::signalObjectDeleted
        
            typedef void ( ::osg::ObserverSet::*signalObjectDeleted_function_type )( void * ) ;
            
            ObserverSet_exposer.def( 
                "signalObjectDeleted"
                , signalObjectDeleted_function_type( &::osg::ObserverSet::signalObjectDeleted )
                , ( bp::arg("ptr") ) );
        
        }
    }

}
