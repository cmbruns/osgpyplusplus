// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgAnimation.h"
#include "wrap_referenced.h"
#include "Timeline.pypp.hpp"

namespace bp = boost::python;

struct Timeline_wrapper : osgAnimation::Timeline, bp::wrapper< osgAnimation::Timeline > {

    Timeline_wrapper( )
    : osgAnimation::Timeline( )
      , bp::wrapper< osgAnimation::Timeline >(){
        // null constructor
    
    }

    virtual void accept( ::osgAnimation::ActionVisitor & nv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(nv) );
        else{
            this->osgAnimation::Timeline::accept( boost::ref(nv) );
        }
    }
    
    void default_accept( ::osgAnimation::ActionVisitor & nv ) {
        osgAnimation::Timeline::accept( boost::ref(nv) );
    }

    virtual void addActionAt( unsigned int frame, ::osgAnimation::Action * action, int priority=0 ) {
        if( bp::override func_addActionAt = this->get_override( "addActionAt" ) )
            func_addActionAt( frame, boost::python::ptr(action), priority );
        else{
            this->osgAnimation::Timeline::addActionAt( frame, boost::python::ptr(action), priority );
        }
    }
    
    void default_addActionAt( unsigned int frame, ::osgAnimation::Action * action, int priority=0 ) {
        osgAnimation::Timeline::addActionAt( frame, boost::python::ptr(action), priority );
    }

    virtual void addActionAt( double t, ::osgAnimation::Action * action, int priority=0 ) {
        if( bp::override func_addActionAt = this->get_override( "addActionAt" ) )
            func_addActionAt( t, boost::python::ptr(action), priority );
        else{
            this->osgAnimation::Timeline::addActionAt( t, boost::python::ptr(action), priority );
        }
    }
    
    void default_addActionAt( double t, ::osgAnimation::Action * action, int priority=0 ) {
        osgAnimation::Timeline::addActionAt( t, boost::python::ptr(action), priority );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgAnimation::Timeline::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgAnimation::Timeline::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgAnimation::Timeline::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgAnimation::Timeline::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgAnimation::Timeline::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgAnimation::Timeline::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgAnimation::Timeline::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgAnimation::Timeline::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgAnimation::Timeline::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgAnimation::Timeline::libraryName( );
    }

    virtual void traverse( ::osgAnimation::ActionVisitor & visitor ) {
        if( bp::override func_traverse = this->get_override( "traverse" ) )
            func_traverse( boost::ref(visitor) );
        else{
            this->osgAnimation::Timeline::traverse( boost::ref(visitor) );
        }
    }
    
    void default_traverse( ::osgAnimation::ActionVisitor & visitor ) {
        osgAnimation::Timeline::traverse( boost::ref(visitor) );
    }

    virtual void update( double simulationTime ) {
        if( bp::override func_update = this->get_override( "update" ) )
            func_update( simulationTime );
        else{
            this->osgAnimation::Timeline::update( simulationTime );
        }
    }
    
    void default_update( double simulationTime ) {
        osgAnimation::Timeline::update( simulationTime );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual unsigned int getLoop(  ) const  {
        if( bp::override func_getLoop = this->get_override( "getLoop" ) )
            return func_getLoop(  );
        else{
            return this->osgAnimation::Action::getLoop(  );
        }
    }
    
    unsigned int default_getLoop(  ) const  {
        return osgAnimation::Action::getLoop( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setLoop( unsigned int nb ) {
        if( bp::override func_setLoop = this->get_override( "setLoop" ) )
            func_setLoop( nb );
        else{
            this->osgAnimation::Action::setLoop( nb );
        }
    }
    
    void default_setLoop( unsigned int nb ) {
        osgAnimation::Action::setLoop( nb );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_Timeline_class(){

    { //::osgAnimation::Timeline
        typedef bp::class_< Timeline_wrapper, bp::bases< osgAnimation::Action >, osg::ref_ptr< Timeline_wrapper >, boost::noncopyable > Timeline_exposer_t;
        Timeline_exposer_t Timeline_exposer = Timeline_exposer_t( "Timeline", bp::init< >() );
        bp::scope Timeline_scope( Timeline_exposer );
        bp::enum_< osgAnimation::Timeline::TimelineStatus>("TimelineStatus")
            .value("Play", osgAnimation::Timeline::Play)
            .value("Stop", osgAnimation::Timeline::Stop)
            .export_values()
            ;
        { //::osgAnimation::Timeline::accept
        
            typedef void ( ::osgAnimation::Timeline::*accept_function_type )( ::osgAnimation::ActionVisitor & ) ;
            typedef void ( Timeline_wrapper::*default_accept_function_type )( ::osgAnimation::ActionVisitor & ) ;
            
            Timeline_exposer.def( 
                "accept"
                , accept_function_type(&::osgAnimation::Timeline::accept)
                , default_accept_function_type(&Timeline_wrapper::default_accept)
                , ( bp::arg("nv") ) );
        
        }
        { //::osgAnimation::Timeline::addActionAt
        
            typedef void ( ::osgAnimation::Timeline::*addActionAt_function_type )( unsigned int,::osgAnimation::Action *,int ) ;
            typedef void ( Timeline_wrapper::*default_addActionAt_function_type )( unsigned int,::osgAnimation::Action *,int ) ;
            
            Timeline_exposer.def( 
                "addActionAt"
                , addActionAt_function_type(&::osgAnimation::Timeline::addActionAt)
                , default_addActionAt_function_type(&Timeline_wrapper::default_addActionAt)
                , ( bp::arg("frame"), bp::arg("action"), bp::arg("priority")=(int)(0) ) );
        
        }
        { //::osgAnimation::Timeline::addActionAt
        
            typedef void ( ::osgAnimation::Timeline::*addActionAt_function_type )( double,::osgAnimation::Action *,int ) ;
            typedef void ( Timeline_wrapper::*default_addActionAt_function_type )( double,::osgAnimation::Action *,int ) ;
            
            Timeline_exposer.def( 
                "addActionAt"
                , addActionAt_function_type(&::osgAnimation::Timeline::addActionAt)
                , default_addActionAt_function_type(&Timeline_wrapper::default_addActionAt)
                , ( bp::arg("t"), bp::arg("action"), bp::arg("priority")=(int)(0) ) );
        
        }
        { //::osgAnimation::Timeline::addActionNow
        
            typedef void ( ::osgAnimation::Timeline::*addActionNow_function_type )( ::osgAnimation::Action *,int ) ;
            
            Timeline_exposer.def( 
                "addActionNow"
                , addActionNow_function_type( &::osgAnimation::Timeline::addActionNow )
                , ( bp::arg("action"), bp::arg("priority")=(int)(0) ) );
        
        }
        { //::osgAnimation::Timeline::className
        
            typedef char const * ( ::osgAnimation::Timeline::*className_function_type )(  ) const;
            typedef char const * ( Timeline_wrapper::*default_className_function_type )(  ) const;
            
            Timeline_exposer.def( 
                "className"
                , className_function_type(&::osgAnimation::Timeline::className)
                , default_className_function_type(&Timeline_wrapper::default_className) );
        
        }
        { //::osgAnimation::Timeline::clearActions
        
            typedef void ( ::osgAnimation::Timeline::*clearActions_function_type )(  ) ;
            
            Timeline_exposer.def( 
                "clearActions"
                , clearActions_function_type( &::osgAnimation::Timeline::clearActions ) );
        
        }
        { //::osgAnimation::Timeline::clone
        
            typedef ::osg::Object * ( ::osgAnimation::Timeline::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Timeline_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Timeline_exposer.def( 
                "clone"
                , clone_function_type(&::osgAnimation::Timeline::clone)
                , default_clone_function_type(&Timeline_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgAnimation::Timeline::cloneType
        
            typedef ::osg::Object * ( ::osgAnimation::Timeline::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Timeline_wrapper::*default_cloneType_function_type )(  ) const;
            
            Timeline_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgAnimation::Timeline::cloneType)
                , default_cloneType_function_type(&Timeline_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgAnimation::Timeline::collectStats
        
            typedef void ( ::osgAnimation::Timeline::*collectStats_function_type )( bool ) ;
            
            Timeline_exposer.def( 
                "collectStats"
                , collectStats_function_type( &::osgAnimation::Timeline::collectStats )
                , ( bp::arg("state") ) );
        
        }
        { //::osgAnimation::Timeline::getActionLayer
        
            typedef ::std::vector< std::pair<unsigned int, osg::ref_ptr<osgAnimation::Action> > > const & ( ::osgAnimation::Timeline::*getActionLayer_function_type )( int ) ;
            
            Timeline_exposer.def( 
                "getActionLayer"
                , getActionLayer_function_type( &::osgAnimation::Timeline::getActionLayer )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgAnimation::Timeline::getActionLayers
        
            typedef ::std::map< int, std::vector< std::pair<unsigned int, osg::ref_ptr<osgAnimation::Action> > > > const & ( ::osgAnimation::Timeline::*getActionLayers_function_type )(  ) const;
            
            Timeline_exposer.def( 
                "getActionLayers"
                , getActionLayers_function_type( &::osgAnimation::Timeline::getActionLayers )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgAnimation::Timeline::getCurrentFrame
        
            typedef unsigned int ( ::osgAnimation::Timeline::*getCurrentFrame_function_type )(  ) const;
            
            Timeline_exposer.def( 
                "getCurrentFrame"
                , getCurrentFrame_function_type( &::osgAnimation::Timeline::getCurrentFrame ) );
        
        }
        { //::osgAnimation::Timeline::getCurrentTime
        
            typedef double ( ::osgAnimation::Timeline::*getCurrentTime_function_type )(  ) const;
            
            Timeline_exposer.def( 
                "getCurrentTime"
                , getCurrentTime_function_type( &::osgAnimation::Timeline::getCurrentTime ) );
        
        }
        { //::osgAnimation::Timeline::getEvaluating
        
            typedef bool ( ::osgAnimation::Timeline::*getEvaluating_function_type )(  ) const;
            
            Timeline_exposer.def( 
                "getEvaluating"
                , getEvaluating_function_type( &::osgAnimation::Timeline::getEvaluating ) );
        
        }
        { //::osgAnimation::Timeline::getStats
        
            typedef ::osg::Stats * ( ::osgAnimation::Timeline::*getStats_function_type )(  ) ;
            
            Timeline_exposer.def( 
                "getStats"
                , getStats_function_type( &::osgAnimation::Timeline::getStats )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgAnimation::Timeline::getStatsVisitor
        
            typedef ::osgAnimation::StatsActionVisitor * ( ::osgAnimation::Timeline::*getStatsVisitor_function_type )(  ) ;
            
            Timeline_exposer.def( 
                "getStatsVisitor"
                , getStatsVisitor_function_type( &::osgAnimation::Timeline::getStatsVisitor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgAnimation::Timeline::getStatus
        
            typedef ::osgAnimation::Timeline::TimelineStatus ( ::osgAnimation::Timeline::*getStatus_function_type )(  ) const;
            
            Timeline_exposer.def( 
                "getStatus"
                , getStatus_function_type( &::osgAnimation::Timeline::getStatus ) );
        
        }
        { //::osgAnimation::Timeline::gotoFrame
        
            typedef void ( ::osgAnimation::Timeline::*gotoFrame_function_type )( unsigned int ) ;
            
            Timeline_exposer.def( 
                "gotoFrame"
                , gotoFrame_function_type( &::osgAnimation::Timeline::gotoFrame )
                , ( bp::arg("frame") ) );
        
        }
        { //::osgAnimation::Timeline::isActive
        
            typedef bool ( ::osgAnimation::Timeline::*isActive_function_type )( ::osgAnimation::Action * ) ;
            
            Timeline_exposer.def( 
                "isActive"
                , isActive_function_type( &::osgAnimation::Timeline::isActive )
                , ( bp::arg("activeAction") ) );
        
        }
        { //::osgAnimation::Timeline::isSameKindAs
        
            typedef bool ( ::osgAnimation::Timeline::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Timeline_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Timeline_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgAnimation::Timeline::isSameKindAs)
                , default_isSameKindAs_function_type(&Timeline_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgAnimation::Timeline::libraryName
        
            typedef char const * ( ::osgAnimation::Timeline::*libraryName_function_type )(  ) const;
            typedef char const * ( Timeline_wrapper::*default_libraryName_function_type )(  ) const;
            
            Timeline_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgAnimation::Timeline::libraryName)
                , default_libraryName_function_type(&Timeline_wrapper::default_libraryName) );
        
        }
        { //::osgAnimation::Timeline::play
        
            typedef void ( ::osgAnimation::Timeline::*play_function_type )(  ) ;
            
            Timeline_exposer.def( 
                "play"
                , play_function_type( &::osgAnimation::Timeline::play ) );
        
        }
        { //::osgAnimation::Timeline::processPendingOperation
        
            typedef void ( ::osgAnimation::Timeline::*processPendingOperation_function_type )(  ) ;
            
            Timeline_exposer.def( 
                "processPendingOperation"
                , processPendingOperation_function_type( &::osgAnimation::Timeline::processPendingOperation ) );
        
        }
        { //::osgAnimation::Timeline::removeAction
        
            typedef void ( ::osgAnimation::Timeline::*removeAction_function_type )( ::osgAnimation::Action * ) ;
            
            Timeline_exposer.def( 
                "removeAction"
                , removeAction_function_type( &::osgAnimation::Timeline::removeAction )
                , ( bp::arg("action") ) );
        
        }
        { //::osgAnimation::Timeline::setAnimationManager
        
            typedef void ( ::osgAnimation::Timeline::*setAnimationManager_function_type )( ::osgAnimation::AnimationManagerBase * ) ;
            
            Timeline_exposer.def( 
                "setAnimationManager"
                , setAnimationManager_function_type( &::osgAnimation::Timeline::setAnimationManager )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgAnimation::Timeline::setEvaluating
        
            typedef void ( ::osgAnimation::Timeline::*setEvaluating_function_type )( bool ) ;
            
            Timeline_exposer.def( 
                "setEvaluating"
                , setEvaluating_function_type( &::osgAnimation::Timeline::setEvaluating )
                , ( bp::arg("state") ) );
        
        }
        { //::osgAnimation::Timeline::setLastFrameEvaluated
        
            typedef void ( ::osgAnimation::Timeline::*setLastFrameEvaluated_function_type )( unsigned int ) ;
            
            Timeline_exposer.def( 
                "setLastFrameEvaluated"
                , setLastFrameEvaluated_function_type( &::osgAnimation::Timeline::setLastFrameEvaluated )
                , ( bp::arg("frame") ) );
        
        }
        { //::osgAnimation::Timeline::setStats
        
            typedef void ( ::osgAnimation::Timeline::*setStats_function_type )( ::osg::Stats * ) ;
            
            Timeline_exposer.def( 
                "setStats"
                , setStats_function_type( &::osgAnimation::Timeline::setStats )
                , ( bp::arg("stats") ) );
        
        }
        { //::osgAnimation::Timeline::stop
        
            typedef void ( ::osgAnimation::Timeline::*stop_function_type )(  ) ;
            
            Timeline_exposer.def( 
                "stop"
                , stop_function_type( &::osgAnimation::Timeline::stop ) );
        
        }
        { //::osgAnimation::Timeline::traverse
        
            typedef void ( ::osgAnimation::Timeline::*traverse_function_type )( ::osgAnimation::ActionVisitor & ) ;
            typedef void ( Timeline_wrapper::*default_traverse_function_type )( ::osgAnimation::ActionVisitor & ) ;
            
            Timeline_exposer.def( 
                "traverse"
                , traverse_function_type(&::osgAnimation::Timeline::traverse)
                , default_traverse_function_type(&Timeline_wrapper::default_traverse)
                , ( bp::arg("visitor") ) );
        
        }
        { //::osgAnimation::Timeline::update
        
            typedef void ( ::osgAnimation::Timeline::*update_function_type )( double ) ;
            typedef void ( Timeline_wrapper::*default_update_function_type )( double ) ;
            
            Timeline_exposer.def( 
                "update"
                , update_function_type(&::osgAnimation::Timeline::update)
                , default_update_function_type(&Timeline_wrapper::default_update)
                , ( bp::arg("simulationTime") ) );
        
        }
        { //::osgAnimation::Action::getLoop
        
            typedef unsigned int ( ::osgAnimation::Action::*getLoop_function_type )(  ) const;
            typedef unsigned int ( Timeline_wrapper::*default_getLoop_function_type )(  ) const;
            
            Timeline_exposer.def( 
                "getLoop"
                , getLoop_function_type(&::osgAnimation::Action::getLoop)
                , default_getLoop_function_type(&Timeline_wrapper::default_getLoop) );
        
        }
        { //::osgAnimation::Action::setLoop
        
            typedef void ( ::osgAnimation::Action::*setLoop_function_type )( unsigned int ) ;
            typedef void ( Timeline_wrapper::*default_setLoop_function_type )( unsigned int ) ;
            
            Timeline_exposer.def( 
                "setLoop"
                , setLoop_function_type(&::osgAnimation::Action::setLoop)
                , default_setLoop_function_type(&Timeline_wrapper::default_setLoop)
                , ( bp::arg("nb") ) );
        
        }
    }

}
