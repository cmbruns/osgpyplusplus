// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgAnimation.h"
#include "wrap_referenced.h"
#include "StackedRotateAxisElement.pypp.hpp"

namespace bp = boost::python;

struct StackedRotateAxisElement_wrapper : osgAnimation::StackedRotateAxisElement, bp::wrapper< osgAnimation::StackedRotateAxisElement > {

    StackedRotateAxisElement_wrapper( )
    : osgAnimation::StackedRotateAxisElement( )
      , bp::wrapper< osgAnimation::StackedRotateAxisElement >(){
        // null constructor
    
    }

    StackedRotateAxisElement_wrapper(::std::string const & name, ::osg::Vec3 const & axis, double angle )
    : osgAnimation::StackedRotateAxisElement( name, boost::ref(axis), angle )
      , bp::wrapper< osgAnimation::StackedRotateAxisElement >(){
        // constructor
    
    }

    StackedRotateAxisElement_wrapper(::osg::Vec3 const & axis, double angle )
    : osgAnimation::StackedRotateAxisElement( boost::ref(axis), angle )
      , bp::wrapper< osgAnimation::StackedRotateAxisElement >(){
        // constructor
    
    }

    virtual void applyToMatrix( ::osg::Matrix & matrix ) const  {
        if( bp::override func_applyToMatrix = this->get_override( "applyToMatrix" ) )
            func_applyToMatrix( boost::ref(matrix) );
        else{
            this->osgAnimation::StackedRotateAxisElement::applyToMatrix( boost::ref(matrix) );
        }
    }
    
    void default_applyToMatrix( ::osg::Matrix & matrix ) const  {
        osgAnimation::StackedRotateAxisElement::applyToMatrix( boost::ref(matrix) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgAnimation::StackedRotateAxisElement::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgAnimation::StackedRotateAxisElement::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgAnimation::StackedRotateAxisElement::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgAnimation::StackedRotateAxisElement::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgAnimation::StackedRotateAxisElement::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgAnimation::StackedRotateAxisElement::cloneType( );
    }

    virtual ::osg::Matrix getAsMatrix(  ) const  {
        if( bp::override func_getAsMatrix = this->get_override( "getAsMatrix" ) )
            return func_getAsMatrix(  );
        else{
            return this->osgAnimation::StackedRotateAxisElement::getAsMatrix(  );
        }
    }
    
    ::osg::Matrix default_getAsMatrix(  ) const  {
        return osgAnimation::StackedRotateAxisElement::getAsMatrix( );
    }

    virtual ::osgAnimation::Target * getOrCreateTarget(  ) {
        if( bp::override func_getOrCreateTarget = this->get_override( "getOrCreateTarget" ) )
            return func_getOrCreateTarget(  );
        else{
            return this->osgAnimation::StackedRotateAxisElement::getOrCreateTarget(  );
        }
    }
    
    ::osgAnimation::Target * default_getOrCreateTarget(  ) {
        return osgAnimation::StackedRotateAxisElement::getOrCreateTarget( );
    }

    virtual ::osgAnimation::Target * getTarget(  ) {
        if( bp::override func_getTarget = this->get_override( "getTarget" ) )
            return func_getTarget(  );
        else{
            return this->osgAnimation::StackedRotateAxisElement::getTarget(  );
        }
    }
    
    ::osgAnimation::Target * default_getTarget(  ) {
        return osgAnimation::StackedRotateAxisElement::getTarget( );
    }

    virtual ::osgAnimation::Target const * getTarget(  ) const  {
        if( bp::override func_getTarget = this->get_override( "getTarget" ) )
            return func_getTarget(  );
        else{
            return this->osgAnimation::StackedRotateAxisElement::getTarget(  );
        }
    }
    
    ::osgAnimation::Target const * default_getTarget(  ) const  {
        return osgAnimation::StackedRotateAxisElement::getTarget( );
    }

    virtual bool isIdentity(  ) const  {
        if( bp::override func_isIdentity = this->get_override( "isIdentity" ) )
            return func_isIdentity(  );
        else{
            return this->osgAnimation::StackedRotateAxisElement::isIdentity(  );
        }
    }
    
    bool default_isIdentity(  ) const  {
        return osgAnimation::StackedRotateAxisElement::isIdentity( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgAnimation::StackedRotateAxisElement::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgAnimation::StackedRotateAxisElement::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgAnimation::StackedRotateAxisElement::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgAnimation::StackedRotateAxisElement::libraryName( );
    }

    virtual void update( float t=0.0 ) {
        if( bp::override func_update = this->get_override( "update" ) )
            func_update( t );
        else{
            this->osgAnimation::StackedRotateAxisElement::update( t );
        }
    }
    
    void default_update( float t=0.0 ) {
        osgAnimation::StackedRotateAxisElement::update( t );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_StackedRotateAxisElement_class(){

    bp::class_< StackedRotateAxisElement_wrapper, bp::bases< osgAnimation::StackedTransformElement >, osg::ref_ptr< StackedRotateAxisElement_wrapper >, boost::noncopyable >( "StackedRotateAxisElement", bp::init< >() )    
        .def( bp::init< std::string const &, osg::Vec3 const &, double >(( bp::arg("name"), bp::arg("axis"), bp::arg("angle") )) )    
        .def( bp::init< osg::Vec3 const &, double >(( bp::arg("axis"), bp::arg("angle") )) )    
        .def( 
            "applyToMatrix"
            , (void ( ::osgAnimation::StackedRotateAxisElement::* )( ::osg::Matrix & ) const)(&::osgAnimation::StackedRotateAxisElement::applyToMatrix)
            , (void ( StackedRotateAxisElement_wrapper::* )( ::osg::Matrix & ) const)(&StackedRotateAxisElement_wrapper::default_applyToMatrix)
            , ( bp::arg("matrix") ) )    
        .def( 
            "className"
            , (char const * ( ::osgAnimation::StackedRotateAxisElement::* )(  ) const)(&::osgAnimation::StackedRotateAxisElement::className)
            , (char const * ( StackedRotateAxisElement_wrapper::* )(  ) const)(&StackedRotateAxisElement_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osgAnimation::StackedRotateAxisElement::* )( ::osg::CopyOp const & ) const)(&::osgAnimation::StackedRotateAxisElement::clone)
            , (::osg::Object * ( StackedRotateAxisElement_wrapper::* )( ::osg::CopyOp const & ) const)(&StackedRotateAxisElement_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osgAnimation::StackedRotateAxisElement::* )(  ) const)(&::osgAnimation::StackedRotateAxisElement::cloneType)
            , (::osg::Object * ( StackedRotateAxisElement_wrapper::* )(  ) const)(&StackedRotateAxisElement_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getAngle"
            , (double ( ::osgAnimation::StackedRotateAxisElement::* )(  ) const)( &::osgAnimation::StackedRotateAxisElement::getAngle ) )    
        .def( 
            "getAsMatrix"
            , (::osg::Matrix ( ::osgAnimation::StackedRotateAxisElement::* )(  ) const)(&::osgAnimation::StackedRotateAxisElement::getAsMatrix)
            , (::osg::Matrix ( StackedRotateAxisElement_wrapper::* )(  ) const)(&StackedRotateAxisElement_wrapper::default_getAsMatrix) )    
        .def( 
            "getAxis"
            , (::osg::Vec3 const & ( ::osgAnimation::StackedRotateAxisElement::* )(  ) const)( &::osgAnimation::StackedRotateAxisElement::getAxis )
            , bp::return_internal_reference< >() )    
        .def( 
            "getOrCreateTarget"
            , (::osgAnimation::Target * ( ::osgAnimation::StackedRotateAxisElement::* )(  ) )(&::osgAnimation::StackedRotateAxisElement::getOrCreateTarget)
            , (::osgAnimation::Target * ( StackedRotateAxisElement_wrapper::* )(  ) )(&StackedRotateAxisElement_wrapper::default_getOrCreateTarget)
            , bp::return_internal_reference< >() )    
        .def( 
            "getTarget"
            , (::osgAnimation::Target * ( ::osgAnimation::StackedRotateAxisElement::* )(  ) )(&::osgAnimation::StackedRotateAxisElement::getTarget)
            , (::osgAnimation::Target * ( StackedRotateAxisElement_wrapper::* )(  ) )(&StackedRotateAxisElement_wrapper::default_getTarget)
            , bp::return_internal_reference< >() )    
        .def( 
            "getTarget"
            , (::osgAnimation::Target const * ( ::osgAnimation::StackedRotateAxisElement::* )(  ) const)(&::osgAnimation::StackedRotateAxisElement::getTarget)
            , (::osgAnimation::Target const * ( StackedRotateAxisElement_wrapper::* )(  ) const)(&StackedRotateAxisElement_wrapper::default_getTarget)
            , bp::return_internal_reference< >() )    
        .def( 
            "isIdentity"
            , (bool ( ::osgAnimation::StackedRotateAxisElement::* )(  ) const)(&::osgAnimation::StackedRotateAxisElement::isIdentity)
            , (bool ( StackedRotateAxisElement_wrapper::* )(  ) const)(&StackedRotateAxisElement_wrapper::default_isIdentity) )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osgAnimation::StackedRotateAxisElement::* )( ::osg::Object const * ) const)(&::osgAnimation::StackedRotateAxisElement::isSameKindAs)
            , (bool ( StackedRotateAxisElement_wrapper::* )( ::osg::Object const * ) const)(&StackedRotateAxisElement_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osgAnimation::StackedRotateAxisElement::* )(  ) const)(&::osgAnimation::StackedRotateAxisElement::libraryName)
            , (char const * ( StackedRotateAxisElement_wrapper::* )(  ) const)(&StackedRotateAxisElement_wrapper::default_libraryName) )    
        .def( 
            "setAngle"
            , (void ( ::osgAnimation::StackedRotateAxisElement::* )( double ) )( &::osgAnimation::StackedRotateAxisElement::setAngle )
            , ( bp::arg("arg0") ) )    
        .def( 
            "setAxis"
            , (void ( ::osgAnimation::StackedRotateAxisElement::* )( ::osg::Vec3 const & ) )( &::osgAnimation::StackedRotateAxisElement::setAxis )
            , ( bp::arg("arg0") ) )    
        .def( 
            "update"
            , (void ( ::osgAnimation::StackedRotateAxisElement::* )( float ) )(&::osgAnimation::StackedRotateAxisElement::update)
            , (void ( StackedRotateAxisElement_wrapper::* )( float ) )(&StackedRotateAxisElement_wrapper::default_update)
            , ( bp::arg("t")=0.0 ) );

}
