// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgAnimation.h"
#include "wrap_referenced.h"
#include "RigTransformHardware.pypp.hpp"

namespace bp = boost::python;

struct RigTransformHardware_wrapper : osgAnimation::RigTransformHardware, bp::wrapper< osgAnimation::RigTransformHardware > {

    RigTransformHardware_wrapper( )
    : osgAnimation::RigTransformHardware( )
      , bp::wrapper< osgAnimation::RigTransformHardware >(){
        // null constructor
    
    }

    virtual void operator()( ::osgAnimation::RigGeometry & arg0 ) {
        if( bp::override func___call__ = this->get_override( "__call__" ) )
            func___call__( boost::ref(arg0) );
        else{
            this->osgAnimation::RigTransformHardware::operator()( boost::ref(arg0) );
        }
    }
    
    void default___call__( ::osgAnimation::RigGeometry & arg0 ) {
        osgAnimation::RigTransformHardware::operator()( boost::ref(arg0) );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_RigTransformHardware_class(){

    { //::osgAnimation::RigTransformHardware
        typedef bp::class_< RigTransformHardware_wrapper, bp::bases< osgAnimation::RigTransform >, osg::ref_ptr< RigTransformHardware_wrapper >, boost::noncopyable > RigTransformHardware_exposer_t;
        RigTransformHardware_exposer_t RigTransformHardware_exposer = RigTransformHardware_exposer_t( "RigTransformHardware", "\n This class manage format for hardware skinning\n", bp::init< >() );
        bp::scope RigTransformHardware_scope( RigTransformHardware_exposer );
        bp::class_< osgAnimation::RigTransformHardware::IndexWeightEntry >( "IndexWeightEntry", bp::init< >() )    
            .def( bp::init< int, float >(( bp::arg("index"), bp::arg("weight") )) )    
            .def( 
                "getIndex"
                , (int ( ::osgAnimation::RigTransformHardware::IndexWeightEntry::* )(  ) const)( &::osgAnimation::RigTransformHardware::IndexWeightEntry::getIndex ) )    
            .def( 
                "getWeight"
                , (float ( ::osgAnimation::RigTransformHardware::IndexWeightEntry::* )(  ) const)( &::osgAnimation::RigTransformHardware::IndexWeightEntry::getWeight ) )    
            .def_readwrite( "_boneIndex", &osgAnimation::RigTransformHardware::IndexWeightEntry::_boneIndex )    
            .def_readwrite( "_boneWeight", &osgAnimation::RigTransformHardware::IndexWeightEntry::_boneWeight );
        { //::osgAnimation::RigTransformHardware::computeMatrixPaletteUniform
        
            typedef void ( ::osgAnimation::RigTransformHardware::*computeMatrixPaletteUniform_function_type )( ::osg::Matrix const &,::osg::Matrix const & ) ;
            
            RigTransformHardware_exposer.def( 
                "computeMatrixPaletteUniform"
                , computeMatrixPaletteUniform_function_type( &::osgAnimation::RigTransformHardware::computeMatrixPaletteUniform )
                , ( bp::arg("transformFromSkeletonToGeometry"), bp::arg("invTransformFromSkeletonToGeometry") ) );
        
        }
        { //::osgAnimation::RigTransformHardware::createPalette
        
            typedef bool ( ::osgAnimation::RigTransformHardware::*createPalette_function_type )( int,::osgAnimation::BoneMap,::std::map< int, std::vector< osgAnimation::VertexInfluenceSet::BoneWeight > > const & ) ;
            
            RigTransformHardware_exposer.def( 
                "createPalette"
                , createPalette_function_type( &::osgAnimation::RigTransformHardware::createPalette )
                , ( bp::arg("nbVertexes"), bp::arg("boneMap"), bp::arg("vertexIndexToBoneWeightMap") ) );
        
        }
        { //::osgAnimation::RigTransformHardware::getMatrixPaletteUniform
        
            typedef ::osg::Uniform * ( ::osgAnimation::RigTransformHardware::*getMatrixPaletteUniform_function_type )(  ) ;
            
            RigTransformHardware_exposer.def( 
                "getMatrixPaletteUniform"
                , getMatrixPaletteUniform_function_type( &::osgAnimation::RigTransformHardware::getMatrixPaletteUniform )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgAnimation::RigTransformHardware::getNumBonesPerVertex
        
            typedef int ( ::osgAnimation::RigTransformHardware::*getNumBonesPerVertex_function_type )(  ) const;
            
            RigTransformHardware_exposer.def( 
                "getNumBonesPerVertex"
                , getNumBonesPerVertex_function_type( &::osgAnimation::RigTransformHardware::getNumBonesPerVertex ) );
        
        }
        { //::osgAnimation::RigTransformHardware::getNumVertexAttrib
        
            typedef int ( ::osgAnimation::RigTransformHardware::*getNumVertexAttrib_function_type )(  ) ;
            
            RigTransformHardware_exposer.def( 
                "getNumVertexAttrib"
                , getNumVertexAttrib_function_type( &::osgAnimation::RigTransformHardware::getNumVertexAttrib ) );
        
        }
        { //::osgAnimation::RigTransformHardware::getNumVertexes
        
            typedef int ( ::osgAnimation::RigTransformHardware::*getNumVertexes_function_type )(  ) const;
            
            RigTransformHardware_exposer.def( 
                "getNumVertexes"
                , getNumVertexes_function_type( &::osgAnimation::RigTransformHardware::getNumVertexes ) );
        
        }
        { //::osgAnimation::RigTransformHardware::getVertexAttrib
        
            typedef ::osg::Vec4Array * ( ::osgAnimation::RigTransformHardware::*getVertexAttrib_function_type )( int ) ;
            
            RigTransformHardware_exposer.def( 
                "getVertexAttrib"
                , getVertexAttrib_function_type( &::osgAnimation::RigTransformHardware::getVertexAttrib )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgAnimation::RigTransformHardware::operator()
        
            typedef void ( ::osgAnimation::RigTransformHardware::*__call___function_type )( ::osgAnimation::RigGeometry & ) ;
            typedef void ( RigTransformHardware_wrapper::*default___call___function_type )( ::osgAnimation::RigGeometry & ) ;
            
            RigTransformHardware_exposer.def( 
                "__call__"
                , __call___function_type(&::osgAnimation::RigTransformHardware::operator())
                , default___call___function_type(&RigTransformHardware_wrapper::default___call__)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgAnimation::RigTransformHardware::setShader
        
            typedef void ( ::osgAnimation::RigTransformHardware::*setShader_function_type )( ::osg::Shader * ) ;
            
            RigTransformHardware_exposer.def( 
                "setShader"
                , setShader_function_type( &::osgAnimation::RigTransformHardware::setShader )
                , ( bp::arg("arg0") ) );
        
        }
    }

}
