// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgAnimation.h"
#include "wrap_referenced.h"
#include "Target.pypp.hpp"

namespace bp = boost::python;

struct Target_wrapper : osgAnimation::Target, bp::wrapper< osgAnimation::Target > {

    Target_wrapper( )
    : osgAnimation::Target( )
      , bp::wrapper< osgAnimation::Target >(){
        // null constructor
    
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_Target_class(){

    bp::class_< Target_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< Target_wrapper >, boost::noncopyable >( "Target", bp::init< >() )    
        .def( 
            "getCount"
            , (int ( ::osgAnimation::Target::* )(  ) const)( &::osgAnimation::Target::getCount ) )    
        .def( 
            "getWeight"
            , (float ( ::osgAnimation::Target::* )(  ) const)( &::osgAnimation::Target::getWeight ) )    
        .def( 
            "reset"
            , (void ( ::osgAnimation::Target::* )(  ) )( &::osgAnimation::Target::reset ) );

}
