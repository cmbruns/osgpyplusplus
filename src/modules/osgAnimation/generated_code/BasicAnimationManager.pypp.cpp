// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgAnimation.h"
#include "wrap_referenced.h"
#include "BasicAnimationManager.pypp.hpp"

namespace bp = boost::python;

struct BasicAnimationManager_wrapper : osgAnimation::BasicAnimationManager, bp::wrapper< osgAnimation::BasicAnimationManager > {

    BasicAnimationManager_wrapper( )
    : osgAnimation::BasicAnimationManager( )
      , bp::wrapper< osgAnimation::BasicAnimationManager >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgAnimation::BasicAnimationManager::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgAnimation::BasicAnimationManager::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgAnimation::BasicAnimationManager::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgAnimation::BasicAnimationManager::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgAnimation::BasicAnimationManager::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgAnimation::BasicAnimationManager::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgAnimation::BasicAnimationManager::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgAnimation::BasicAnimationManager::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgAnimation::BasicAnimationManager::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgAnimation::BasicAnimationManager::libraryName( );
    }

    virtual void update( double time ) {
        if( bp::override func_update = this->get_override( "update" ) )
            func_update( time );
        else{
            this->osgAnimation::BasicAnimationManager::update( time );
        }
    }
    
    void default_update( double time ) {
        osgAnimation::BasicAnimationManager::update( time );
    }

    virtual void buildTargetReference(  ) {
        if( bp::override func_buildTargetReference = this->get_override( "buildTargetReference" ) )
            func_buildTargetReference(  );
        else{
            this->osgAnimation::AnimationManagerBase::buildTargetReference(  );
        }
    }
    
    void default_buildTargetReference(  ) {
        osgAnimation::AnimationManagerBase::buildTargetReference( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void link( ::osg::Node * subgraph ) {
        if( bp::override func_link = this->get_override( "link" ) )
            func_link( boost::python::ptr(subgraph) );
        else{
            this->osgAnimation::AnimationManagerBase::link( boost::python::ptr(subgraph) );
        }
    }
    
    void default_link( ::osg::Node * subgraph ) {
        osgAnimation::AnimationManagerBase::link( boost::python::ptr(subgraph) );
    }

    virtual bool needToLink(  ) const  {
        if( bp::override func_needToLink = this->get_override( "needToLink" ) )
            return func_needToLink(  );
        else{
            return this->osgAnimation::AnimationManagerBase::needToLink(  );
        }
    }
    
    bool default_needToLink(  ) const  {
        return osgAnimation::AnimationManagerBase::needToLink( );
    }

    virtual void registerAnimation( ::osgAnimation::Animation * arg0 ) {
        if( bp::override func_registerAnimation = this->get_override( "registerAnimation" ) )
            func_registerAnimation( boost::python::ptr(arg0) );
        else{
            this->osgAnimation::AnimationManagerBase::registerAnimation( boost::python::ptr(arg0) );
        }
    }
    
    void default_registerAnimation( ::osgAnimation::Animation * arg0 ) {
        osgAnimation::AnimationManagerBase::registerAnimation( boost::python::ptr(arg0) );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual void unregisterAnimation( ::osgAnimation::Animation * arg0 ) {
        if( bp::override func_unregisterAnimation = this->get_override( "unregisterAnimation" ) )
            func_unregisterAnimation( boost::python::ptr(arg0) );
        else{
            this->osgAnimation::AnimationManagerBase::unregisterAnimation( boost::python::ptr(arg0) );
        }
    }
    
    void default_unregisterAnimation( ::osgAnimation::Animation * arg0 ) {
        osgAnimation::AnimationManagerBase::unregisterAnimation( boost::python::ptr(arg0) );
    }

};

void register_BasicAnimationManager_class(){

    bp::class_< BasicAnimationManager_wrapper, bp::bases< osgAnimation::AnimationManagerBase >, osg::ref_ptr< BasicAnimationManager_wrapper >, boost::noncopyable >( "BasicAnimationManager", bp::init< >() )    
        .def( 
            "className"
            , (char const * ( ::osgAnimation::BasicAnimationManager::* )(  ) const)(&::osgAnimation::BasicAnimationManager::className)
            , (char const * ( BasicAnimationManager_wrapper::* )(  ) const)(&BasicAnimationManager_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osgAnimation::BasicAnimationManager::* )( ::osg::CopyOp const & ) const)(&::osgAnimation::BasicAnimationManager::clone)
            , (::osg::Object * ( BasicAnimationManager_wrapper::* )( ::osg::CopyOp const & ) const)(&BasicAnimationManager_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osgAnimation::BasicAnimationManager::* )(  ) const)(&::osgAnimation::BasicAnimationManager::cloneType)
            , (::osg::Object * ( BasicAnimationManager_wrapper::* )(  ) const)(&BasicAnimationManager_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "findAnimation"
            , (bool ( ::osgAnimation::BasicAnimationManager::* )( ::osgAnimation::Animation * ) )( &::osgAnimation::BasicAnimationManager::findAnimation )
            , ( bp::arg("pAnimation") ) )    
        .def( 
            "isPlaying"
            , (bool ( ::osgAnimation::BasicAnimationManager::* )( ::osgAnimation::Animation * ) )( &::osgAnimation::BasicAnimationManager::isPlaying )
            , ( bp::arg("pAnimation") ) )    
        .def( 
            "isPlaying"
            , (bool ( ::osgAnimation::BasicAnimationManager::* )( ::std::string const & ) )( &::osgAnimation::BasicAnimationManager::isPlaying )
            , ( bp::arg("animationName") ) )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osgAnimation::BasicAnimationManager::* )( ::osg::Object const * ) const)(&::osgAnimation::BasicAnimationManager::isSameKindAs)
            , (bool ( BasicAnimationManager_wrapper::* )( ::osg::Object const * ) const)(&BasicAnimationManager_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osgAnimation::BasicAnimationManager::* )(  ) const)(&::osgAnimation::BasicAnimationManager::libraryName)
            , (char const * ( BasicAnimationManager_wrapper::* )(  ) const)(&BasicAnimationManager_wrapper::default_libraryName) )    
        .def( 
            "playAnimation"
            , (void ( ::osgAnimation::BasicAnimationManager::* )( ::osgAnimation::Animation *,int,float ) )( &::osgAnimation::BasicAnimationManager::playAnimation )
            , ( bp::arg("pAnimation"), bp::arg("priority")=(int)(0), bp::arg("weight")=1.0e+0 ) )    
        .def( 
            "stopAll"
            , (void ( ::osgAnimation::BasicAnimationManager::* )(  ) )( &::osgAnimation::BasicAnimationManager::stopAll ) )    
        .def( 
            "stopAnimation"
            , (bool ( ::osgAnimation::BasicAnimationManager::* )( ::osgAnimation::Animation * ) )( &::osgAnimation::BasicAnimationManager::stopAnimation )
            , ( bp::arg("pAnimation") ) )    
        .def( 
            "update"
            , (void ( ::osgAnimation::BasicAnimationManager::* )( double ) )(&::osgAnimation::BasicAnimationManager::update)
            , (void ( BasicAnimationManager_wrapper::* )( double ) )(&BasicAnimationManager_wrapper::default_update)
            , ( bp::arg("time") ) )    
        .def( 
            "buildTargetReference"
            , (void ( ::osgAnimation::AnimationManagerBase::* )(  ) )(&::osgAnimation::AnimationManagerBase::buildTargetReference)
            , (void ( BasicAnimationManager_wrapper::* )(  ) )(&BasicAnimationManager_wrapper::default_buildTargetReference) )    
        .def( 
            "link"
            , (void ( ::osgAnimation::AnimationManagerBase::* )( ::osg::Node * ) )(&::osgAnimation::AnimationManagerBase::link)
            , (void ( BasicAnimationManager_wrapper::* )( ::osg::Node * ) )(&BasicAnimationManager_wrapper::default_link)
            , ( bp::arg("subgraph") ) )    
        .def( 
            "needToLink"
            , (bool ( ::osgAnimation::AnimationManagerBase::* )(  ) const)(&::osgAnimation::AnimationManagerBase::needToLink)
            , (bool ( BasicAnimationManager_wrapper::* )(  ) const)(&BasicAnimationManager_wrapper::default_needToLink) )    
        .def( 
            "registerAnimation"
            , (void ( ::osgAnimation::AnimationManagerBase::* )( ::osgAnimation::Animation * ) )(&::osgAnimation::AnimationManagerBase::registerAnimation)
            , (void ( BasicAnimationManager_wrapper::* )( ::osgAnimation::Animation * ) )(&BasicAnimationManager_wrapper::default_registerAnimation)
            , ( bp::arg("arg0") ) )    
        .def( 
            "unregisterAnimation"
            , (void ( ::osgAnimation::AnimationManagerBase::* )( ::osgAnimation::Animation * ) )(&::osgAnimation::AnimationManagerBase::unregisterAnimation)
            , (void ( BasicAnimationManager_wrapper::* )( ::osgAnimation::Animation * ) )(&BasicAnimationManager_wrapper::default_unregisterAnimation)
            , ( bp::arg("arg0") ) );

}
