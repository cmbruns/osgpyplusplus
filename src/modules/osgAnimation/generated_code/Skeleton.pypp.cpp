// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgAnimation.h"
#include "wrap_referenced.h"
#include "Skeleton.pypp.hpp"

namespace bp = boost::python;

struct Skeleton_wrapper : osgAnimation::Skeleton, bp::wrapper< osgAnimation::Skeleton > {

    struct UpdateSkeleton_wrapper : osgAnimation::Skeleton::UpdateSkeleton, bp::wrapper< osgAnimation::Skeleton::UpdateSkeleton > {
    
        UpdateSkeleton_wrapper( )
        : osgAnimation::Skeleton::UpdateSkeleton( )
          , bp::wrapper< osgAnimation::Skeleton::UpdateSkeleton >(){
            // null constructor
        
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osgAnimation::Skeleton::UpdateSkeleton::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osgAnimation::Skeleton::UpdateSkeleton::className( );
        }
    
        virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
            if( bp::override func_clone = this->get_override( "clone" ) )
                return func_clone( boost::ref(copyop) );
            else{
                return this->osgAnimation::Skeleton::UpdateSkeleton::clone( boost::ref(copyop) );
            }
        }
        
        ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
            return osgAnimation::Skeleton::UpdateSkeleton::clone( boost::ref(copyop) );
        }
    
        virtual ::osg::Object * cloneType(  ) const  {
            if( bp::override func_cloneType = this->get_override( "cloneType" ) )
                return func_cloneType(  );
            else{
                return this->osgAnimation::Skeleton::UpdateSkeleton::cloneType(  );
            }
        }
        
        ::osg::Object * default_cloneType(  ) const  {
            return osgAnimation::Skeleton::UpdateSkeleton::cloneType( );
        }
    
        virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
            if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
                return func_isSameKindAs( boost::python::ptr(obj) );
            else{
                return this->osgAnimation::Skeleton::UpdateSkeleton::isSameKindAs( boost::python::ptr(obj) );
            }
        }
        
        bool default_isSameKindAs( ::osg::Object const * obj ) const  {
            return osgAnimation::Skeleton::UpdateSkeleton::isSameKindAs( boost::python::ptr(obj) );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osgAnimation::Skeleton::UpdateSkeleton::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osgAnimation::Skeleton::UpdateSkeleton::libraryName( );
        }
    
        virtual void operator()( ::osg::Node * node, ::osg::NodeVisitor * nv ) {
            if( bp::override func___call__ = this->get_override( "__call__" ) )
                func___call__( boost::python::ptr(node), boost::python::ptr(nv) );
            else{
                this->osgAnimation::Skeleton::UpdateSkeleton::operator()( boost::python::ptr(node), boost::python::ptr(nv) );
            }
        }
        
        void default___call__( ::osg::Node * node, ::osg::NodeVisitor * nv ) {
            osgAnimation::Skeleton::UpdateSkeleton::operator()( boost::python::ptr(node), boost::python::ptr(nv) );
        }
    
        virtual void computeDataVariance(  ) {
            if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
                func_computeDataVariance(  );
            else{
                this->osg::Object::computeDataVariance(  );
            }
        }
        
        void default_computeDataVariance(  ) {
            osg::Object::computeDataVariance( );
        }
    
        virtual ::osg::Referenced * getUserData(  ) {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced * default_getUserData(  ) {
            return osg::Object::getUserData( );
        }
    
        virtual ::osg::Referenced const * getUserData(  ) const  {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced const * default_getUserData(  ) const  {
            return osg::Object::getUserData( );
        }
    
        virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
            if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
                func_resizeGLObjectBuffers( arg0 );
            else{
                this->osg::Object::resizeGLObjectBuffers( arg0 );
            }
        }
        
        void default_resizeGLObjectBuffers( unsigned int arg0 ) {
            osg::Object::resizeGLObjectBuffers( arg0 );
        }
    
        virtual void setName( ::std::string const & name ) {
            if( bp::override func_setName = this->get_override( "setName" ) )
                func_setName( name );
            else{
                this->osg::Object::setName( name );
            }
        }
        
        void default_setName( ::std::string const & name ) {
            osg::Object::setName( name );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Object::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    
        virtual void setUserData( ::osg::Referenced * obj ) {
            if( bp::override func_setUserData = this->get_override( "setUserData" ) )
                func_setUserData( boost::python::ptr(obj) );
            else{
                this->osg::Object::setUserData( boost::python::ptr(obj) );
            }
        }
        
        void default_setUserData( ::osg::Referenced * obj ) {
            osg::Object::setUserData( boost::python::ptr(obj) );
        }
    
    };

    Skeleton_wrapper( )
    : osgAnimation::Skeleton( )
      , bp::wrapper< osgAnimation::Skeleton >(){
        // null constructor
    
    }

    virtual void accept( ::osg::NodeVisitor & nv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(nv) );
        else{
            this->osgAnimation::Skeleton::accept( boost::ref(nv) );
        }
    }
    
    void default_accept( ::osg::NodeVisitor & nv ) {
        osgAnimation::Skeleton::accept( boost::ref(nv) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgAnimation::Skeleton::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgAnimation::Skeleton::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgAnimation::Skeleton::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgAnimation::Skeleton::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgAnimation::Skeleton::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgAnimation::Skeleton::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgAnimation::Skeleton::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgAnimation::Skeleton::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgAnimation::Skeleton::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgAnimation::Skeleton::libraryName( );
    }

    virtual bool addChild( ::osg::Node * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            return func_addChild( boost::python::ptr(child) );
        else{
            return this->osg::Group::addChild( boost::python::ptr(child) );
        }
    }
    
    bool default_addChild( ::osg::Node * child ) {
        return osg::Group::addChild( boost::python::ptr(child) );
    }

    virtual ::osg::Camera * asCamera(  ) {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera * default_asCamera(  ) {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Camera const * asCamera(  ) const  {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera const * default_asCamera(  ) const  {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Geode * asGeode(  ) {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode * default_asGeode(  ) {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Geode const * asGeode(  ) const  {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode const * default_asGeode(  ) const  {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Group * asGroup(  ) {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group * default_asGroup(  ) {
        return osg::Group::asGroup( );
    }

    virtual ::osg::Group const * asGroup(  ) const  {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group const * default_asGroup(  ) const  {
        return osg::Group::asGroup( );
    }

    virtual ::osg::MatrixTransform * asMatrixTransform(  ) {
        if( bp::override func_asMatrixTransform = this->get_override( "asMatrixTransform" ) )
            return func_asMatrixTransform(  );
        else{
            return this->osg::MatrixTransform::asMatrixTransform(  );
        }
    }
    
    ::osg::MatrixTransform * default_asMatrixTransform(  ) {
        return osg::MatrixTransform::asMatrixTransform( );
    }

    virtual ::osg::MatrixTransform const * asMatrixTransform(  ) const  {
        if( bp::override func_asMatrixTransform = this->get_override( "asMatrixTransform" ) )
            return func_asMatrixTransform(  );
        else{
            return this->osg::MatrixTransform::asMatrixTransform(  );
        }
    }
    
    ::osg::MatrixTransform const * default_asMatrixTransform(  ) const  {
        return osg::MatrixTransform::asMatrixTransform( );
    }

    virtual ::osg::PositionAttitudeTransform * asPositionAttitudeTransform(  ) {
        if( bp::override func_asPositionAttitudeTransform = this->get_override( "asPositionAttitudeTransform" ) )
            return func_asPositionAttitudeTransform(  );
        else{
            return this->osg::Transform::asPositionAttitudeTransform(  );
        }
    }
    
    ::osg::PositionAttitudeTransform * default_asPositionAttitudeTransform(  ) {
        return osg::Transform::asPositionAttitudeTransform( );
    }

    virtual ::osg::PositionAttitudeTransform const * asPositionAttitudeTransform(  ) const  {
        if( bp::override func_asPositionAttitudeTransform = this->get_override( "asPositionAttitudeTransform" ) )
            return func_asPositionAttitudeTransform(  );
        else{
            return this->osg::Transform::asPositionAttitudeTransform(  );
        }
    }
    
    ::osg::PositionAttitudeTransform const * default_asPositionAttitudeTransform(  ) const  {
        return osg::Transform::asPositionAttitudeTransform( );
    }

    virtual ::osg::Switch * asSwitch(  ) {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch * default_asSwitch(  ) {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Switch const * asSwitch(  ) const  {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch const * default_asSwitch(  ) const  {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Transform * asTransform(  ) {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Transform::asTransform(  );
        }
    }
    
    ::osg::Transform * default_asTransform(  ) {
        return osg::Transform::asTransform( );
    }

    virtual ::osg::Transform const * asTransform(  ) const  {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Transform::asTransform(  );
        }
    }
    
    ::osg::Transform const * default_asTransform(  ) const  {
        return osg::Transform::asTransform( );
    }

    virtual void ascend( ::osg::NodeVisitor & nv ) {
        if( bp::override func_ascend = this->get_override( "ascend" ) )
            func_ascend( boost::ref(nv) );
        else{
            this->osg::Node::ascend( boost::ref(nv) );
        }
    }
    
    void default_ascend( ::osg::NodeVisitor & nv ) {
        osg::Node::ascend( boost::ref(nv) );
    }

    virtual ::osg::BoundingSphere computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osg::Transform::computeBound(  );
        }
    }
    
    ::osg::BoundingSphere default_computeBound(  ) const  {
        return osg::Transform::computeBound( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual bool computeLocalToWorldMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        if( bp::override func_computeLocalToWorldMatrix = this->get_override( "computeLocalToWorldMatrix" ) )
            return func_computeLocalToWorldMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        else{
            return this->osg::MatrixTransform::computeLocalToWorldMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        }
    }
    
    bool default_computeLocalToWorldMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        return osg::MatrixTransform::computeLocalToWorldMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
    }

    virtual bool computeWorldToLocalMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        if( bp::override func_computeWorldToLocalMatrix = this->get_override( "computeWorldToLocalMatrix" ) )
            return func_computeWorldToLocalMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        else{
            return this->osg::MatrixTransform::computeWorldToLocalMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        }
    }
    
    bool default_computeWorldToLocalMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        return osg::MatrixTransform::computeWorldToLocalMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool insertChild( unsigned int index, ::osg::Node * child ) {
        if( bp::override func_insertChild = this->get_override( "insertChild" ) )
            return func_insertChild( index, boost::python::ptr(child) );
        else{
            return this->osg::Group::insertChild( index, boost::python::ptr(child) );
        }
    }
    
    bool default_insertChild( unsigned int index, ::osg::Node * child ) {
        return osg::Group::insertChild( index, boost::python::ptr(child) );
    }

    virtual bool removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        if( bp::override func_removeChildren = this->get_override( "removeChildren" ) )
            return func_removeChildren( pos, numChildrenToRemove );
        else{
            return this->osg::Group::removeChildren( pos, numChildrenToRemove );
        }
    }
    
    bool default_removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        return osg::Group::removeChildren( pos, numChildrenToRemove );
    }

    virtual bool replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        if( bp::override func_replaceChild = this->get_override( "replaceChild" ) )
            return func_replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        else{
            return this->osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        }
    }
    
    bool default_replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        return osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Group::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Group::resizeGLObjectBuffers( maxSize );
    }

    virtual bool setChild( unsigned int i, ::osg::Node * node ) {
        if( bp::override func_setChild = this->get_override( "setChild" ) )
            return func_setChild( i, boost::python::ptr(node) );
        else{
            return this->osg::Group::setChild( i, boost::python::ptr(node) );
        }
    }
    
    bool default_setChild( unsigned int i, ::osg::Node * node ) {
        return osg::Group::setChild( i, boost::python::ptr(node) );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Group::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Group::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual void traverse( ::osg::NodeVisitor & nv ) {
        if( bp::override func_traverse = this->get_override( "traverse" ) )
            func_traverse( boost::ref(nv) );
        else{
            this->osg::Group::traverse( boost::ref(nv) );
        }
    }
    
    void default_traverse( ::osg::NodeVisitor & nv ) {
        osg::Group::traverse( boost::ref(nv) );
    }

};

void register_Skeleton_class(){

    { //::osgAnimation::Skeleton
        typedef bp::class_< Skeleton_wrapper, bp::bases< ::osg::MatrixTransform >, osg::ref_ptr< Skeleton_wrapper >, boost::noncopyable > Skeleton_exposer_t;
        Skeleton_exposer_t Skeleton_exposer = Skeleton_exposer_t( "Skeleton", bp::init< >() );
        bp::scope Skeleton_scope( Skeleton_exposer );
        bp::class_< Skeleton_wrapper::UpdateSkeleton_wrapper, bp::bases< ::osg::NodeCallback >, osg::ref_ptr< Skeleton_wrapper::UpdateSkeleton_wrapper >, boost::noncopyable >( "UpdateSkeleton", bp::init< >() )    
            .def( 
                "className"
                , (char const * ( ::osgAnimation::Skeleton::UpdateSkeleton::* )(  ) const)(&::osgAnimation::Skeleton::UpdateSkeleton::className)
                , (char const * ( Skeleton_wrapper::UpdateSkeleton_wrapper::* )(  ) const)(&Skeleton_wrapper::UpdateSkeleton_wrapper::default_className) )    
            .def( 
                "clone"
                , (::osg::Object * ( ::osgAnimation::Skeleton::UpdateSkeleton::* )( ::osg::CopyOp const & ) const)(&::osgAnimation::Skeleton::UpdateSkeleton::clone)
                , (::osg::Object * ( Skeleton_wrapper::UpdateSkeleton_wrapper::* )( ::osg::CopyOp const & ) const)(&Skeleton_wrapper::UpdateSkeleton_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "cloneType"
                , (::osg::Object * ( ::osgAnimation::Skeleton::UpdateSkeleton::* )(  ) const)(&::osgAnimation::Skeleton::UpdateSkeleton::cloneType)
                , (::osg::Object * ( Skeleton_wrapper::UpdateSkeleton_wrapper::* )(  ) const)(&Skeleton_wrapper::UpdateSkeleton_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "isSameKindAs"
                , (bool ( ::osgAnimation::Skeleton::UpdateSkeleton::* )( ::osg::Object const * ) const)(&::osgAnimation::Skeleton::UpdateSkeleton::isSameKindAs)
                , (bool ( Skeleton_wrapper::UpdateSkeleton_wrapper::* )( ::osg::Object const * ) const)(&Skeleton_wrapper::UpdateSkeleton_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) )    
            .def( 
                "libraryName"
                , (char const * ( ::osgAnimation::Skeleton::UpdateSkeleton::* )(  ) const)(&::osgAnimation::Skeleton::UpdateSkeleton::libraryName)
                , (char const * ( Skeleton_wrapper::UpdateSkeleton_wrapper::* )(  ) const)(&Skeleton_wrapper::UpdateSkeleton_wrapper::default_libraryName) )    
            .def( 
                "needToValidate"
                , (bool ( ::osgAnimation::Skeleton::UpdateSkeleton::* )(  ) const)( &::osgAnimation::Skeleton::UpdateSkeleton::needToValidate ) )    
            .def( 
                "__call__"
                , (void ( ::osgAnimation::Skeleton::UpdateSkeleton::* )( ::osg::Node *,::osg::NodeVisitor * ) )(&::osgAnimation::Skeleton::UpdateSkeleton::operator())
                , (void ( Skeleton_wrapper::UpdateSkeleton_wrapper::* )( ::osg::Node *,::osg::NodeVisitor * ) )(&Skeleton_wrapper::UpdateSkeleton_wrapper::default___call__)
                , ( bp::arg("node"), bp::arg("nv") ) );
        { //::osgAnimation::Skeleton::accept
        
            typedef void ( ::osgAnimation::Skeleton::*accept_function_type )( ::osg::NodeVisitor & ) ;
            typedef void ( Skeleton_wrapper::*default_accept_function_type )( ::osg::NodeVisitor & ) ;
            
            Skeleton_exposer.def( 
                "accept"
                , accept_function_type(&::osgAnimation::Skeleton::accept)
                , default_accept_function_type(&Skeleton_wrapper::default_accept)
                , ( bp::arg("nv") ) );
        
        }
        { //::osgAnimation::Skeleton::className
        
            typedef char const * ( ::osgAnimation::Skeleton::*className_function_type )(  ) const;
            typedef char const * ( Skeleton_wrapper::*default_className_function_type )(  ) const;
            
            Skeleton_exposer.def( 
                "className"
                , className_function_type(&::osgAnimation::Skeleton::className)
                , default_className_function_type(&Skeleton_wrapper::default_className) );
        
        }
        { //::osgAnimation::Skeleton::clone
        
            typedef ::osg::Object * ( ::osgAnimation::Skeleton::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Skeleton_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Skeleton_exposer.def( 
                "clone"
                , clone_function_type(&::osgAnimation::Skeleton::clone)
                , default_clone_function_type(&Skeleton_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgAnimation::Skeleton::cloneType
        
            typedef ::osg::Object * ( ::osgAnimation::Skeleton::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Skeleton_wrapper::*default_cloneType_function_type )(  ) const;
            
            Skeleton_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgAnimation::Skeleton::cloneType)
                , default_cloneType_function_type(&Skeleton_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgAnimation::Skeleton::isSameKindAs
        
            typedef bool ( ::osgAnimation::Skeleton::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Skeleton_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Skeleton_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgAnimation::Skeleton::isSameKindAs)
                , default_isSameKindAs_function_type(&Skeleton_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgAnimation::Skeleton::libraryName
        
            typedef char const * ( ::osgAnimation::Skeleton::*libraryName_function_type )(  ) const;
            typedef char const * ( Skeleton_wrapper::*default_libraryName_function_type )(  ) const;
            
            Skeleton_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgAnimation::Skeleton::libraryName)
                , default_libraryName_function_type(&Skeleton_wrapper::default_libraryName) );
        
        }
        { //::osgAnimation::Skeleton::setDefaultUpdateCallback
        
            typedef void ( ::osgAnimation::Skeleton::*setDefaultUpdateCallback_function_type )(  ) ;
            
            Skeleton_exposer.def( 
                "setDefaultUpdateCallback"
                , setDefaultUpdateCallback_function_type( &::osgAnimation::Skeleton::setDefaultUpdateCallback ) );
        
        }
    }

}
