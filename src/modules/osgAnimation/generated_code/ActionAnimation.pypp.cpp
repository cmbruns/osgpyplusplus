// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgAnimation.h"
#include "wrap_referenced.h"
#include "ActionAnimation.pypp.hpp"

namespace bp = boost::python;

struct ActionAnimation_wrapper : osgAnimation::ActionAnimation, bp::wrapper< osgAnimation::ActionAnimation > {

    ActionAnimation_wrapper( )
    : osgAnimation::ActionAnimation( )
      , bp::wrapper< osgAnimation::ActionAnimation >(){
        // null constructor
    
    }

    ActionAnimation_wrapper(::osgAnimation::Animation * animation )
    : osgAnimation::ActionAnimation( boost::python::ptr(animation) )
      , bp::wrapper< osgAnimation::ActionAnimation >(){
        // constructor
    
    }

    virtual void accept( ::osgAnimation::ActionVisitor & nv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(nv) );
        else{
            this->osgAnimation::ActionAnimation::accept( boost::ref(nv) );
        }
    }
    
    void default_accept( ::osgAnimation::ActionVisitor & nv ) {
        osgAnimation::ActionAnimation::accept( boost::ref(nv) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgAnimation::ActionAnimation::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgAnimation::ActionAnimation::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgAnimation::ActionAnimation::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgAnimation::ActionAnimation::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgAnimation::ActionAnimation::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgAnimation::ActionAnimation::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgAnimation::ActionAnimation::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgAnimation::ActionAnimation::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgAnimation::ActionAnimation::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgAnimation::ActionAnimation::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual unsigned int getLoop(  ) const  {
        if( bp::override func_getLoop = this->get_override( "getLoop" ) )
            return func_getLoop(  );
        else{
            return this->osgAnimation::Action::getLoop(  );
        }
    }
    
    unsigned int default_getLoop(  ) const  {
        return osgAnimation::Action::getLoop( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setLoop( unsigned int nb ) {
        if( bp::override func_setLoop = this->get_override( "setLoop" ) )
            func_setLoop( nb );
        else{
            this->osgAnimation::Action::setLoop( nb );
        }
    }
    
    void default_setLoop( unsigned int nb ) {
        osgAnimation::Action::setLoop( nb );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual void traverse( ::osgAnimation::ActionVisitor & arg0 ) {
        if( bp::override func_traverse = this->get_override( "traverse" ) )
            func_traverse( boost::ref(arg0) );
        else{
            this->osgAnimation::Action::traverse( boost::ref(arg0) );
        }
    }
    
    void default_traverse( ::osgAnimation::ActionVisitor & arg0 ) {
        osgAnimation::Action::traverse( boost::ref(arg0) );
    }

};

void register_ActionAnimation_class(){

    { //::osgAnimation::ActionAnimation
        typedef bp::class_< ActionAnimation_wrapper, bp::bases< osgAnimation::Action >, osg::ref_ptr< ActionAnimation_wrapper >, boost::noncopyable > ActionAnimation_exposer_t;
        ActionAnimation_exposer_t ActionAnimation_exposer = ActionAnimation_exposer_t( "ActionAnimation", bp::init< >() );
        bp::scope ActionAnimation_scope( ActionAnimation_exposer );
        ActionAnimation_exposer.def( bp::init< osgAnimation::Animation * >(( bp::arg("animation") )) );
        bp::implicitly_convertible< osgAnimation::Animation *, osgAnimation::ActionAnimation >();
        { //::osgAnimation::ActionAnimation::accept
        
            typedef void ( ::osgAnimation::ActionAnimation::*accept_function_type )( ::osgAnimation::ActionVisitor & ) ;
            typedef void ( ActionAnimation_wrapper::*default_accept_function_type )( ::osgAnimation::ActionVisitor & ) ;
            
            ActionAnimation_exposer.def( 
                "accept"
                , accept_function_type(&::osgAnimation::ActionAnimation::accept)
                , default_accept_function_type(&ActionAnimation_wrapper::default_accept)
                , ( bp::arg("nv") ) );
        
        }
        { //::osgAnimation::ActionAnimation::className
        
            typedef char const * ( ::osgAnimation::ActionAnimation::*className_function_type )(  ) const;
            typedef char const * ( ActionAnimation_wrapper::*default_className_function_type )(  ) const;
            
            ActionAnimation_exposer.def( 
                "className"
                , className_function_type(&::osgAnimation::ActionAnimation::className)
                , default_className_function_type(&ActionAnimation_wrapper::default_className) );
        
        }
        { //::osgAnimation::ActionAnimation::clone
        
            typedef ::osg::Object * ( ::osgAnimation::ActionAnimation::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( ActionAnimation_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            ActionAnimation_exposer.def( 
                "clone"
                , clone_function_type(&::osgAnimation::ActionAnimation::clone)
                , default_clone_function_type(&ActionAnimation_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgAnimation::ActionAnimation::cloneType
        
            typedef ::osg::Object * ( ::osgAnimation::ActionAnimation::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( ActionAnimation_wrapper::*default_cloneType_function_type )(  ) const;
            
            ActionAnimation_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgAnimation::ActionAnimation::cloneType)
                , default_cloneType_function_type(&ActionAnimation_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgAnimation::ActionAnimation::getAnimation
        
            typedef ::osgAnimation::Animation * ( ::osgAnimation::ActionAnimation::*getAnimation_function_type )(  ) ;
            
            ActionAnimation_exposer.def( 
                "getAnimation"
                , getAnimation_function_type( &::osgAnimation::ActionAnimation::getAnimation )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgAnimation::ActionAnimation::isSameKindAs
        
            typedef bool ( ::osgAnimation::ActionAnimation::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( ActionAnimation_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            ActionAnimation_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgAnimation::ActionAnimation::isSameKindAs)
                , default_isSameKindAs_function_type(&ActionAnimation_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgAnimation::ActionAnimation::libraryName
        
            typedef char const * ( ::osgAnimation::ActionAnimation::*libraryName_function_type )(  ) const;
            typedef char const * ( ActionAnimation_wrapper::*default_libraryName_function_type )(  ) const;
            
            ActionAnimation_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgAnimation::ActionAnimation::libraryName)
                , default_libraryName_function_type(&ActionAnimation_wrapper::default_libraryName) );
        
        }
        { //::osgAnimation::ActionAnimation::updateAnimation
        
            typedef void ( ::osgAnimation::ActionAnimation::*updateAnimation_function_type )( unsigned int,int ) ;
            
            ActionAnimation_exposer.def( 
                "updateAnimation"
                , updateAnimation_function_type( &::osgAnimation::ActionAnimation::updateAnimation )
                , ( bp::arg("frame"), bp::arg("priority") ) );
        
        }
        { //::osgAnimation::Action::getLoop
        
            typedef unsigned int ( ::osgAnimation::Action::*getLoop_function_type )(  ) const;
            typedef unsigned int ( ActionAnimation_wrapper::*default_getLoop_function_type )(  ) const;
            
            ActionAnimation_exposer.def( 
                "getLoop"
                , getLoop_function_type(&::osgAnimation::Action::getLoop)
                , default_getLoop_function_type(&ActionAnimation_wrapper::default_getLoop) );
        
        }
        { //::osgAnimation::Action::setLoop
        
            typedef void ( ::osgAnimation::Action::*setLoop_function_type )( unsigned int ) ;
            typedef void ( ActionAnimation_wrapper::*default_setLoop_function_type )( unsigned int ) ;
            
            ActionAnimation_exposer.def( 
                "setLoop"
                , setLoop_function_type(&::osgAnimation::Action::setLoop)
                , default_setLoop_function_type(&ActionAnimation_wrapper::default_setLoop)
                , ( bp::arg("nb") ) );
        
        }
        { //::osgAnimation::Action::traverse
        
            typedef void ( ::osgAnimation::Action::*traverse_function_type )( ::osgAnimation::ActionVisitor & ) ;
            typedef void ( ActionAnimation_wrapper::*default_traverse_function_type )( ::osgAnimation::ActionVisitor & ) ;
            
            ActionAnimation_exposer.def( 
                "traverse"
                , traverse_function_type(&::osgAnimation::Action::traverse)
                , default_traverse_function_type(&ActionAnimation_wrapper::default_traverse)
                , ( bp::arg("arg0") ) );
        
        }
    }

}
