// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgAnimation.h"
#include "StackedTransform.pypp.hpp"

namespace bp = boost::python;

static osg::CopyOp::Options SHALLOW_COPY = osg::CopyOp::SHALLOW_COPY;

void register_StackedTransform_class(){

    { //::osgAnimation::StackedTransform
        typedef bp::class_< osgAnimation::StackedTransform, boost::noncopyable > StackedTransform_exposer_t;
        StackedTransform_exposer_t StackedTransform_exposer = StackedTransform_exposer_t( "StackedTransform", bp::init< >() );
        bp::scope StackedTransform_scope( StackedTransform_exposer );
        StackedTransform_exposer.def( bp::init< osgAnimation::StackedTransform const &, bp::optional< osg::CopyOp const & > >(( bp::arg("arg0"), bp::arg("copyop")=SHALLOW_COPY )) );
        bp::implicitly_convertible< osgAnimation::StackedTransform const &, osgAnimation::StackedTransform >();
        { //::osgAnimation::StackedTransform::getMatrix
        
            typedef ::osg::Matrix const & ( ::osgAnimation::StackedTransform::*getMatrix_function_type )(  ) const;
            
            StackedTransform_exposer.def( 
                "getMatrix"
                , getMatrix_function_type( &::osgAnimation::StackedTransform::getMatrix )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgAnimation::StackedTransform::update
        
            typedef void ( ::osgAnimation::StackedTransform::*update_function_type )( float ) ;
            
            StackedTransform_exposer.def( 
                "update"
                , update_function_type( &::osgAnimation::StackedTransform::update )
                , ( bp::arg("t")=0.0 ) );
        
        }
    }

}
