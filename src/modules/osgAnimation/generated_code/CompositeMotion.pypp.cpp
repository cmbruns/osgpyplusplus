// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgAnimation.h"
#include "wrap_referenced.h"
#include "CompositeMotion.pypp.hpp"

namespace bp = boost::python;

struct CompositeMotion_wrapper : osgAnimation::CompositeMotion, bp::wrapper< osgAnimation::CompositeMotion > {

    CompositeMotion_wrapper(float startValue=0, float duration=1, float changeValue=1, ::osgAnimation::Motion::TimeBehaviour tb=::osgAnimation::Motion::CLAMP )
    : osgAnimation::CompositeMotion( startValue, duration, changeValue, tb )
      , bp::wrapper< osgAnimation::CompositeMotion >(){
        // constructor
    
    }

    virtual void getValueInNormalizedRange( float t, float & result ) const  {
        if( bp::override func_getValueInNormalizedRange = this->get_override( "getValueInNormalizedRange" ) )
            func_getValueInNormalizedRange( t, result );
        else{
            this->osgAnimation::CompositeMotion::getValueInNormalizedRange( t, result );
        }
    }
    
    void default_getValueInNormalizedRange( float t, float & result ) const  {
        osgAnimation::CompositeMotion::getValueInNormalizedRange( t, result );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_CompositeMotion_class(){

    { //::osgAnimation::CompositeMotion
        typedef bp::class_< CompositeMotion_wrapper, bp::bases< osgAnimation::Motion >, osg::ref_ptr< CompositeMotion_wrapper >, boost::noncopyable > CompositeMotion_exposer_t;
        CompositeMotion_exposer_t CompositeMotion_exposer = CompositeMotion_exposer_t( "CompositeMotion", bp::init< bp::optional< float, float, float, osgAnimation::Motion::TimeBehaviour > >(( bp::arg("startValue")=0, bp::arg("duration")=1, bp::arg("changeValue")=1, bp::arg("tb")=::osgAnimation::Motion::CLAMP )) );
        bp::scope CompositeMotion_scope( CompositeMotion_exposer );
        bp::implicitly_convertible< float, osgAnimation::CompositeMotion >();
        { //::osgAnimation::CompositeMotion::getMotionList
        
            typedef ::std::vector< osg::ref_ptr<osgAnimation::Motion> > & ( ::osgAnimation::CompositeMotion::*getMotionList_function_type )(  ) ;
            
            CompositeMotion_exposer.def( 
                "getMotionList"
                , getMotionList_function_type( &::osgAnimation::CompositeMotion::getMotionList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgAnimation::CompositeMotion::getMotionList
        
            typedef ::std::vector< osg::ref_ptr<osgAnimation::Motion> > const & ( ::osgAnimation::CompositeMotion::*getMotionList_function_type )(  ) const;
            
            CompositeMotion_exposer.def( 
                "getMotionList"
                , getMotionList_function_type( &::osgAnimation::CompositeMotion::getMotionList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgAnimation::CompositeMotion::getValueInNormalizedRange
        
            typedef void ( ::osgAnimation::CompositeMotion::*getValueInNormalizedRange_function_type )( float,float & ) const;
            typedef void ( CompositeMotion_wrapper::*default_getValueInNormalizedRange_function_type )( float,float & ) const;
            
            CompositeMotion_exposer.def( 
                "getValueInNormalizedRange"
                , getValueInNormalizedRange_function_type(&::osgAnimation::CompositeMotion::getValueInNormalizedRange)
                , default_getValueInNormalizedRange_function_type(&CompositeMotion_wrapper::default_getValueInNormalizedRange)
                , ( bp::arg("t"), bp::arg("result") ) );
        
        }
        CompositeMotion_exposer.def_readwrite( "_motions", &osgAnimation::CompositeMotion::_motions );
    }

}
