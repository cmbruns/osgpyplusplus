// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgAnimation.h"
#include "Vec3Packed.pypp.hpp"

namespace bp = boost::python;

void register_Vec3Packed_class(){

    { //::osgAnimation::Vec3Packed
        typedef bp::class_< osgAnimation::Vec3Packed > Vec3Packed_exposer_t;
        Vec3Packed_exposer_t Vec3Packed_exposer = Vec3Packed_exposer_t( "Vec3Packed", bp::init< unsigned int >(( bp::arg("val") )) );
        bp::scope Vec3Packed_scope( Vec3Packed_exposer );
        bp::implicitly_convertible< unsigned int, osgAnimation::Vec3Packed >();
        Vec3Packed_exposer.def( bp::init< >() );
        { //::osgAnimation::Vec3Packed::compress
        
            typedef void ( ::osgAnimation::Vec3Packed::*compress_function_type )( ::osg::Vec3f const &,::osg::Vec3f const &,::osg::Vec3f const & ) ;
            
            Vec3Packed_exposer.def( 
                "compress"
                , compress_function_type( &::osgAnimation::Vec3Packed::compress )
                , ( bp::arg("src"), bp::arg("min"), bp::arg("scaleInv") ) );
        
        }
        { //::osgAnimation::Vec3Packed::uncompress
        
            typedef void ( ::osgAnimation::Vec3Packed::*uncompress_function_type )( ::osg::Vec3 const &,::osg::Vec3 const &,::osg::Vec3 & ) const;
            
            Vec3Packed_exposer.def( 
                "uncompress"
                , uncompress_function_type( &::osgAnimation::Vec3Packed::uncompress )
                , ( bp::arg("scale"), bp::arg("min"), bp::arg("result") ) );
        
        }
        Vec3Packed_exposer.def_readwrite( "m32bits", &osgAnimation::Vec3Packed::m32bits );
    }

}
