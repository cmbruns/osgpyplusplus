// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgAnimation.h"
#include "wrap_referenced.h"
#include "Animation.pypp.hpp"

namespace bp = boost::python;

struct Animation_wrapper : osgAnimation::Animation, bp::wrapper< osgAnimation::Animation > {

    Animation_wrapper( )
    : osgAnimation::Animation( )
      , bp::wrapper< osgAnimation::Animation >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgAnimation::Animation::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgAnimation::Animation::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgAnimation::Animation::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgAnimation::Animation::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgAnimation::Animation::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgAnimation::Animation::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgAnimation::Animation::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgAnimation::Animation::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgAnimation::Animation::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgAnimation::Animation::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_Animation_class(){

    { //::osgAnimation::Animation
        typedef bp::class_< Animation_wrapper, bp::bases< ::osg::Object >, osg::ref_ptr< Animation_wrapper >, boost::noncopyable > Animation_exposer_t;
        Animation_exposer_t Animation_exposer = Animation_exposer_t( "Animation", bp::no_init );
        bp::scope Animation_scope( Animation_exposer );
        bp::enum_< osgAnimation::Animation::PlayMode>("PlayMode")
            .value("ONCE", osgAnimation::Animation::ONCE)
            .value("STAY", osgAnimation::Animation::STAY)
            .value("LOOP", osgAnimation::Animation::LOOP)
            .value("PPONG", osgAnimation::Animation::PPONG)
            .export_values()
            ;
        Animation_exposer.def( bp::init< >() );
        { //::osgAnimation::Animation::addChannel
        
            typedef void ( ::osgAnimation::Animation::*addChannel_function_type )( ::osgAnimation::Channel * ) ;
            
            Animation_exposer.def( 
                "addChannel"
                , addChannel_function_type( &::osgAnimation::Animation::addChannel )
                , ( bp::arg("pChannel") ) );
        
        }
        { //::osgAnimation::Animation::className
        
            typedef char const * ( ::osgAnimation::Animation::*className_function_type )(  ) const;
            typedef char const * ( Animation_wrapper::*default_className_function_type )(  ) const;
            
            Animation_exposer.def( 
                "className"
                , className_function_type(&::osgAnimation::Animation::className)
                , default_className_function_type(&Animation_wrapper::default_className) );
        
        }
        { //::osgAnimation::Animation::clone
        
            typedef ::osg::Object * ( ::osgAnimation::Animation::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Animation_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Animation_exposer.def( 
                "clone"
                , clone_function_type(&::osgAnimation::Animation::clone)
                , default_clone_function_type(&Animation_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgAnimation::Animation::cloneType
        
            typedef ::osg::Object * ( ::osgAnimation::Animation::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Animation_wrapper::*default_cloneType_function_type )(  ) const;
            
            Animation_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgAnimation::Animation::cloneType)
                , default_cloneType_function_type(&Animation_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgAnimation::Animation::computeDuration
        
            typedef void ( ::osgAnimation::Animation::*computeDuration_function_type )(  ) ;
            
            Animation_exposer.def( 
                "computeDuration"
                , computeDuration_function_type( &::osgAnimation::Animation::computeDuration )
                , " Compute duration from channel and keyframes\n  if the duration is not specified you should\n  call this method before using it" );
        
        }
        { //::osgAnimation::Animation::getChannels
        
            typedef ::osgAnimation::ChannelList & ( ::osgAnimation::Animation::*getChannels_function_type )(  ) ;
            
            Animation_exposer.def( 
                "getChannels"
                , getChannels_function_type( &::osgAnimation::Animation::getChannels )
                , bp::return_internal_reference< >()
                , " Those accessors let you add and remove channels\n  if you modify something that can change the duration\n  you are supposed to call computeDuration or setDuration" );
        
        }
        { //::osgAnimation::Animation::getChannels
        
            typedef ::osgAnimation::ChannelList const & ( ::osgAnimation::Animation::*getChannels_function_type )(  ) const;
            
            Animation_exposer.def( 
                "getChannels"
                , getChannels_function_type( &::osgAnimation::Animation::getChannels )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgAnimation::Animation::getDuration
        
            typedef double ( ::osgAnimation::Animation::*getDuration_function_type )(  ) const;
            
            Animation_exposer.def( 
                "getDuration"
                , getDuration_function_type( &::osgAnimation::Animation::getDuration ) );
        
        }
        { //::osgAnimation::Animation::getPlayMode
        
            typedef ::osgAnimation::Animation::PlayMode ( ::osgAnimation::Animation::*getPlayMode_function_type )(  ) const;
            
            Animation_exposer.def( 
                "getPlayMode"
                , getPlayMode_function_type( &::osgAnimation::Animation::getPlayMode ) );
        
        }
        { //::osgAnimation::Animation::getStartTime
        
            typedef double ( ::osgAnimation::Animation::*getStartTime_function_type )(  ) const;
            
            Animation_exposer.def( 
                "getStartTime"
                , getStartTime_function_type( &::osgAnimation::Animation::getStartTime ) );
        
        }
        { //::osgAnimation::Animation::getWeight
        
            typedef float ( ::osgAnimation::Animation::*getWeight_function_type )(  ) const;
            
            Animation_exposer.def( 
                "getWeight"
                , getWeight_function_type( &::osgAnimation::Animation::getWeight ) );
        
        }
        { //::osgAnimation::Animation::isSameKindAs
        
            typedef bool ( ::osgAnimation::Animation::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Animation_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Animation_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgAnimation::Animation::isSameKindAs)
                , default_isSameKindAs_function_type(&Animation_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgAnimation::Animation::libraryName
        
            typedef char const * ( ::osgAnimation::Animation::*libraryName_function_type )(  ) const;
            typedef char const * ( Animation_wrapper::*default_libraryName_function_type )(  ) const;
            
            Animation_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgAnimation::Animation::libraryName)
                , default_libraryName_function_type(&Animation_wrapper::default_libraryName) );
        
        }
        { //::osgAnimation::Animation::resetTargets
        
            typedef void ( ::osgAnimation::Animation::*resetTargets_function_type )(  ) ;
            
            Animation_exposer.def( 
                "resetTargets"
                , resetTargets_function_type( &::osgAnimation::Animation::resetTargets ) );
        
        }
        { //::osgAnimation::Animation::setDuration
        
            typedef void ( ::osgAnimation::Animation::*setDuration_function_type )( double ) ;
            
            Animation_exposer.def( 
                "setDuration"
                , setDuration_function_type( &::osgAnimation::Animation::setDuration )
                , ( bp::arg("duration") )
                , " Change the duration of animation\n  then evaluate the animation in the range 0-duration\n  it stretch the animation in time.\n  see computeDuration too" );
        
        }
        { //::osgAnimation::Animation::setPlayMode
        
            typedef void ( ::osgAnimation::Animation::*setPlayMode_function_type )( ::osgAnimation::Animation::PlayMode ) ;
            
            Animation_exposer.def( 
                "setPlayMode"
                , setPlayMode_function_type( &::osgAnimation::Animation::setPlayMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::osgAnimation::Animation::setStartTime
        
            typedef void ( ::osgAnimation::Animation::*setStartTime_function_type )( double ) ;
            
            Animation_exposer.def( 
                "setStartTime"
                , setStartTime_function_type( &::osgAnimation::Animation::setStartTime )
                , ( bp::arg("time") ) );
        
        }
        { //::osgAnimation::Animation::setWeight
        
            typedef void ( ::osgAnimation::Animation::*setWeight_function_type )( float ) ;
            
            Animation_exposer.def( 
                "setWeight"
                , setWeight_function_type( &::osgAnimation::Animation::setWeight )
                , ( bp::arg("weight") ) );
        
        }
        { //::osgAnimation::Animation::update
        
            typedef bool ( ::osgAnimation::Animation::*update_function_type )( double,int ) ;
            
            Animation_exposer.def( 
                "update"
                , update_function_type( &::osgAnimation::Animation::update )
                , ( bp::arg("time"), bp::arg("priority")=(int)(0) ) );
        
        }
    }

}
