// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgAnimation.h"
#include "wrap_referenced.h"
#include "TimelineAnimationManager.pypp.hpp"

namespace bp = boost::python;

struct TimelineAnimationManager_wrapper : osgAnimation::TimelineAnimationManager, bp::wrapper< osgAnimation::TimelineAnimationManager > {

    TimelineAnimationManager_wrapper( )
    : osgAnimation::TimelineAnimationManager( )
      , bp::wrapper< osgAnimation::TimelineAnimationManager >(){
        // null constructor
    
    }

    TimelineAnimationManager_wrapper(::osgAnimation::AnimationManagerBase const & manager )
    : osgAnimation::TimelineAnimationManager( boost::ref(manager) )
      , bp::wrapper< osgAnimation::TimelineAnimationManager >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgAnimation::TimelineAnimationManager::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgAnimation::TimelineAnimationManager::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgAnimation::TimelineAnimationManager::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgAnimation::TimelineAnimationManager::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgAnimation::TimelineAnimationManager::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgAnimation::TimelineAnimationManager::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgAnimation::TimelineAnimationManager::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgAnimation::TimelineAnimationManager::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgAnimation::TimelineAnimationManager::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgAnimation::TimelineAnimationManager::libraryName( );
    }

    virtual void update( double time ) {
        if( bp::override func_update = this->get_override( "update" ) )
            func_update( time );
        else{
            this->osgAnimation::TimelineAnimationManager::update( time );
        }
    }
    
    void default_update( double time ) {
        osgAnimation::TimelineAnimationManager::update( time );
    }

    virtual void buildTargetReference(  ) {
        if( bp::override func_buildTargetReference = this->get_override( "buildTargetReference" ) )
            func_buildTargetReference(  );
        else{
            this->osgAnimation::AnimationManagerBase::buildTargetReference(  );
        }
    }
    
    void default_buildTargetReference(  ) {
        osgAnimation::AnimationManagerBase::buildTargetReference( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void link( ::osg::Node * subgraph ) {
        if( bp::override func_link = this->get_override( "link" ) )
            func_link( boost::python::ptr(subgraph) );
        else{
            this->osgAnimation::AnimationManagerBase::link( boost::python::ptr(subgraph) );
        }
    }
    
    void default_link( ::osg::Node * subgraph ) {
        osgAnimation::AnimationManagerBase::link( boost::python::ptr(subgraph) );
    }

    virtual bool needToLink(  ) const  {
        if( bp::override func_needToLink = this->get_override( "needToLink" ) )
            return func_needToLink(  );
        else{
            return this->osgAnimation::AnimationManagerBase::needToLink(  );
        }
    }
    
    bool default_needToLink(  ) const  {
        return osgAnimation::AnimationManagerBase::needToLink( );
    }

    virtual void registerAnimation( ::osgAnimation::Animation * arg0 ) {
        if( bp::override func_registerAnimation = this->get_override( "registerAnimation" ) )
            func_registerAnimation( boost::python::ptr(arg0) );
        else{
            this->osgAnimation::AnimationManagerBase::registerAnimation( boost::python::ptr(arg0) );
        }
    }
    
    void default_registerAnimation( ::osgAnimation::Animation * arg0 ) {
        osgAnimation::AnimationManagerBase::registerAnimation( boost::python::ptr(arg0) );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual void unregisterAnimation( ::osgAnimation::Animation * arg0 ) {
        if( bp::override func_unregisterAnimation = this->get_override( "unregisterAnimation" ) )
            func_unregisterAnimation( boost::python::ptr(arg0) );
        else{
            this->osgAnimation::AnimationManagerBase::unregisterAnimation( boost::python::ptr(arg0) );
        }
    }
    
    void default_unregisterAnimation( ::osgAnimation::Animation * arg0 ) {
        osgAnimation::AnimationManagerBase::unregisterAnimation( boost::python::ptr(arg0) );
    }

};

void register_TimelineAnimationManager_class(){

    { //::osgAnimation::TimelineAnimationManager
        typedef bp::class_< TimelineAnimationManager_wrapper, bp::bases< osgAnimation::AnimationManagerBase >, osg::ref_ptr< TimelineAnimationManager_wrapper >, boost::noncopyable > TimelineAnimationManager_exposer_t;
        TimelineAnimationManager_exposer_t TimelineAnimationManager_exposer = TimelineAnimationManager_exposer_t( "TimelineAnimationManager", bp::init< >() );
        bp::scope TimelineAnimationManager_scope( TimelineAnimationManager_exposer );
        TimelineAnimationManager_exposer.def( bp::init< osgAnimation::AnimationManagerBase const & >(( bp::arg("manager") )) );
        bp::implicitly_convertible< osgAnimation::AnimationManagerBase const &, osgAnimation::TimelineAnimationManager >();
        { //::osgAnimation::TimelineAnimationManager::className
        
            typedef char const * ( ::osgAnimation::TimelineAnimationManager::*className_function_type )(  ) const;
            typedef char const * ( TimelineAnimationManager_wrapper::*default_className_function_type )(  ) const;
            
            TimelineAnimationManager_exposer.def( 
                "className"
                , className_function_type(&::osgAnimation::TimelineAnimationManager::className)
                , default_className_function_type(&TimelineAnimationManager_wrapper::default_className) );
        
        }
        { //::osgAnimation::TimelineAnimationManager::clone
        
            typedef ::osg::Object * ( ::osgAnimation::TimelineAnimationManager::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( TimelineAnimationManager_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            TimelineAnimationManager_exposer.def( 
                "clone"
                , clone_function_type(&::osgAnimation::TimelineAnimationManager::clone)
                , default_clone_function_type(&TimelineAnimationManager_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgAnimation::TimelineAnimationManager::cloneType
        
            typedef ::osg::Object * ( ::osgAnimation::TimelineAnimationManager::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( TimelineAnimationManager_wrapper::*default_cloneType_function_type )(  ) const;
            
            TimelineAnimationManager_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgAnimation::TimelineAnimationManager::cloneType)
                , default_cloneType_function_type(&TimelineAnimationManager_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgAnimation::TimelineAnimationManager::getTimeline
        
            typedef ::osgAnimation::Timeline * ( ::osgAnimation::TimelineAnimationManager::*getTimeline_function_type )(  ) ;
            
            TimelineAnimationManager_exposer.def( 
                "getTimeline"
                , getTimeline_function_type( &::osgAnimation::TimelineAnimationManager::getTimeline )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgAnimation::TimelineAnimationManager::getTimeline
        
            typedef ::osgAnimation::Timeline const * ( ::osgAnimation::TimelineAnimationManager::*getTimeline_function_type )(  ) const;
            
            TimelineAnimationManager_exposer.def( 
                "getTimeline"
                , getTimeline_function_type( &::osgAnimation::TimelineAnimationManager::getTimeline )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgAnimation::TimelineAnimationManager::isSameKindAs
        
            typedef bool ( ::osgAnimation::TimelineAnimationManager::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( TimelineAnimationManager_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            TimelineAnimationManager_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgAnimation::TimelineAnimationManager::isSameKindAs)
                , default_isSameKindAs_function_type(&TimelineAnimationManager_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgAnimation::TimelineAnimationManager::libraryName
        
            typedef char const * ( ::osgAnimation::TimelineAnimationManager::*libraryName_function_type )(  ) const;
            typedef char const * ( TimelineAnimationManager_wrapper::*default_libraryName_function_type )(  ) const;
            
            TimelineAnimationManager_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgAnimation::TimelineAnimationManager::libraryName)
                , default_libraryName_function_type(&TimelineAnimationManager_wrapper::default_libraryName) );
        
        }
        { //::osgAnimation::TimelineAnimationManager::update
        
            typedef void ( ::osgAnimation::TimelineAnimationManager::*update_function_type )( double ) ;
            typedef void ( TimelineAnimationManager_wrapper::*default_update_function_type )( double ) ;
            
            TimelineAnimationManager_exposer.def( 
                "update"
                , update_function_type(&::osgAnimation::TimelineAnimationManager::update)
                , default_update_function_type(&TimelineAnimationManager_wrapper::default_update)
                , ( bp::arg("time") ) );
        
        }
        { //::osgAnimation::AnimationManagerBase::buildTargetReference
        
            typedef void ( ::osgAnimation::AnimationManagerBase::*buildTargetReference_function_type )(  ) ;
            typedef void ( TimelineAnimationManager_wrapper::*default_buildTargetReference_function_type )(  ) ;
            
            TimelineAnimationManager_exposer.def( 
                "buildTargetReference"
                , buildTargetReference_function_type(&::osgAnimation::AnimationManagerBase::buildTargetReference)
                , default_buildTargetReference_function_type(&TimelineAnimationManager_wrapper::default_buildTargetReference) );
        
        }
        { //::osgAnimation::AnimationManagerBase::link
        
            typedef void ( ::osgAnimation::AnimationManagerBase::*link_function_type )( ::osg::Node * ) ;
            typedef void ( TimelineAnimationManager_wrapper::*default_link_function_type )( ::osg::Node * ) ;
            
            TimelineAnimationManager_exposer.def( 
                "link"
                , link_function_type(&::osgAnimation::AnimationManagerBase::link)
                , default_link_function_type(&TimelineAnimationManager_wrapper::default_link)
                , ( bp::arg("subgraph") ) );
        
        }
        { //::osgAnimation::AnimationManagerBase::needToLink
        
            typedef bool ( ::osgAnimation::AnimationManagerBase::*needToLink_function_type )(  ) const;
            typedef bool ( TimelineAnimationManager_wrapper::*default_needToLink_function_type )(  ) const;
            
            TimelineAnimationManager_exposer.def( 
                "needToLink"
                , needToLink_function_type(&::osgAnimation::AnimationManagerBase::needToLink)
                , default_needToLink_function_type(&TimelineAnimationManager_wrapper::default_needToLink) );
        
        }
        { //::osgAnimation::AnimationManagerBase::registerAnimation
        
            typedef void ( ::osgAnimation::AnimationManagerBase::*registerAnimation_function_type )( ::osgAnimation::Animation * ) ;
            typedef void ( TimelineAnimationManager_wrapper::*default_registerAnimation_function_type )( ::osgAnimation::Animation * ) ;
            
            TimelineAnimationManager_exposer.def( 
                "registerAnimation"
                , registerAnimation_function_type(&::osgAnimation::AnimationManagerBase::registerAnimation)
                , default_registerAnimation_function_type(&TimelineAnimationManager_wrapper::default_registerAnimation)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgAnimation::AnimationManagerBase::unregisterAnimation
        
            typedef void ( ::osgAnimation::AnimationManagerBase::*unregisterAnimation_function_type )( ::osgAnimation::Animation * ) ;
            typedef void ( TimelineAnimationManager_wrapper::*default_unregisterAnimation_function_type )( ::osgAnimation::Animation * ) ;
            
            TimelineAnimationManager_exposer.def( 
                "unregisterAnimation"
                , unregisterAnimation_function_type(&::osgAnimation::AnimationManagerBase::unregisterAnimation)
                , default_unregisterAnimation_function_type(&TimelineAnimationManager_wrapper::default_unregisterAnimation)
                , ( bp::arg("arg0") ) );
        
        }
    }

}
