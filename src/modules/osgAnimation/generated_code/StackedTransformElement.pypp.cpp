// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgAnimation.h"
#include "wrap_referenced.h"
#include "StackedTransformElement.pypp.hpp"

namespace bp = boost::python;

struct StackedTransformElement_wrapper : osgAnimation::StackedTransformElement, bp::wrapper< osgAnimation::StackedTransformElement > {

    virtual void applyToMatrix( ::osg::Matrix & matrix ) const {
        bp::override func_applyToMatrix = this->get_override( "applyToMatrix" );
        func_applyToMatrix( boost::ref(matrix) );
    }

    virtual ::osg::Matrix getAsMatrix(  ) const {
        bp::override func_getAsMatrix = this->get_override( "getAsMatrix" );
        return func_getAsMatrix(  );
    }

    virtual ::osgAnimation::Target * getOrCreateTarget(  ) {
        if( bp::override func_getOrCreateTarget = this->get_override( "getOrCreateTarget" ) )
            return func_getOrCreateTarget(  );
        else{
            return this->osgAnimation::StackedTransformElement::getOrCreateTarget(  );
        }
    }
    
    ::osgAnimation::Target * default_getOrCreateTarget(  ) {
        return osgAnimation::StackedTransformElement::getOrCreateTarget( );
    }

    virtual ::osgAnimation::Target * getTarget(  ) {
        if( bp::override func_getTarget = this->get_override( "getTarget" ) )
            return func_getTarget(  );
        else{
            return this->osgAnimation::StackedTransformElement::getTarget(  );
        }
    }
    
    ::osgAnimation::Target * default_getTarget(  ) {
        return osgAnimation::StackedTransformElement::getTarget( );
    }

    virtual ::osgAnimation::Target const * getTarget(  ) const  {
        if( bp::override func_getTarget = this->get_override( "getTarget" ) )
            return func_getTarget(  );
        else{
            return this->osgAnimation::StackedTransformElement::getTarget(  );
        }
    }
    
    ::osgAnimation::Target const * default_getTarget(  ) const  {
        return osgAnimation::StackedTransformElement::getTarget( );
    }

    virtual bool isIdentity(  ) const {
        bp::override func_isIdentity = this->get_override( "isIdentity" );
        return func_isIdentity(  );
    }

    virtual void update( float t ){
        bp::override func_update = this->get_override( "update" );
        func_update( t );
    }

    virtual char const * className(  ) const {
        bp::override func_className = this->get_override( "className" );
        return func_className(  );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & arg0 ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone( boost::ref(arg0) );
    }

    virtual ::osg::Object * cloneType(  ) const {
        bp::override func_cloneType = this->get_override( "cloneType" );
        return func_cloneType(  );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool isSameKindAs( ::osg::Object const * arg0 ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(arg0) );
        else{
            return this->osg::Object::isSameKindAs( boost::python::ptr(arg0) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * arg0 ) const  {
        return osg::Object::isSameKindAs( boost::python::ptr(arg0) );
    }

    virtual char const * libraryName(  ) const {
        bp::override func_libraryName = this->get_override( "libraryName" );
        return func_libraryName(  );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_StackedTransformElement_class(){

    bp::class_< StackedTransformElement_wrapper, bp::bases< ::osg::Object >, osg::ref_ptr< StackedTransformElement_wrapper >, boost::noncopyable >( "StackedTransformElement", bp::no_init )    
        .def( 
            "applyToMatrix"
            , bp::pure_virtual( (void ( ::osgAnimation::StackedTransformElement::* )( ::osg::Matrix & ) const)(&::osgAnimation::StackedTransformElement::applyToMatrix) )
            , ( bp::arg("matrix") ) )    
        .def( 
            "getAsMatrix"
            , bp::pure_virtual( (::osg::Matrix ( ::osgAnimation::StackedTransformElement::* )(  ) const)(&::osgAnimation::StackedTransformElement::getAsMatrix) ) )    
        .def( 
            "getOrCreateTarget"
            , (::osgAnimation::Target * ( ::osgAnimation::StackedTransformElement::* )(  ) )(&::osgAnimation::StackedTransformElement::getOrCreateTarget)
            , (::osgAnimation::Target * ( StackedTransformElement_wrapper::* )(  ) )(&StackedTransformElement_wrapper::default_getOrCreateTarget)
            , bp::return_internal_reference< >() )    
        .def( 
            "getTarget"
            , (::osgAnimation::Target * ( ::osgAnimation::StackedTransformElement::* )(  ) )(&::osgAnimation::StackedTransformElement::getTarget)
            , (::osgAnimation::Target * ( StackedTransformElement_wrapper::* )(  ) )(&StackedTransformElement_wrapper::default_getTarget)
            , bp::return_internal_reference< >() )    
        .def( 
            "getTarget"
            , (::osgAnimation::Target const * ( ::osgAnimation::StackedTransformElement::* )(  ) const)(&::osgAnimation::StackedTransformElement::getTarget)
            , (::osgAnimation::Target const * ( StackedTransformElement_wrapper::* )(  ) const)(&StackedTransformElement_wrapper::default_getTarget)
            , bp::return_internal_reference< >() )    
        .def( 
            "isIdentity"
            , bp::pure_virtual( (bool ( ::osgAnimation::StackedTransformElement::* )(  ) const)(&::osgAnimation::StackedTransformElement::isIdentity) ) )    
        .def( 
            "update"
            , bp::pure_virtual( (void ( ::osgAnimation::StackedTransformElement::* )( float ) )(&::osgAnimation::StackedTransformElement::update) )
            , ( bp::arg("t") ) );

}
