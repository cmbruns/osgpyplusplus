// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgAnimation.h"
#include "wrap_referenced.h"
#include "ActionBlendOut.pypp.hpp"

namespace bp = boost::python;

struct ActionBlendOut_wrapper : osgAnimation::ActionBlendOut, bp::wrapper< osgAnimation::ActionBlendOut > {

    ActionBlendOut_wrapper( )
    : osgAnimation::ActionBlendOut( )
      , bp::wrapper< osgAnimation::ActionBlendOut >(){
        // null constructor
    
    }

    ActionBlendOut_wrapper(::osgAnimation::Animation * animation, double duration )
    : osgAnimation::ActionBlendOut( boost::python::ptr(animation), duration )
      , bp::wrapper< osgAnimation::ActionBlendOut >(){
        // constructor
    
    }

    virtual void accept( ::osgAnimation::ActionVisitor & nv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(nv) );
        else{
            this->osgAnimation::ActionBlendOut::accept( boost::ref(nv) );
        }
    }
    
    void default_accept( ::osgAnimation::ActionVisitor & nv ) {
        osgAnimation::ActionBlendOut::accept( boost::ref(nv) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgAnimation::ActionBlendOut::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgAnimation::ActionBlendOut::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgAnimation::ActionBlendOut::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgAnimation::ActionBlendOut::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgAnimation::ActionBlendOut::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgAnimation::ActionBlendOut::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgAnimation::ActionBlendOut::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgAnimation::ActionBlendOut::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgAnimation::ActionBlendOut::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgAnimation::ActionBlendOut::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual unsigned int getLoop(  ) const  {
        if( bp::override func_getLoop = this->get_override( "getLoop" ) )
            return func_getLoop(  );
        else{
            return this->osgAnimation::Action::getLoop(  );
        }
    }
    
    unsigned int default_getLoop(  ) const  {
        return osgAnimation::Action::getLoop( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setLoop( unsigned int nb ) {
        if( bp::override func_setLoop = this->get_override( "setLoop" ) )
            func_setLoop( nb );
        else{
            this->osgAnimation::Action::setLoop( nb );
        }
    }
    
    void default_setLoop( unsigned int nb ) {
        osgAnimation::Action::setLoop( nb );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual void traverse( ::osgAnimation::ActionVisitor & arg0 ) {
        if( bp::override func_traverse = this->get_override( "traverse" ) )
            func_traverse( boost::ref(arg0) );
        else{
            this->osgAnimation::Action::traverse( boost::ref(arg0) );
        }
    }
    
    void default_traverse( ::osgAnimation::ActionVisitor & arg0 ) {
        osgAnimation::Action::traverse( boost::ref(arg0) );
    }

};

void register_ActionBlendOut_class(){

    bp::class_< ActionBlendOut_wrapper, bp::bases< osgAnimation::Action >, osg::ref_ptr< ActionBlendOut_wrapper >, boost::noncopyable >( "ActionBlendOut", "\n blend out from weight to 0 in duration\n", bp::init< >() )    
        .def( bp::init< osgAnimation::Animation *, double >(( bp::arg("animation"), bp::arg("duration") )) )    
        .def( 
            "accept"
            , (void ( ::osgAnimation::ActionBlendOut::* )( ::osgAnimation::ActionVisitor & ) )(&::osgAnimation::ActionBlendOut::accept)
            , (void ( ActionBlendOut_wrapper::* )( ::osgAnimation::ActionVisitor & ) )(&ActionBlendOut_wrapper::default_accept)
            , ( bp::arg("nv") ) )    
        .def( 
            "className"
            , (char const * ( ::osgAnimation::ActionBlendOut::* )(  ) const)(&::osgAnimation::ActionBlendOut::className)
            , (char const * ( ActionBlendOut_wrapper::* )(  ) const)(&ActionBlendOut_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osgAnimation::ActionBlendOut::* )( ::osg::CopyOp const & ) const)(&::osgAnimation::ActionBlendOut::clone)
            , (::osg::Object * ( ActionBlendOut_wrapper::* )( ::osg::CopyOp const & ) const)(&ActionBlendOut_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osgAnimation::ActionBlendOut::* )(  ) const)(&::osgAnimation::ActionBlendOut::cloneType)
            , (::osg::Object * ( ActionBlendOut_wrapper::* )(  ) const)(&ActionBlendOut_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "computeWeight"
            , (void ( ::osgAnimation::ActionBlendOut::* )( unsigned int ) )( &::osgAnimation::ActionBlendOut::computeWeight )
            , ( bp::arg("frame") ) )    
        .def( 
            "getAnimation"
            , (::osgAnimation::Animation * ( ::osgAnimation::ActionBlendOut::* )(  ) )( &::osgAnimation::ActionBlendOut::getAnimation )
            , bp::return_internal_reference< >() )    
        .def( 
            "getWeight"
            , (double ( ::osgAnimation::ActionBlendOut::* )(  ) const)( &::osgAnimation::ActionBlendOut::getWeight ) )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osgAnimation::ActionBlendOut::* )( ::osg::Object const * ) const)(&::osgAnimation::ActionBlendOut::isSameKindAs)
            , (bool ( ActionBlendOut_wrapper::* )( ::osg::Object const * ) const)(&ActionBlendOut_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osgAnimation::ActionBlendOut::* )(  ) const)(&::osgAnimation::ActionBlendOut::libraryName)
            , (char const * ( ActionBlendOut_wrapper::* )(  ) const)(&ActionBlendOut_wrapper::default_libraryName) )    
        .def( 
            "getLoop"
            , (unsigned int ( ::osgAnimation::Action::* )(  ) const)(&::osgAnimation::Action::getLoop)
            , (unsigned int ( ActionBlendOut_wrapper::* )(  ) const)(&ActionBlendOut_wrapper::default_getLoop) )    
        .def( 
            "setLoop"
            , (void ( ::osgAnimation::Action::* )( unsigned int ) )(&::osgAnimation::Action::setLoop)
            , (void ( ActionBlendOut_wrapper::* )( unsigned int ) )(&ActionBlendOut_wrapper::default_setLoop)
            , ( bp::arg("nb") ) )    
        .def( 
            "traverse"
            , (void ( ::osgAnimation::Action::* )( ::osgAnimation::ActionVisitor & ) )(&::osgAnimation::Action::traverse)
            , (void ( ActionBlendOut_wrapper::* )( ::osgAnimation::ActionVisitor & ) )(&ActionBlendOut_wrapper::default_traverse)
            , ( bp::arg("arg0") ) );

}
