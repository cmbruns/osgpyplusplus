// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgAnimation.h"
#include "wrap_referenced.h"
#include "Motion.pypp.hpp"

namespace bp = boost::python;

struct Motion_wrapper : osgAnimation::Motion, bp::wrapper< osgAnimation::Motion > {

    virtual void getValueInNormalizedRange( float t, float & result ) const {
        bp::override func_getValueInNormalizedRange = this->get_override( "getValueInNormalizedRange" );
        func_getValueInNormalizedRange( t, result );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_Motion_class(){

    { //::osgAnimation::Motion
        typedef bp::class_< Motion_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< Motion_wrapper >, boost::noncopyable > Motion_exposer_t;
        Motion_exposer_t Motion_exposer = Motion_exposer_t( "Motion", bp::no_init );
        bp::scope Motion_scope( Motion_exposer );
        bp::enum_< osgAnimation::Motion::TimeBehaviour>("TimeBehaviour")
            .value("CLAMP", osgAnimation::Motion::CLAMP)
            .value("LOOP", osgAnimation::Motion::LOOP)
            .export_values()
            ;
        { //::osgAnimation::Motion::evaluateTime
        
            typedef float ( ::osgAnimation::Motion::*evaluateTime_function_type )( float ) const;
            
            Motion_exposer.def( 
                "evaluateTime"
                , evaluateTime_function_type( &::osgAnimation::Motion::evaluateTime )
                , ( bp::arg("time") ) );
        
        }
        { //::osgAnimation::Motion::getDuration
        
            typedef float ( ::osgAnimation::Motion::*getDuration_function_type )(  ) const;
            
            Motion_exposer.def( 
                "getDuration"
                , getDuration_function_type( &::osgAnimation::Motion::getDuration ) );
        
        }
        { //::osgAnimation::Motion::getTime
        
            typedef float ( ::osgAnimation::Motion::*getTime_function_type )(  ) const;
            
            Motion_exposer.def( 
                "getTime"
                , getTime_function_type( &::osgAnimation::Motion::getTime ) );
        
        }
        { //::osgAnimation::Motion::getValue
        
            typedef void ( ::osgAnimation::Motion::*getValue_function_type )( float & ) const;
            
            Motion_exposer.def( 
                "getValue"
                , getValue_function_type( &::osgAnimation::Motion::getValue )
                , ( bp::arg("result") ) );
        
        }
        { //::osgAnimation::Motion::getValue
        
            typedef float ( ::osgAnimation::Motion::*getValue_function_type )(  ) const;
            
            Motion_exposer.def( 
                "getValue"
                , getValue_function_type( &::osgAnimation::Motion::getValue ) );
        
        }
        { //::osgAnimation::Motion::getValueAt
        
            typedef void ( ::osgAnimation::Motion::*getValueAt_function_type )( float,float & ) const;
            
            Motion_exposer.def( 
                "getValueAt"
                , getValueAt_function_type( &::osgAnimation::Motion::getValueAt )
                , ( bp::arg("time"), bp::arg("result") ) );
        
        }
        { //::osgAnimation::Motion::getValueAt
        
            typedef float ( ::osgAnimation::Motion::*getValueAt_function_type )( float ) const;
            
            Motion_exposer.def( 
                "getValueAt"
                , getValueAt_function_type( &::osgAnimation::Motion::getValueAt )
                , ( bp::arg("time") ) );
        
        }
        { //::osgAnimation::Motion::getValueInNormalizedRange
        
            typedef void ( ::osgAnimation::Motion::*getValueInNormalizedRange_function_type )( float,float & ) const;
            
            Motion_exposer.def( 
                "getValueInNormalizedRange"
                , bp::pure_virtual( getValueInNormalizedRange_function_type(&::osgAnimation::Motion::getValueInNormalizedRange) )
                , ( bp::arg("t"), bp::arg("result") ) );
        
        }
        { //::osgAnimation::Motion::reset
        
            typedef void ( ::osgAnimation::Motion::*reset_function_type )(  ) ;
            
            Motion_exposer.def( 
                "reset"
                , reset_function_type( &::osgAnimation::Motion::reset ) );
        
        }
        { //::osgAnimation::Motion::setTime
        
            typedef void ( ::osgAnimation::Motion::*setTime_function_type )( float ) ;
            
            Motion_exposer.def( 
                "setTime"
                , setTime_function_type( &::osgAnimation::Motion::setTime )
                , ( bp::arg("time") ) );
        
        }
        { //::osgAnimation::Motion::update
        
            typedef void ( ::osgAnimation::Motion::*update_function_type )( float ) ;
            
            Motion_exposer.def( 
                "update"
                , update_function_type( &::osgAnimation::Motion::update )
                , ( bp::arg("dt") ) );
        
        }
    }

}
