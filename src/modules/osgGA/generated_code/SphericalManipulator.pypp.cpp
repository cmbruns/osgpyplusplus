// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "__convenience.pypp.hpp"
#include "wrap_osgGA.h"
#include "wrap_referenced.h"
#include "SphericalManipulator.pypp.hpp"

namespace bp = boost::python;

struct SphericalManipulator_wrapper : osgGA::SphericalManipulator, bp::wrapper< osgGA::SphericalManipulator > {

    SphericalManipulator_wrapper( )
    : osgGA::SphericalManipulator( )
      , bp::wrapper< osgGA::SphericalManipulator >(){
        // null constructor
    
    }

    bool calcMovement(  ){
        return osgGA::SphericalManipulator::calcMovement(  );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgGA::SphericalManipulator::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgGA::SphericalManipulator::className( );
    }

    virtual void computeHomePosition(  ) {
        if( bp::override func_computeHomePosition = this->get_override( "computeHomePosition" ) )
            func_computeHomePosition(  );
        else{
            this->osgGA::SphericalManipulator::computeHomePosition(  );
        }
    }
    
    void default_computeHomePosition(  ) {
        osgGA::SphericalManipulator::computeHomePosition( );
    }

    void flushMouseEventStack(  ){
        osgGA::SphericalManipulator::flushMouseEventStack(  );
    }

    virtual ::osgUtil::SceneView::FusionDistanceMode getFusionDistanceMode(  ) const  {
        if( bp::override func_getFusionDistanceMode = this->get_override( "getFusionDistanceMode" ) )
            return func_getFusionDistanceMode(  );
        else{
            return this->osgGA::SphericalManipulator::getFusionDistanceMode(  );
        }
    }
    
    ::osgUtil::SceneView::FusionDistanceMode default_getFusionDistanceMode(  ) const  {
        return osgGA::SphericalManipulator::getFusionDistanceMode( );
    }

    virtual float getFusionDistanceValue(  ) const  {
        if( bp::override func_getFusionDistanceValue = this->get_override( "getFusionDistanceValue" ) )
            return func_getFusionDistanceValue(  );
        else{
            return this->osgGA::SphericalManipulator::getFusionDistanceValue(  );
        }
    }
    
    float default_getFusionDistanceValue(  ) const  {
        return osgGA::SphericalManipulator::getFusionDistanceValue( );
    }

    virtual ::osg::Matrixd getInverseMatrix(  ) const  {
        if( bp::override func_getInverseMatrix = this->get_override( "getInverseMatrix" ) )
            return func_getInverseMatrix(  );
        else{
            return this->osgGA::SphericalManipulator::getInverseMatrix(  );
        }
    }
    
    ::osg::Matrixd default_getInverseMatrix(  ) const  {
        return osgGA::SphericalManipulator::getInverseMatrix( );
    }

    virtual ::osg::Matrixd getMatrix(  ) const  {
        if( bp::override func_getMatrix = this->get_override( "getMatrix" ) )
            return func_getMatrix(  );
        else{
            return this->osgGA::SphericalManipulator::getMatrix(  );
        }
    }
    
    ::osg::Matrixd default_getMatrix(  ) const  {
        return osgGA::SphericalManipulator::getMatrix( );
    }

    virtual ::osg::Node const * getNode(  ) const  {
        if( bp::override func_getNode = this->get_override( "getNode" ) )
            return func_getNode(  );
        else{
            return this->osgGA::SphericalManipulator::getNode(  );
        }
    }
    
    ::osg::Node const * default_getNode(  ) const  {
        return osgGA::SphericalManipulator::getNode( );
    }

    virtual ::osg::Node * getNode(  ) {
        if( bp::override func_getNode = this->get_override( "getNode" ) )
            return func_getNode(  );
        else{
            return this->osgGA::SphericalManipulator::getNode(  );
        }
    }
    
    ::osg::Node * default_getNode(  ) {
        return osgGA::SphericalManipulator::getNode( );
    }

    virtual void getUsage( ::osg::ApplicationUsage & usage ) const  {
        if( bp::override func_getUsage = this->get_override( "getUsage" ) )
            func_getUsage( boost::ref(usage) );
        else{
            this->osgGA::SphericalManipulator::getUsage( boost::ref(usage) );
        }
    }
    
    void default_getUsage( ::osg::ApplicationUsage & usage ) const  {
        osgGA::SphericalManipulator::getUsage( boost::ref(usage) );
    }

    virtual bool handle( ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & us ) {
        namespace bpl = boost::python;
        if( bpl::override func_handle = this->get_override( "handle" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_handle.ptr(), ea, us );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return osgGA::SphericalManipulator::handle( boost::ref(ea), boost::ref(us) );
        }
    }
    
    static boost::python::object default_handle( ::osgGA::SphericalManipulator & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & us ){
        bool result;
        if( dynamic_cast< SphericalManipulator_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::osgGA::SphericalManipulator::handle(ea, us);
        }
        else{
            result = inst.handle(ea, us);
        }
        return bp::object( result );
    }

    virtual void home( ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & us ) {
        namespace bpl = boost::python;
        if( bpl::override func_home = this->get_override( "home" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_home.ptr(), ea, us );
        }
        else{
            osgGA::SphericalManipulator::home( boost::ref(ea), boost::ref(us) );
        }
    }
    
    static void default_home_040ebe5305b9665422dea1086ba05032( ::osgGA::SphericalManipulator & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & us ){
        if( dynamic_cast< SphericalManipulator_wrapper * >( boost::addressof( inst ) ) ){
            inst.::osgGA::SphericalManipulator::home(ea, us);
        }
        else{
            inst.home(ea, us);
        }
    }

    virtual void home( double arg0 ) {
        namespace bpl = boost::python;
        if( bpl::override func_home = this->get_override( "home" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_home.ptr(), arg0 );
        }
        else{
            osgGA::SphericalManipulator::home( arg0 );
        }
    }
    
    static void default_home_e1da0b97c883577e9d4821248487614c( ::osgGA::SphericalManipulator & inst, double arg0 ){
        if( dynamic_cast< SphericalManipulator_wrapper * >( boost::addressof( inst ) ) ){
            inst.::osgGA::SphericalManipulator::home(arg0);
        }
        else{
            inst.home(arg0);
        }
    }

    virtual void init( ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & us ) {
        namespace bpl = boost::python;
        if( bpl::override func_init = this->get_override( "init" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_init.ptr(), ea, us );
        }
        else{
            osgGA::SphericalManipulator::init( boost::ref(ea), boost::ref(us) );
        }
    }
    
    static void default_init( ::osgGA::SphericalManipulator & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & us ){
        if( dynamic_cast< SphericalManipulator_wrapper * >( boost::addressof( inst ) ) ){
            inst.::osgGA::SphericalManipulator::init(ea, us);
        }
        else{
            inst.init(ea, us);
        }
    }

    bool isMouseMoving(  ){
        return osgGA::SphericalManipulator::isMouseMoving(  );
    }

    virtual void setByInverseMatrix( ::osg::Matrixd const & matrix ) {
        if( bp::override func_setByInverseMatrix = this->get_override( "setByInverseMatrix" ) )
            func_setByInverseMatrix( boost::ref(matrix) );
        else{
            this->osgGA::SphericalManipulator::setByInverseMatrix( boost::ref(matrix) );
        }
    }
    
    void default_setByInverseMatrix( ::osg::Matrixd const & matrix ) {
        osgGA::SphericalManipulator::setByInverseMatrix( boost::ref(matrix) );
    }

    virtual void setByMatrix( ::osg::Matrixd const & matrix ) {
        if( bp::override func_setByMatrix = this->get_override( "setByMatrix" ) )
            func_setByMatrix( boost::ref(matrix) );
        else{
            this->osgGA::SphericalManipulator::setByMatrix( boost::ref(matrix) );
        }
    }
    
    void default_setByMatrix( ::osg::Matrixd const & matrix ) {
        osgGA::SphericalManipulator::setByMatrix( boost::ref(matrix) );
    }

    virtual void setNode( ::osg::Node * arg0 ) {
        if( bp::override func_setNode = this->get_override( "setNode" ) )
            func_setNode( boost::python::ptr(arg0) );
        else{
            this->osgGA::SphericalManipulator::setNode( boost::python::ptr(arg0) );
        }
    }
    
    void default_setNode( ::osg::Node * arg0 ) {
        osgGA::SphericalManipulator::setNode( boost::python::ptr(arg0) );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgGA::GUIEventHandler::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgGA::GUIEventHandler::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgGA::GUIEventHandler::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgGA::GUIEventHandler::cloneType( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual void computeHomePosition( ::osg::Camera const * camera=0l, bool useBoundingBox=false ) {
        if( bp::override func_computeHomePosition = this->get_override( "computeHomePosition" ) )
            func_computeHomePosition( boost::python::ptr(camera), useBoundingBox );
        else{
            this->osgGA::CameraManipulator::computeHomePosition( boost::python::ptr(camera), useBoundingBox );
        }
    }
    
    void default_computeHomePosition( ::osg::Camera const * camera=0l, bool useBoundingBox=false ) {
        osgGA::CameraManipulator::computeHomePosition( boost::python::ptr(camera), useBoundingBox );
    }

    virtual void event( ::osg::NodeVisitor * nv, ::osg::Drawable * drawable ) {
        if( bp::override func_event = this->get_override( "event" ) )
            func_event( boost::python::ptr(nv), boost::python::ptr(drawable) );
        else{
            this->osgGA::GUIEventHandler::event( boost::python::ptr(nv), boost::python::ptr(drawable) );
        }
    }
    
    void default_event( ::osg::NodeVisitor * nv, ::osg::Drawable * drawable ) {
        osgGA::GUIEventHandler::event( boost::python::ptr(nv), boost::python::ptr(drawable) );
    }

    virtual void getHomePosition( ::osg::Vec3d & eye, ::osg::Vec3d & center, ::osg::Vec3d & up ) const  {
        if( bp::override func_getHomePosition = this->get_override( "getHomePosition" ) )
            func_getHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up) );
        else{
            this->osgGA::CameraManipulator::getHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up) );
        }
    }
    
    void default_getHomePosition( ::osg::Vec3d & eye, ::osg::Vec3d & center, ::osg::Vec3d & up ) const  {
        osgGA::CameraManipulator::getHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up) );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool handle( ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & aa, ::osg::Object * arg2, ::osg::NodeVisitor * arg3 ) {
        namespace bpl = boost::python;
        if( bpl::override func_handle = this->get_override( "handle" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_handle.ptr(), ea, aa, arg2, arg3 );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return osgGA::GUIEventHandler::handle( boost::ref(ea), boost::ref(aa), boost::python::ptr(arg2), boost::python::ptr(arg3) );
        }
    }
    
    static boost::python::object default_handle_d0ba65b51c8a2afc5afff00aad1b91b3( ::osgGA::GUIEventHandler & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & aa, ::osg::Object * arg2, ::osg::NodeVisitor * arg3 ){
        bool result;
        if( dynamic_cast< SphericalManipulator_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::osgGA::GUIEventHandler::handle(ea, aa, arg2, arg3);
        }
        else{
            result = inst.handle(ea, aa, arg2, arg3);
        }
        return bp::object( result );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgGA::GUIEventHandler::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgGA::GUIEventHandler::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgGA::GUIEventHandler::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgGA::GUIEventHandler::libraryName( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setAutoComputeHomePosition( bool flag ) {
        if( bp::override func_setAutoComputeHomePosition = this->get_override( "setAutoComputeHomePosition" ) )
            func_setAutoComputeHomePosition( flag );
        else{
            this->osgGA::CameraManipulator::setAutoComputeHomePosition( flag );
        }
    }
    
    void default_setAutoComputeHomePosition( bool flag ) {
        osgGA::CameraManipulator::setAutoComputeHomePosition( flag );
    }

    virtual void setCoordinateFrameCallback( ::osgGA::CameraManipulator::CoordinateFrameCallback * cb ) {
        if( bp::override func_setCoordinateFrameCallback = this->get_override( "setCoordinateFrameCallback" ) )
            func_setCoordinateFrameCallback( boost::python::ptr(cb) );
        else{
            this->osgGA::CameraManipulator::setCoordinateFrameCallback( boost::python::ptr(cb) );
        }
    }
    
    void default_setCoordinateFrameCallback( ::osgGA::CameraManipulator::CoordinateFrameCallback * cb ) {
        osgGA::CameraManipulator::setCoordinateFrameCallback( boost::python::ptr(cb) );
    }

    virtual void setHomePosition( ::osg::Vec3d const & eye, ::osg::Vec3d const & center, ::osg::Vec3d const & up, bool autoComputeHomePosition=false ) {
        if( bp::override func_setHomePosition = this->get_override( "setHomePosition" ) )
            func_setHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up), autoComputeHomePosition );
        else{
            this->osgGA::CameraManipulator::setHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up), autoComputeHomePosition );
        }
    }
    
    void default_setHomePosition( ::osg::Vec3d const & eye, ::osg::Vec3d const & center, ::osg::Vec3d const & up, bool autoComputeHomePosition=false ) {
        osgGA::CameraManipulator::setHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up), autoComputeHomePosition );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual void updateCamera( ::osg::Camera & camera ) {
        if( bp::override func_updateCamera = this->get_override( "updateCamera" ) )
            func_updateCamera( boost::ref(camera) );
        else{
            this->osgGA::CameraManipulator::updateCamera( boost::ref(camera) );
        }
    }
    
    void default_updateCamera( ::osg::Camera & camera ) {
        osgGA::CameraManipulator::updateCamera( boost::ref(camera) );
    }

};

void register_SphericalManipulator_class(){

    { //::osgGA::SphericalManipulator
        typedef bp::class_< SphericalManipulator_wrapper, bp::bases< osgGA::CameraManipulator >, osg::ref_ptr< SphericalManipulator_wrapper >, boost::noncopyable > SphericalManipulator_exposer_t;
        SphericalManipulator_exposer_t SphericalManipulator_exposer = SphericalManipulator_exposer_t( "SphericalManipulator", bp::no_init );
        bp::scope SphericalManipulator_scope( SphericalManipulator_exposer );
        bp::enum_< osgGA::SphericalManipulator::RotationMode>("RotationMode")
            .value("ELEVATION_HEADING", osgGA::SphericalManipulator::ELEVATION_HEADING)
            .value("HEADING", osgGA::SphericalManipulator::HEADING)
            .value("ELEVATION", osgGA::SphericalManipulator::ELEVATION)
            .value("MAP", osgGA::SphericalManipulator::MAP)
            .export_values()
            ;
        SphericalManipulator_exposer.def( bp::init< >() );
        { //::osgGA::SphericalManipulator::calcMovement
        
            typedef bool ( SphericalManipulator_wrapper::*calcMovement_function_type )(  ) ;
            
            SphericalManipulator_exposer.def( 
                "calcMovement"
                , calcMovement_function_type( &SphericalManipulator_wrapper::calcMovement )
                , "\n For the give mouse movement calculate the movement of the camera.\n        Return true is camera has moved and a redraw is required.\n" );
        
        }
        { //::osgGA::SphericalManipulator::className
        
            typedef char const * ( ::osgGA::SphericalManipulator::*className_function_type )(  ) const;
            typedef char const * ( SphericalManipulator_wrapper::*default_className_function_type )(  ) const;
            
            SphericalManipulator_exposer.def( 
                "className"
                , className_function_type(&::osgGA::SphericalManipulator::className)
                , default_className_function_type(&SphericalManipulator_wrapper::default_className) );
        
        }
        { //::osgGA::SphericalManipulator::computeHomePosition
        
            typedef void ( ::osgGA::SphericalManipulator::*computeHomePosition_function_type )(  ) ;
            typedef void ( SphericalManipulator_wrapper::*default_computeHomePosition_function_type )(  ) ;
            
            SphericalManipulator_exposer.def( 
                "computeHomePosition"
                , computeHomePosition_function_type(&::osgGA::SphericalManipulator::computeHomePosition)
                , default_computeHomePosition_function_type(&SphericalManipulator_wrapper::default_computeHomePosition) );
        
        }
        { //::osgGA::SphericalManipulator::computeViewPosition
        
            typedef void ( ::osgGA::SphericalManipulator::*computeViewPosition_function_type )( ::osg::BoundingSphere const &,double &,double &,::osg::Vec3d & ) ;
            
            SphericalManipulator_exposer.def( 
                "computeViewPosition"
                , computeViewPosition_function_type( &::osgGA::SphericalManipulator::computeViewPosition )
                , ( bp::arg("bound"), bp::arg("scale"), bp::arg("distance"), bp::arg("center") ) );
        
        }
        { //::osgGA::SphericalManipulator::flushMouseEventStack
        
            typedef void ( SphericalManipulator_wrapper::*flushMouseEventStack_function_type )(  ) ;
            
            SphericalManipulator_exposer.def( 
                "flushMouseEventStack"
                , flushMouseEventStack_function_type( &SphericalManipulator_wrapper::flushMouseEventStack )
                , "\n Reset the internal GUIEvent stack.\n" );
        
        }
        { //::osgGA::SphericalManipulator::getAllowThrow
        
            typedef bool ( ::osgGA::SphericalManipulator::*getAllowThrow_function_type )(  ) const;
            
            SphericalManipulator_exposer.def( 
                "getAllowThrow"
                , getAllowThrow_function_type( &::osgGA::SphericalManipulator::getAllowThrow )
                , " Returns true if the camera can be thrown, false otherwise. This defaults to true." );
        
        }
        { //::osgGA::SphericalManipulator::getCenter
        
            typedef ::osg::Vec3d const & ( ::osgGA::SphericalManipulator::*getCenter_function_type )(  ) const;
            
            SphericalManipulator_exposer.def( 
                "getCenter"
                , getCenter_function_type( &::osgGA::SphericalManipulator::getCenter )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::SphericalManipulator::getDistance
        
            typedef double ( ::osgGA::SphericalManipulator::*getDistance_function_type )(  ) const;
            
            SphericalManipulator_exposer.def( 
                "getDistance"
                , getDistance_function_type( &::osgGA::SphericalManipulator::getDistance ) );
        
        }
        { //::osgGA::SphericalManipulator::getElevtion
        
            typedef double ( ::osgGA::SphericalManipulator::*getElevtion_function_type )(  ) const;
            
            SphericalManipulator_exposer.def( 
                "getElevtion"
                , getElevtion_function_type( &::osgGA::SphericalManipulator::getElevtion ) );
        
        }
        { //::osgGA::SphericalManipulator::getFusionDistanceMode
        
            typedef ::osgUtil::SceneView::FusionDistanceMode ( ::osgGA::SphericalManipulator::*getFusionDistanceMode_function_type )(  ) const;
            typedef ::osgUtil::SceneView::FusionDistanceMode ( SphericalManipulator_wrapper::*default_getFusionDistanceMode_function_type )(  ) const;
            
            SphericalManipulator_exposer.def( 
                "getFusionDistanceMode"
                , getFusionDistanceMode_function_type(&::osgGA::SphericalManipulator::getFusionDistanceMode)
                , default_getFusionDistanceMode_function_type(&SphericalManipulator_wrapper::default_getFusionDistanceMode) );
        
        }
        { //::osgGA::SphericalManipulator::getFusionDistanceValue
        
            typedef float ( ::osgGA::SphericalManipulator::*getFusionDistanceValue_function_type )(  ) const;
            typedef float ( SphericalManipulator_wrapper::*default_getFusionDistanceValue_function_type )(  ) const;
            
            SphericalManipulator_exposer.def( 
                "getFusionDistanceValue"
                , getFusionDistanceValue_function_type(&::osgGA::SphericalManipulator::getFusionDistanceValue)
                , default_getFusionDistanceValue_function_type(&SphericalManipulator_wrapper::default_getFusionDistanceValue) );
        
        }
        { //::osgGA::SphericalManipulator::getHeading
        
            typedef double ( ::osgGA::SphericalManipulator::*getHeading_function_type )(  ) const;
            
            SphericalManipulator_exposer.def( 
                "getHeading"
                , getHeading_function_type( &::osgGA::SphericalManipulator::getHeading ) );
        
        }
        { //::osgGA::SphericalManipulator::getHomeDistance
        
            typedef double ( ::osgGA::SphericalManipulator::*getHomeDistance_function_type )(  ) const;
            
            SphericalManipulator_exposer.def( 
                "getHomeDistance"
                , getHomeDistance_function_type( &::osgGA::SphericalManipulator::getHomeDistance ) );
        
        }
        { //::osgGA::SphericalManipulator::getInverseMatrix
        
            typedef ::osg::Matrixd ( ::osgGA::SphericalManipulator::*getInverseMatrix_function_type )(  ) const;
            typedef ::osg::Matrixd ( SphericalManipulator_wrapper::*default_getInverseMatrix_function_type )(  ) const;
            
            SphericalManipulator_exposer.def( 
                "getInverseMatrix"
                , getInverseMatrix_function_type(&::osgGA::SphericalManipulator::getInverseMatrix)
                , default_getInverseMatrix_function_type(&SphericalManipulator_wrapper::default_getInverseMatrix) );
        
        }
        { //::osgGA::SphericalManipulator::getMatrix
        
            typedef ::osg::Matrixd ( ::osgGA::SphericalManipulator::*getMatrix_function_type )(  ) const;
            typedef ::osg::Matrixd ( SphericalManipulator_wrapper::*default_getMatrix_function_type )(  ) const;
            
            SphericalManipulator_exposer.def( 
                "getMatrix"
                , getMatrix_function_type(&::osgGA::SphericalManipulator::getMatrix)
                , default_getMatrix_function_type(&SphericalManipulator_wrapper::default_getMatrix) );
        
        }
        { //::osgGA::SphericalManipulator::getMinimumZoomScale
        
            typedef double ( ::osgGA::SphericalManipulator::*getMinimumZoomScale_function_type )(  ) const;
            
            SphericalManipulator_exposer.def( 
                "getMinimumZoomScale"
                , getMinimumZoomScale_function_type( &::osgGA::SphericalManipulator::getMinimumZoomScale )
                , " get the minimum distance (as ratio) the eye point can be zoomed in" );
        
        }
        { //::osgGA::SphericalManipulator::getNode
        
            typedef ::osg::Node const * ( ::osgGA::SphericalManipulator::*getNode_function_type )(  ) const;
            typedef ::osg::Node const * ( SphericalManipulator_wrapper::*default_getNode_function_type )(  ) const;
            
            SphericalManipulator_exposer.def( 
                "getNode"
                , getNode_function_type(&::osgGA::SphericalManipulator::getNode)
                , default_getNode_function_type(&SphericalManipulator_wrapper::default_getNode)
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::SphericalManipulator::getNode
        
            typedef ::osg::Node * ( ::osgGA::SphericalManipulator::*getNode_function_type )(  ) ;
            typedef ::osg::Node * ( SphericalManipulator_wrapper::*default_getNode_function_type )(  ) ;
            
            SphericalManipulator_exposer.def( 
                "getNode"
                , getNode_function_type(&::osgGA::SphericalManipulator::getNode)
                , default_getNode_function_type(&SphericalManipulator_wrapper::default_getNode)
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::SphericalManipulator::getRotationMode
        
            typedef ::osgGA::SphericalManipulator::RotationMode ( ::osgGA::SphericalManipulator::*getRotationMode_function_type )(  ) const;
            
            SphericalManipulator_exposer.def( 
                "getRotationMode"
                , getRotationMode_function_type( &::osgGA::SphericalManipulator::getRotationMode ) );
        
        }
        { //::osgGA::SphericalManipulator::getScroolWheelZoomDelta
        
            typedef double ( ::osgGA::SphericalManipulator::*getScroolWheelZoomDelta_function_type )(  ) const;
            
            SphericalManipulator_exposer.def( 
                "getScroolWheelZoomDelta"
                , getScroolWheelZoomDelta_function_type( &::osgGA::SphericalManipulator::getScroolWheelZoomDelta )
                , " get the mouse scroll wheel zoom delta." );
        
        }
        { //::osgGA::SphericalManipulator::getUsage
        
            typedef void ( ::osgGA::SphericalManipulator::*getUsage_function_type )( ::osg::ApplicationUsage & ) const;
            typedef void ( SphericalManipulator_wrapper::*default_getUsage_function_type )( ::osg::ApplicationUsage & ) const;
            
            SphericalManipulator_exposer.def( 
                "getUsage"
                , getUsage_function_type(&::osgGA::SphericalManipulator::getUsage)
                , default_getUsage_function_type(&SphericalManipulator_wrapper::default_getUsage)
                , ( bp::arg("usage") ) );
        
        }
        { //::osgGA::SphericalManipulator::handle
        
            typedef boost::python::object ( *default_handle_function_type )( ::osgGA::SphericalManipulator &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter & );
            
            SphericalManipulator_exposer.def( 
                "handle"
                , default_handle_function_type( &SphericalManipulator_wrapper::default_handle )
                , ( bp::arg("inst"), bp::arg("ea"), bp::arg("us") )
                , "\n handle events, return true if handled, false otherwise.\n" );
        
        }
        { //::osgGA::SphericalManipulator::home
        
            typedef void ( *default_home_function_type )( ::osgGA::SphericalManipulator &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter & );
            
            SphericalManipulator_exposer.def( 
                "home"
                , default_home_function_type( &SphericalManipulator_wrapper::default_home_040ebe5305b9665422dea1086ba05032 )
                , ( bp::arg("inst"), bp::arg("ea"), bp::arg("us") )
                , "\n Move the camera to the default position.\n        May be ignored by manipulators if home functionality is not appropriate.\n" );
        
        }
        { //::osgGA::SphericalManipulator::home
        
            typedef void ( *default_home_function_type )( ::osgGA::SphericalManipulator &,double );
            
            SphericalManipulator_exposer.def( 
                "home"
                , default_home_function_type( &SphericalManipulator_wrapper::default_home_e1da0b97c883577e9d4821248487614c )
                , ( bp::arg("inst"), bp::arg("arg0") ) );
        
        }
        { //::osgGA::SphericalManipulator::init
        
            typedef void ( *default_init_function_type )( ::osgGA::SphericalManipulator &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter & );
            
            SphericalManipulator_exposer.def( 
                "init"
                , default_init_function_type( &SphericalManipulator_wrapper::default_init )
                , ( bp::arg("inst"), bp::arg("ea"), bp::arg("us") )
                , "\n Start/restart the manipulator.\n" );
        
        }
        { //::osgGA::SphericalManipulator::isMouseMoving
        
            typedef bool ( SphericalManipulator_wrapper::*isMouseMoving_function_type )(  ) ;
            
            SphericalManipulator_exposer.def( 
                "isMouseMoving"
                , isMouseMoving_function_type( &SphericalManipulator_wrapper::isMouseMoving )
                , "\n Check the speed at which the mouse is moving.\n        If speed is below a threshold then return false, otherwise return true.\n" );
        
        }
        { //::osgGA::SphericalManipulator::setAllowThrow
        
            typedef void ( ::osgGA::SphericalManipulator::*setAllowThrow_function_type )( bool ) ;
            
            SphericalManipulator_exposer.def( 
                "setAllowThrow"
                , setAllowThrow_function_type( &::osgGA::SphericalManipulator::setAllowThrow )
                , ( bp::arg("allowThrow") )
                , " Set the allow throw flag. Releasing the mouse button while moving the camera results in a throw." );
        
        }
        { //::osgGA::SphericalManipulator::setByInverseMatrix
        
            typedef void ( ::osgGA::SphericalManipulator::*setByInverseMatrix_function_type )( ::osg::Matrixd const & ) ;
            typedef void ( SphericalManipulator_wrapper::*default_setByInverseMatrix_function_type )( ::osg::Matrixd const & ) ;
            
            SphericalManipulator_exposer.def( 
                "setByInverseMatrix"
                , setByInverseMatrix_function_type(&::osgGA::SphericalManipulator::setByInverseMatrix)
                , default_setByInverseMatrix_function_type(&SphericalManipulator_wrapper::default_setByInverseMatrix)
                , ( bp::arg("matrix") ) );
        
        }
        { //::osgGA::SphericalManipulator::setByMatrix
        
            typedef void ( ::osgGA::SphericalManipulator::*setByMatrix_function_type )( ::osg::Matrixd const & ) ;
            typedef void ( SphericalManipulator_wrapper::*default_setByMatrix_function_type )( ::osg::Matrixd const & ) ;
            
            SphericalManipulator_exposer.def( 
                "setByMatrix"
                , setByMatrix_function_type(&::osgGA::SphericalManipulator::setByMatrix)
                , default_setByMatrix_function_type(&SphericalManipulator_wrapper::default_setByMatrix)
                , ( bp::arg("matrix") ) );
        
        }
        { //::osgGA::SphericalManipulator::setCenter
        
            typedef void ( ::osgGA::SphericalManipulator::*setCenter_function_type )( ::osg::Vec3d const & ) ;
            
            SphericalManipulator_exposer.def( 
                "setCenter"
                , setCenter_function_type( &::osgGA::SphericalManipulator::setCenter )
                , ( bp::arg("center") ) );
        
        }
        { //::osgGA::SphericalManipulator::setDistance
        
            typedef bool ( ::osgGA::SphericalManipulator::*setDistance_function_type )( double ) ;
            
            SphericalManipulator_exposer.def( 
                "setDistance"
                , setDistance_function_type( &::osgGA::SphericalManipulator::setDistance )
                , ( bp::arg("distance") ) );
        
        }
        { //::osgGA::SphericalManipulator::setElevation
        
            typedef void ( ::osgGA::SphericalManipulator::*setElevation_function_type )( double ) ;
            
            SphericalManipulator_exposer.def( 
                "setElevation"
                , setElevation_function_type( &::osgGA::SphericalManipulator::setElevation )
                , ( bp::arg("elevation") ) );
        
        }
        { //::osgGA::SphericalManipulator::setHeading
        
            typedef void ( ::osgGA::SphericalManipulator::*setHeading_function_type )( double ) ;
            
            SphericalManipulator_exposer.def( 
                "setHeading"
                , setHeading_function_type( &::osgGA::SphericalManipulator::setHeading )
                , ( bp::arg("azimuth") ) );
        
        }
        { //::osgGA::SphericalManipulator::setMinimumZoomScale
        
            typedef void ( ::osgGA::SphericalManipulator::*setMinimumZoomScale_function_type )( double ) ;
            
            SphericalManipulator_exposer.def( 
                "setMinimumZoomScale"
                , setMinimumZoomScale_function_type( &::osgGA::SphericalManipulator::setMinimumZoomScale )
                , ( bp::arg("minimumZoomScale") )
                , " set the minimum distance (as ratio) the eye point can be zoomed in towards the\n            center before the center is pushed forward." );
        
        }
        { //::osgGA::SphericalManipulator::setNode
        
            typedef void ( ::osgGA::SphericalManipulator::*setNode_function_type )( ::osg::Node * ) ;
            typedef void ( SphericalManipulator_wrapper::*default_setNode_function_type )( ::osg::Node * ) ;
            
            SphericalManipulator_exposer.def( 
                "setNode"
                , setNode_function_type(&::osgGA::SphericalManipulator::setNode)
                , default_setNode_function_type(&SphericalManipulator_wrapper::default_setNode)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgGA::SphericalManipulator::setRotationMode
        
            typedef void ( ::osgGA::SphericalManipulator::*setRotationMode_function_type )( ::osgGA::SphericalManipulator::RotationMode ) ;
            
            SphericalManipulator_exposer.def( 
                "setRotationMode"
                , setRotationMode_function_type( &::osgGA::SphericalManipulator::setRotationMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::osgGA::SphericalManipulator::setScroolWheelZoomDelta
        
            typedef void ( ::osgGA::SphericalManipulator::*setScroolWheelZoomDelta_function_type )( double ) ;
            
            SphericalManipulator_exposer.def( 
                "setScroolWheelZoomDelta"
                , setScroolWheelZoomDelta_function_type( &::osgGA::SphericalManipulator::setScroolWheelZoomDelta )
                , ( bp::arg("zoomDelta") )
                , " set the mouse scroll wheel zoom delta.\n Range -1.0 to +1.0,  -ve value inverts wheel direction and zero switches off scroll wheel." );
        
        }
        { //::osgGA::SphericalManipulator::zoomOn
        
            typedef void ( ::osgGA::SphericalManipulator::*zoomOn_function_type )( ::osg::BoundingSphere const & ) ;
            
            SphericalManipulator_exposer.def( 
                "zoomOn"
                , zoomOn_function_type( &::osgGA::SphericalManipulator::zoomOn )
                , ( bp::arg("bound") ) );
        
        }
        { //::osgGA::GUIEventHandler::clone
        
            typedef ::osg::Object * ( ::osgGA::GUIEventHandler::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( SphericalManipulator_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            SphericalManipulator_exposer.def( 
                "clone"
                , clone_function_type(&::osgGA::GUIEventHandler::clone)
                , default_clone_function_type(&SphericalManipulator_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgGA::GUIEventHandler::cloneType
        
            typedef ::osg::Object * ( ::osgGA::GUIEventHandler::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( SphericalManipulator_wrapper::*default_cloneType_function_type )(  ) const;
            
            SphericalManipulator_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgGA::GUIEventHandler::cloneType)
                , default_cloneType_function_type(&SphericalManipulator_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgGA::CameraManipulator::computeHomePosition
        
            typedef void ( ::osgGA::CameraManipulator::*computeHomePosition_function_type )( ::osg::Camera const *,bool ) ;
            typedef void ( SphericalManipulator_wrapper::*default_computeHomePosition_function_type )( ::osg::Camera const *,bool ) ;
            
            SphericalManipulator_exposer.def( 
                "computeHomePosition"
                , computeHomePosition_function_type(&::osgGA::CameraManipulator::computeHomePosition)
                , default_computeHomePosition_function_type(&SphericalManipulator_wrapper::default_computeHomePosition)
                , ( bp::arg("camera")=0l, bp::arg("useBoundingBox")=(bool)(false) ) );
        
        }
        { //::osgGA::GUIEventHandler::event
        
            typedef void ( ::osgGA::GUIEventHandler::*event_function_type )( ::osg::NodeVisitor *,::osg::Drawable * ) ;
            typedef void ( SphericalManipulator_wrapper::*default_event_function_type )( ::osg::NodeVisitor *,::osg::Drawable * ) ;
            
            SphericalManipulator_exposer.def( 
                "event"
                , event_function_type(&::osgGA::GUIEventHandler::event)
                , default_event_function_type(&SphericalManipulator_wrapper::default_event)
                , ( bp::arg("nv"), bp::arg("drawable") ) );
        
        }
        { //::osgGA::CameraManipulator::getHomePosition
        
            typedef void ( ::osgGA::CameraManipulator::*getHomePosition_function_type )( ::osg::Vec3d &,::osg::Vec3d &,::osg::Vec3d & ) const;
            typedef void ( SphericalManipulator_wrapper::*default_getHomePosition_function_type )( ::osg::Vec3d &,::osg::Vec3d &,::osg::Vec3d & ) const;
            
            SphericalManipulator_exposer.def( 
                "getHomePosition"
                , getHomePosition_function_type(&::osgGA::CameraManipulator::getHomePosition)
                , default_getHomePosition_function_type(&SphericalManipulator_wrapper::default_getHomePosition)
                , ( bp::arg("eye"), bp::arg("center"), bp::arg("up") ) );
        
        }
        { //::osgGA::GUIEventHandler::handle
        
            typedef boost::python::object ( *default_handle_function_type )( ::osgGA::GUIEventHandler &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter &,::osg::Object *,::osg::NodeVisitor * );
            
            SphericalManipulator_exposer.def( 
                "handle"
                , default_handle_function_type( &SphericalManipulator_wrapper::default_handle_d0ba65b51c8a2afc5afff00aad1b91b3 )
                , ( bp::arg("inst"), bp::arg("ea"), bp::arg("aa"), bp::arg("arg2"), bp::arg("arg3") )
                , "\n Handle events, return true if handled, false otherwise.\n" );
        
        }
        { //::osgGA::GUIEventHandler::isSameKindAs
        
            typedef bool ( ::osgGA::GUIEventHandler::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( SphericalManipulator_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            SphericalManipulator_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgGA::GUIEventHandler::isSameKindAs)
                , default_isSameKindAs_function_type(&SphericalManipulator_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgGA::GUIEventHandler::libraryName
        
            typedef char const * ( ::osgGA::GUIEventHandler::*libraryName_function_type )(  ) const;
            typedef char const * ( SphericalManipulator_wrapper::*default_libraryName_function_type )(  ) const;
            
            SphericalManipulator_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgGA::GUIEventHandler::libraryName)
                , default_libraryName_function_type(&SphericalManipulator_wrapper::default_libraryName) );
        
        }
        { //::osgGA::CameraManipulator::setAutoComputeHomePosition
        
            typedef void ( ::osgGA::CameraManipulator::*setAutoComputeHomePosition_function_type )( bool ) ;
            typedef void ( SphericalManipulator_wrapper::*default_setAutoComputeHomePosition_function_type )( bool ) ;
            
            SphericalManipulator_exposer.def( 
                "setAutoComputeHomePosition"
                , setAutoComputeHomePosition_function_type(&::osgGA::CameraManipulator::setAutoComputeHomePosition)
                , default_setAutoComputeHomePosition_function_type(&SphericalManipulator_wrapper::default_setAutoComputeHomePosition)
                , ( bp::arg("flag") ) );
        
        }
        { //::osgGA::CameraManipulator::setCoordinateFrameCallback
        
            typedef void ( ::osgGA::CameraManipulator::*setCoordinateFrameCallback_function_type )( ::osgGA::CameraManipulator::CoordinateFrameCallback * ) ;
            typedef void ( SphericalManipulator_wrapper::*default_setCoordinateFrameCallback_function_type )( ::osgGA::CameraManipulator::CoordinateFrameCallback * ) ;
            
            SphericalManipulator_exposer.def( 
                "setCoordinateFrameCallback"
                , setCoordinateFrameCallback_function_type(&::osgGA::CameraManipulator::setCoordinateFrameCallback)
                , default_setCoordinateFrameCallback_function_type(&SphericalManipulator_wrapper::default_setCoordinateFrameCallback)
                , ( bp::arg("cb") ) );
        
        }
        { //::osgGA::CameraManipulator::setHomePosition
        
            typedef void ( ::osgGA::CameraManipulator::*setHomePosition_function_type )( ::osg::Vec3d const &,::osg::Vec3d const &,::osg::Vec3d const &,bool ) ;
            typedef void ( SphericalManipulator_wrapper::*default_setHomePosition_function_type )( ::osg::Vec3d const &,::osg::Vec3d const &,::osg::Vec3d const &,bool ) ;
            
            SphericalManipulator_exposer.def( 
                "setHomePosition"
                , setHomePosition_function_type(&::osgGA::CameraManipulator::setHomePosition)
                , default_setHomePosition_function_type(&SphericalManipulator_wrapper::default_setHomePosition)
                , ( bp::arg("eye"), bp::arg("center"), bp::arg("up"), bp::arg("autoComputeHomePosition")=(bool)(false) ) );
        
        }
        { //::osgGA::CameraManipulator::updateCamera
        
            typedef void ( ::osgGA::CameraManipulator::*updateCamera_function_type )( ::osg::Camera & ) ;
            typedef void ( SphericalManipulator_wrapper::*default_updateCamera_function_type )( ::osg::Camera & ) ;
            
            SphericalManipulator_exposer.def( 
                "updateCamera"
                , updateCamera_function_type(&::osgGA::CameraManipulator::updateCamera)
                , default_updateCamera_function_type(&SphericalManipulator_wrapper::default_updateCamera)
                , ( bp::arg("camera") ) );
        
        }
    }

}
