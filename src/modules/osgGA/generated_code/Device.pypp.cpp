// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "__convenience.pypp.hpp"
#include "wrap_osgGA.h"
#include "wrap_referenced.h"
#include "Device.pypp.hpp"

namespace bp = boost::python;

struct Device_wrapper : osgGA::Device, bp::wrapper< osgGA::Device > {

    Device_wrapper( )
    : osgGA::Device( )
      , bp::wrapper< osgGA::Device >(){
        // null constructor
    
    }

    virtual bool checkEvents(  ) {
        if( bp::override func_checkEvents = this->get_override( "checkEvents" ) )
            return func_checkEvents(  );
        else{
            return this->osgGA::Device::checkEvents(  );
        }
    }
    
    bool default_checkEvents(  ) {
        return osgGA::Device::checkEvents( );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgGA::Device::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgGA::Device::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgGA::Device::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgGA::Device::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgGA::Device::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgGA::Device::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgGA::Device::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgGA::Device::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgGA::Device::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgGA::Device::libraryName( );
    }

    virtual void sendEvent( ::osgGA::GUIEventAdapter const & ea ) {
        namespace bpl = boost::python;
        if( bpl::override func_sendEvent = this->get_override( "sendEvent" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_sendEvent.ptr(), ea );
        }
        else{
            osgGA::Device::sendEvent( boost::ref(ea) );
        }
    }
    
    static void default_sendEvent( ::osgGA::Device & inst, ::osgGA::GUIEventAdapter & ea ){
        if( dynamic_cast< Device_wrapper * >( boost::addressof( inst ) ) ){
            inst.::osgGA::Device::sendEvent(ea);
        }
        else{
            inst.sendEvent(ea);
        }
    }

    virtual void sendEvents( ::std::list< osg::ref_ptr<osgGA::GUIEventAdapter> > const & events ) {
        if( bp::override func_sendEvents = this->get_override( "sendEvents" ) )
            func_sendEvents( boost::ref(events) );
        else{
            this->osgGA::Device::sendEvents( boost::ref(events) );
        }
    }
    
    void default_sendEvents( ::std::list< osg::ref_ptr<osgGA::GUIEventAdapter> > const & events ) {
        osgGA::Device::sendEvents( boost::ref(events) );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_Device_class(){

    { //::osgGA::Device
        typedef bp::class_< Device_wrapper, bp::bases< ::osg::Object >, osg::ref_ptr< Device_wrapper >, boost::noncopyable > Device_exposer_t;
        Device_exposer_t Device_exposer = Device_exposer_t( "Device", "\n Device base class from abstracting away from devices/windows that can generate events.\n", bp::no_init );
        bp::scope Device_scope( Device_exposer );
        bp::scope().attr("UNKNOWN") = (int)osgGA::Device::UNKNOWN;
        bp::scope().attr("RECEIVE_EVENTS") = (int)osgGA::Device::RECEIVE_EVENTS;
        bp::scope().attr("SEND_EVENTS") = (int)osgGA::Device::SEND_EVENTS;
        Device_exposer.def( bp::init< >() );
        { //::osgGA::Device::checkEvents
        
            typedef bool ( ::osgGA::Device::*checkEvents_function_type )(  ) ;
            typedef bool ( Device_wrapper::*default_checkEvents_function_type )(  ) ;
            
            Device_exposer.def( 
                "checkEvents"
                , checkEvents_function_type(&::osgGA::Device::checkEvents)
                , default_checkEvents_function_type(&Device_wrapper::default_checkEvents) );
        
        }
        { //::osgGA::Device::className
        
            typedef char const * ( ::osgGA::Device::*className_function_type )(  ) const;
            typedef char const * ( Device_wrapper::*default_className_function_type )(  ) const;
            
            Device_exposer.def( 
                "className"
                , className_function_type(&::osgGA::Device::className)
                , default_className_function_type(&Device_wrapper::default_className) );
        
        }
        { //::osgGA::Device::clone
        
            typedef ::osg::Object * ( ::osgGA::Device::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Device_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Device_exposer.def( 
                "clone"
                , clone_function_type(&::osgGA::Device::clone)
                , default_clone_function_type(&Device_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgGA::Device::cloneType
        
            typedef ::osg::Object * ( ::osgGA::Device::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Device_wrapper::*default_cloneType_function_type )(  ) const;
            
            Device_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgGA::Device::cloneType)
                , default_cloneType_function_type(&Device_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgGA::Device::getCapabilities
        
            typedef int ( ::osgGA::Device::*getCapabilities_function_type )(  ) const;
            
            Device_exposer.def( 
                "getCapabilities"
                , getCapabilities_function_type( &::osgGA::Device::getCapabilities ) );
        
        }
        { //::osgGA::Device::getEventQueue
        
            typedef ::osgGA::EventQueue * ( ::osgGA::Device::*getEventQueue_function_type )(  ) ;
            
            Device_exposer.def( 
                "getEventQueue"
                , getEventQueue_function_type( &::osgGA::Device::getEventQueue )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::Device::getEventQueue
        
            typedef ::osgGA::EventQueue const * ( ::osgGA::Device::*getEventQueue_function_type )(  ) const;
            
            Device_exposer.def( 
                "getEventQueue"
                , getEventQueue_function_type( &::osgGA::Device::getEventQueue )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::Device::isSameKindAs
        
            typedef bool ( ::osgGA::Device::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Device_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Device_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgGA::Device::isSameKindAs)
                , default_isSameKindAs_function_type(&Device_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgGA::Device::libraryName
        
            typedef char const * ( ::osgGA::Device::*libraryName_function_type )(  ) const;
            typedef char const * ( Device_wrapper::*default_libraryName_function_type )(  ) const;
            
            Device_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgGA::Device::libraryName)
                , default_libraryName_function_type(&Device_wrapper::default_libraryName) );
        
        }
        { //::osgGA::Device::sendEvent
        
            typedef void ( *default_sendEvent_function_type )( ::osgGA::Device &,::osgGA::GUIEventAdapter & );
            
            Device_exposer.def( 
                "sendEvent"
                , default_sendEvent_function_type( &Device_wrapper::default_sendEvent )
                , ( bp::arg("inst"), bp::arg("ea") ) );
        
        }
        { //::osgGA::Device::sendEvents
        
            typedef void ( ::osgGA::Device::*sendEvents_function_type )( ::std::list< osg::ref_ptr<osgGA::GUIEventAdapter> > const & ) ;
            typedef void ( Device_wrapper::*default_sendEvents_function_type )( ::std::list< osg::ref_ptr<osgGA::GUIEventAdapter> > const & ) ;
            
            Device_exposer.def( 
                "sendEvents"
                , sendEvents_function_type(&::osgGA::Device::sendEvents)
                , default_sendEvents_function_type(&Device_wrapper::default_sendEvents)
                , ( bp::arg("events") ) );
        
        }
        { //::osgGA::Device::setEventQueue
        
            typedef void ( ::osgGA::Device::*setEventQueue_function_type )( ::osgGA::EventQueue * ) ;
            
            Device_exposer.def( 
                "setEventQueue"
                , setEventQueue_function_type( &::osgGA::Device::setEventQueue )
                , ( bp::arg("eventQueue") ) );
        
        }
        Device_exposer.def_readwrite( "Capabilities", &osgGA::Device::Capabilities, " Device base class from abstracting away from devices/windows that can generate events." );
    }

}
