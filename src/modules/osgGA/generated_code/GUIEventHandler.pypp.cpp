// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "__convenience.pypp.hpp"
#include "wrap_osgGA.h"
#include "wrap_referenced.h"
#include "GUIEventHandler.pypp.hpp"

namespace bp = boost::python;

struct GUIEventHandler_wrapper : osgGA::GUIEventHandler, bp::wrapper< osgGA::GUIEventHandler > {

    GUIEventHandler_wrapper( )
    : osgGA::GUIEventHandler( )
      , bp::wrapper< osgGA::GUIEventHandler >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgGA::GUIEventHandler::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgGA::GUIEventHandler::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgGA::GUIEventHandler::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgGA::GUIEventHandler::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgGA::GUIEventHandler::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgGA::GUIEventHandler::cloneType( );
    }

    virtual void event( ::osg::NodeVisitor * nv, ::osg::Drawable * drawable ) {
        if( bp::override func_event = this->get_override( "event" ) )
            func_event( boost::python::ptr(nv), boost::python::ptr(drawable) );
        else{
            this->osgGA::GUIEventHandler::event( boost::python::ptr(nv), boost::python::ptr(drawable) );
        }
    }
    
    void default_event( ::osg::NodeVisitor * nv, ::osg::Drawable * drawable ) {
        osgGA::GUIEventHandler::event( boost::python::ptr(nv), boost::python::ptr(drawable) );
    }

    virtual void getUsage( ::osg::ApplicationUsage & arg0 ) const  {
        if( bp::override func_getUsage = this->get_override( "getUsage" ) )
            func_getUsage( boost::ref(arg0) );
        else{
            this->osgGA::GUIEventHandler::getUsage( boost::ref(arg0) );
        }
    }
    
    void default_getUsage( ::osg::ApplicationUsage & arg0 ) const  {
        osgGA::GUIEventHandler::getUsage( boost::ref(arg0) );
    }

    virtual bool handle( ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & aa, ::osg::Object * arg2, ::osg::NodeVisitor * arg3 ) {
        namespace bpl = boost::python;
        if( bpl::override func_handle = this->get_override( "handle" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_handle.ptr(), ea, aa, arg2, arg3 );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return osgGA::GUIEventHandler::handle( boost::ref(ea), boost::ref(aa), boost::python::ptr(arg2), boost::python::ptr(arg3) );
        }
    }
    
    static boost::python::object default_handle_d0ba65b51c8a2afc5afff00aad1b91b3( ::osgGA::GUIEventHandler & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & aa, ::osg::Object * arg2, ::osg::NodeVisitor * arg3 ){
        bool result;
        if( dynamic_cast< GUIEventHandler_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::osgGA::GUIEventHandler::handle(ea, aa, arg2, arg3);
        }
        else{
            result = inst.handle(ea, aa, arg2, arg3);
        }
        return bp::object( result );
    }

    virtual bool handle( ::osgGA::GUIEventAdapter const & arg0, ::osgGA::GUIActionAdapter & arg1 ) {
        namespace bpl = boost::python;
        if( bpl::override func_handle = this->get_override( "handle" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_handle.ptr(), arg0, arg1 );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return osgGA::GUIEventHandler::handle( boost::ref(arg0), boost::ref(arg1) );
        }
    }
    
    static boost::python::object default_handle_790538b991760e7f116717306598b165( ::osgGA::GUIEventHandler & inst, ::osgGA::GUIEventAdapter & arg0, ::osgGA::GUIActionAdapter & arg1 ){
        bool result;
        if( dynamic_cast< GUIEventHandler_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::osgGA::GUIEventHandler::handle(arg0, arg1);
        }
        else{
            result = inst.handle(arg0, arg1);
        }
        return bp::object( result );
    }

    static boost::python::object handleWithCheckAgainstIgnoreHandledEventsMask_d3610ca5a2222c2cbf003cd87321c564( ::osgGA::GUIEventHandler & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & aa, ::osg::Object * object, ::osg::NodeVisitor * nv ){
        bool result = inst.handleWithCheckAgainstIgnoreHandledEventsMask(ea, aa, object, nv);
        return bp::object( result );
    }

    static boost::python::object handleWithCheckAgainstIgnoreHandledEventsMask_17030621957d968bd4a211296a8aefed( ::osgGA::GUIEventHandler & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & aa ){
        bool result = inst.handleWithCheckAgainstIgnoreHandledEventsMask(ea, aa);
        return bp::object( result );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgGA::GUIEventHandler::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgGA::GUIEventHandler::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgGA::GUIEventHandler::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgGA::GUIEventHandler::libraryName( );
    }

    virtual void operator()( ::osg::Node * node, ::osg::NodeVisitor * nv ) {
        if( bp::override func___call__ = this->get_override( "__call__" ) )
            func___call__( boost::python::ptr(node), boost::python::ptr(nv) );
        else{
            this->osgGA::GUIEventHandler::operator()( boost::python::ptr(node), boost::python::ptr(nv) );
        }
    }
    
    void default___call__( ::osg::Node * node, ::osg::NodeVisitor * nv ) {
        osgGA::GUIEventHandler::operator()( boost::python::ptr(node), boost::python::ptr(nv) );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_GUIEventHandler_class(){

    bp::class_< GUIEventHandler_wrapper, bp::bases< ::osg::NodeCallback, ::osg::Drawable::EventCallback >, osg::ref_ptr< GUIEventHandler_wrapper >, boost::noncopyable >( "GUIEventHandler", "\nGUIEventHandler provides a basic interface for any class which wants to handle\na GUI Events.\n\nThe GUIEvent is supplied by a GUIEventAdapter. Feedback resulting from the\nhandle method is supplied by a GUIActionAdapter, which allows the GUIEventHandler\nto ask the GUI to take some action in response to an incoming event.\n\nFor example, consider a Trackball Viewer class which takes mouse events and\nmanipulates a scene camera in response. The Trackball Viewer is a GUIEventHandler,\nand receives the events via the handle method. If the user throws the model,\nthe Trackball Viewer class can detect this via the incoming events, and\nrequest that the GUI set up a timer callback to continually redraw the view.\nThis request is made via the GUIActionAdapter class.\n", bp::init< >("\nGUIEventHandler provides a basic interface for any class which wants to handle\na GUI Events.\n\nThe GUIEvent is supplied by a GUIEventAdapter. Feedback resulting from the\nhandle method is supplied by a GUIActionAdapter, which allows the GUIEventHandler\nto ask the GUI to take some action in response to an incoming event.\n\nFor example, consider a Trackball Viewer class which takes mouse events and\nmanipulates a scene camera in response. The Trackball Viewer is a GUIEventHandler,\nand receives the events via the handle method. If the user throws the model,\nthe Trackball Viewer class can detect this via the incoming events, and\nrequest that the GUI set up a timer callback to continually redraw the view.\nThis request is made via the GUIActionAdapter class.\n") )    
        .def( 
            "className"
            , (char const * ( ::osgGA::GUIEventHandler::* )(  ) const)(&::osgGA::GUIEventHandler::className)
            , (char const * ( GUIEventHandler_wrapper::* )(  ) const)(&GUIEventHandler_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osgGA::GUIEventHandler::* )( ::osg::CopyOp const & ) const)(&::osgGA::GUIEventHandler::clone)
            , (::osg::Object * ( GUIEventHandler_wrapper::* )( ::osg::CopyOp const & ) const)(&GUIEventHandler_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osgGA::GUIEventHandler::* )(  ) const)(&::osgGA::GUIEventHandler::cloneType)
            , (::osg::Object * ( GUIEventHandler_wrapper::* )(  ) const)(&GUIEventHandler_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "event"
            , (void ( ::osgGA::GUIEventHandler::* )( ::osg::NodeVisitor *,::osg::Drawable * ) )(&::osgGA::GUIEventHandler::event)
            , (void ( GUIEventHandler_wrapper::* )( ::osg::NodeVisitor *,::osg::Drawable * ) )(&GUIEventHandler_wrapper::default_event)
            , ( bp::arg("nv"), bp::arg("drawable") ) )    
        .def( 
            "getIgnoreHandledEventsMask"
            , (unsigned int ( ::osgGA::GUIEventHandler::* )(  ) const)( &::osgGA::GUIEventHandler::getIgnoreHandledEventsMask )
            , " Get the event mask of the osgGA::GUIEeventAdapter::Event to be ignored if marked as handled" )    
        .def( 
            "getUsage"
            , (void ( ::osgGA::GUIEventHandler::* )( ::osg::ApplicationUsage & ) const)(&::osgGA::GUIEventHandler::getUsage)
            , (void ( GUIEventHandler_wrapper::* )( ::osg::ApplicationUsage & ) const)(&GUIEventHandler_wrapper::default_getUsage)
            , ( bp::arg("arg0") ) )    
        .def( 
            "handle"
            , (boost::python::object (*)( ::osgGA::GUIEventHandler &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter &,::osg::Object *,::osg::NodeVisitor * ))( &GUIEventHandler_wrapper::default_handle_d0ba65b51c8a2afc5afff00aad1b91b3 )
            , ( bp::arg("inst"), bp::arg("ea"), bp::arg("aa"), bp::arg("arg2"), bp::arg("arg3") )
            , "\n Handle events, return true if handled, false otherwise.\n" )    
        .def( 
            "handle"
            , (boost::python::object (*)( ::osgGA::GUIEventHandler &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter & ))( &GUIEventHandler_wrapper::default_handle_790538b991760e7f116717306598b165 )
            , ( bp::arg("inst"), bp::arg("arg0"), bp::arg("arg1") )
            , "\n Deprecated, Handle events, return true if handled, false otherwise.\n" )    
        .def( 
            "handleWithCheckAgainstIgnoreHandledEventsMask"
            , (boost::python::object (*)( ::osgGA::GUIEventHandler &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter &,::osg::Object *,::osg::NodeVisitor * ))( &GUIEventHandler_wrapper::handleWithCheckAgainstIgnoreHandledEventsMask_d3610ca5a2222c2cbf003cd87321c564 )
            , ( bp::arg("inst"), bp::arg("ea"), bp::arg("aa"), bp::arg("object"), bp::arg("nv") )
            , "\n Convenience method that only passes on to the handle(,,,) method events that either havent been\n handled yet, or have been handled but havent be set to be ignored by the IgnoreHandledEventsMask.\n Note, this method is an inline method, and not appropriate for users to override, override the handle(,,,)\n method instead.\n" )    
        .def( 
            "handleWithCheckAgainstIgnoreHandledEventsMask"
            , (boost::python::object (*)( ::osgGA::GUIEventHandler &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter & ))( &GUIEventHandler_wrapper::handleWithCheckAgainstIgnoreHandledEventsMask_17030621957d968bd4a211296a8aefed )
            , ( bp::arg("inst"), bp::arg("ea"), bp::arg("aa") )
            , "\n Convenience method that only passes on to the handle(,) method events that either havent been\n handled yet, or have been handled but havent be set to be ignored by the IgnoreHandledEventsMask.\n Note, this method is an inline method, and not appropriate for users to override, override the handle(,)\n method instead.\n" )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osgGA::GUIEventHandler::* )( ::osg::Object const * ) const)(&::osgGA::GUIEventHandler::isSameKindAs)
            , (bool ( GUIEventHandler_wrapper::* )( ::osg::Object const * ) const)(&GUIEventHandler_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osgGA::GUIEventHandler::* )(  ) const)(&::osgGA::GUIEventHandler::libraryName)
            , (char const * ( GUIEventHandler_wrapper::* )(  ) const)(&GUIEventHandler_wrapper::default_libraryName) )    
        .def( 
            "__call__"
            , (void ( ::osgGA::GUIEventHandler::* )( ::osg::Node *,::osg::NodeVisitor * ) )(&::osgGA::GUIEventHandler::operator())
            , (void ( GUIEventHandler_wrapper::* )( ::osg::Node *,::osg::NodeVisitor * ) )(&GUIEventHandler_wrapper::default___call__)
            , ( bp::arg("node"), bp::arg("nv") ) )    
        .def( 
            "setIgnoreHandledEventsMask"
            , (void ( ::osgGA::GUIEventHandler::* )( unsigned int ) )( &::osgGA::GUIEventHandler::setIgnoreHandledEventsMask )
            , ( bp::arg("mask") )
            , " Set a mask of osgGA::GUIEeventAdapter::Event to be ignored if marked as handled" );

}
