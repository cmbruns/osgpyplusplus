// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "__convenience.pypp.hpp"
#include "wrap_osgGA.h"
#include "wrap_referenced.h"
#include "AnimationPathManipulator.pypp.hpp"

namespace bp = boost::python;

struct AnimationPathManipulator_wrapper : osgGA::AnimationPathManipulator, bp::wrapper< osgGA::AnimationPathManipulator > {

    struct AnimationCompletedCallback_wrapper : osgGA::AnimationPathManipulator::AnimationCompletedCallback, bp::wrapper< osgGA::AnimationPathManipulator::AnimationCompletedCallback > {
    
        AnimationCompletedCallback_wrapper()
        : osgGA::AnimationPathManipulator::AnimationCompletedCallback()
          , bp::wrapper< osgGA::AnimationPathManipulator::AnimationCompletedCallback >(){
            // null constructor
            
        }
    
        virtual void completed( ::osgGA::AnimationPathManipulator const * apm ){
            bp::override func_completed = this->get_override( "completed" );
            func_completed( boost::python::ptr(apm) );
        }
    
    };

    AnimationPathManipulator_wrapper(::osg::AnimationPath * animationPath=0 )
    : osgGA::AnimationPathManipulator( boost::python::ptr(animationPath) )
      , bp::wrapper< osgGA::AnimationPathManipulator >(){
        // constructor
    
    }

    AnimationPathManipulator_wrapper(::std::string const & filename )
    : osgGA::AnimationPathManipulator( filename )
      , bp::wrapper< osgGA::AnimationPathManipulator >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgGA::AnimationPathManipulator::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgGA::AnimationPathManipulator::className( );
    }

    virtual ::osg::Matrixd getInverseMatrix(  ) const  {
        if( bp::override func_getInverseMatrix = this->get_override( "getInverseMatrix" ) )
            return func_getInverseMatrix(  );
        else{
            return this->osgGA::AnimationPathManipulator::getInverseMatrix(  );
        }
    }
    
    ::osg::Matrixd default_getInverseMatrix(  ) const  {
        return osgGA::AnimationPathManipulator::getInverseMatrix( );
    }

    virtual ::osg::Matrixd getMatrix(  ) const  {
        if( bp::override func_getMatrix = this->get_override( "getMatrix" ) )
            return func_getMatrix(  );
        else{
            return this->osgGA::AnimationPathManipulator::getMatrix(  );
        }
    }
    
    ::osg::Matrixd default_getMatrix(  ) const  {
        return osgGA::AnimationPathManipulator::getMatrix( );
    }

    virtual void getUsage( ::osg::ApplicationUsage & usage ) const  {
        if( bp::override func_getUsage = this->get_override( "getUsage" ) )
            func_getUsage( boost::ref(usage) );
        else{
            this->osgGA::AnimationPathManipulator::getUsage( boost::ref(usage) );
        }
    }
    
    void default_getUsage( ::osg::ApplicationUsage & usage ) const  {
        osgGA::AnimationPathManipulator::getUsage( boost::ref(usage) );
    }

    virtual bool handle( ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & us ) {
        namespace bpl = boost::python;
        if( bpl::override func_handle = this->get_override( "handle" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_handle.ptr(), ea, us );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return osgGA::AnimationPathManipulator::handle( boost::ref(ea), boost::ref(us) );
        }
    }
    
    static boost::python::object default_handle( ::osgGA::AnimationPathManipulator & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & us ){
        bool result;
        if( dynamic_cast< AnimationPathManipulator_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::osgGA::AnimationPathManipulator::handle(ea, us);
        }
        else{
            result = inst.handle(ea, us);
        }
        return bp::object( result );
    }

    virtual void home( ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & us ) {
        namespace bpl = boost::python;
        if( bpl::override func_home = this->get_override( "home" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_home.ptr(), ea, us );
        }
        else{
            osgGA::AnimationPathManipulator::home( boost::ref(ea), boost::ref(us) );
        }
    }
    
    static void default_home_8b90fe71e169056844e8445ccc06de9c( ::osgGA::AnimationPathManipulator & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & us ){
        if( dynamic_cast< AnimationPathManipulator_wrapper * >( boost::addressof( inst ) ) ){
            inst.::osgGA::AnimationPathManipulator::home(ea, us);
        }
        else{
            inst.home(ea, us);
        }
    }

    virtual void home( double currentTime ) {
        if( bp::override func_home = this->get_override( "home" ) )
            func_home( currentTime );
        else{
            this->osgGA::AnimationPathManipulator::home( currentTime );
        }
    }
    
    void default_home( double currentTime ) {
        osgGA::AnimationPathManipulator::home( currentTime );
    }

    virtual void init( ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & us ) {
        namespace bpl = boost::python;
        if( bpl::override func_init = this->get_override( "init" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_init.ptr(), ea, us );
        }
        else{
            osgGA::AnimationPathManipulator::init( boost::ref(ea), boost::ref(us) );
        }
    }
    
    static void default_init( ::osgGA::AnimationPathManipulator & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & us ){
        if( dynamic_cast< AnimationPathManipulator_wrapper * >( boost::addressof( inst ) ) ){
            inst.::osgGA::AnimationPathManipulator::init(ea, us);
        }
        else{
            inst.init(ea, us);
        }
    }

    virtual void setByInverseMatrix( ::osg::Matrixd const & matrix ) {
        if( bp::override func_setByInverseMatrix = this->get_override( "setByInverseMatrix" ) )
            func_setByInverseMatrix( boost::ref(matrix) );
        else{
            this->osgGA::AnimationPathManipulator::setByInverseMatrix( boost::ref(matrix) );
        }
    }
    
    void default_setByInverseMatrix( ::osg::Matrixd const & matrix ) {
        osgGA::AnimationPathManipulator::setByInverseMatrix( boost::ref(matrix) );
    }

    virtual void setByMatrix( ::osg::Matrixd const & matrix ) {
        if( bp::override func_setByMatrix = this->get_override( "setByMatrix" ) )
            func_setByMatrix( boost::ref(matrix) );
        else{
            this->osgGA::AnimationPathManipulator::setByMatrix( boost::ref(matrix) );
        }
    }
    
    void default_setByMatrix( ::osg::Matrixd const & matrix ) {
        osgGA::AnimationPathManipulator::setByMatrix( boost::ref(matrix) );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgGA::GUIEventHandler::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgGA::GUIEventHandler::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgGA::GUIEventHandler::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgGA::GUIEventHandler::cloneType( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual void computeHomePosition( ::osg::Camera const * camera=0l, bool useBoundingBox=false ) {
        if( bp::override func_computeHomePosition = this->get_override( "computeHomePosition" ) )
            func_computeHomePosition( boost::python::ptr(camera), useBoundingBox );
        else{
            this->osgGA::CameraManipulator::computeHomePosition( boost::python::ptr(camera), useBoundingBox );
        }
    }
    
    void default_computeHomePosition( ::osg::Camera const * camera=0l, bool useBoundingBox=false ) {
        osgGA::CameraManipulator::computeHomePosition( boost::python::ptr(camera), useBoundingBox );
    }

    virtual void event( ::osg::NodeVisitor * nv, ::osg::Drawable * drawable ) {
        if( bp::override func_event = this->get_override( "event" ) )
            func_event( boost::python::ptr(nv), boost::python::ptr(drawable) );
        else{
            this->osgGA::GUIEventHandler::event( boost::python::ptr(nv), boost::python::ptr(drawable) );
        }
    }
    
    void default_event( ::osg::NodeVisitor * nv, ::osg::Drawable * drawable ) {
        osgGA::GUIEventHandler::event( boost::python::ptr(nv), boost::python::ptr(drawable) );
    }

    virtual ::osgUtil::SceneView::FusionDistanceMode getFusionDistanceMode(  ) const  {
        if( bp::override func_getFusionDistanceMode = this->get_override( "getFusionDistanceMode" ) )
            return func_getFusionDistanceMode(  );
        else{
            return this->osgGA::CameraManipulator::getFusionDistanceMode(  );
        }
    }
    
    ::osgUtil::SceneView::FusionDistanceMode default_getFusionDistanceMode(  ) const  {
        return osgGA::CameraManipulator::getFusionDistanceMode( );
    }

    virtual float getFusionDistanceValue(  ) const  {
        if( bp::override func_getFusionDistanceValue = this->get_override( "getFusionDistanceValue" ) )
            return func_getFusionDistanceValue(  );
        else{
            return this->osgGA::CameraManipulator::getFusionDistanceValue(  );
        }
    }
    
    float default_getFusionDistanceValue(  ) const  {
        return osgGA::CameraManipulator::getFusionDistanceValue( );
    }

    virtual void getHomePosition( ::osg::Vec3d & eye, ::osg::Vec3d & center, ::osg::Vec3d & up ) const  {
        if( bp::override func_getHomePosition = this->get_override( "getHomePosition" ) )
            func_getHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up) );
        else{
            this->osgGA::CameraManipulator::getHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up) );
        }
    }
    
    void default_getHomePosition( ::osg::Vec3d & eye, ::osg::Vec3d & center, ::osg::Vec3d & up ) const  {
        osgGA::CameraManipulator::getHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up) );
    }

    virtual ::osg::Node const * getNode(  ) const  {
        if( bp::override func_getNode = this->get_override( "getNode" ) )
            return func_getNode(  );
        else{
            return this->osgGA::CameraManipulator::getNode(  );
        }
    }
    
    ::osg::Node const * default_getNode(  ) const  {
        return osgGA::CameraManipulator::getNode( );
    }

    virtual ::osg::Node * getNode(  ) {
        if( bp::override func_getNode = this->get_override( "getNode" ) )
            return func_getNode(  );
        else{
            return this->osgGA::CameraManipulator::getNode(  );
        }
    }
    
    ::osg::Node * default_getNode(  ) {
        return osgGA::CameraManipulator::getNode( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool handle( ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & aa, ::osg::Object * arg2, ::osg::NodeVisitor * arg3 ) {
        namespace bpl = boost::python;
        if( bpl::override func_handle = this->get_override( "handle" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_handle.ptr(), ea, aa, arg2, arg3 );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return osgGA::GUIEventHandler::handle( boost::ref(ea), boost::ref(aa), boost::python::ptr(arg2), boost::python::ptr(arg3) );
        }
    }
    
    static boost::python::object default_handle_d0ba65b51c8a2afc5afff00aad1b91b3( ::osgGA::GUIEventHandler & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & aa, ::osg::Object * arg2, ::osg::NodeVisitor * arg3 ){
        bool result;
        if( dynamic_cast< AnimationPathManipulator_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::osgGA::GUIEventHandler::handle(ea, aa, arg2, arg3);
        }
        else{
            result = inst.handle(ea, aa, arg2, arg3);
        }
        return bp::object( result );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgGA::GUIEventHandler::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgGA::GUIEventHandler::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgGA::GUIEventHandler::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgGA::GUIEventHandler::libraryName( );
    }

    virtual void setAutoComputeHomePosition( bool flag ) {
        if( bp::override func_setAutoComputeHomePosition = this->get_override( "setAutoComputeHomePosition" ) )
            func_setAutoComputeHomePosition( flag );
        else{
            this->osgGA::CameraManipulator::setAutoComputeHomePosition( flag );
        }
    }
    
    void default_setAutoComputeHomePosition( bool flag ) {
        osgGA::CameraManipulator::setAutoComputeHomePosition( flag );
    }

    virtual void setCoordinateFrameCallback( ::osgGA::CameraManipulator::CoordinateFrameCallback * cb ) {
        if( bp::override func_setCoordinateFrameCallback = this->get_override( "setCoordinateFrameCallback" ) )
            func_setCoordinateFrameCallback( boost::python::ptr(cb) );
        else{
            this->osgGA::CameraManipulator::setCoordinateFrameCallback( boost::python::ptr(cb) );
        }
    }
    
    void default_setCoordinateFrameCallback( ::osgGA::CameraManipulator::CoordinateFrameCallback * cb ) {
        osgGA::CameraManipulator::setCoordinateFrameCallback( boost::python::ptr(cb) );
    }

    virtual void setHomePosition( ::osg::Vec3d const & eye, ::osg::Vec3d const & center, ::osg::Vec3d const & up, bool autoComputeHomePosition=false ) {
        if( bp::override func_setHomePosition = this->get_override( "setHomePosition" ) )
            func_setHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up), autoComputeHomePosition );
        else{
            this->osgGA::CameraManipulator::setHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up), autoComputeHomePosition );
        }
    }
    
    void default_setHomePosition( ::osg::Vec3d const & eye, ::osg::Vec3d const & center, ::osg::Vec3d const & up, bool autoComputeHomePosition=false ) {
        osgGA::CameraManipulator::setHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up), autoComputeHomePosition );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setNode( ::osg::Node * arg0 ) {
        if( bp::override func_setNode = this->get_override( "setNode" ) )
            func_setNode( boost::python::ptr(arg0) );
        else{
            this->osgGA::CameraManipulator::setNode( boost::python::ptr(arg0) );
        }
    }
    
    void default_setNode( ::osg::Node * arg0 ) {
        osgGA::CameraManipulator::setNode( boost::python::ptr(arg0) );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual void updateCamera( ::osg::Camera & camera ) {
        if( bp::override func_updateCamera = this->get_override( "updateCamera" ) )
            func_updateCamera( boost::ref(camera) );
        else{
            this->osgGA::CameraManipulator::updateCamera( boost::ref(camera) );
        }
    }
    
    void default_updateCamera( ::osg::Camera & camera ) {
        osgGA::CameraManipulator::updateCamera( boost::ref(camera) );
    }

};

void register_AnimationPathManipulator_class(){

    { //::osgGA::AnimationPathManipulator
        typedef bp::class_< AnimationPathManipulator_wrapper, bp::bases< osgGA::CameraManipulator >, osg::ref_ptr< AnimationPathManipulator_wrapper >, boost::noncopyable > AnimationPathManipulator_exposer_t;
        AnimationPathManipulator_exposer_t AnimationPathManipulator_exposer = AnimationPathManipulator_exposer_t( "AnimationPathManipulator", bp::init< bp::optional< osg::AnimationPath * > >(( bp::arg("animationPath")=bp::object() )) );
        bp::scope AnimationPathManipulator_scope( AnimationPathManipulator_exposer );
        bp::class_< AnimationPathManipulator_wrapper::AnimationCompletedCallback_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< AnimationPathManipulator_wrapper::AnimationCompletedCallback_wrapper >, boost::noncopyable >( "AnimationCompletedCallback", bp::no_init )    
            .def( 
                "completed"
                , bp::pure_virtual( (void ( ::osgGA::AnimationPathManipulator::AnimationCompletedCallback::* )( ::osgGA::AnimationPathManipulator const * ) )(&::osgGA::AnimationPathManipulator::AnimationCompletedCallback::completed) )
                , ( bp::arg("apm") ) );
        bp::implicitly_convertible< osg::AnimationPath *, osgGA::AnimationPathManipulator >();
        AnimationPathManipulator_exposer.def( bp::init< std::string const & >(( bp::arg("filename") )) );
        bp::implicitly_convertible< std::string const &, osgGA::AnimationPathManipulator >();
        { //::osgGA::AnimationPathManipulator::className
        
            typedef char const * ( ::osgGA::AnimationPathManipulator::*className_function_type )(  ) const;
            typedef char const * ( AnimationPathManipulator_wrapper::*default_className_function_type )(  ) const;
            
            AnimationPathManipulator_exposer.def( 
                "className"
                , className_function_type(&::osgGA::AnimationPathManipulator::className)
                , default_className_function_type(&AnimationPathManipulator_wrapper::default_className) );
        
        }
        { //::osgGA::AnimationPathManipulator::getAnimationCompletedCallback
        
            typedef ::osgGA::AnimationPathManipulator::AnimationCompletedCallback * ( ::osgGA::AnimationPathManipulator::*getAnimationCompletedCallback_function_type )(  ) ;
            
            AnimationPathManipulator_exposer.def( 
                "getAnimationCompletedCallback"
                , getAnimationCompletedCallback_function_type( &::osgGA::AnimationPathManipulator::getAnimationCompletedCallback )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::AnimationPathManipulator::getAnimationCompletedCallback
        
            typedef ::osgGA::AnimationPathManipulator::AnimationCompletedCallback const * ( ::osgGA::AnimationPathManipulator::*getAnimationCompletedCallback_function_type )(  ) const;
            
            AnimationPathManipulator_exposer.def( 
                "getAnimationCompletedCallback"
                , getAnimationCompletedCallback_function_type( &::osgGA::AnimationPathManipulator::getAnimationCompletedCallback )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::AnimationPathManipulator::getAnimationPath
        
            typedef ::osg::AnimationPath * ( ::osgGA::AnimationPathManipulator::*getAnimationPath_function_type )(  ) ;
            
            AnimationPathManipulator_exposer.def( 
                "getAnimationPath"
                , getAnimationPath_function_type( &::osgGA::AnimationPathManipulator::getAnimationPath )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::AnimationPathManipulator::getAnimationPath
        
            typedef ::osg::AnimationPath const * ( ::osgGA::AnimationPathManipulator::*getAnimationPath_function_type )(  ) const;
            
            AnimationPathManipulator_exposer.def( 
                "getAnimationPath"
                , getAnimationPath_function_type( &::osgGA::AnimationPathManipulator::getAnimationPath )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::AnimationPathManipulator::getInverseMatrix
        
            typedef ::osg::Matrixd ( ::osgGA::AnimationPathManipulator::*getInverseMatrix_function_type )(  ) const;
            typedef ::osg::Matrixd ( AnimationPathManipulator_wrapper::*default_getInverseMatrix_function_type )(  ) const;
            
            AnimationPathManipulator_exposer.def( 
                "getInverseMatrix"
                , getInverseMatrix_function_type(&::osgGA::AnimationPathManipulator::getInverseMatrix)
                , default_getInverseMatrix_function_type(&AnimationPathManipulator_wrapper::default_getInverseMatrix) );
        
        }
        { //::osgGA::AnimationPathManipulator::getMatrix
        
            typedef ::osg::Matrixd ( ::osgGA::AnimationPathManipulator::*getMatrix_function_type )(  ) const;
            typedef ::osg::Matrixd ( AnimationPathManipulator_wrapper::*default_getMatrix_function_type )(  ) const;
            
            AnimationPathManipulator_exposer.def( 
                "getMatrix"
                , getMatrix_function_type(&::osgGA::AnimationPathManipulator::getMatrix)
                , default_getMatrix_function_type(&AnimationPathManipulator_wrapper::default_getMatrix) );
        
        }
        { //::osgGA::AnimationPathManipulator::getPrintOutTimingInfo
        
            typedef bool ( ::osgGA::AnimationPathManipulator::*getPrintOutTimingInfo_function_type )(  ) const;
            
            AnimationPathManipulator_exposer.def( 
                "getPrintOutTimingInfo"
                , getPrintOutTimingInfo_function_type( &::osgGA::AnimationPathManipulator::getPrintOutTimingInfo ) );
        
        }
        { //::osgGA::AnimationPathManipulator::getTimeOffset
        
            typedef double ( ::osgGA::AnimationPathManipulator::*getTimeOffset_function_type )(  ) const;
            
            AnimationPathManipulator_exposer.def( 
                "getTimeOffset"
                , getTimeOffset_function_type( &::osgGA::AnimationPathManipulator::getTimeOffset ) );
        
        }
        { //::osgGA::AnimationPathManipulator::getTimeScale
        
            typedef double ( ::osgGA::AnimationPathManipulator::*getTimeScale_function_type )(  ) const;
            
            AnimationPathManipulator_exposer.def( 
                "getTimeScale"
                , getTimeScale_function_type( &::osgGA::AnimationPathManipulator::getTimeScale ) );
        
        }
        { //::osgGA::AnimationPathManipulator::getUsage
        
            typedef void ( ::osgGA::AnimationPathManipulator::*getUsage_function_type )( ::osg::ApplicationUsage & ) const;
            typedef void ( AnimationPathManipulator_wrapper::*default_getUsage_function_type )( ::osg::ApplicationUsage & ) const;
            
            AnimationPathManipulator_exposer.def( 
                "getUsage"
                , getUsage_function_type(&::osgGA::AnimationPathManipulator::getUsage)
                , default_getUsage_function_type(&AnimationPathManipulator_wrapper::default_getUsage)
                , ( bp::arg("usage") ) );
        
        }
        { //::osgGA::AnimationPathManipulator::handle
        
            typedef boost::python::object ( *default_handle_function_type )( ::osgGA::AnimationPathManipulator &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter & );
            
            AnimationPathManipulator_exposer.def( 
                "handle"
                , default_handle_function_type( &AnimationPathManipulator_wrapper::default_handle )
                , ( bp::arg("inst"), bp::arg("ea"), bp::arg("us") ) );
        
        }
        { //::osgGA::AnimationPathManipulator::home
        
            typedef void ( *default_home_function_type )( ::osgGA::AnimationPathManipulator &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter & );
            
            AnimationPathManipulator_exposer.def( 
                "home"
                , default_home_function_type( &AnimationPathManipulator_wrapper::default_home_8b90fe71e169056844e8445ccc06de9c )
                , ( bp::arg("inst"), bp::arg("ea"), bp::arg("us") ) );
        
        }
        { //::osgGA::AnimationPathManipulator::home
        
            typedef void ( ::osgGA::AnimationPathManipulator::*home_function_type )( double ) ;
            typedef void ( AnimationPathManipulator_wrapper::*default_home_function_type )( double ) ;
            
            AnimationPathManipulator_exposer.def( 
                "home"
                , home_function_type(&::osgGA::AnimationPathManipulator::home)
                , default_home_function_type(&AnimationPathManipulator_wrapper::default_home)
                , ( bp::arg("currentTime") ) );
        
        }
        { //::osgGA::AnimationPathManipulator::init
        
            typedef void ( *default_init_function_type )( ::osgGA::AnimationPathManipulator &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter & );
            
            AnimationPathManipulator_exposer.def( 
                "init"
                , default_init_function_type( &AnimationPathManipulator_wrapper::default_init )
                , ( bp::arg("inst"), bp::arg("ea"), bp::arg("us") ) );
        
        }
        { //::osgGA::AnimationPathManipulator::setAnimationCompletedCallback
        
            typedef void ( ::osgGA::AnimationPathManipulator::*setAnimationCompletedCallback_function_type )( ::osgGA::AnimationPathManipulator::AnimationCompletedCallback * ) ;
            
            AnimationPathManipulator_exposer.def( 
                "setAnimationCompletedCallback"
                , setAnimationCompletedCallback_function_type( &::osgGA::AnimationPathManipulator::setAnimationCompletedCallback )
                , ( bp::arg("acc") ) );
        
        }
        { //::osgGA::AnimationPathManipulator::setAnimationPath
        
            typedef void ( ::osgGA::AnimationPathManipulator::*setAnimationPath_function_type )( ::osg::AnimationPath * ) ;
            
            AnimationPathManipulator_exposer.def( 
                "setAnimationPath"
                , setAnimationPath_function_type( &::osgGA::AnimationPathManipulator::setAnimationPath )
                , ( bp::arg("animationPath") ) );
        
        }
        { //::osgGA::AnimationPathManipulator::setByInverseMatrix
        
            typedef void ( ::osgGA::AnimationPathManipulator::*setByInverseMatrix_function_type )( ::osg::Matrixd const & ) ;
            typedef void ( AnimationPathManipulator_wrapper::*default_setByInverseMatrix_function_type )( ::osg::Matrixd const & ) ;
            
            AnimationPathManipulator_exposer.def( 
                "setByInverseMatrix"
                , setByInverseMatrix_function_type(&::osgGA::AnimationPathManipulator::setByInverseMatrix)
                , default_setByInverseMatrix_function_type(&AnimationPathManipulator_wrapper::default_setByInverseMatrix)
                , ( bp::arg("matrix") ) );
        
        }
        { //::osgGA::AnimationPathManipulator::setByMatrix
        
            typedef void ( ::osgGA::AnimationPathManipulator::*setByMatrix_function_type )( ::osg::Matrixd const & ) ;
            typedef void ( AnimationPathManipulator_wrapper::*default_setByMatrix_function_type )( ::osg::Matrixd const & ) ;
            
            AnimationPathManipulator_exposer.def( 
                "setByMatrix"
                , setByMatrix_function_type(&::osgGA::AnimationPathManipulator::setByMatrix)
                , default_setByMatrix_function_type(&AnimationPathManipulator_wrapper::default_setByMatrix)
                , ( bp::arg("matrix") ) );
        
        }
        { //::osgGA::AnimationPathManipulator::setPrintOutTimingInfo
        
            typedef void ( ::osgGA::AnimationPathManipulator::*setPrintOutTimingInfo_function_type )( bool ) ;
            
            AnimationPathManipulator_exposer.def( 
                "setPrintOutTimingInfo"
                , setPrintOutTimingInfo_function_type( &::osgGA::AnimationPathManipulator::setPrintOutTimingInfo )
                , ( bp::arg("printOutTimingInfo") ) );
        
        }
        { //::osgGA::AnimationPathManipulator::setTimeOffset
        
            typedef void ( ::osgGA::AnimationPathManipulator::*setTimeOffset_function_type )( double ) ;
            
            AnimationPathManipulator_exposer.def( 
                "setTimeOffset"
                , setTimeOffset_function_type( &::osgGA::AnimationPathManipulator::setTimeOffset )
                , ( bp::arg("o") ) );
        
        }
        { //::osgGA::AnimationPathManipulator::setTimeScale
        
            typedef void ( ::osgGA::AnimationPathManipulator::*setTimeScale_function_type )( double ) ;
            
            AnimationPathManipulator_exposer.def( 
                "setTimeScale"
                , setTimeScale_function_type( &::osgGA::AnimationPathManipulator::setTimeScale )
                , ( bp::arg("s") ) );
        
        }
        { //::osgGA::AnimationPathManipulator::valid
        
            typedef bool ( ::osgGA::AnimationPathManipulator::*valid_function_type )(  ) const;
            
            AnimationPathManipulator_exposer.def( 
                "valid"
                , valid_function_type( &::osgGA::AnimationPathManipulator::valid ) );
        
        }
        { //::osgGA::GUIEventHandler::clone
        
            typedef ::osg::Object * ( ::osgGA::GUIEventHandler::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( AnimationPathManipulator_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            AnimationPathManipulator_exposer.def( 
                "clone"
                , clone_function_type(&::osgGA::GUIEventHandler::clone)
                , default_clone_function_type(&AnimationPathManipulator_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgGA::GUIEventHandler::cloneType
        
            typedef ::osg::Object * ( ::osgGA::GUIEventHandler::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( AnimationPathManipulator_wrapper::*default_cloneType_function_type )(  ) const;
            
            AnimationPathManipulator_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgGA::GUIEventHandler::cloneType)
                , default_cloneType_function_type(&AnimationPathManipulator_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgGA::CameraManipulator::computeHomePosition
        
            typedef void ( ::osgGA::CameraManipulator::*computeHomePosition_function_type )( ::osg::Camera const *,bool ) ;
            typedef void ( AnimationPathManipulator_wrapper::*default_computeHomePosition_function_type )( ::osg::Camera const *,bool ) ;
            
            AnimationPathManipulator_exposer.def( 
                "computeHomePosition"
                , computeHomePosition_function_type(&::osgGA::CameraManipulator::computeHomePosition)
                , default_computeHomePosition_function_type(&AnimationPathManipulator_wrapper::default_computeHomePosition)
                , ( bp::arg("camera")=0l, bp::arg("useBoundingBox")=(bool)(false) ) );
        
        }
        { //::osgGA::GUIEventHandler::event
        
            typedef void ( ::osgGA::GUIEventHandler::*event_function_type )( ::osg::NodeVisitor *,::osg::Drawable * ) ;
            typedef void ( AnimationPathManipulator_wrapper::*default_event_function_type )( ::osg::NodeVisitor *,::osg::Drawable * ) ;
            
            AnimationPathManipulator_exposer.def( 
                "event"
                , event_function_type(&::osgGA::GUIEventHandler::event)
                , default_event_function_type(&AnimationPathManipulator_wrapper::default_event)
                , ( bp::arg("nv"), bp::arg("drawable") ) );
        
        }
        { //::osgGA::CameraManipulator::getFusionDistanceMode
        
            typedef ::osgUtil::SceneView::FusionDistanceMode ( ::osgGA::CameraManipulator::*getFusionDistanceMode_function_type )(  ) const;
            typedef ::osgUtil::SceneView::FusionDistanceMode ( AnimationPathManipulator_wrapper::*default_getFusionDistanceMode_function_type )(  ) const;
            
            AnimationPathManipulator_exposer.def( 
                "getFusionDistanceMode"
                , getFusionDistanceMode_function_type(&::osgGA::CameraManipulator::getFusionDistanceMode)
                , default_getFusionDistanceMode_function_type(&AnimationPathManipulator_wrapper::default_getFusionDistanceMode) );
        
        }
        { //::osgGA::CameraManipulator::getFusionDistanceValue
        
            typedef float ( ::osgGA::CameraManipulator::*getFusionDistanceValue_function_type )(  ) const;
            typedef float ( AnimationPathManipulator_wrapper::*default_getFusionDistanceValue_function_type )(  ) const;
            
            AnimationPathManipulator_exposer.def( 
                "getFusionDistanceValue"
                , getFusionDistanceValue_function_type(&::osgGA::CameraManipulator::getFusionDistanceValue)
                , default_getFusionDistanceValue_function_type(&AnimationPathManipulator_wrapper::default_getFusionDistanceValue) );
        
        }
        { //::osgGA::CameraManipulator::getHomePosition
        
            typedef void ( ::osgGA::CameraManipulator::*getHomePosition_function_type )( ::osg::Vec3d &,::osg::Vec3d &,::osg::Vec3d & ) const;
            typedef void ( AnimationPathManipulator_wrapper::*default_getHomePosition_function_type )( ::osg::Vec3d &,::osg::Vec3d &,::osg::Vec3d & ) const;
            
            AnimationPathManipulator_exposer.def( 
                "getHomePosition"
                , getHomePosition_function_type(&::osgGA::CameraManipulator::getHomePosition)
                , default_getHomePosition_function_type(&AnimationPathManipulator_wrapper::default_getHomePosition)
                , ( bp::arg("eye"), bp::arg("center"), bp::arg("up") ) );
        
        }
        { //::osgGA::CameraManipulator::getNode
        
            typedef ::osg::Node const * ( ::osgGA::CameraManipulator::*getNode_function_type )(  ) const;
            typedef ::osg::Node const * ( AnimationPathManipulator_wrapper::*default_getNode_function_type )(  ) const;
            
            AnimationPathManipulator_exposer.def( 
                "getNode"
                , getNode_function_type(&::osgGA::CameraManipulator::getNode)
                , default_getNode_function_type(&AnimationPathManipulator_wrapper::default_getNode)
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::CameraManipulator::getNode
        
            typedef ::osg::Node * ( ::osgGA::CameraManipulator::*getNode_function_type )(  ) ;
            typedef ::osg::Node * ( AnimationPathManipulator_wrapper::*default_getNode_function_type )(  ) ;
            
            AnimationPathManipulator_exposer.def( 
                "getNode"
                , getNode_function_type(&::osgGA::CameraManipulator::getNode)
                , default_getNode_function_type(&AnimationPathManipulator_wrapper::default_getNode)
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::GUIEventHandler::handle
        
            typedef boost::python::object ( *default_handle_function_type )( ::osgGA::GUIEventHandler &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter &,::osg::Object *,::osg::NodeVisitor * );
            
            AnimationPathManipulator_exposer.def( 
                "handle"
                , default_handle_function_type( &AnimationPathManipulator_wrapper::default_handle_d0ba65b51c8a2afc5afff00aad1b91b3 )
                , ( bp::arg("inst"), bp::arg("ea"), bp::arg("aa"), bp::arg("arg2"), bp::arg("arg3") )
                , "\n Handle events, return true if handled, false otherwise.\n" );
        
        }
        { //::osgGA::GUIEventHandler::isSameKindAs
        
            typedef bool ( ::osgGA::GUIEventHandler::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( AnimationPathManipulator_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            AnimationPathManipulator_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgGA::GUIEventHandler::isSameKindAs)
                , default_isSameKindAs_function_type(&AnimationPathManipulator_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgGA::GUIEventHandler::libraryName
        
            typedef char const * ( ::osgGA::GUIEventHandler::*libraryName_function_type )(  ) const;
            typedef char const * ( AnimationPathManipulator_wrapper::*default_libraryName_function_type )(  ) const;
            
            AnimationPathManipulator_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgGA::GUIEventHandler::libraryName)
                , default_libraryName_function_type(&AnimationPathManipulator_wrapper::default_libraryName) );
        
        }
        { //::osgGA::CameraManipulator::setAutoComputeHomePosition
        
            typedef void ( ::osgGA::CameraManipulator::*setAutoComputeHomePosition_function_type )( bool ) ;
            typedef void ( AnimationPathManipulator_wrapper::*default_setAutoComputeHomePosition_function_type )( bool ) ;
            
            AnimationPathManipulator_exposer.def( 
                "setAutoComputeHomePosition"
                , setAutoComputeHomePosition_function_type(&::osgGA::CameraManipulator::setAutoComputeHomePosition)
                , default_setAutoComputeHomePosition_function_type(&AnimationPathManipulator_wrapper::default_setAutoComputeHomePosition)
                , ( bp::arg("flag") ) );
        
        }
        { //::osgGA::CameraManipulator::setCoordinateFrameCallback
        
            typedef void ( ::osgGA::CameraManipulator::*setCoordinateFrameCallback_function_type )( ::osgGA::CameraManipulator::CoordinateFrameCallback * ) ;
            typedef void ( AnimationPathManipulator_wrapper::*default_setCoordinateFrameCallback_function_type )( ::osgGA::CameraManipulator::CoordinateFrameCallback * ) ;
            
            AnimationPathManipulator_exposer.def( 
                "setCoordinateFrameCallback"
                , setCoordinateFrameCallback_function_type(&::osgGA::CameraManipulator::setCoordinateFrameCallback)
                , default_setCoordinateFrameCallback_function_type(&AnimationPathManipulator_wrapper::default_setCoordinateFrameCallback)
                , ( bp::arg("cb") ) );
        
        }
        { //::osgGA::CameraManipulator::setHomePosition
        
            typedef void ( ::osgGA::CameraManipulator::*setHomePosition_function_type )( ::osg::Vec3d const &,::osg::Vec3d const &,::osg::Vec3d const &,bool ) ;
            typedef void ( AnimationPathManipulator_wrapper::*default_setHomePosition_function_type )( ::osg::Vec3d const &,::osg::Vec3d const &,::osg::Vec3d const &,bool ) ;
            
            AnimationPathManipulator_exposer.def( 
                "setHomePosition"
                , setHomePosition_function_type(&::osgGA::CameraManipulator::setHomePosition)
                , default_setHomePosition_function_type(&AnimationPathManipulator_wrapper::default_setHomePosition)
                , ( bp::arg("eye"), bp::arg("center"), bp::arg("up"), bp::arg("autoComputeHomePosition")=(bool)(false) ) );
        
        }
        { //::osgGA::CameraManipulator::setNode
        
            typedef void ( ::osgGA::CameraManipulator::*setNode_function_type )( ::osg::Node * ) ;
            typedef void ( AnimationPathManipulator_wrapper::*default_setNode_function_type )( ::osg::Node * ) ;
            
            AnimationPathManipulator_exposer.def( 
                "setNode"
                , setNode_function_type(&::osgGA::CameraManipulator::setNode)
                , default_setNode_function_type(&AnimationPathManipulator_wrapper::default_setNode)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgGA::CameraManipulator::updateCamera
        
            typedef void ( ::osgGA::CameraManipulator::*updateCamera_function_type )( ::osg::Camera & ) ;
            typedef void ( AnimationPathManipulator_wrapper::*default_updateCamera_function_type )( ::osg::Camera & ) ;
            
            AnimationPathManipulator_exposer.def( 
                "updateCamera"
                , updateCamera_function_type(&::osgGA::CameraManipulator::updateCamera)
                , default_updateCamera_function_type(&AnimationPathManipulator_wrapper::default_updateCamera)
                , ( bp::arg("camera") ) );
        
        }
    }

}
