// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "__convenience.pypp.hpp"
#include "wrap_osgGA.h"
#include "wrap_referenced.h"
#include "StateSetManipulator.pypp.hpp"

namespace bp = boost::python;

struct StateSetManipulator_wrapper : osgGA::StateSetManipulator, bp::wrapper< osgGA::StateSetManipulator > {

    StateSetManipulator_wrapper(::osg::StateSet * stateset=0 )
    : osgGA::StateSetManipulator( boost::python::ptr(stateset) )
      , bp::wrapper< osgGA::StateSetManipulator >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgGA::StateSetManipulator::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgGA::StateSetManipulator::className( );
    }

    virtual ::osg::StateSet * getStateSet(  ) {
        if( bp::override func_getStateSet = this->get_override( "getStateSet" ) )
            return func_getStateSet(  );
        else{
            return this->osgGA::StateSetManipulator::getStateSet(  );
        }
    }
    
    ::osg::StateSet * default_getStateSet(  ) {
        return osgGA::StateSetManipulator::getStateSet( );
    }

    virtual ::osg::StateSet const * getStateSet(  ) const  {
        if( bp::override func_getStateSet = this->get_override( "getStateSet" ) )
            return func_getStateSet(  );
        else{
            return this->osgGA::StateSetManipulator::getStateSet(  );
        }
    }
    
    ::osg::StateSet const * default_getStateSet(  ) const  {
        return osgGA::StateSetManipulator::getStateSet( );
    }

    virtual void getUsage( ::osg::ApplicationUsage & usage ) const  {
        if( bp::override func_getUsage = this->get_override( "getUsage" ) )
            func_getUsage( boost::ref(usage) );
        else{
            this->osgGA::StateSetManipulator::getUsage( boost::ref(usage) );
        }
    }
    
    void default_getUsage( ::osg::ApplicationUsage & usage ) const  {
        osgGA::StateSetManipulator::getUsage( boost::ref(usage) );
    }

    virtual bool handle( ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & us ) {
        namespace bpl = boost::python;
        if( bpl::override func_handle = this->get_override( "handle" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_handle.ptr(), ea, us );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return osgGA::StateSetManipulator::handle( boost::ref(ea), boost::ref(us) );
        }
    }
    
    static boost::python::object default_handle( ::osgGA::StateSetManipulator & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & us ){
        bool result;
        if( dynamic_cast< StateSetManipulator_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::osgGA::StateSetManipulator::handle(ea, us);
        }
        else{
            result = inst.handle(ea, us);
        }
        return bp::object( result );
    }

    virtual void setStateSet( ::osg::StateSet * arg0 ) {
        if( bp::override func_setStateSet = this->get_override( "setStateSet" ) )
            func_setStateSet( boost::python::ptr(arg0) );
        else{
            this->osgGA::StateSetManipulator::setStateSet( boost::python::ptr(arg0) );
        }
    }
    
    void default_setStateSet( ::osg::StateSet * arg0 ) {
        osgGA::StateSetManipulator::setStateSet( boost::python::ptr(arg0) );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgGA::GUIEventHandler::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgGA::GUIEventHandler::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgGA::GUIEventHandler::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgGA::GUIEventHandler::cloneType( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual void event( ::osg::NodeVisitor * nv, ::osg::Drawable * drawable ) {
        if( bp::override func_event = this->get_override( "event" ) )
            func_event( boost::python::ptr(nv), boost::python::ptr(drawable) );
        else{
            this->osgGA::GUIEventHandler::event( boost::python::ptr(nv), boost::python::ptr(drawable) );
        }
    }
    
    void default_event( ::osg::NodeVisitor * nv, ::osg::Drawable * drawable ) {
        osgGA::GUIEventHandler::event( boost::python::ptr(nv), boost::python::ptr(drawable) );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool handle( ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & aa, ::osg::Object * arg2, ::osg::NodeVisitor * arg3 ) {
        namespace bpl = boost::python;
        if( bpl::override func_handle = this->get_override( "handle" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_handle.ptr(), ea, aa, arg2, arg3 );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return osgGA::GUIEventHandler::handle( boost::ref(ea), boost::ref(aa), boost::python::ptr(arg2), boost::python::ptr(arg3) );
        }
    }
    
    static boost::python::object default_handle_d0ba65b51c8a2afc5afff00aad1b91b3( ::osgGA::GUIEventHandler & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & aa, ::osg::Object * arg2, ::osg::NodeVisitor * arg3 ){
        bool result;
        if( dynamic_cast< StateSetManipulator_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::osgGA::GUIEventHandler::handle(ea, aa, arg2, arg3);
        }
        else{
            result = inst.handle(ea, aa, arg2, arg3);
        }
        return bp::object( result );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgGA::GUIEventHandler::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgGA::GUIEventHandler::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgGA::GUIEventHandler::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgGA::GUIEventHandler::libraryName( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_StateSetManipulator_class(){

    { //::osgGA::StateSetManipulator
        typedef bp::class_< StateSetManipulator_wrapper, bp::bases< osgGA::GUIEventHandler >, osg::ref_ptr< StateSetManipulator_wrapper >, boost::noncopyable > StateSetManipulator_exposer_t;
        StateSetManipulator_exposer_t StateSetManipulator_exposer = StateSetManipulator_exposer_t( "StateSetManipulator", "\nExperimental class, not been looked at for a while, but which will\nbe returned to at some point :-\\n", bp::no_init );
        bp::scope StateSetManipulator_scope( StateSetManipulator_exposer );
        StateSetManipulator_exposer.def( bp::init< bp::optional< osg::StateSet * > >(( bp::arg("stateset")=bp::object() ), "\nExperimental class, not been looked at for a while, but which will\nbe returned to at some point :-\\n") );
        bp::implicitly_convertible< osg::StateSet *, osgGA::StateSetManipulator >();
        { //::osgGA::StateSetManipulator::className
        
            typedef char const * ( ::osgGA::StateSetManipulator::*className_function_type )(  ) const;
            typedef char const * ( StateSetManipulator_wrapper::*default_className_function_type )(  ) const;
            
            StateSetManipulator_exposer.def( 
                "className"
                , className_function_type(&::osgGA::StateSetManipulator::className)
                , default_className_function_type(&StateSetManipulator_wrapper::default_className) );
        
        }
        { //::osgGA::StateSetManipulator::cyclePolygonMode
        
            typedef void ( ::osgGA::StateSetManipulator::*cyclePolygonMode_function_type )(  ) ;
            
            StateSetManipulator_exposer.def( 
                "cyclePolygonMode"
                , cyclePolygonMode_function_type( &::osgGA::StateSetManipulator::cyclePolygonMode ) );
        
        }
        { //::osgGA::StateSetManipulator::getBackfaceEnabled
        
            typedef bool ( ::osgGA::StateSetManipulator::*getBackfaceEnabled_function_type )(  ) const;
            
            StateSetManipulator_exposer.def( 
                "getBackfaceEnabled"
                , getBackfaceEnabled_function_type( &::osgGA::StateSetManipulator::getBackfaceEnabled ) );
        
        }
        { //::osgGA::StateSetManipulator::getKeyEventCyclePolygonMode
        
            typedef int ( ::osgGA::StateSetManipulator::*getKeyEventCyclePolygonMode_function_type )(  ) const;
            
            StateSetManipulator_exposer.def( 
                "getKeyEventCyclePolygonMode"
                , getKeyEventCyclePolygonMode_function_type( &::osgGA::StateSetManipulator::getKeyEventCyclePolygonMode ) );
        
        }
        { //::osgGA::StateSetManipulator::getKeyEventToggleBackfaceCulling
        
            typedef int ( ::osgGA::StateSetManipulator::*getKeyEventToggleBackfaceCulling_function_type )(  ) const;
            
            StateSetManipulator_exposer.def( 
                "getKeyEventToggleBackfaceCulling"
                , getKeyEventToggleBackfaceCulling_function_type( &::osgGA::StateSetManipulator::getKeyEventToggleBackfaceCulling ) );
        
        }
        { //::osgGA::StateSetManipulator::getKeyEventToggleLighting
        
            typedef int ( ::osgGA::StateSetManipulator::*getKeyEventToggleLighting_function_type )(  ) const;
            
            StateSetManipulator_exposer.def( 
                "getKeyEventToggleLighting"
                , getKeyEventToggleLighting_function_type( &::osgGA::StateSetManipulator::getKeyEventToggleLighting ) );
        
        }
        { //::osgGA::StateSetManipulator::getKeyEventToggleTexturing
        
            typedef int ( ::osgGA::StateSetManipulator::*getKeyEventToggleTexturing_function_type )(  ) const;
            
            StateSetManipulator_exposer.def( 
                "getKeyEventToggleTexturing"
                , getKeyEventToggleTexturing_function_type( &::osgGA::StateSetManipulator::getKeyEventToggleTexturing ) );
        
        }
        { //::osgGA::StateSetManipulator::getLightingEnabled
        
            typedef bool ( ::osgGA::StateSetManipulator::*getLightingEnabled_function_type )(  ) const;
            
            StateSetManipulator_exposer.def( 
                "getLightingEnabled"
                , getLightingEnabled_function_type( &::osgGA::StateSetManipulator::getLightingEnabled ) );
        
        }
        { //::osgGA::StateSetManipulator::getMaximumNumOfTextureUnits
        
            typedef unsigned int ( ::osgGA::StateSetManipulator::*getMaximumNumOfTextureUnits_function_type )(  ) const;
            
            StateSetManipulator_exposer.def( 
                "getMaximumNumOfTextureUnits"
                , getMaximumNumOfTextureUnits_function_type( &::osgGA::StateSetManipulator::getMaximumNumOfTextureUnits ) );
        
        }
        { //::osgGA::StateSetManipulator::getPolygonMode
        
            typedef ::osg::PolygonMode::Mode ( ::osgGA::StateSetManipulator::*getPolygonMode_function_type )(  ) const;
            
            StateSetManipulator_exposer.def( 
                "getPolygonMode"
                , getPolygonMode_function_type( &::osgGA::StateSetManipulator::getPolygonMode ) );
        
        }
        { //::osgGA::StateSetManipulator::getStateSet
        
            typedef ::osg::StateSet * ( ::osgGA::StateSetManipulator::*getStateSet_function_type )(  ) ;
            typedef ::osg::StateSet * ( StateSetManipulator_wrapper::*default_getStateSet_function_type )(  ) ;
            
            StateSetManipulator_exposer.def( 
                "getStateSet"
                , getStateSet_function_type(&::osgGA::StateSetManipulator::getStateSet)
                , default_getStateSet_function_type(&StateSetManipulator_wrapper::default_getStateSet)
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::StateSetManipulator::getStateSet
        
            typedef ::osg::StateSet const * ( ::osgGA::StateSetManipulator::*getStateSet_function_type )(  ) const;
            typedef ::osg::StateSet const * ( StateSetManipulator_wrapper::*default_getStateSet_function_type )(  ) const;
            
            StateSetManipulator_exposer.def( 
                "getStateSet"
                , getStateSet_function_type(&::osgGA::StateSetManipulator::getStateSet)
                , default_getStateSet_function_type(&StateSetManipulator_wrapper::default_getStateSet)
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::StateSetManipulator::getTextureEnabled
        
            typedef bool ( ::osgGA::StateSetManipulator::*getTextureEnabled_function_type )(  ) const;
            
            StateSetManipulator_exposer.def( 
                "getTextureEnabled"
                , getTextureEnabled_function_type( &::osgGA::StateSetManipulator::getTextureEnabled ) );
        
        }
        { //::osgGA::StateSetManipulator::getUsage
        
            typedef void ( ::osgGA::StateSetManipulator::*getUsage_function_type )( ::osg::ApplicationUsage & ) const;
            typedef void ( StateSetManipulator_wrapper::*default_getUsage_function_type )( ::osg::ApplicationUsage & ) const;
            
            StateSetManipulator_exposer.def( 
                "getUsage"
                , getUsage_function_type(&::osgGA::StateSetManipulator::getUsage)
                , default_getUsage_function_type(&StateSetManipulator_wrapper::default_getUsage)
                , ( bp::arg("usage") ) );
        
        }
        { //::osgGA::StateSetManipulator::handle
        
            typedef boost::python::object ( *default_handle_function_type )( ::osgGA::StateSetManipulator &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter & );
            
            StateSetManipulator_exposer.def( 
                "handle"
                , default_handle_function_type( &StateSetManipulator_wrapper::default_handle )
                , ( bp::arg("inst"), bp::arg("ea"), bp::arg("us") )
                , "\n Handle events, return true if handled, false otherwise.\n" );
        
        }
        { //::osgGA::StateSetManipulator::setBackfaceEnabled
        
            typedef void ( ::osgGA::StateSetManipulator::*setBackfaceEnabled_function_type )( bool ) ;
            
            StateSetManipulator_exposer.def( 
                "setBackfaceEnabled"
                , setBackfaceEnabled_function_type( &::osgGA::StateSetManipulator::setBackfaceEnabled )
                , ( bp::arg("newbackface") ) );
        
        }
        { //::osgGA::StateSetManipulator::setKeyEventCyclePolygonMode
        
            typedef void ( ::osgGA::StateSetManipulator::*setKeyEventCyclePolygonMode_function_type )( int ) ;
            
            StateSetManipulator_exposer.def( 
                "setKeyEventCyclePolygonMode"
                , setKeyEventCyclePolygonMode_function_type( &::osgGA::StateSetManipulator::setKeyEventCyclePolygonMode )
                , ( bp::arg("key") ) );
        
        }
        { //::osgGA::StateSetManipulator::setKeyEventToggleBackfaceCulling
        
            typedef void ( ::osgGA::StateSetManipulator::*setKeyEventToggleBackfaceCulling_function_type )( int ) ;
            
            StateSetManipulator_exposer.def( 
                "setKeyEventToggleBackfaceCulling"
                , setKeyEventToggleBackfaceCulling_function_type( &::osgGA::StateSetManipulator::setKeyEventToggleBackfaceCulling )
                , ( bp::arg("key") ) );
        
        }
        { //::osgGA::StateSetManipulator::setKeyEventToggleLighting
        
            typedef void ( ::osgGA::StateSetManipulator::*setKeyEventToggleLighting_function_type )( int ) ;
            
            StateSetManipulator_exposer.def( 
                "setKeyEventToggleLighting"
                , setKeyEventToggleLighting_function_type( &::osgGA::StateSetManipulator::setKeyEventToggleLighting )
                , ( bp::arg("key") ) );
        
        }
        { //::osgGA::StateSetManipulator::setKeyEventToggleTexturing
        
            typedef void ( ::osgGA::StateSetManipulator::*setKeyEventToggleTexturing_function_type )( int ) ;
            
            StateSetManipulator_exposer.def( 
                "setKeyEventToggleTexturing"
                , setKeyEventToggleTexturing_function_type( &::osgGA::StateSetManipulator::setKeyEventToggleTexturing )
                , ( bp::arg("key") ) );
        
        }
        { //::osgGA::StateSetManipulator::setLightingEnabled
        
            typedef void ( ::osgGA::StateSetManipulator::*setLightingEnabled_function_type )( bool ) ;
            
            StateSetManipulator_exposer.def( 
                "setLightingEnabled"
                , setLightingEnabled_function_type( &::osgGA::StateSetManipulator::setLightingEnabled )
                , ( bp::arg("newlighting") ) );
        
        }
        { //::osgGA::StateSetManipulator::setMaximumNumOfTextureUnits
        
            typedef void ( ::osgGA::StateSetManipulator::*setMaximumNumOfTextureUnits_function_type )( unsigned int ) ;
            
            StateSetManipulator_exposer.def( 
                "setMaximumNumOfTextureUnits"
                , setMaximumNumOfTextureUnits_function_type( &::osgGA::StateSetManipulator::setMaximumNumOfTextureUnits )
                , ( bp::arg("i") ) );
        
        }
        { //::osgGA::StateSetManipulator::setPolygonMode
        
            typedef void ( ::osgGA::StateSetManipulator::*setPolygonMode_function_type )( ::osg::PolygonMode::Mode ) ;
            
            StateSetManipulator_exposer.def( 
                "setPolygonMode"
                , setPolygonMode_function_type( &::osgGA::StateSetManipulator::setPolygonMode )
                , ( bp::arg("newpolygonmode") ) );
        
        }
        { //::osgGA::StateSetManipulator::setStateSet
        
            typedef void ( ::osgGA::StateSetManipulator::*setStateSet_function_type )( ::osg::StateSet * ) ;
            typedef void ( StateSetManipulator_wrapper::*default_setStateSet_function_type )( ::osg::StateSet * ) ;
            
            StateSetManipulator_exposer.def( 
                "setStateSet"
                , setStateSet_function_type(&::osgGA::StateSetManipulator::setStateSet)
                , default_setStateSet_function_type(&StateSetManipulator_wrapper::default_setStateSet)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgGA::StateSetManipulator::setTextureEnabled
        
            typedef void ( ::osgGA::StateSetManipulator::*setTextureEnabled_function_type )( bool ) ;
            
            StateSetManipulator_exposer.def( 
                "setTextureEnabled"
                , setTextureEnabled_function_type( &::osgGA::StateSetManipulator::setTextureEnabled )
                , ( bp::arg("newtexture") ) );
        
        }
        { //::osgGA::GUIEventHandler::clone
        
            typedef ::osg::Object * ( ::osgGA::GUIEventHandler::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( StateSetManipulator_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            StateSetManipulator_exposer.def( 
                "clone"
                , clone_function_type(&::osgGA::GUIEventHandler::clone)
                , default_clone_function_type(&StateSetManipulator_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgGA::GUIEventHandler::cloneType
        
            typedef ::osg::Object * ( ::osgGA::GUIEventHandler::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( StateSetManipulator_wrapper::*default_cloneType_function_type )(  ) const;
            
            StateSetManipulator_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgGA::GUIEventHandler::cloneType)
                , default_cloneType_function_type(&StateSetManipulator_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgGA::GUIEventHandler::event
        
            typedef void ( ::osgGA::GUIEventHandler::*event_function_type )( ::osg::NodeVisitor *,::osg::Drawable * ) ;
            typedef void ( StateSetManipulator_wrapper::*default_event_function_type )( ::osg::NodeVisitor *,::osg::Drawable * ) ;
            
            StateSetManipulator_exposer.def( 
                "event"
                , event_function_type(&::osgGA::GUIEventHandler::event)
                , default_event_function_type(&StateSetManipulator_wrapper::default_event)
                , ( bp::arg("nv"), bp::arg("drawable") ) );
        
        }
        { //::osgGA::GUIEventHandler::handle
        
            typedef boost::python::object ( *default_handle_function_type )( ::osgGA::GUIEventHandler &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter &,::osg::Object *,::osg::NodeVisitor * );
            
            StateSetManipulator_exposer.def( 
                "handle"
                , default_handle_function_type( &StateSetManipulator_wrapper::default_handle_d0ba65b51c8a2afc5afff00aad1b91b3 )
                , ( bp::arg("inst"), bp::arg("ea"), bp::arg("aa"), bp::arg("arg2"), bp::arg("arg3") )
                , "\n Handle events, return true if handled, false otherwise.\n" );
        
        }
        { //::osgGA::GUIEventHandler::isSameKindAs
        
            typedef bool ( ::osgGA::GUIEventHandler::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( StateSetManipulator_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            StateSetManipulator_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgGA::GUIEventHandler::isSameKindAs)
                , default_isSameKindAs_function_type(&StateSetManipulator_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgGA::GUIEventHandler::libraryName
        
            typedef char const * ( ::osgGA::GUIEventHandler::*libraryName_function_type )(  ) const;
            typedef char const * ( StateSetManipulator_wrapper::*default_libraryName_function_type )(  ) const;
            
            StateSetManipulator_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgGA::GUIEventHandler::libraryName)
                , default_libraryName_function_type(&StateSetManipulator_wrapper::default_libraryName) );
        
        }
    }

}
