// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "__convenience.pypp.hpp"
#include "wrap_osgGA.h"
#include "wrap_referenced.h"
#include "KeySwitchMatrixManipulator.pypp.hpp"

namespace bp = boost::python;

struct KeySwitchMatrixManipulator_wrapper : osgGA::KeySwitchMatrixManipulator, bp::wrapper< osgGA::KeySwitchMatrixManipulator > {

    KeySwitchMatrixManipulator_wrapper()
    : osgGA::KeySwitchMatrixManipulator()
      , bp::wrapper< osgGA::KeySwitchMatrixManipulator >(){
        // null constructor
        
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgGA::KeySwitchMatrixManipulator::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgGA::KeySwitchMatrixManipulator::className( );
    }

    virtual void computeHomePosition(  ) {
        if( bp::override func_computeHomePosition = this->get_override( "computeHomePosition" ) )
            func_computeHomePosition(  );
        else{
            this->osgGA::KeySwitchMatrixManipulator::computeHomePosition(  );
        }
    }
    
    void default_computeHomePosition(  ) {
        osgGA::KeySwitchMatrixManipulator::computeHomePosition( );
    }

    virtual ::osgUtil::SceneView::FusionDistanceMode getFusionDistanceMode(  ) const  {
        if( bp::override func_getFusionDistanceMode = this->get_override( "getFusionDistanceMode" ) )
            return func_getFusionDistanceMode(  );
        else{
            return this->osgGA::KeySwitchMatrixManipulator::getFusionDistanceMode(  );
        }
    }
    
    ::osgUtil::SceneView::FusionDistanceMode default_getFusionDistanceMode(  ) const  {
        return osgGA::KeySwitchMatrixManipulator::getFusionDistanceMode( );
    }

    virtual float getFusionDistanceValue(  ) const  {
        if( bp::override func_getFusionDistanceValue = this->get_override( "getFusionDistanceValue" ) )
            return func_getFusionDistanceValue(  );
        else{
            return this->osgGA::KeySwitchMatrixManipulator::getFusionDistanceValue(  );
        }
    }
    
    float default_getFusionDistanceValue(  ) const  {
        return osgGA::KeySwitchMatrixManipulator::getFusionDistanceValue( );
    }

    virtual ::osg::Matrixd getInverseMatrix(  ) const  {
        if( bp::override func_getInverseMatrix = this->get_override( "getInverseMatrix" ) )
            return func_getInverseMatrix(  );
        else{
            return this->osgGA::KeySwitchMatrixManipulator::getInverseMatrix(  );
        }
    }
    
    ::osg::Matrixd default_getInverseMatrix(  ) const  {
        return osgGA::KeySwitchMatrixManipulator::getInverseMatrix( );
    }

    virtual ::osg::Matrixd getMatrix(  ) const  {
        if( bp::override func_getMatrix = this->get_override( "getMatrix" ) )
            return func_getMatrix(  );
        else{
            return this->osgGA::KeySwitchMatrixManipulator::getMatrix(  );
        }
    }
    
    ::osg::Matrixd default_getMatrix(  ) const  {
        return osgGA::KeySwitchMatrixManipulator::getMatrix( );
    }

    virtual ::osg::Node const * getNode(  ) const  {
        if( bp::override func_getNode = this->get_override( "getNode" ) )
            return func_getNode(  );
        else{
            return this->osgGA::KeySwitchMatrixManipulator::getNode(  );
        }
    }
    
    ::osg::Node const * default_getNode(  ) const  {
        return osgGA::KeySwitchMatrixManipulator::getNode( );
    }

    virtual ::osg::Node * getNode(  ) {
        if( bp::override func_getNode = this->get_override( "getNode" ) )
            return func_getNode(  );
        else{
            return this->osgGA::KeySwitchMatrixManipulator::getNode(  );
        }
    }
    
    ::osg::Node * default_getNode(  ) {
        return osgGA::KeySwitchMatrixManipulator::getNode( );
    }

    virtual void getUsage( ::osg::ApplicationUsage & usage ) const  {
        if( bp::override func_getUsage = this->get_override( "getUsage" ) )
            func_getUsage( boost::ref(usage) );
        else{
            this->osgGA::KeySwitchMatrixManipulator::getUsage( boost::ref(usage) );
        }
    }
    
    void default_getUsage( ::osg::ApplicationUsage & usage ) const  {
        osgGA::KeySwitchMatrixManipulator::getUsage( boost::ref(usage) );
    }

    virtual bool handle( ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & us ) {
        namespace bpl = boost::python;
        if( bpl::override func_handle = this->get_override( "handle" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_handle.ptr(), ea, us );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return osgGA::KeySwitchMatrixManipulator::handle( boost::ref(ea), boost::ref(us) );
        }
    }
    
    static boost::python::object default_handle( ::osgGA::KeySwitchMatrixManipulator & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & us ){
        bool result;
        if( dynamic_cast< KeySwitchMatrixManipulator_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::osgGA::KeySwitchMatrixManipulator::handle(ea, us);
        }
        else{
            result = inst.handle(ea, us);
        }
        return bp::object( result );
    }

    virtual void home( ::osgGA::GUIEventAdapter const & ee, ::osgGA::GUIActionAdapter & aa ) {
        namespace bpl = boost::python;
        if( bpl::override func_home = this->get_override( "home" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_home.ptr(), ee, aa );
        }
        else{
            osgGA::KeySwitchMatrixManipulator::home( boost::ref(ee), boost::ref(aa) );
        }
    }
    
    static void default_home( ::osgGA::KeySwitchMatrixManipulator & inst, ::osgGA::GUIEventAdapter & ee, ::osgGA::GUIActionAdapter & aa ){
        if( dynamic_cast< KeySwitchMatrixManipulator_wrapper * >( boost::addressof( inst ) ) ){
            inst.::osgGA::KeySwitchMatrixManipulator::home(ee, aa);
        }
        else{
            inst.home(ee, aa);
        }
    }

    virtual void init( ::osgGA::GUIEventAdapter const & ee, ::osgGA::GUIActionAdapter & aa ) {
        namespace bpl = boost::python;
        if( bpl::override func_init = this->get_override( "init" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_init.ptr(), ee, aa );
        }
        else{
            osgGA::KeySwitchMatrixManipulator::init( boost::ref(ee), boost::ref(aa) );
        }
    }
    
    static void default_init( ::osgGA::KeySwitchMatrixManipulator & inst, ::osgGA::GUIEventAdapter & ee, ::osgGA::GUIActionAdapter & aa ){
        if( dynamic_cast< KeySwitchMatrixManipulator_wrapper * >( boost::addressof( inst ) ) ){
            inst.::osgGA::KeySwitchMatrixManipulator::init(ee, aa);
        }
        else{
            inst.init(ee, aa);
        }
    }

    virtual void setAutoComputeHomePosition( bool flag ) {
        if( bp::override func_setAutoComputeHomePosition = this->get_override( "setAutoComputeHomePosition" ) )
            func_setAutoComputeHomePosition( flag );
        else{
            this->osgGA::KeySwitchMatrixManipulator::setAutoComputeHomePosition( flag );
        }
    }
    
    void default_setAutoComputeHomePosition( bool flag ) {
        osgGA::KeySwitchMatrixManipulator::setAutoComputeHomePosition( flag );
    }

    virtual void setByInverseMatrix( ::osg::Matrixd const & matrix ) {
        if( bp::override func_setByInverseMatrix = this->get_override( "setByInverseMatrix" ) )
            func_setByInverseMatrix( boost::ref(matrix) );
        else{
            this->osgGA::KeySwitchMatrixManipulator::setByInverseMatrix( boost::ref(matrix) );
        }
    }
    
    void default_setByInverseMatrix( ::osg::Matrixd const & matrix ) {
        osgGA::KeySwitchMatrixManipulator::setByInverseMatrix( boost::ref(matrix) );
    }

    virtual void setByMatrix( ::osg::Matrixd const & matrix ) {
        if( bp::override func_setByMatrix = this->get_override( "setByMatrix" ) )
            func_setByMatrix( boost::ref(matrix) );
        else{
            this->osgGA::KeySwitchMatrixManipulator::setByMatrix( boost::ref(matrix) );
        }
    }
    
    void default_setByMatrix( ::osg::Matrixd const & matrix ) {
        osgGA::KeySwitchMatrixManipulator::setByMatrix( boost::ref(matrix) );
    }

    virtual void setCoordinateFrameCallback( ::osgGA::CameraManipulator::CoordinateFrameCallback * cb ) {
        if( bp::override func_setCoordinateFrameCallback = this->get_override( "setCoordinateFrameCallback" ) )
            func_setCoordinateFrameCallback( boost::python::ptr(cb) );
        else{
            this->osgGA::KeySwitchMatrixManipulator::setCoordinateFrameCallback( boost::python::ptr(cb) );
        }
    }
    
    void default_setCoordinateFrameCallback( ::osgGA::CameraManipulator::CoordinateFrameCallback * cb ) {
        osgGA::KeySwitchMatrixManipulator::setCoordinateFrameCallback( boost::python::ptr(cb) );
    }

    virtual void setHomePosition( ::osg::Vec3d const & eye, ::osg::Vec3d const & center, ::osg::Vec3d const & up, bool autoComputeHomePosition=false ) {
        if( bp::override func_setHomePosition = this->get_override( "setHomePosition" ) )
            func_setHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up), autoComputeHomePosition );
        else{
            this->osgGA::KeySwitchMatrixManipulator::setHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up), autoComputeHomePosition );
        }
    }
    
    void default_setHomePosition( ::osg::Vec3d const & eye, ::osg::Vec3d const & center, ::osg::Vec3d const & up, bool autoComputeHomePosition=false ) {
        osgGA::KeySwitchMatrixManipulator::setHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up), autoComputeHomePosition );
    }

    virtual void setNode( ::osg::Node * n ) {
        if( bp::override func_setNode = this->get_override( "setNode" ) )
            func_setNode( boost::python::ptr(n) );
        else{
            this->osgGA::KeySwitchMatrixManipulator::setNode( boost::python::ptr(n) );
        }
    }
    
    void default_setNode( ::osg::Node * n ) {
        osgGA::KeySwitchMatrixManipulator::setNode( boost::python::ptr(n) );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgGA::GUIEventHandler::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgGA::GUIEventHandler::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgGA::GUIEventHandler::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgGA::GUIEventHandler::cloneType( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual void computeHomePosition( ::osg::Camera const * camera=0l, bool useBoundingBox=false ) {
        if( bp::override func_computeHomePosition = this->get_override( "computeHomePosition" ) )
            func_computeHomePosition( boost::python::ptr(camera), useBoundingBox );
        else{
            this->osgGA::CameraManipulator::computeHomePosition( boost::python::ptr(camera), useBoundingBox );
        }
    }
    
    void default_computeHomePosition( ::osg::Camera const * camera=0l, bool useBoundingBox=false ) {
        osgGA::CameraManipulator::computeHomePosition( boost::python::ptr(camera), useBoundingBox );
    }

    virtual void event( ::osg::NodeVisitor * nv, ::osg::Drawable * drawable ) {
        if( bp::override func_event = this->get_override( "event" ) )
            func_event( boost::python::ptr(nv), boost::python::ptr(drawable) );
        else{
            this->osgGA::GUIEventHandler::event( boost::python::ptr(nv), boost::python::ptr(drawable) );
        }
    }
    
    void default_event( ::osg::NodeVisitor * nv, ::osg::Drawable * drawable ) {
        osgGA::GUIEventHandler::event( boost::python::ptr(nv), boost::python::ptr(drawable) );
    }

    virtual void getHomePosition( ::osg::Vec3d & eye, ::osg::Vec3d & center, ::osg::Vec3d & up ) const  {
        if( bp::override func_getHomePosition = this->get_override( "getHomePosition" ) )
            func_getHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up) );
        else{
            this->osgGA::CameraManipulator::getHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up) );
        }
    }
    
    void default_getHomePosition( ::osg::Vec3d & eye, ::osg::Vec3d & center, ::osg::Vec3d & up ) const  {
        osgGA::CameraManipulator::getHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up) );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool handle( ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & aa, ::osg::Object * arg2, ::osg::NodeVisitor * arg3 ) {
        namespace bpl = boost::python;
        if( bpl::override func_handle = this->get_override( "handle" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_handle.ptr(), ea, aa, arg2, arg3 );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return osgGA::GUIEventHandler::handle( boost::ref(ea), boost::ref(aa), boost::python::ptr(arg2), boost::python::ptr(arg3) );
        }
    }
    
    static boost::python::object default_handle_d0ba65b51c8a2afc5afff00aad1b91b3( ::osgGA::GUIEventHandler & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & aa, ::osg::Object * arg2, ::osg::NodeVisitor * arg3 ){
        bool result;
        if( dynamic_cast< KeySwitchMatrixManipulator_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::osgGA::GUIEventHandler::handle(ea, aa, arg2, arg3);
        }
        else{
            result = inst.handle(ea, aa, arg2, arg3);
        }
        return bp::object( result );
    }

    virtual void home( double arg0 ) {
        namespace bpl = boost::python;
        if( bpl::override func_home = this->get_override( "home" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_home.ptr(), arg0 );
        }
        else{
            osgGA::CameraManipulator::home( arg0 );
        }
    }
    
    static void default_home_60d9f789ca14c44af8e13acc6b7f8b5f( ::osgGA::CameraManipulator & inst, double arg0 ){
        if( dynamic_cast< KeySwitchMatrixManipulator_wrapper * >( boost::addressof( inst ) ) ){
            inst.::osgGA::CameraManipulator::home(arg0);
        }
        else{
            inst.home(arg0);
        }
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgGA::GUIEventHandler::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgGA::GUIEventHandler::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgGA::GUIEventHandler::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgGA::GUIEventHandler::libraryName( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual void updateCamera( ::osg::Camera & camera ) {
        if( bp::override func_updateCamera = this->get_override( "updateCamera" ) )
            func_updateCamera( boost::ref(camera) );
        else{
            this->osgGA::CameraManipulator::updateCamera( boost::ref(camera) );
        }
    }
    
    void default_updateCamera( ::osg::Camera & camera ) {
        osgGA::CameraManipulator::updateCamera( boost::ref(camera) );
    }

};

void register_KeySwitchMatrixManipulator_class(){

    bp::class_< KeySwitchMatrixManipulator_wrapper, bp::bases< osgGA::CameraManipulator >, osg::ref_ptr< KeySwitchMatrixManipulator_wrapper >, boost::noncopyable >( "KeySwitchMatrixManipulator", "\nKeySwitchMatrixManipulator is a decorator which allows the type of camera manipulator\nbeing used to be switched by pressing a key. E.g. 1 for a TrackballManipulator,\n2 for a DriveManipulator, 3 for a FlightManipulator. The manipulators available,\nand the associated switch keys, can be configured.\n" )    
        .def( 
            "addMatrixManipulator"
            , (void ( ::osgGA::KeySwitchMatrixManipulator::* )( int,::std::string,::osgGA::CameraManipulator * ) )( &::osgGA::KeySwitchMatrixManipulator::addMatrixManipulator )
            , ( bp::arg("key"), bp::arg("name"), bp::arg("cm") )
            , "        Add a camera manipulator with an associated name, and a key to\n        trigger the switch," )    
        .def( 
            "addNumberedMatrixManipulator"
            , (void ( ::osgGA::KeySwitchMatrixManipulator::* )( ::osgGA::CameraManipulator * ) )( &::osgGA::KeySwitchMatrixManipulator::addNumberedMatrixManipulator )
            , ( bp::arg("cm") )
            , "        Add a camera manipulator with an autogenerated keybinding which is 1 + previous number of cameras registerd." )    
        .def( 
            "className"
            , (char const * ( ::osgGA::KeySwitchMatrixManipulator::* )(  ) const)(&::osgGA::KeySwitchMatrixManipulator::className)
            , (char const * ( KeySwitchMatrixManipulator_wrapper::* )(  ) const)(&KeySwitchMatrixManipulator_wrapper::default_className) )    
        .def( 
            "computeHomePosition"
            , (void ( ::osgGA::KeySwitchMatrixManipulator::* )(  ) )(&::osgGA::KeySwitchMatrixManipulator::computeHomePosition)
            , (void ( KeySwitchMatrixManipulator_wrapper::* )(  ) )(&KeySwitchMatrixManipulator_wrapper::default_computeHomePosition) )    
        .def( 
            "getCurrentMatrixManipulator"
            , (::osgGA::CameraManipulator * ( ::osgGA::KeySwitchMatrixManipulator::* )(  ) )( &::osgGA::KeySwitchMatrixManipulator::getCurrentMatrixManipulator )
            , bp::return_internal_reference< >()
            , " Get the current active manipulators." )    
        .def( 
            "getCurrentMatrixManipulator"
            , (::osgGA::CameraManipulator const * ( ::osgGA::KeySwitchMatrixManipulator::* )(  ) const)( &::osgGA::KeySwitchMatrixManipulator::getCurrentMatrixManipulator )
            , bp::return_internal_reference< >()
            , " Get the const current active manipulators." )    
        .def( 
            "getFusionDistanceMode"
            , (::osgUtil::SceneView::FusionDistanceMode ( ::osgGA::KeySwitchMatrixManipulator::* )(  ) const)(&::osgGA::KeySwitchMatrixManipulator::getFusionDistanceMode)
            , (::osgUtil::SceneView::FusionDistanceMode ( KeySwitchMatrixManipulator_wrapper::* )(  ) const)(&KeySwitchMatrixManipulator_wrapper::default_getFusionDistanceMode) )    
        .def( 
            "getFusionDistanceValue"
            , (float ( ::osgGA::KeySwitchMatrixManipulator::* )(  ) const)(&::osgGA::KeySwitchMatrixManipulator::getFusionDistanceValue)
            , (float ( KeySwitchMatrixManipulator_wrapper::* )(  ) const)(&KeySwitchMatrixManipulator_wrapper::default_getFusionDistanceValue) )    
        .def( 
            "getInverseMatrix"
            , (::osg::Matrixd ( ::osgGA::KeySwitchMatrixManipulator::* )(  ) const)(&::osgGA::KeySwitchMatrixManipulator::getInverseMatrix)
            , (::osg::Matrixd ( KeySwitchMatrixManipulator_wrapper::* )(  ) const)(&KeySwitchMatrixManipulator_wrapper::default_getInverseMatrix) )    
        .def( 
            "getKeyManipMap"
            , (::std::map< int, std::pair<std::string, osg::ref_ptr<osgGA::CameraManipulator> > > & ( ::osgGA::KeySwitchMatrixManipulator::* )(  ) )( &::osgGA::KeySwitchMatrixManipulator::getKeyManipMap )
            , bp::return_internal_reference< >()
            , " Get the complete list of manipulators attached to this keyswitch manipulator." )    
        .def( 
            "getKeyManipMap"
            , (::std::map< int, std::pair<std::string, osg::ref_ptr<osgGA::CameraManipulator> > > const & ( ::osgGA::KeySwitchMatrixManipulator::* )(  ) const)( &::osgGA::KeySwitchMatrixManipulator::getKeyManipMap )
            , bp::return_internal_reference< >()
            , " Get the const complete list of manipulators attached to this keyswitch manipulator." )    
        .def( 
            "getMatrix"
            , (::osg::Matrixd ( ::osgGA::KeySwitchMatrixManipulator::* )(  ) const)(&::osgGA::KeySwitchMatrixManipulator::getMatrix)
            , (::osg::Matrixd ( KeySwitchMatrixManipulator_wrapper::* )(  ) const)(&KeySwitchMatrixManipulator_wrapper::default_getMatrix) )    
        .def( 
            "getMatrixManipulatorWithIndex"
            , (::osgGA::CameraManipulator * ( ::osgGA::KeySwitchMatrixManipulator::* )( unsigned int ) )( &::osgGA::KeySwitchMatrixManipulator::getMatrixManipulatorWithIndex )
            , ( bp::arg("key") )
            , bp::return_internal_reference< >()
            , " Get manipulator assigned to a specified index." )    
        .def( 
            "getMatrixManipulatorWithIndex"
            , (::osgGA::CameraManipulator const * ( ::osgGA::KeySwitchMatrixManipulator::* )( unsigned int ) const)( &::osgGA::KeySwitchMatrixManipulator::getMatrixManipulatorWithIndex )
            , ( bp::arg("key") )
            , bp::return_internal_reference< >()
            , " Get const manipulator assigned to a specified index." )    
        .def( 
            "getMatrixManipulatorWithKey"
            , (::osgGA::CameraManipulator * ( ::osgGA::KeySwitchMatrixManipulator::* )( unsigned int ) )( &::osgGA::KeySwitchMatrixManipulator::getMatrixManipulatorWithKey )
            , ( bp::arg("key") )
            , bp::return_internal_reference< >()
            , " Get manipulator assigned to a specified key." )    
        .def( 
            "getMatrixManipulatorWithKey"
            , (::osgGA::CameraManipulator const * ( ::osgGA::KeySwitchMatrixManipulator::* )( unsigned int ) const)( &::osgGA::KeySwitchMatrixManipulator::getMatrixManipulatorWithKey )
            , ( bp::arg("key") )
            , bp::return_internal_reference< >()
            , " Get const manipulator assigned to a specified key." )    
        .def( 
            "getNode"
            , (::osg::Node const * ( ::osgGA::KeySwitchMatrixManipulator::* )(  ) const)(&::osgGA::KeySwitchMatrixManipulator::getNode)
            , (::osg::Node const * ( KeySwitchMatrixManipulator_wrapper::* )(  ) const)(&KeySwitchMatrixManipulator_wrapper::default_getNode)
            , bp::return_internal_reference< >() )    
        .def( 
            "getNode"
            , (::osg::Node * ( ::osgGA::KeySwitchMatrixManipulator::* )(  ) )(&::osgGA::KeySwitchMatrixManipulator::getNode)
            , (::osg::Node * ( KeySwitchMatrixManipulator_wrapper::* )(  ) )(&KeySwitchMatrixManipulator_wrapper::default_getNode)
            , bp::return_internal_reference< >() )    
        .def( 
            "getNumMatrixManipulators"
            , (unsigned int ( ::osgGA::KeySwitchMatrixManipulator::* )(  ) const)( &::osgGA::KeySwitchMatrixManipulator::getNumMatrixManipulators ) )    
        .def( 
            "getUsage"
            , (void ( ::osgGA::KeySwitchMatrixManipulator::* )( ::osg::ApplicationUsage & ) const)(&::osgGA::KeySwitchMatrixManipulator::getUsage)
            , (void ( KeySwitchMatrixManipulator_wrapper::* )( ::osg::ApplicationUsage & ) const)(&KeySwitchMatrixManipulator_wrapper::default_getUsage)
            , ( bp::arg("usage") ) )    
        .def( 
            "handle"
            , (boost::python::object (*)( ::osgGA::KeySwitchMatrixManipulator &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter & ))( &KeySwitchMatrixManipulator_wrapper::default_handle )
            , ( bp::arg("inst"), bp::arg("ea"), bp::arg("us") ) )    
        .def( 
            "home"
            , (void (*)( ::osgGA::KeySwitchMatrixManipulator &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter & ))( &KeySwitchMatrixManipulator_wrapper::default_home )
            , ( bp::arg("inst"), bp::arg("ee"), bp::arg("aa") ) )    
        .def( 
            "init"
            , (void (*)( ::osgGA::KeySwitchMatrixManipulator &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter & ))( &KeySwitchMatrixManipulator_wrapper::default_init )
            , ( bp::arg("inst"), bp::arg("ee"), bp::arg("aa") ) )    
        .def( 
            "selectMatrixManipulator"
            , (void ( ::osgGA::KeySwitchMatrixManipulator::* )( unsigned int ) )( &::osgGA::KeySwitchMatrixManipulator::selectMatrixManipulator )
            , ( bp::arg("num") ) )    
        .def( 
            "setAutoComputeHomePosition"
            , (void ( ::osgGA::KeySwitchMatrixManipulator::* )( bool ) )(&::osgGA::KeySwitchMatrixManipulator::setAutoComputeHomePosition)
            , (void ( KeySwitchMatrixManipulator_wrapper::* )( bool ) )(&KeySwitchMatrixManipulator_wrapper::default_setAutoComputeHomePosition)
            , ( bp::arg("flag") ) )    
        .def( 
            "setByInverseMatrix"
            , (void ( ::osgGA::KeySwitchMatrixManipulator::* )( ::osg::Matrixd const & ) )(&::osgGA::KeySwitchMatrixManipulator::setByInverseMatrix)
            , (void ( KeySwitchMatrixManipulator_wrapper::* )( ::osg::Matrixd const & ) )(&KeySwitchMatrixManipulator_wrapper::default_setByInverseMatrix)
            , ( bp::arg("matrix") ) )    
        .def( 
            "setByMatrix"
            , (void ( ::osgGA::KeySwitchMatrixManipulator::* )( ::osg::Matrixd const & ) )(&::osgGA::KeySwitchMatrixManipulator::setByMatrix)
            , (void ( KeySwitchMatrixManipulator_wrapper::* )( ::osg::Matrixd const & ) )(&KeySwitchMatrixManipulator_wrapper::default_setByMatrix)
            , ( bp::arg("matrix") ) )    
        .def( 
            "setCoordinateFrameCallback"
            , (void ( ::osgGA::KeySwitchMatrixManipulator::* )( ::osgGA::CameraManipulator::CoordinateFrameCallback * ) )(&::osgGA::KeySwitchMatrixManipulator::setCoordinateFrameCallback)
            , (void ( KeySwitchMatrixManipulator_wrapper::* )( ::osgGA::CameraManipulator::CoordinateFrameCallback * ) )(&KeySwitchMatrixManipulator_wrapper::default_setCoordinateFrameCallback)
            , ( bp::arg("cb") ) )    
        .def( 
            "setHomePosition"
            , (void ( ::osgGA::KeySwitchMatrixManipulator::* )( ::osg::Vec3d const &,::osg::Vec3d const &,::osg::Vec3d const &,bool ) )(&::osgGA::KeySwitchMatrixManipulator::setHomePosition)
            , (void ( KeySwitchMatrixManipulator_wrapper::* )( ::osg::Vec3d const &,::osg::Vec3d const &,::osg::Vec3d const &,bool ) )(&KeySwitchMatrixManipulator_wrapper::default_setHomePosition)
            , ( bp::arg("eye"), bp::arg("center"), bp::arg("up"), bp::arg("autoComputeHomePosition")=(bool)(false) ) )    
        .def( 
            "setNode"
            , (void ( ::osgGA::KeySwitchMatrixManipulator::* )( ::osg::Node * ) )(&::osgGA::KeySwitchMatrixManipulator::setNode)
            , (void ( KeySwitchMatrixManipulator_wrapper::* )( ::osg::Node * ) )(&KeySwitchMatrixManipulator_wrapper::default_setNode)
            , ( bp::arg("n") ) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osgGA::GUIEventHandler::* )( ::osg::CopyOp const & ) const)(&::osgGA::GUIEventHandler::clone)
            , (::osg::Object * ( KeySwitchMatrixManipulator_wrapper::* )( ::osg::CopyOp const & ) const)(&KeySwitchMatrixManipulator_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osgGA::GUIEventHandler::* )(  ) const)(&::osgGA::GUIEventHandler::cloneType)
            , (::osg::Object * ( KeySwitchMatrixManipulator_wrapper::* )(  ) const)(&KeySwitchMatrixManipulator_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "computeHomePosition"
            , (void ( ::osgGA::CameraManipulator::* )( ::osg::Camera const *,bool ) )(&::osgGA::CameraManipulator::computeHomePosition)
            , (void ( KeySwitchMatrixManipulator_wrapper::* )( ::osg::Camera const *,bool ) )(&KeySwitchMatrixManipulator_wrapper::default_computeHomePosition)
            , ( bp::arg("camera")=0l, bp::arg("useBoundingBox")=(bool)(false) ) )    
        .def( 
            "event"
            , (void ( ::osgGA::GUIEventHandler::* )( ::osg::NodeVisitor *,::osg::Drawable * ) )(&::osgGA::GUIEventHandler::event)
            , (void ( KeySwitchMatrixManipulator_wrapper::* )( ::osg::NodeVisitor *,::osg::Drawable * ) )(&KeySwitchMatrixManipulator_wrapper::default_event)
            , ( bp::arg("nv"), bp::arg("drawable") ) )    
        .def( 
            "getHomePosition"
            , (void ( ::osgGA::CameraManipulator::* )( ::osg::Vec3d &,::osg::Vec3d &,::osg::Vec3d & ) const)(&::osgGA::CameraManipulator::getHomePosition)
            , (void ( KeySwitchMatrixManipulator_wrapper::* )( ::osg::Vec3d &,::osg::Vec3d &,::osg::Vec3d & ) const)(&KeySwitchMatrixManipulator_wrapper::default_getHomePosition)
            , ( bp::arg("eye"), bp::arg("center"), bp::arg("up") ) )    
        .def( 
            "handle"
            , (boost::python::object (*)( ::osgGA::GUIEventHandler &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter &,::osg::Object *,::osg::NodeVisitor * ))( &KeySwitchMatrixManipulator_wrapper::default_handle_d0ba65b51c8a2afc5afff00aad1b91b3 )
            , ( bp::arg("inst"), bp::arg("ea"), bp::arg("aa"), bp::arg("arg2"), bp::arg("arg3") )
            , "\n Handle events, return true if handled, false otherwise.\n" )    
        .def( 
            "home"
            , (void (*)( ::osgGA::CameraManipulator &,double ))( &KeySwitchMatrixManipulator_wrapper::default_home_60d9f789ca14c44af8e13acc6b7f8b5f )
            , ( bp::arg("inst"), bp::arg("arg0") )
            , "        Move the camera to the default position.\n        This version does not require GUIEventAdapter and GUIActionAdapter so may be\n        called from somewhere other than a handle() method in GUIEventHandler.  Application\n        must be aware of implications." )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osgGA::GUIEventHandler::* )( ::osg::Object const * ) const)(&::osgGA::GUIEventHandler::isSameKindAs)
            , (bool ( KeySwitchMatrixManipulator_wrapper::* )( ::osg::Object const * ) const)(&KeySwitchMatrixManipulator_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osgGA::GUIEventHandler::* )(  ) const)(&::osgGA::GUIEventHandler::libraryName)
            , (char const * ( KeySwitchMatrixManipulator_wrapper::* )(  ) const)(&KeySwitchMatrixManipulator_wrapper::default_libraryName) )    
        .def( 
            "updateCamera"
            , (void ( ::osgGA::CameraManipulator::* )( ::osg::Camera & ) )(&::osgGA::CameraManipulator::updateCamera)
            , (void ( KeySwitchMatrixManipulator_wrapper::* )( ::osg::Camera & ) )(&KeySwitchMatrixManipulator_wrapper::default_updateCamera)
            , ( bp::arg("camera") ) );

}
