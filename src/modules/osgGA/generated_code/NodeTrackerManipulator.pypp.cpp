// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "__convenience.pypp.hpp"
#include "wrap_osgGA.h"
#include "wrap_referenced.h"
#include "NodeTrackerManipulator.pypp.hpp"

namespace bp = boost::python;

struct NodeTrackerManipulator_wrapper : osgGA::NodeTrackerManipulator, bp::wrapper< osgGA::NodeTrackerManipulator > {

    NodeTrackerManipulator_wrapper(int flags=DEFAULT_SETTINGS )
    : osgGA::NodeTrackerManipulator( flags )
      , bp::wrapper< osgGA::NodeTrackerManipulator >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgGA::NodeTrackerManipulator::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgGA::NodeTrackerManipulator::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgGA::NodeTrackerManipulator::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgGA::NodeTrackerManipulator::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgGA::NodeTrackerManipulator::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgGA::NodeTrackerManipulator::cloneType( );
    }

    virtual void computeHomePosition(  ) {
        if( bp::override func_computeHomePosition = this->get_override( "computeHomePosition" ) )
            func_computeHomePosition(  );
        else{
            this->osgGA::NodeTrackerManipulator::computeHomePosition(  );
        }
    }
    
    void default_computeHomePosition(  ) {
        osgGA::NodeTrackerManipulator::computeHomePosition( );
    }

    void computeNodeCenterAndRotation( ::osg::Vec3d & center, ::osg::Quat & rotation ) const {
        osgGA::NodeTrackerManipulator::computeNodeCenterAndRotation( boost::ref(center), boost::ref(rotation) );
    }

    void computeNodeLocalToWorld( ::osg::Matrixd & localToWorld ) const {
        osgGA::NodeTrackerManipulator::computeNodeLocalToWorld( boost::ref(localToWorld) );
    }

    void computeNodeWorldToLocal( ::osg::Matrixd & worldToLocal ) const {
        osgGA::NodeTrackerManipulator::computeNodeWorldToLocal( boost::ref(worldToLocal) );
    }

    void computePosition( ::osg::Vec3d const & eye, ::osg::Vec3d const & lv, ::osg::Vec3d const & up ){
        osgGA::NodeTrackerManipulator::computePosition( boost::ref(eye), boost::ref(lv), boost::ref(up) );
    }

    virtual ::osg::Matrixd getInverseMatrix(  ) const  {
        if( bp::override func_getInverseMatrix = this->get_override( "getInverseMatrix" ) )
            return func_getInverseMatrix(  );
        else{
            return this->osgGA::NodeTrackerManipulator::getInverseMatrix(  );
        }
    }
    
    ::osg::Matrixd default_getInverseMatrix(  ) const  {
        return osgGA::NodeTrackerManipulator::getInverseMatrix( );
    }

    virtual ::osg::Matrixd getMatrix(  ) const  {
        if( bp::override func_getMatrix = this->get_override( "getMatrix" ) )
            return func_getMatrix(  );
        else{
            return this->osgGA::NodeTrackerManipulator::getMatrix(  );
        }
    }
    
    ::osg::Matrixd default_getMatrix(  ) const  {
        return osgGA::NodeTrackerManipulator::getMatrix( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgGA::NodeTrackerManipulator::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgGA::NodeTrackerManipulator::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgGA::NodeTrackerManipulator::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgGA::NodeTrackerManipulator::libraryName( );
    }

    virtual bool performMovementLeftMouseButton( double const eventTimeDelta, double const dx, double const dy ){
        if( bp::override func_performMovementLeftMouseButton = this->get_override( "performMovementLeftMouseButton" ) )
            return func_performMovementLeftMouseButton( eventTimeDelta, dx, dy );
        else{
            return this->osgGA::NodeTrackerManipulator::performMovementLeftMouseButton( eventTimeDelta, dx, dy );
        }
    }
    
    virtual bool default_performMovementLeftMouseButton( double const eventTimeDelta, double const dx, double const dy ){
        return osgGA::NodeTrackerManipulator::performMovementLeftMouseButton( eventTimeDelta, dx, dy );
    }

    virtual bool performMovementMiddleMouseButton( double const eventTimeDelta, double const dx, double const dy ){
        if( bp::override func_performMovementMiddleMouseButton = this->get_override( "performMovementMiddleMouseButton" ) )
            return func_performMovementMiddleMouseButton( eventTimeDelta, dx, dy );
        else{
            return this->osgGA::NodeTrackerManipulator::performMovementMiddleMouseButton( eventTimeDelta, dx, dy );
        }
    }
    
    virtual bool default_performMovementMiddleMouseButton( double const eventTimeDelta, double const dx, double const dy ){
        return osgGA::NodeTrackerManipulator::performMovementMiddleMouseButton( eventTimeDelta, dx, dy );
    }

    virtual bool performMovementRightMouseButton( double const eventTimeDelta, double const dx, double const dy ){
        if( bp::override func_performMovementRightMouseButton = this->get_override( "performMovementRightMouseButton" ) )
            return func_performMovementRightMouseButton( eventTimeDelta, dx, dy );
        else{
            return this->osgGA::NodeTrackerManipulator::performMovementRightMouseButton( eventTimeDelta, dx, dy );
        }
    }
    
    virtual bool default_performMovementRightMouseButton( double const eventTimeDelta, double const dx, double const dy ){
        return osgGA::NodeTrackerManipulator::performMovementRightMouseButton( eventTimeDelta, dx, dy );
    }

    virtual void setByMatrix( ::osg::Matrixd const & matrix ) {
        if( bp::override func_setByMatrix = this->get_override( "setByMatrix" ) )
            func_setByMatrix( boost::ref(matrix) );
        else{
            this->osgGA::NodeTrackerManipulator::setByMatrix( boost::ref(matrix) );
        }
    }
    
    void default_setByMatrix( ::osg::Matrixd const & matrix ) {
        osgGA::NodeTrackerManipulator::setByMatrix( boost::ref(matrix) );
    }

    virtual void setNode( ::osg::Node * arg0 ) {
        if( bp::override func_setNode = this->get_override( "setNode" ) )
            func_setNode( boost::python::ptr(arg0) );
        else{
            this->osgGA::NodeTrackerManipulator::setNode( boost::python::ptr(arg0) );
        }
    }
    
    void default_setNode( ::osg::Node * arg0 ) {
        osgGA::NodeTrackerManipulator::setNode( boost::python::ptr(arg0) );
    }

    virtual void allocAnimationData(  ){
        if( bp::override func_allocAnimationData = this->get_override( "allocAnimationData" ) )
            func_allocAnimationData(  );
        else{
            this->osgGA::OrbitManipulator::allocAnimationData(  );
        }
    }
    
    virtual void default_allocAnimationData(  ){
        osgGA::OrbitManipulator::allocAnimationData( );
    }

    static int allocateRelativeFlag(  ){
        return osgGA::StandardManipulator::allocateRelativeFlag(  );
    }

    virtual void applyAnimationStep( double const currentProgress, double const prevProgress ){
        if( bp::override func_applyAnimationStep = this->get_override( "applyAnimationStep" ) )
            func_applyAnimationStep( currentProgress, prevProgress );
        else{
            this->osgGA::OrbitManipulator::applyAnimationStep( currentProgress, prevProgress );
        }
    }
    
    virtual void default_applyAnimationStep( double const currentProgress, double const prevProgress ){
        osgGA::OrbitManipulator::applyAnimationStep( currentProgress, prevProgress );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual void computeHomePosition( ::osg::Camera const * camera=0l, bool useBoundingBox=false ) {
        if( bp::override func_computeHomePosition = this->get_override( "computeHomePosition" ) )
            func_computeHomePosition( boost::python::ptr(camera), useBoundingBox );
        else{
            this->osgGA::CameraManipulator::computeHomePosition( boost::python::ptr(camera), useBoundingBox );
        }
    }
    
    void default_computeHomePosition( ::osg::Camera const * camera=0l, bool useBoundingBox=false ) {
        osgGA::CameraManipulator::computeHomePosition( boost::python::ptr(camera), useBoundingBox );
    }

    virtual void event( ::osg::NodeVisitor * nv, ::osg::Drawable * drawable ) {
        if( bp::override func_event = this->get_override( "event" ) )
            func_event( boost::python::ptr(nv), boost::python::ptr(drawable) );
        else{
            this->osgGA::GUIEventHandler::event( boost::python::ptr(nv), boost::python::ptr(drawable) );
        }
    }
    
    void default_event( ::osg::NodeVisitor * nv, ::osg::Drawable * drawable ) {
        osgGA::GUIEventHandler::event( boost::python::ptr(nv), boost::python::ptr(drawable) );
    }

    virtual void finishAnimation(  ) {
        if( bp::override func_finishAnimation = this->get_override( "finishAnimation" ) )
            func_finishAnimation(  );
        else{
            this->osgGA::StandardManipulator::finishAnimation(  );
        }
    }
    
    void default_finishAnimation(  ) {
        osgGA::StandardManipulator::finishAnimation( );
    }

    static void fixVerticalAxis( ::osg::Quat & rotation, ::osg::Vec3d const & localUp, bool disallowFlipOver ){
        osgGA::StandardManipulator::fixVerticalAxis( boost::ref(rotation), boost::ref(localUp), disallowFlipOver );
    }

    void fixVerticalAxis( ::osg::Vec3d & eye, ::osg::Quat & rotation, bool disallowFlipOver ){
        osgGA::StandardManipulator::fixVerticalAxis( boost::ref(eye), boost::ref(rotation), disallowFlipOver );
    }

    static void fixVerticalAxis( ::osg::Vec3d const & forward, ::osg::Vec3d const & up, ::osg::Vec3d & newUp, ::osg::Vec3d const & localUp, bool disallowFlipOver ){
        osgGA::StandardManipulator::fixVerticalAxis( boost::ref(forward), boost::ref(up), boost::ref(newUp), boost::ref(localUp), disallowFlipOver );
    }

    void flushMouseEventStack(  ){
        osgGA::StandardManipulator::flushMouseEventStack(  );
    }

    virtual ::osgUtil::SceneView::FusionDistanceMode getFusionDistanceMode(  ) const  {
        if( bp::override func_getFusionDistanceMode = this->get_override( "getFusionDistanceMode" ) )
            return func_getFusionDistanceMode(  );
        else{
            return this->osgGA::OrbitManipulator::getFusionDistanceMode(  );
        }
    }
    
    ::osgUtil::SceneView::FusionDistanceMode default_getFusionDistanceMode(  ) const  {
        return osgGA::OrbitManipulator::getFusionDistanceMode( );
    }

    virtual float getFusionDistanceValue(  ) const  {
        if( bp::override func_getFusionDistanceValue = this->get_override( "getFusionDistanceValue" ) )
            return func_getFusionDistanceValue(  );
        else{
            return this->osgGA::OrbitManipulator::getFusionDistanceValue(  );
        }
    }
    
    float default_getFusionDistanceValue(  ) const  {
        return osgGA::OrbitManipulator::getFusionDistanceValue( );
    }

    virtual void getHomePosition( ::osg::Vec3d & eye, ::osg::Vec3d & center, ::osg::Vec3d & up ) const  {
        if( bp::override func_getHomePosition = this->get_override( "getHomePosition" ) )
            func_getHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up) );
        else{
            this->osgGA::CameraManipulator::getHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up) );
        }
    }
    
    void default_getHomePosition( ::osg::Vec3d & eye, ::osg::Vec3d & center, ::osg::Vec3d & up ) const  {
        osgGA::CameraManipulator::getHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up) );
    }

    virtual ::osg::Node const * getNode(  ) const  {
        if( bp::override func_getNode = this->get_override( "getNode" ) )
            return func_getNode(  );
        else{
            return this->osgGA::StandardManipulator::getNode(  );
        }
    }
    
    ::osg::Node const * default_getNode(  ) const  {
        return osgGA::StandardManipulator::getNode( );
    }

    virtual ::osg::Node * getNode(  ) {
        if( bp::override func_getNode = this->get_override( "getNode" ) )
            return func_getNode(  );
        else{
            return this->osgGA::StandardManipulator::getNode(  );
        }
    }
    
    ::osg::Node * default_getNode(  ) {
        return osgGA::StandardManipulator::getNode( );
    }

    bool getRelativeFlag( int index ) const {
        return osgGA::StandardManipulator::getRelativeFlag( index );
    }

    float getThrowScale( double const eventTimeDelta ) const {
        return osgGA::StandardManipulator::getThrowScale( eventTimeDelta );
    }

    virtual void getTransformation( ::osg::Vec3d & eye, ::osg::Quat & rotation ) const  {
        if( bp::override func_getTransformation = this->get_override( "getTransformation" ) )
            func_getTransformation( boost::ref(eye), boost::ref(rotation) );
        else{
            this->osgGA::OrbitManipulator::getTransformation( boost::ref(eye), boost::ref(rotation) );
        }
    }
    
    void default_getTransformation( ::osg::Vec3d & eye, ::osg::Quat & rotation ) const  {
        osgGA::OrbitManipulator::getTransformation( boost::ref(eye), boost::ref(rotation) );
    }

    virtual void getTransformation( ::osg::Vec3d & eye, ::osg::Vec3d & center, ::osg::Vec3d & up ) const  {
        if( bp::override func_getTransformation = this->get_override( "getTransformation" ) )
            func_getTransformation( boost::ref(eye), boost::ref(center), boost::ref(up) );
        else{
            this->osgGA::OrbitManipulator::getTransformation( boost::ref(eye), boost::ref(center), boost::ref(up) );
        }
    }
    
    void default_getTransformation( ::osg::Vec3d & eye, ::osg::Vec3d & center, ::osg::Vec3d & up ) const  {
        osgGA::OrbitManipulator::getTransformation( boost::ref(eye), boost::ref(center), boost::ref(up) );
    }

    virtual void getUsage( ::osg::ApplicationUsage & usage ) const  {
        if( bp::override func_getUsage = this->get_override( "getUsage" ) )
            func_getUsage( boost::ref(usage) );
        else{
            this->osgGA::StandardManipulator::getUsage( boost::ref(usage) );
        }
    }
    
    void default_getUsage( ::osg::ApplicationUsage & usage ) const  {
        osgGA::StandardManipulator::getUsage( boost::ref(usage) );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool handle( ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & aa, ::osg::Object * arg2, ::osg::NodeVisitor * arg3 ) {
        namespace bpl = boost::python;
        if( bpl::override func_handle = this->get_override( "handle" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_handle.ptr(), ea, aa, arg2, arg3 );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return osgGA::GUIEventHandler::handle( boost::ref(ea), boost::ref(aa), boost::python::ptr(arg2), boost::python::ptr(arg3) );
        }
    }
    
    static boost::python::object default_handle_d0ba65b51c8a2afc5afff00aad1b91b3( ::osgGA::GUIEventHandler & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & aa, ::osg::Object * arg2, ::osg::NodeVisitor * arg3 ){
        bool result;
        if( dynamic_cast< NodeTrackerManipulator_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::osgGA::GUIEventHandler::handle(ea, aa, arg2, arg3);
        }
        else{
            result = inst.handle(ea, aa, arg2, arg3);
        }
        return bp::object( result );
    }

    virtual bool handle( ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & us ) {
        namespace bpl = boost::python;
        if( bpl::override func_handle = this->get_override( "handle" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_handle.ptr(), ea, us );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return osgGA::StandardManipulator::handle( boost::ref(ea), boost::ref(us) );
        }
    }
    
    static boost::python::object default_handle( ::osgGA::StandardManipulator & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & us ){
        bool result;
        if( dynamic_cast< NodeTrackerManipulator_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::osgGA::StandardManipulator::handle(ea, us);
        }
        else{
            result = inst.handle(ea, us);
        }
        return bp::object( result );
    }

    virtual void home( ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & us ) {
        namespace bpl = boost::python;
        if( bpl::override func_home = this->get_override( "home" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_home.ptr(), ea, us );
        }
        else{
            osgGA::StandardManipulator::home( boost::ref(ea), boost::ref(us) );
        }
    }
    
    static void default_home_194db6d6ec8fbf447721ccd081e44fc3( ::osgGA::StandardManipulator & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & us ){
        if( dynamic_cast< NodeTrackerManipulator_wrapper * >( boost::addressof( inst ) ) ){
            inst.::osgGA::StandardManipulator::home(ea, us);
        }
        else{
            inst.home(ea, us);
        }
    }

    virtual void home( double arg0 ) {
        if( bp::override func_home = this->get_override( "home" ) )
            func_home( arg0 );
        else{
            this->osgGA::StandardManipulator::home( arg0 );
        }
    }
    
    void default_home( double arg0 ) {
        osgGA::StandardManipulator::home( arg0 );
    }

    virtual void init( ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & us ) {
        namespace bpl = boost::python;
        if( bpl::override func_init = this->get_override( "init" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_init.ptr(), ea, us );
        }
        else{
            osgGA::StandardManipulator::init( boost::ref(ea), boost::ref(us) );
        }
    }
    
    static void default_init( ::osgGA::StandardManipulator & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & us ){
        if( dynamic_cast< NodeTrackerManipulator_wrapper * >( boost::addressof( inst ) ) ){
            inst.::osgGA::StandardManipulator::init(ea, us);
        }
        else{
            inst.init(ea, us);
        }
    }

    virtual bool isMouseMoving(  ) const {
        if( bp::override func_isMouseMoving = this->get_override( "isMouseMoving" ) )
            return func_isMouseMoving(  );
        else{
            return this->osgGA::StandardManipulator::isMouseMoving(  );
        }
    }
    
    virtual bool default_isMouseMoving(  ) const {
        return osgGA::StandardManipulator::isMouseMoving( );
    }

    virtual void panModel( float const dx, float const dy, float const dz=0.0f ){
        if( bp::override func_panModel = this->get_override( "panModel" ) )
            func_panModel( dx, dy, dz );
        else{
            this->osgGA::OrbitManipulator::panModel( dx, dy, dz );
        }
    }
    
    virtual void default_panModel( float const dx, float const dy, float const dz=0.0f ){
        osgGA::OrbitManipulator::panModel( dx, dy, dz );
    }

    virtual bool performMouseDeltaMovement( float const dx, float const dy ){
        if( bp::override func_performMouseDeltaMovement = this->get_override( "performMouseDeltaMovement" ) )
            return func_performMouseDeltaMovement( dx, dy );
        else{
            return this->osgGA::OrbitManipulator::performMouseDeltaMovement( dx, dy );
        }
    }
    
    virtual bool default_performMouseDeltaMovement( float const dx, float const dy ){
        return osgGA::OrbitManipulator::performMouseDeltaMovement( dx, dy );
    }

    virtual void rotateTrackball( float const px0, float const py0, float const px1, float const py1, float const scale ){
        if( bp::override func_rotateTrackball = this->get_override( "rotateTrackball" ) )
            func_rotateTrackball( px0, py0, px1, py1, scale );
        else{
            this->osgGA::OrbitManipulator::rotateTrackball( px0, py0, px1, py1, scale );
        }
    }
    
    virtual void default_rotateTrackball( float const px0, float const py0, float const px1, float const py1, float const scale ){
        osgGA::OrbitManipulator::rotateTrackball( px0, py0, px1, py1, scale );
    }

    virtual void rotateWithFixedVertical( float const dx, float const dy ){
        if( bp::override func_rotateWithFixedVertical = this->get_override( "rotateWithFixedVertical" ) )
            func_rotateWithFixedVertical( dx, dy );
        else{
            this->osgGA::OrbitManipulator::rotateWithFixedVertical( dx, dy );
        }
    }
    
    virtual void default_rotateWithFixedVertical( float const dx, float const dy ){
        osgGA::OrbitManipulator::rotateWithFixedVertical( dx, dy );
    }

    virtual void rotateWithFixedVertical( float const dx, float const dy, ::osg::Vec3f const & up ){
        if( bp::override func_rotateWithFixedVertical = this->get_override( "rotateWithFixedVertical" ) )
            func_rotateWithFixedVertical( dx, dy, boost::ref(up) );
        else{
            this->osgGA::OrbitManipulator::rotateWithFixedVertical( dx, dy, boost::ref(up) );
        }
    }
    
    virtual void default_rotateWithFixedVertical( float const dx, float const dy, ::osg::Vec3f const & up ){
        osgGA::OrbitManipulator::rotateWithFixedVertical( dx, dy, boost::ref(up) );
    }

    static void rotateYawPitch( ::osg::Quat & rotation, double const yaw, double const pitch, ::osg::Vec3d const & localUp=osg::Vec3d(0.0, 0.0, 0.0) ){
        osgGA::StandardManipulator::rotateYawPitch( boost::ref(rotation), yaw, pitch, boost::ref(localUp) );
    }

    virtual void setAllowThrow( bool allowThrow ) {
        if( bp::override func_setAllowThrow = this->get_override( "setAllowThrow" ) )
            func_setAllowThrow( allowThrow );
        else{
            this->osgGA::StandardManipulator::setAllowThrow( allowThrow );
        }
    }
    
    void default_setAllowThrow( bool allowThrow ) {
        osgGA::StandardManipulator::setAllowThrow( allowThrow );
    }

    virtual void setAnimationTime( double const t ) {
        if( bp::override func_setAnimationTime = this->get_override( "setAnimationTime" ) )
            func_setAnimationTime( t );
        else{
            this->osgGA::StandardManipulator::setAnimationTime( t );
        }
    }
    
    void default_setAnimationTime( double const t ) {
        osgGA::StandardManipulator::setAnimationTime( t );
    }

    virtual void setAutoComputeHomePosition( bool flag ) {
        if( bp::override func_setAutoComputeHomePosition = this->get_override( "setAutoComputeHomePosition" ) )
            func_setAutoComputeHomePosition( flag );
        else{
            this->osgGA::CameraManipulator::setAutoComputeHomePosition( flag );
        }
    }
    
    void default_setAutoComputeHomePosition( bool flag ) {
        osgGA::CameraManipulator::setAutoComputeHomePosition( flag );
    }

    virtual void setByInverseMatrix( ::osg::Matrixd const & matrix ) {
        if( bp::override func_setByInverseMatrix = this->get_override( "setByInverseMatrix" ) )
            func_setByInverseMatrix( boost::ref(matrix) );
        else{
            this->osgGA::OrbitManipulator::setByInverseMatrix( boost::ref(matrix) );
        }
    }
    
    void default_setByInverseMatrix( ::osg::Matrixd const & matrix ) {
        osgGA::OrbitManipulator::setByInverseMatrix( boost::ref(matrix) );
    }

    virtual void setCenter( ::osg::Vec3d const & center ) {
        if( bp::override func_setCenter = this->get_override( "setCenter" ) )
            func_setCenter( boost::ref(center) );
        else{
            this->osgGA::OrbitManipulator::setCenter( boost::ref(center) );
        }
    }
    
    void default_setCenter( ::osg::Vec3d const & center ) {
        osgGA::OrbitManipulator::setCenter( boost::ref(center) );
    }

    virtual void setCoordinateFrameCallback( ::osgGA::CameraManipulator::CoordinateFrameCallback * cb ) {
        if( bp::override func_setCoordinateFrameCallback = this->get_override( "setCoordinateFrameCallback" ) )
            func_setCoordinateFrameCallback( boost::python::ptr(cb) );
        else{
            this->osgGA::CameraManipulator::setCoordinateFrameCallback( boost::python::ptr(cb) );
        }
    }
    
    void default_setCoordinateFrameCallback( ::osgGA::CameraManipulator::CoordinateFrameCallback * cb ) {
        osgGA::CameraManipulator::setCoordinateFrameCallback( boost::python::ptr(cb) );
    }

    virtual void setDistance( double distance ) {
        if( bp::override func_setDistance = this->get_override( "setDistance" ) )
            func_setDistance( distance );
        else{
            this->osgGA::OrbitManipulator::setDistance( distance );
        }
    }
    
    void default_setDistance( double distance ) {
        osgGA::OrbitManipulator::setDistance( distance );
    }

    virtual void setHomePosition( ::osg::Vec3d const & eye, ::osg::Vec3d const & center, ::osg::Vec3d const & up, bool autoComputeHomePosition=false ) {
        if( bp::override func_setHomePosition = this->get_override( "setHomePosition" ) )
            func_setHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up), autoComputeHomePosition );
        else{
            this->osgGA::CameraManipulator::setHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up), autoComputeHomePosition );
        }
    }
    
    void default_setHomePosition( ::osg::Vec3d const & eye, ::osg::Vec3d const & center, ::osg::Vec3d const & up, bool autoComputeHomePosition=false ) {
        osgGA::CameraManipulator::setHomePosition( boost::ref(eye), boost::ref(center), boost::ref(up), autoComputeHomePosition );
    }

    virtual void setMinimumDistance( double const & minimumDistance, bool relativeToModelSize=false ) {
        if( bp::override func_setMinimumDistance = this->get_override( "setMinimumDistance" ) )
            func_setMinimumDistance( minimumDistance, relativeToModelSize );
        else{
            this->osgGA::OrbitManipulator::setMinimumDistance( minimumDistance, relativeToModelSize );
        }
    }
    
    void default_setMinimumDistance( double const & minimumDistance, bool relativeToModelSize=false ) {
        osgGA::OrbitManipulator::setMinimumDistance( minimumDistance, relativeToModelSize );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    void setRelativeFlag( int index, bool value ){
        osgGA::StandardManipulator::setRelativeFlag( index, value );
    }

    virtual void setRotation( ::osg::Quat const & rotation ) {
        if( bp::override func_setRotation = this->get_override( "setRotation" ) )
            func_setRotation( boost::ref(rotation) );
        else{
            this->osgGA::OrbitManipulator::setRotation( boost::ref(rotation) );
        }
    }
    
    void default_setRotation( ::osg::Quat const & rotation ) {
        osgGA::OrbitManipulator::setRotation( boost::ref(rotation) );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setTrackballSize( double const & size ) {
        if( bp::override func_setTrackballSize = this->get_override( "setTrackballSize" ) )
            func_setTrackballSize( size );
        else{
            this->osgGA::OrbitManipulator::setTrackballSize( size );
        }
    }
    
    void default_setTrackballSize( double const & size ) {
        osgGA::OrbitManipulator::setTrackballSize( size );
    }

    virtual void setTransformation( ::osg::Vec3d const & eye, ::osg::Quat const & rotation ) {
        if( bp::override func_setTransformation = this->get_override( "setTransformation" ) )
            func_setTransformation( boost::ref(eye), boost::ref(rotation) );
        else{
            this->osgGA::OrbitManipulator::setTransformation( boost::ref(eye), boost::ref(rotation) );
        }
    }
    
    void default_setTransformation( ::osg::Vec3d const & eye, ::osg::Quat const & rotation ) {
        osgGA::OrbitManipulator::setTransformation( boost::ref(eye), boost::ref(rotation) );
    }

    virtual void setTransformation( ::osg::Vec3d const & eye, ::osg::Vec3d const & center, ::osg::Vec3d const & up ) {
        if( bp::override func_setTransformation = this->get_override( "setTransformation" ) )
            func_setTransformation( boost::ref(eye), boost::ref(center), boost::ref(up) );
        else{
            this->osgGA::OrbitManipulator::setTransformation( boost::ref(eye), boost::ref(center), boost::ref(up) );
        }
    }
    
    void default_setTransformation( ::osg::Vec3d const & eye, ::osg::Vec3d const & center, ::osg::Vec3d const & up ) {
        osgGA::OrbitManipulator::setTransformation( boost::ref(eye), boost::ref(center), boost::ref(up) );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual void setVerticalAxisFixed( bool value ) {
        if( bp::override func_setVerticalAxisFixed = this->get_override( "setVerticalAxisFixed" ) )
            func_setVerticalAxisFixed( value );
        else{
            this->osgGA::StandardManipulator::setVerticalAxisFixed( value );
        }
    }
    
    void default_setVerticalAxisFixed( bool value ) {
        osgGA::StandardManipulator::setVerticalAxisFixed( value );
    }

    virtual void setWheelZoomFactor( double wheelZoomFactor ) {
        if( bp::override func_setWheelZoomFactor = this->get_override( "setWheelZoomFactor" ) )
            func_setWheelZoomFactor( wheelZoomFactor );
        else{
            this->osgGA::OrbitManipulator::setWheelZoomFactor( wheelZoomFactor );
        }
    }
    
    void default_setWheelZoomFactor( double wheelZoomFactor ) {
        osgGA::OrbitManipulator::setWheelZoomFactor( wheelZoomFactor );
    }

    float tb_project_to_sphere( float r, float x, float y ){
        return osgGA::OrbitManipulator::tb_project_to_sphere( r, x, y );
    }

    void trackball( ::osg::Vec3d & axis, float & angle, float p1x, float p1y, float p2x, float p2y ){
        osgGA::OrbitManipulator::trackball( boost::ref(axis), angle, p1x, p1y, p2x, p2y );
    }

    virtual void updateCamera( ::osg::Camera & camera ) {
        if( bp::override func_updateCamera = this->get_override( "updateCamera" ) )
            func_updateCamera( boost::ref(camera) );
        else{
            this->osgGA::CameraManipulator::updateCamera( boost::ref(camera) );
        }
    }
    
    void default_updateCamera( ::osg::Camera & camera ) {
        osgGA::CameraManipulator::updateCamera( boost::ref(camera) );
    }

    virtual void zoomModel( float const dy, bool pushForwardIfNeeded=true ){
        if( bp::override func_zoomModel = this->get_override( "zoomModel" ) )
            func_zoomModel( dy, pushForwardIfNeeded );
        else{
            this->osgGA::OrbitManipulator::zoomModel( dy, pushForwardIfNeeded );
        }
    }
    
    virtual void default_zoomModel( float const dy, bool pushForwardIfNeeded=true ){
        osgGA::OrbitManipulator::zoomModel( dy, pushForwardIfNeeded );
    }

};

static int DEFAULT_SETTINGS = osgGA::NodeTrackerManipulator::DEFAULT_SETTINGS;

void register_NodeTrackerManipulator_class(){

    { //::osgGA::NodeTrackerManipulator
        typedef bp::class_< NodeTrackerManipulator_wrapper, bp::bases< osgGA::OrbitManipulator >, osg::ref_ptr< NodeTrackerManipulator_wrapper >, boost::noncopyable > NodeTrackerManipulator_exposer_t;
        NodeTrackerManipulator_exposer_t NodeTrackerManipulator_exposer = NodeTrackerManipulator_exposer_t( "NodeTrackerManipulator", bp::init< bp::optional< int > >(( bp::arg("flags")=(int)(DEFAULT_SETTINGS) )) );
        bp::scope NodeTrackerManipulator_scope( NodeTrackerManipulator_exposer );
        bp::enum_< osgGA::NodeTrackerManipulator::RotationMode>("RotationMode")
            .value("TRACKBALL", osgGA::NodeTrackerManipulator::TRACKBALL)
            .value("ELEVATION_AZIM", osgGA::NodeTrackerManipulator::ELEVATION_AZIM)
            .export_values()
            ;
        bp::enum_< osgGA::NodeTrackerManipulator::TrackerMode>("TrackerMode")
            .value("NODE_CENTER", osgGA::NodeTrackerManipulator::NODE_CENTER)
            .value("NODE_CENTER_AND_AZIM", osgGA::NodeTrackerManipulator::NODE_CENTER_AND_AZIM)
            .value("NODE_CENTER_AND_ROTATION", osgGA::NodeTrackerManipulator::NODE_CENTER_AND_ROTATION)
            .export_values()
            ;
        bp::implicitly_convertible< int, osgGA::NodeTrackerManipulator >();
        { //::osgGA::NodeTrackerManipulator::className
        
            typedef char const * ( ::osgGA::NodeTrackerManipulator::*className_function_type )(  ) const;
            typedef char const * ( NodeTrackerManipulator_wrapper::*default_className_function_type )(  ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "className"
                , className_function_type(&::osgGA::NodeTrackerManipulator::className)
                , default_className_function_type(&NodeTrackerManipulator_wrapper::default_className) );
        
        }
        { //::osgGA::NodeTrackerManipulator::clone
        
            typedef ::osg::Object * ( ::osgGA::NodeTrackerManipulator::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( NodeTrackerManipulator_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "clone"
                , clone_function_type(&::osgGA::NodeTrackerManipulator::clone)
                , default_clone_function_type(&NodeTrackerManipulator_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgGA::NodeTrackerManipulator::cloneType
        
            typedef ::osg::Object * ( ::osgGA::NodeTrackerManipulator::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( NodeTrackerManipulator_wrapper::*default_cloneType_function_type )(  ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgGA::NodeTrackerManipulator::cloneType)
                , default_cloneType_function_type(&NodeTrackerManipulator_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgGA::NodeTrackerManipulator::computeHomePosition
        
            typedef void ( ::osgGA::NodeTrackerManipulator::*computeHomePosition_function_type )(  ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_computeHomePosition_function_type )(  ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "computeHomePosition"
                , computeHomePosition_function_type(&::osgGA::NodeTrackerManipulator::computeHomePosition)
                , default_computeHomePosition_function_type(&NodeTrackerManipulator_wrapper::default_computeHomePosition) );
        
        }
        { //::osgGA::NodeTrackerManipulator::computeNodeCenterAndRotation
        
            typedef void ( NodeTrackerManipulator_wrapper::*computeNodeCenterAndRotation_function_type )( ::osg::Vec3d &,::osg::Quat & ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "computeNodeCenterAndRotation"
                , computeNodeCenterAndRotation_function_type( &NodeTrackerManipulator_wrapper::computeNodeCenterAndRotation )
                , ( bp::arg("center"), bp::arg("rotation") ) );
        
        }
        { //::osgGA::NodeTrackerManipulator::computeNodeLocalToWorld
        
            typedef void ( NodeTrackerManipulator_wrapper::*computeNodeLocalToWorld_function_type )( ::osg::Matrixd & ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "computeNodeLocalToWorld"
                , computeNodeLocalToWorld_function_type( &NodeTrackerManipulator_wrapper::computeNodeLocalToWorld )
                , ( bp::arg("localToWorld") ) );
        
        }
        { //::osgGA::NodeTrackerManipulator::computeNodeWorldToLocal
        
            typedef void ( NodeTrackerManipulator_wrapper::*computeNodeWorldToLocal_function_type )( ::osg::Matrixd & ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "computeNodeWorldToLocal"
                , computeNodeWorldToLocal_function_type( &NodeTrackerManipulator_wrapper::computeNodeWorldToLocal )
                , ( bp::arg("worldToLocal") ) );
        
        }
        { //::osgGA::NodeTrackerManipulator::computePosition
        
            typedef void ( NodeTrackerManipulator_wrapper::*computePosition_function_type )( ::osg::Vec3d const &,::osg::Vec3d const &,::osg::Vec3d const & ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "computePosition"
                , computePosition_function_type( &NodeTrackerManipulator_wrapper::computePosition )
                , ( bp::arg("eye"), bp::arg("lv"), bp::arg("up") ) );
        
        }
        { //::osgGA::NodeTrackerManipulator::getInverseMatrix
        
            typedef ::osg::Matrixd ( ::osgGA::NodeTrackerManipulator::*getInverseMatrix_function_type )(  ) const;
            typedef ::osg::Matrixd ( NodeTrackerManipulator_wrapper::*default_getInverseMatrix_function_type )(  ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "getInverseMatrix"
                , getInverseMatrix_function_type(&::osgGA::NodeTrackerManipulator::getInverseMatrix)
                , default_getInverseMatrix_function_type(&NodeTrackerManipulator_wrapper::default_getInverseMatrix) );
        
        }
        { //::osgGA::NodeTrackerManipulator::getMatrix
        
            typedef ::osg::Matrixd ( ::osgGA::NodeTrackerManipulator::*getMatrix_function_type )(  ) const;
            typedef ::osg::Matrixd ( NodeTrackerManipulator_wrapper::*default_getMatrix_function_type )(  ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "getMatrix"
                , getMatrix_function_type(&::osgGA::NodeTrackerManipulator::getMatrix)
                , default_getMatrix_function_type(&NodeTrackerManipulator_wrapper::default_getMatrix) );
        
        }
        { //::osgGA::NodeTrackerManipulator::getRotationMode
        
            typedef ::osgGA::NodeTrackerManipulator::RotationMode ( ::osgGA::NodeTrackerManipulator::*getRotationMode_function_type )(  ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "getRotationMode"
                , getRotationMode_function_type( &::osgGA::NodeTrackerManipulator::getRotationMode ) );
        
        }
        { //::osgGA::NodeTrackerManipulator::getTrackNode
        
            typedef ::osg::Node * ( ::osgGA::NodeTrackerManipulator::*getTrackNode_function_type )(  ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "getTrackNode"
                , getTrackNode_function_type( &::osgGA::NodeTrackerManipulator::getTrackNode )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::NodeTrackerManipulator::getTrackNode
        
            typedef ::osg::Node const * ( ::osgGA::NodeTrackerManipulator::*getTrackNode_function_type )(  ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "getTrackNode"
                , getTrackNode_function_type( &::osgGA::NodeTrackerManipulator::getTrackNode )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::NodeTrackerManipulator::getTrackNodePath
        
            typedef ::osg::ObserverNodePath & ( ::osgGA::NodeTrackerManipulator::*getTrackNodePath_function_type )(  ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "getTrackNodePath"
                , getTrackNodePath_function_type( &::osgGA::NodeTrackerManipulator::getTrackNodePath )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::NodeTrackerManipulator::getTrackerMode
        
            typedef ::osgGA::NodeTrackerManipulator::TrackerMode ( ::osgGA::NodeTrackerManipulator::*getTrackerMode_function_type )(  ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "getTrackerMode"
                , getTrackerMode_function_type( &::osgGA::NodeTrackerManipulator::getTrackerMode ) );
        
        }
        { //::osgGA::NodeTrackerManipulator::isSameKindAs
        
            typedef bool ( ::osgGA::NodeTrackerManipulator::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( NodeTrackerManipulator_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgGA::NodeTrackerManipulator::isSameKindAs)
                , default_isSameKindAs_function_type(&NodeTrackerManipulator_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgGA::NodeTrackerManipulator::libraryName
        
            typedef char const * ( ::osgGA::NodeTrackerManipulator::*libraryName_function_type )(  ) const;
            typedef char const * ( NodeTrackerManipulator_wrapper::*default_libraryName_function_type )(  ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgGA::NodeTrackerManipulator::libraryName)
                , default_libraryName_function_type(&NodeTrackerManipulator_wrapper::default_libraryName) );
        
        }
        { //::osgGA::NodeTrackerManipulator::performMovementLeftMouseButton
        
            typedef bool ( NodeTrackerManipulator_wrapper::*performMovementLeftMouseButton_function_type )( double const,double const,double const ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "performMovementLeftMouseButton"
                , performMovementLeftMouseButton_function_type( &NodeTrackerManipulator_wrapper::default_performMovementLeftMouseButton )
                , ( bp::arg("eventTimeDelta"), bp::arg("dx"), bp::arg("dy") ) );
        
        }
        { //::osgGA::NodeTrackerManipulator::performMovementMiddleMouseButton
        
            typedef bool ( NodeTrackerManipulator_wrapper::*performMovementMiddleMouseButton_function_type )( double const,double const,double const ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "performMovementMiddleMouseButton"
                , performMovementMiddleMouseButton_function_type( &NodeTrackerManipulator_wrapper::default_performMovementMiddleMouseButton )
                , ( bp::arg("eventTimeDelta"), bp::arg("dx"), bp::arg("dy") ) );
        
        }
        { //::osgGA::NodeTrackerManipulator::performMovementRightMouseButton
        
            typedef bool ( NodeTrackerManipulator_wrapper::*performMovementRightMouseButton_function_type )( double const,double const,double const ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "performMovementRightMouseButton"
                , performMovementRightMouseButton_function_type( &NodeTrackerManipulator_wrapper::default_performMovementRightMouseButton )
                , ( bp::arg("eventTimeDelta"), bp::arg("dx"), bp::arg("dy") ) );
        
        }
        { //::osgGA::NodeTrackerManipulator::setByMatrix
        
            typedef void ( ::osgGA::NodeTrackerManipulator::*setByMatrix_function_type )( ::osg::Matrixd const & ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_setByMatrix_function_type )( ::osg::Matrixd const & ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setByMatrix"
                , setByMatrix_function_type(&::osgGA::NodeTrackerManipulator::setByMatrix)
                , default_setByMatrix_function_type(&NodeTrackerManipulator_wrapper::default_setByMatrix)
                , ( bp::arg("matrix") ) );
        
        }
        { //::osgGA::NodeTrackerManipulator::setNode
        
            typedef void ( ::osgGA::NodeTrackerManipulator::*setNode_function_type )( ::osg::Node * ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_setNode_function_type )( ::osg::Node * ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setNode"
                , setNode_function_type(&::osgGA::NodeTrackerManipulator::setNode)
                , default_setNode_function_type(&NodeTrackerManipulator_wrapper::default_setNode)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgGA::NodeTrackerManipulator::setRotationMode
        
            typedef void ( ::osgGA::NodeTrackerManipulator::*setRotationMode_function_type )( ::osgGA::NodeTrackerManipulator::RotationMode ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setRotationMode"
                , setRotationMode_function_type( &::osgGA::NodeTrackerManipulator::setRotationMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::osgGA::NodeTrackerManipulator::setTrackNode
        
            typedef void ( ::osgGA::NodeTrackerManipulator::*setTrackNode_function_type )( ::osg::Node * ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setTrackNode"
                , setTrackNode_function_type( &::osgGA::NodeTrackerManipulator::setTrackNode )
                , ( bp::arg("node") ) );
        
        }
        { //::osgGA::NodeTrackerManipulator::setTrackNodePath
        
            typedef void ( ::osgGA::NodeTrackerManipulator::*setTrackNodePath_function_type )( ::osg::NodePath const & ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setTrackNodePath"
                , setTrackNodePath_function_type( &::osgGA::NodeTrackerManipulator::setTrackNodePath )
                , ( bp::arg("nodePath") ) );
        
        }
        { //::osgGA::NodeTrackerManipulator::setTrackNodePath
        
            typedef void ( ::osgGA::NodeTrackerManipulator::*setTrackNodePath_function_type )( ::osg::ObserverNodePath const & ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setTrackNodePath"
                , setTrackNodePath_function_type( &::osgGA::NodeTrackerManipulator::setTrackNodePath )
                , ( bp::arg("nodePath") ) );
        
        }
        { //::osgGA::NodeTrackerManipulator::setTrackerMode
        
            typedef void ( ::osgGA::NodeTrackerManipulator::*setTrackerMode_function_type )( ::osgGA::NodeTrackerManipulator::TrackerMode ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setTrackerMode"
                , setTrackerMode_function_type( &::osgGA::NodeTrackerManipulator::setTrackerMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::osgGA::OrbitManipulator::allocAnimationData
        
            typedef void ( NodeTrackerManipulator_wrapper::*allocAnimationData_function_type )(  ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "allocAnimationData"
                , allocAnimationData_function_type( &NodeTrackerManipulator_wrapper::default_allocAnimationData ) );
        
        }
        { //::osgGA::StandardManipulator::allocateRelativeFlag
        
            typedef int ( *allocateRelativeFlag_function_type )(  );
            
            NodeTrackerManipulator_exposer.def( 
                "allocateRelativeFlag"
                , allocateRelativeFlag_function_type( &NodeTrackerManipulator_wrapper::allocateRelativeFlag ) );
        
        }
        { //::osgGA::OrbitManipulator::applyAnimationStep
        
            typedef void ( NodeTrackerManipulator_wrapper::*applyAnimationStep_function_type )( double const,double const ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "applyAnimationStep"
                , applyAnimationStep_function_type( &NodeTrackerManipulator_wrapper::default_applyAnimationStep )
                , ( bp::arg("currentProgress"), bp::arg("prevProgress") ) );
        
        }
        { //::osgGA::CameraManipulator::computeHomePosition
        
            typedef void ( ::osgGA::CameraManipulator::*computeHomePosition_function_type )( ::osg::Camera const *,bool ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_computeHomePosition_function_type )( ::osg::Camera const *,bool ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "computeHomePosition"
                , computeHomePosition_function_type(&::osgGA::CameraManipulator::computeHomePosition)
                , default_computeHomePosition_function_type(&NodeTrackerManipulator_wrapper::default_computeHomePosition)
                , ( bp::arg("camera")=0l, bp::arg("useBoundingBox")=(bool)(false) ) );
        
        }
        { //::osgGA::GUIEventHandler::event
        
            typedef void ( ::osgGA::GUIEventHandler::*event_function_type )( ::osg::NodeVisitor *,::osg::Drawable * ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_event_function_type )( ::osg::NodeVisitor *,::osg::Drawable * ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "event"
                , event_function_type(&::osgGA::GUIEventHandler::event)
                , default_event_function_type(&NodeTrackerManipulator_wrapper::default_event)
                , ( bp::arg("nv"), bp::arg("drawable") ) );
        
        }
        { //::osgGA::StandardManipulator::finishAnimation
        
            typedef void ( ::osgGA::StandardManipulator::*finishAnimation_function_type )(  ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_finishAnimation_function_type )(  ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "finishAnimation"
                , finishAnimation_function_type(&::osgGA::StandardManipulator::finishAnimation)
                , default_finishAnimation_function_type(&NodeTrackerManipulator_wrapper::default_finishAnimation) );
        
        }
        { //::osgGA::StandardManipulator::fixVerticalAxis
        
            typedef void ( *fixVerticalAxis_function_type )( ::osg::Quat &,::osg::Vec3d const &,bool );
            
            NodeTrackerManipulator_exposer.def( 
                "fixVerticalAxis"
                , fixVerticalAxis_function_type( &NodeTrackerManipulator_wrapper::fixVerticalAxis )
                , ( bp::arg("rotation"), bp::arg("localUp"), bp::arg("disallowFlipOver") ) );
        
        }
        { //::osgGA::StandardManipulator::fixVerticalAxis
        
            typedef void ( NodeTrackerManipulator_wrapper::*fixVerticalAxis_function_type )( ::osg::Vec3d &,::osg::Quat &,bool ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "fixVerticalAxis"
                , fixVerticalAxis_function_type( &NodeTrackerManipulator_wrapper::fixVerticalAxis )
                , ( bp::arg("eye"), bp::arg("rotation"), bp::arg("disallowFlipOver") ) );
        
        }
        { //::osgGA::StandardManipulator::fixVerticalAxis
        
            typedef void ( *fixVerticalAxis_function_type )( ::osg::Vec3d const &,::osg::Vec3d const &,::osg::Vec3d &,::osg::Vec3d const &,bool );
            
            NodeTrackerManipulator_exposer.def( 
                "fixVerticalAxis"
                , fixVerticalAxis_function_type( &NodeTrackerManipulator_wrapper::fixVerticalAxis )
                , ( bp::arg("forward"), bp::arg("up"), bp::arg("newUp"), bp::arg("localUp"), bp::arg("disallowFlipOver") ) );
        
        }
        { //::osgGA::StandardManipulator::flushMouseEventStack
        
            typedef void ( NodeTrackerManipulator_wrapper::*flushMouseEventStack_function_type )(  ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "flushMouseEventStack"
                , flushMouseEventStack_function_type( &NodeTrackerManipulator_wrapper::flushMouseEventStack ) );
        
        }
        { //::osgGA::OrbitManipulator::getFusionDistanceMode
        
            typedef ::osgUtil::SceneView::FusionDistanceMode ( ::osgGA::OrbitManipulator::*getFusionDistanceMode_function_type )(  ) const;
            typedef ::osgUtil::SceneView::FusionDistanceMode ( NodeTrackerManipulator_wrapper::*default_getFusionDistanceMode_function_type )(  ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "getFusionDistanceMode"
                , getFusionDistanceMode_function_type(&::osgGA::OrbitManipulator::getFusionDistanceMode)
                , default_getFusionDistanceMode_function_type(&NodeTrackerManipulator_wrapper::default_getFusionDistanceMode) );
        
        }
        { //::osgGA::OrbitManipulator::getFusionDistanceValue
        
            typedef float ( ::osgGA::OrbitManipulator::*getFusionDistanceValue_function_type )(  ) const;
            typedef float ( NodeTrackerManipulator_wrapper::*default_getFusionDistanceValue_function_type )(  ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "getFusionDistanceValue"
                , getFusionDistanceValue_function_type(&::osgGA::OrbitManipulator::getFusionDistanceValue)
                , default_getFusionDistanceValue_function_type(&NodeTrackerManipulator_wrapper::default_getFusionDistanceValue) );
        
        }
        { //::osgGA::CameraManipulator::getHomePosition
        
            typedef void ( ::osgGA::CameraManipulator::*getHomePosition_function_type )( ::osg::Vec3d &,::osg::Vec3d &,::osg::Vec3d & ) const;
            typedef void ( NodeTrackerManipulator_wrapper::*default_getHomePosition_function_type )( ::osg::Vec3d &,::osg::Vec3d &,::osg::Vec3d & ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "getHomePosition"
                , getHomePosition_function_type(&::osgGA::CameraManipulator::getHomePosition)
                , default_getHomePosition_function_type(&NodeTrackerManipulator_wrapper::default_getHomePosition)
                , ( bp::arg("eye"), bp::arg("center"), bp::arg("up") ) );
        
        }
        { //::osgGA::StandardManipulator::getNode
        
            typedef ::osg::Node const * ( ::osgGA::StandardManipulator::*getNode_function_type )(  ) const;
            typedef ::osg::Node const * ( NodeTrackerManipulator_wrapper::*default_getNode_function_type )(  ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "getNode"
                , getNode_function_type(&::osgGA::StandardManipulator::getNode)
                , default_getNode_function_type(&NodeTrackerManipulator_wrapper::default_getNode)
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::StandardManipulator::getNode
        
            typedef ::osg::Node * ( ::osgGA::StandardManipulator::*getNode_function_type )(  ) ;
            typedef ::osg::Node * ( NodeTrackerManipulator_wrapper::*default_getNode_function_type )(  ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "getNode"
                , getNode_function_type(&::osgGA::StandardManipulator::getNode)
                , default_getNode_function_type(&NodeTrackerManipulator_wrapper::default_getNode)
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::StandardManipulator::getRelativeFlag
        
            typedef bool ( NodeTrackerManipulator_wrapper::*getRelativeFlag_function_type )( int ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "getRelativeFlag"
                , getRelativeFlag_function_type( &NodeTrackerManipulator_wrapper::getRelativeFlag )
                , ( bp::arg("index") ) );
        
        }
        { //::osgGA::StandardManipulator::getThrowScale
        
            typedef float ( NodeTrackerManipulator_wrapper::*getThrowScale_function_type )( double const ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "getThrowScale"
                , getThrowScale_function_type( &NodeTrackerManipulator_wrapper::getThrowScale )
                , ( bp::arg("eventTimeDelta") ) );
        
        }
        { //::osgGA::OrbitManipulator::getTransformation
        
            typedef void ( ::osgGA::OrbitManipulator::*getTransformation_function_type )( ::osg::Vec3d &,::osg::Quat & ) const;
            typedef void ( NodeTrackerManipulator_wrapper::*default_getTransformation_function_type )( ::osg::Vec3d &,::osg::Quat & ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "getTransformation"
                , getTransformation_function_type(&::osgGA::OrbitManipulator::getTransformation)
                , default_getTransformation_function_type(&NodeTrackerManipulator_wrapper::default_getTransformation)
                , ( bp::arg("eye"), bp::arg("rotation") ) );
        
        }
        { //::osgGA::OrbitManipulator::getTransformation
        
            typedef void ( ::osgGA::OrbitManipulator::*getTransformation_function_type )( ::osg::Vec3d &,::osg::Vec3d &,::osg::Vec3d & ) const;
            typedef void ( NodeTrackerManipulator_wrapper::*default_getTransformation_function_type )( ::osg::Vec3d &,::osg::Vec3d &,::osg::Vec3d & ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "getTransformation"
                , getTransformation_function_type(&::osgGA::OrbitManipulator::getTransformation)
                , default_getTransformation_function_type(&NodeTrackerManipulator_wrapper::default_getTransformation)
                , ( bp::arg("eye"), bp::arg("center"), bp::arg("up") ) );
        
        }
        { //::osgGA::StandardManipulator::getUsage
        
            typedef void ( ::osgGA::StandardManipulator::*getUsage_function_type )( ::osg::ApplicationUsage & ) const;
            typedef void ( NodeTrackerManipulator_wrapper::*default_getUsage_function_type )( ::osg::ApplicationUsage & ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "getUsage"
                , getUsage_function_type(&::osgGA::StandardManipulator::getUsage)
                , default_getUsage_function_type(&NodeTrackerManipulator_wrapper::default_getUsage)
                , ( bp::arg("usage") ) );
        
        }
        { //::osgGA::GUIEventHandler::handle
        
            typedef boost::python::object ( *default_handle_function_type )( ::osgGA::GUIEventHandler &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter &,::osg::Object *,::osg::NodeVisitor * );
            
            NodeTrackerManipulator_exposer.def( 
                "handle"
                , default_handle_function_type( &NodeTrackerManipulator_wrapper::default_handle_d0ba65b51c8a2afc5afff00aad1b91b3 )
                , ( bp::arg("inst"), bp::arg("ea"), bp::arg("aa"), bp::arg("arg2"), bp::arg("arg3") )
                , "\n Handle events, return true if handled, false otherwise.\n" );
        
        }
        { //::osgGA::StandardManipulator::handle
        
            typedef boost::python::object ( *default_handle_function_type )( ::osgGA::StandardManipulator &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter & );
            
            NodeTrackerManipulator_exposer.def( 
                "handle"
                , default_handle_function_type( &NodeTrackerManipulator_wrapper::default_handle )
                , ( bp::arg("inst"), bp::arg("ea"), bp::arg("us") ) );
        
        }
        { //::osgGA::StandardManipulator::home
        
            typedef void ( *default_home_function_type )( ::osgGA::StandardManipulator &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter & );
            
            NodeTrackerManipulator_exposer.def( 
                "home"
                , default_home_function_type( &NodeTrackerManipulator_wrapper::default_home_194db6d6ec8fbf447721ccd081e44fc3 )
                , ( bp::arg("inst"), bp::arg("ea"), bp::arg("us") ) );
        
        }
        { //::osgGA::StandardManipulator::home
        
            typedef void ( ::osgGA::StandardManipulator::*home_function_type )( double ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_home_function_type )( double ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "home"
                , home_function_type(&::osgGA::StandardManipulator::home)
                , default_home_function_type(&NodeTrackerManipulator_wrapper::default_home)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgGA::StandardManipulator::init
        
            typedef void ( *default_init_function_type )( ::osgGA::StandardManipulator &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter & );
            
            NodeTrackerManipulator_exposer.def( 
                "init"
                , default_init_function_type( &NodeTrackerManipulator_wrapper::default_init )
                , ( bp::arg("inst"), bp::arg("ea"), bp::arg("us") ) );
        
        }
        { //::osgGA::StandardManipulator::isMouseMoving
        
            typedef bool ( NodeTrackerManipulator_wrapper::*isMouseMoving_function_type )(  ) const;
            
            NodeTrackerManipulator_exposer.def( 
                "isMouseMoving"
                , isMouseMoving_function_type( &NodeTrackerManipulator_wrapper::default_isMouseMoving ) );
        
        }
        { //::osgGA::OrbitManipulator::panModel
        
            typedef void ( NodeTrackerManipulator_wrapper::*panModel_function_type )( float const,float const,float const ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "panModel"
                , panModel_function_type( &NodeTrackerManipulator_wrapper::default_panModel )
                , ( bp::arg("dx"), bp::arg("dy"), bp::arg("dz")=0.0f ) );
        
        }
        { //::osgGA::OrbitManipulator::performMouseDeltaMovement
        
            typedef bool ( NodeTrackerManipulator_wrapper::*performMouseDeltaMovement_function_type )( float const,float const ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "performMouseDeltaMovement"
                , performMouseDeltaMovement_function_type( &NodeTrackerManipulator_wrapper::default_performMouseDeltaMovement )
                , ( bp::arg("dx"), bp::arg("dy") ) );
        
        }
        { //::osgGA::OrbitManipulator::rotateTrackball
        
            typedef void ( NodeTrackerManipulator_wrapper::*rotateTrackball_function_type )( float const,float const,float const,float const,float const ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "rotateTrackball"
                , rotateTrackball_function_type( &NodeTrackerManipulator_wrapper::default_rotateTrackball )
                , ( bp::arg("px0"), bp::arg("py0"), bp::arg("px1"), bp::arg("py1"), bp::arg("scale") ) );
        
        }
        { //::osgGA::OrbitManipulator::rotateWithFixedVertical
        
            typedef void ( NodeTrackerManipulator_wrapper::*rotateWithFixedVertical_function_type )( float const,float const ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "rotateWithFixedVertical"
                , rotateWithFixedVertical_function_type( &NodeTrackerManipulator_wrapper::default_rotateWithFixedVertical )
                , ( bp::arg("dx"), bp::arg("dy") ) );
        
        }
        { //::osgGA::OrbitManipulator::rotateWithFixedVertical
        
            typedef void ( NodeTrackerManipulator_wrapper::*rotateWithFixedVertical_function_type )( float const,float const,::osg::Vec3f const & ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "rotateWithFixedVertical"
                , rotateWithFixedVertical_function_type( &NodeTrackerManipulator_wrapper::default_rotateWithFixedVertical )
                , ( bp::arg("dx"), bp::arg("dy"), bp::arg("up") ) );
        
        }
        { //::osgGA::StandardManipulator::rotateYawPitch
        
            typedef void ( *rotateYawPitch_function_type )( ::osg::Quat &,double const,double const,::osg::Vec3d const & );
            
            NodeTrackerManipulator_exposer.def( 
                "rotateYawPitch"
                , rotateYawPitch_function_type( &NodeTrackerManipulator_wrapper::rotateYawPitch )
                , ( bp::arg("rotation"), bp::arg("yaw"), bp::arg("pitch"), bp::arg("localUp")=osg::Vec3d(0.0, 0.0, 0.0) ) );
        
        }
        { //::osgGA::StandardManipulator::setAllowThrow
        
            typedef void ( ::osgGA::StandardManipulator::*setAllowThrow_function_type )( bool ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_setAllowThrow_function_type )( bool ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setAllowThrow"
                , setAllowThrow_function_type(&::osgGA::StandardManipulator::setAllowThrow)
                , default_setAllowThrow_function_type(&NodeTrackerManipulator_wrapper::default_setAllowThrow)
                , ( bp::arg("allowThrow") ) );
        
        }
        { //::osgGA::StandardManipulator::setAnimationTime
        
            typedef void ( ::osgGA::StandardManipulator::*setAnimationTime_function_type )( double const ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_setAnimationTime_function_type )( double const ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setAnimationTime"
                , setAnimationTime_function_type(&::osgGA::StandardManipulator::setAnimationTime)
                , default_setAnimationTime_function_type(&NodeTrackerManipulator_wrapper::default_setAnimationTime)
                , ( bp::arg("t") ) );
        
        }
        { //::osgGA::CameraManipulator::setAutoComputeHomePosition
        
            typedef void ( ::osgGA::CameraManipulator::*setAutoComputeHomePosition_function_type )( bool ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_setAutoComputeHomePosition_function_type )( bool ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setAutoComputeHomePosition"
                , setAutoComputeHomePosition_function_type(&::osgGA::CameraManipulator::setAutoComputeHomePosition)
                , default_setAutoComputeHomePosition_function_type(&NodeTrackerManipulator_wrapper::default_setAutoComputeHomePosition)
                , ( bp::arg("flag") ) );
        
        }
        { //::osgGA::OrbitManipulator::setByInverseMatrix
        
            typedef void ( ::osgGA::OrbitManipulator::*setByInverseMatrix_function_type )( ::osg::Matrixd const & ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_setByInverseMatrix_function_type )( ::osg::Matrixd const & ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setByInverseMatrix"
                , setByInverseMatrix_function_type(&::osgGA::OrbitManipulator::setByInverseMatrix)
                , default_setByInverseMatrix_function_type(&NodeTrackerManipulator_wrapper::default_setByInverseMatrix)
                , ( bp::arg("matrix") ) );
        
        }
        { //::osgGA::OrbitManipulator::setCenter
        
            typedef void ( ::osgGA::OrbitManipulator::*setCenter_function_type )( ::osg::Vec3d const & ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_setCenter_function_type )( ::osg::Vec3d const & ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setCenter"
                , setCenter_function_type(&::osgGA::OrbitManipulator::setCenter)
                , default_setCenter_function_type(&NodeTrackerManipulator_wrapper::default_setCenter)
                , ( bp::arg("center") ) );
        
        }
        { //::osgGA::CameraManipulator::setCoordinateFrameCallback
        
            typedef void ( ::osgGA::CameraManipulator::*setCoordinateFrameCallback_function_type )( ::osgGA::CameraManipulator::CoordinateFrameCallback * ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_setCoordinateFrameCallback_function_type )( ::osgGA::CameraManipulator::CoordinateFrameCallback * ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setCoordinateFrameCallback"
                , setCoordinateFrameCallback_function_type(&::osgGA::CameraManipulator::setCoordinateFrameCallback)
                , default_setCoordinateFrameCallback_function_type(&NodeTrackerManipulator_wrapper::default_setCoordinateFrameCallback)
                , ( bp::arg("cb") ) );
        
        }
        { //::osgGA::OrbitManipulator::setDistance
        
            typedef void ( ::osgGA::OrbitManipulator::*setDistance_function_type )( double ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_setDistance_function_type )( double ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setDistance"
                , setDistance_function_type(&::osgGA::OrbitManipulator::setDistance)
                , default_setDistance_function_type(&NodeTrackerManipulator_wrapper::default_setDistance)
                , ( bp::arg("distance") ) );
        
        }
        { //::osgGA::CameraManipulator::setHomePosition
        
            typedef void ( ::osgGA::CameraManipulator::*setHomePosition_function_type )( ::osg::Vec3d const &,::osg::Vec3d const &,::osg::Vec3d const &,bool ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_setHomePosition_function_type )( ::osg::Vec3d const &,::osg::Vec3d const &,::osg::Vec3d const &,bool ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setHomePosition"
                , setHomePosition_function_type(&::osgGA::CameraManipulator::setHomePosition)
                , default_setHomePosition_function_type(&NodeTrackerManipulator_wrapper::default_setHomePosition)
                , ( bp::arg("eye"), bp::arg("center"), bp::arg("up"), bp::arg("autoComputeHomePosition")=(bool)(false) ) );
        
        }
        { //::osgGA::OrbitManipulator::setMinimumDistance
        
            typedef void ( ::osgGA::OrbitManipulator::*setMinimumDistance_function_type )( double const &,bool ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_setMinimumDistance_function_type )( double const &,bool ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setMinimumDistance"
                , setMinimumDistance_function_type(&::osgGA::OrbitManipulator::setMinimumDistance)
                , default_setMinimumDistance_function_type(&NodeTrackerManipulator_wrapper::default_setMinimumDistance)
                , ( bp::arg("minimumDistance"), bp::arg("relativeToModelSize")=(bool)(false) ) );
        
        }
        { //::osgGA::StandardManipulator::setRelativeFlag
        
            typedef void ( NodeTrackerManipulator_wrapper::*setRelativeFlag_function_type )( int,bool ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setRelativeFlag"
                , setRelativeFlag_function_type( &NodeTrackerManipulator_wrapper::setRelativeFlag )
                , ( bp::arg("index"), bp::arg("value") ) );
        
        }
        { //::osgGA::OrbitManipulator::setRotation
        
            typedef void ( ::osgGA::OrbitManipulator::*setRotation_function_type )( ::osg::Quat const & ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_setRotation_function_type )( ::osg::Quat const & ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setRotation"
                , setRotation_function_type(&::osgGA::OrbitManipulator::setRotation)
                , default_setRotation_function_type(&NodeTrackerManipulator_wrapper::default_setRotation)
                , ( bp::arg("rotation") ) );
        
        }
        { //::osgGA::OrbitManipulator::setTrackballSize
        
            typedef void ( ::osgGA::OrbitManipulator::*setTrackballSize_function_type )( double const & ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_setTrackballSize_function_type )( double const & ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setTrackballSize"
                , setTrackballSize_function_type(&::osgGA::OrbitManipulator::setTrackballSize)
                , default_setTrackballSize_function_type(&NodeTrackerManipulator_wrapper::default_setTrackballSize)
                , ( bp::arg("size") ) );
        
        }
        { //::osgGA::OrbitManipulator::setTransformation
        
            typedef void ( ::osgGA::OrbitManipulator::*setTransformation_function_type )( ::osg::Vec3d const &,::osg::Quat const & ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_setTransformation_function_type )( ::osg::Vec3d const &,::osg::Quat const & ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setTransformation"
                , setTransformation_function_type(&::osgGA::OrbitManipulator::setTransformation)
                , default_setTransformation_function_type(&NodeTrackerManipulator_wrapper::default_setTransformation)
                , ( bp::arg("eye"), bp::arg("rotation") ) );
        
        }
        { //::osgGA::OrbitManipulator::setTransformation
        
            typedef void ( ::osgGA::OrbitManipulator::*setTransformation_function_type )( ::osg::Vec3d const &,::osg::Vec3d const &,::osg::Vec3d const & ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_setTransformation_function_type )( ::osg::Vec3d const &,::osg::Vec3d const &,::osg::Vec3d const & ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setTransformation"
                , setTransformation_function_type(&::osgGA::OrbitManipulator::setTransformation)
                , default_setTransformation_function_type(&NodeTrackerManipulator_wrapper::default_setTransformation)
                , ( bp::arg("eye"), bp::arg("center"), bp::arg("up") ) );
        
        }
        { //::osgGA::StandardManipulator::setVerticalAxisFixed
        
            typedef void ( ::osgGA::StandardManipulator::*setVerticalAxisFixed_function_type )( bool ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_setVerticalAxisFixed_function_type )( bool ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setVerticalAxisFixed"
                , setVerticalAxisFixed_function_type(&::osgGA::StandardManipulator::setVerticalAxisFixed)
                , default_setVerticalAxisFixed_function_type(&NodeTrackerManipulator_wrapper::default_setVerticalAxisFixed)
                , ( bp::arg("value") ) );
        
        }
        { //::osgGA::OrbitManipulator::setWheelZoomFactor
        
            typedef void ( ::osgGA::OrbitManipulator::*setWheelZoomFactor_function_type )( double ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_setWheelZoomFactor_function_type )( double ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "setWheelZoomFactor"
                , setWheelZoomFactor_function_type(&::osgGA::OrbitManipulator::setWheelZoomFactor)
                , default_setWheelZoomFactor_function_type(&NodeTrackerManipulator_wrapper::default_setWheelZoomFactor)
                , ( bp::arg("wheelZoomFactor") ) );
        
        }
        { //::osgGA::OrbitManipulator::tb_project_to_sphere
        
            typedef float ( NodeTrackerManipulator_wrapper::*tb_project_to_sphere_function_type )( float,float,float ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "tb_project_to_sphere"
                , tb_project_to_sphere_function_type( &NodeTrackerManipulator_wrapper::tb_project_to_sphere )
                , ( bp::arg("r"), bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::osgGA::OrbitManipulator::trackball
        
            typedef void ( NodeTrackerManipulator_wrapper::*trackball_function_type )( ::osg::Vec3d &,float &,float,float,float,float ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "trackball"
                , trackball_function_type( &NodeTrackerManipulator_wrapper::trackball )
                , ( bp::arg("axis"), bp::arg("angle"), bp::arg("p1x"), bp::arg("p1y"), bp::arg("p2x"), bp::arg("p2y") ) );
        
        }
        { //::osgGA::CameraManipulator::updateCamera
        
            typedef void ( ::osgGA::CameraManipulator::*updateCamera_function_type )( ::osg::Camera & ) ;
            typedef void ( NodeTrackerManipulator_wrapper::*default_updateCamera_function_type )( ::osg::Camera & ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "updateCamera"
                , updateCamera_function_type(&::osgGA::CameraManipulator::updateCamera)
                , default_updateCamera_function_type(&NodeTrackerManipulator_wrapper::default_updateCamera)
                , ( bp::arg("camera") ) );
        
        }
        { //::osgGA::OrbitManipulator::zoomModel
        
            typedef void ( NodeTrackerManipulator_wrapper::*zoomModel_function_type )( float const,bool ) ;
            
            NodeTrackerManipulator_exposer.def( 
                "zoomModel"
                , zoomModel_function_type( &NodeTrackerManipulator_wrapper::default_zoomModel )
                , ( bp::arg("dy"), bp::arg("pushForwardIfNeeded")=(bool)(true) ) );
        
        }
        NodeTrackerManipulator_exposer.staticmethod( "allocateRelativeFlag" );
        NodeTrackerManipulator_exposer.staticmethod( "fixVerticalAxis" );
        NodeTrackerManipulator_exposer.staticmethod( "rotateYawPitch" );
    }

}
