// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgGA.h"
#include "wrap_referenced.h"
#include "GUIEventAdapter.pypp.hpp"

namespace bp = boost::python;

struct GUIEventAdapter_wrapper : osgGA::GUIEventAdapter, bp::wrapper< osgGA::GUIEventAdapter > {

    struct TouchData_wrapper : osgGA::GUIEventAdapter::TouchData, bp::wrapper< osgGA::GUIEventAdapter::TouchData > {
    
        TouchData_wrapper( )
        : osgGA::GUIEventAdapter::TouchData( )
          , bp::wrapper< osgGA::GUIEventAdapter::TouchData >(){
            // null constructor
        
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osgGA::GUIEventAdapter::TouchData::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osgGA::GUIEventAdapter::TouchData::className( );
        }
    
        virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
            if( bp::override func_clone = this->get_override( "clone" ) )
                return func_clone( boost::ref(copyop) );
            else{
                return this->osgGA::GUIEventAdapter::TouchData::clone( boost::ref(copyop) );
            }
        }
        
        ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
            return osgGA::GUIEventAdapter::TouchData::clone( boost::ref(copyop) );
        }
    
        virtual ::osg::Object * cloneType(  ) const  {
            if( bp::override func_cloneType = this->get_override( "cloneType" ) )
                return func_cloneType(  );
            else{
                return this->osgGA::GUIEventAdapter::TouchData::cloneType(  );
            }
        }
        
        ::osg::Object * default_cloneType(  ) const  {
            return osgGA::GUIEventAdapter::TouchData::cloneType( );
        }
    
        virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
            if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
                return func_isSameKindAs( boost::python::ptr(obj) );
            else{
                return this->osgGA::GUIEventAdapter::TouchData::isSameKindAs( boost::python::ptr(obj) );
            }
        }
        
        bool default_isSameKindAs( ::osg::Object const * obj ) const  {
            return osgGA::GUIEventAdapter::TouchData::isSameKindAs( boost::python::ptr(obj) );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osgGA::GUIEventAdapter::TouchData::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osgGA::GUIEventAdapter::TouchData::libraryName( );
        }
    
        virtual void computeDataVariance(  ) {
            if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
                func_computeDataVariance(  );
            else{
                this->osg::Object::computeDataVariance(  );
            }
        }
        
        void default_computeDataVariance(  ) {
            osg::Object::computeDataVariance( );
        }
    
        virtual ::osg::Referenced * getUserData(  ) {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced * default_getUserData(  ) {
            return osg::Object::getUserData( );
        }
    
        virtual ::osg::Referenced const * getUserData(  ) const  {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced const * default_getUserData(  ) const  {
            return osg::Object::getUserData( );
        }
    
        virtual void setName( ::std::string const & name ) {
            if( bp::override func_setName = this->get_override( "setName" ) )
                func_setName( name );
            else{
                this->osg::Object::setName( name );
            }
        }
        
        void default_setName( ::std::string const & name ) {
            osg::Object::setName( name );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Object::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    
        virtual void setUserData( ::osg::Referenced * obj ) {
            if( bp::override func_setUserData = this->get_override( "setUserData" ) )
                func_setUserData( boost::python::ptr(obj) );
            else{
                this->osg::Object::setUserData( boost::python::ptr(obj) );
            }
        }
        
        void default_setUserData( ::osg::Referenced * obj ) {
            osg::Object::setUserData( boost::python::ptr(obj) );
        }
    
    };

    GUIEventAdapter_wrapper( )
    : osgGA::GUIEventAdapter( )
      , bp::wrapper< osgGA::GUIEventAdapter >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgGA::GUIEventAdapter::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgGA::GUIEventAdapter::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgGA::GUIEventAdapter::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgGA::GUIEventAdapter::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgGA::GUIEventAdapter::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgGA::GUIEventAdapter::cloneType( );
    }

    virtual ::osgGA::GUIEventAdapter::EventType getEventType(  ) const  {
        if( bp::override func_getEventType = this->get_override( "getEventType" ) )
            return func_getEventType(  );
        else{
            return this->osgGA::GUIEventAdapter::getEventType(  );
        }
    }
    
    ::osgGA::GUIEventAdapter::EventType default_getEventType(  ) const  {
        return osgGA::GUIEventAdapter::getEventType( );
    }

    virtual int getKey(  ) const  {
        if( bp::override func_getKey = this->get_override( "getKey" ) )
            return func_getKey(  );
        else{
            return this->osgGA::GUIEventAdapter::getKey(  );
        }
    }
    
    int default_getKey(  ) const  {
        return osgGA::GUIEventAdapter::getKey( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgGA::GUIEventAdapter::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgGA::GUIEventAdapter::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgGA::GUIEventAdapter::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgGA::GUIEventAdapter::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_GUIEventAdapter_class(){

    { //::osgGA::GUIEventAdapter
        typedef bp::class_< GUIEventAdapter_wrapper, bp::bases< ::osg::Object >, osg::ref_ptr< GUIEventAdapter_wrapper >, boost::noncopyable > GUIEventAdapter_exposer_t;
        GUIEventAdapter_exposer_t GUIEventAdapter_exposer = GUIEventAdapter_exposer_t( "GUIEventAdapter", "\n Event class for storing Keyboard, mouse and window events.\n", bp::no_init );
        bp::scope GUIEventAdapter_scope( GUIEventAdapter_exposer );
        bp::enum_< osgGA::GUIEventAdapter::EventType>("EventType")
            .value("NONE", osgGA::GUIEventAdapter::NONE)
            .value("PUSH", osgGA::GUIEventAdapter::PUSH)
            .value("RELEASE", osgGA::GUIEventAdapter::RELEASE)
            .value("DOUBLECLICK", osgGA::GUIEventAdapter::DOUBLECLICK)
            .value("DRAG", osgGA::GUIEventAdapter::DRAG)
            .value("MOVE", osgGA::GUIEventAdapter::MOVE)
            .value("KEYDOWN", osgGA::GUIEventAdapter::KEYDOWN)
            .value("KEYUP", osgGA::GUIEventAdapter::KEYUP)
            .value("FRAME", osgGA::GUIEventAdapter::FRAME)
            .value("RESIZE", osgGA::GUIEventAdapter::RESIZE)
            .value("SCROLL", osgGA::GUIEventAdapter::SCROLL)
            .value("PEN_PRESSURE", osgGA::GUIEventAdapter::PEN_PRESSURE)
            .value("PEN_ORIENTATION", osgGA::GUIEventAdapter::PEN_ORIENTATION)
            .value("PEN_PROXIMITY_ENTER", osgGA::GUIEventAdapter::PEN_PROXIMITY_ENTER)
            .value("PEN_PROXIMITY_LEAVE", osgGA::GUIEventAdapter::PEN_PROXIMITY_LEAVE)
            .value("CLOSE_WINDOW", osgGA::GUIEventAdapter::CLOSE_WINDOW)
            .value("QUIT_APPLICATION", osgGA::GUIEventAdapter::QUIT_APPLICATION)
            .value("USER", osgGA::GUIEventAdapter::USER)
            .export_values()
            ;
        bp::enum_< osgGA::GUIEventAdapter::KeySymbol>("KeySymbol")
            .value("KEY_Space", osgGA::GUIEventAdapter::KEY_Space)
            .value("KEY_0", osgGA::GUIEventAdapter::KEY_0)
            .value("KEY_1", osgGA::GUIEventAdapter::KEY_1)
            .value("KEY_2", osgGA::GUIEventAdapter::KEY_2)
            .value("KEY_3", osgGA::GUIEventAdapter::KEY_3)
            .value("KEY_4", osgGA::GUIEventAdapter::KEY_4)
            .value("KEY_5", osgGA::GUIEventAdapter::KEY_5)
            .value("KEY_6", osgGA::GUIEventAdapter::KEY_6)
            .value("KEY_7", osgGA::GUIEventAdapter::KEY_7)
            .value("KEY_8", osgGA::GUIEventAdapter::KEY_8)
            .value("KEY_9", osgGA::GUIEventAdapter::KEY_9)
            .value("KEY_A", osgGA::GUIEventAdapter::KEY_A)
            .value("KEY_B", osgGA::GUIEventAdapter::KEY_B)
            .value("KEY_C", osgGA::GUIEventAdapter::KEY_C)
            .value("KEY_D", osgGA::GUIEventAdapter::KEY_D)
            .value("KEY_E", osgGA::GUIEventAdapter::KEY_E)
            .value("KEY_F", osgGA::GUIEventAdapter::KEY_F)
            .value("KEY_G", osgGA::GUIEventAdapter::KEY_G)
            .value("KEY_H", osgGA::GUIEventAdapter::KEY_H)
            .value("KEY_I", osgGA::GUIEventAdapter::KEY_I)
            .value("KEY_J", osgGA::GUIEventAdapter::KEY_J)
            .value("KEY_K", osgGA::GUIEventAdapter::KEY_K)
            .value("KEY_L", osgGA::GUIEventAdapter::KEY_L)
            .value("KEY_M", osgGA::GUIEventAdapter::KEY_M)
            .value("KEY_N", osgGA::GUIEventAdapter::KEY_N)
            .value("KEY_O", osgGA::GUIEventAdapter::KEY_O)
            .value("KEY_P", osgGA::GUIEventAdapter::KEY_P)
            .value("KEY_Q", osgGA::GUIEventAdapter::KEY_Q)
            .value("KEY_R", osgGA::GUIEventAdapter::KEY_R)
            .value("KEY_S", osgGA::GUIEventAdapter::KEY_S)
            .value("KEY_T", osgGA::GUIEventAdapter::KEY_T)
            .value("KEY_U", osgGA::GUIEventAdapter::KEY_U)
            .value("KEY_V", osgGA::GUIEventAdapter::KEY_V)
            .value("KEY_W", osgGA::GUIEventAdapter::KEY_W)
            .value("KEY_X", osgGA::GUIEventAdapter::KEY_X)
            .value("KEY_Y", osgGA::GUIEventAdapter::KEY_Y)
            .value("KEY_Z", osgGA::GUIEventAdapter::KEY_Z)
            .value("KEY_Exclaim", osgGA::GUIEventAdapter::KEY_Exclaim)
            .value("KEY_Quotedbl", osgGA::GUIEventAdapter::KEY_Quotedbl)
            .value("KEY_Hash", osgGA::GUIEventAdapter::KEY_Hash)
            .value("KEY_Dollar", osgGA::GUIEventAdapter::KEY_Dollar)
            .value("KEY_Ampersand", osgGA::GUIEventAdapter::KEY_Ampersand)
            .value("KEY_Quote", osgGA::GUIEventAdapter::KEY_Quote)
            .value("KEY_Leftparen", osgGA::GUIEventAdapter::KEY_Leftparen)
            .value("KEY_Rightparen", osgGA::GUIEventAdapter::KEY_Rightparen)
            .value("KEY_Asterisk", osgGA::GUIEventAdapter::KEY_Asterisk)
            .value("KEY_Plus", osgGA::GUIEventAdapter::KEY_Plus)
            .value("KEY_Comma", osgGA::GUIEventAdapter::KEY_Comma)
            .value("KEY_Minus", osgGA::GUIEventAdapter::KEY_Minus)
            .value("KEY_Period", osgGA::GUIEventAdapter::KEY_Period)
            .value("KEY_Slash", osgGA::GUIEventAdapter::KEY_Slash)
            .value("KEY_Colon", osgGA::GUIEventAdapter::KEY_Colon)
            .value("KEY_Semicolon", osgGA::GUIEventAdapter::KEY_Semicolon)
            .value("KEY_Less", osgGA::GUIEventAdapter::KEY_Less)
            .value("KEY_Equals", osgGA::GUIEventAdapter::KEY_Equals)
            .value("KEY_Greater", osgGA::GUIEventAdapter::KEY_Greater)
            .value("KEY_Question", osgGA::GUIEventAdapter::KEY_Question)
            .value("KEY_At", osgGA::GUIEventAdapter::KEY_At)
            .value("KEY_Leftbracket", osgGA::GUIEventAdapter::KEY_Leftbracket)
            .value("KEY_Backslash", osgGA::GUIEventAdapter::KEY_Backslash)
            .value("KEY_Rightbracket", osgGA::GUIEventAdapter::KEY_Rightbracket)
            .value("KEY_Caret", osgGA::GUIEventAdapter::KEY_Caret)
            .value("KEY_Underscore", osgGA::GUIEventAdapter::KEY_Underscore)
            .value("KEY_Backquote", osgGA::GUIEventAdapter::KEY_Backquote)
            .value("KEY_BackSpace", osgGA::GUIEventAdapter::KEY_BackSpace)
            .value("KEY_Tab", osgGA::GUIEventAdapter::KEY_Tab)
            .value("KEY_Linefeed", osgGA::GUIEventAdapter::KEY_Linefeed)
            .value("KEY_Clear", osgGA::GUIEventAdapter::KEY_Clear)
            .value("KEY_Return", osgGA::GUIEventAdapter::KEY_Return)
            .value("KEY_Pause", osgGA::GUIEventAdapter::KEY_Pause)
            .value("KEY_Scroll_Lock", osgGA::GUIEventAdapter::KEY_Scroll_Lock)
            .value("KEY_Sys_Req", osgGA::GUIEventAdapter::KEY_Sys_Req)
            .value("KEY_Escape", osgGA::GUIEventAdapter::KEY_Escape)
            .value("KEY_Delete", osgGA::GUIEventAdapter::KEY_Delete)
            .value("KEY_Home", osgGA::GUIEventAdapter::KEY_Home)
            .value("KEY_Left", osgGA::GUIEventAdapter::KEY_Left)
            .value("KEY_Up", osgGA::GUIEventAdapter::KEY_Up)
            .value("KEY_Right", osgGA::GUIEventAdapter::KEY_Right)
            .value("KEY_Down", osgGA::GUIEventAdapter::KEY_Down)
            .value("KEY_Prior", osgGA::GUIEventAdapter::KEY_Prior)
            .value("KEY_Page_Up", osgGA::GUIEventAdapter::KEY_Page_Up)
            .value("KEY_Next", osgGA::GUIEventAdapter::KEY_Next)
            .value("KEY_Page_Down", osgGA::GUIEventAdapter::KEY_Page_Down)
            .value("KEY_End", osgGA::GUIEventAdapter::KEY_End)
            .value("KEY_Begin", osgGA::GUIEventAdapter::KEY_Begin)
            .value("KEY_Select", osgGA::GUIEventAdapter::KEY_Select)
            .value("KEY_Print", osgGA::GUIEventAdapter::KEY_Print)
            .value("KEY_Execute", osgGA::GUIEventAdapter::KEY_Execute)
            .value("KEY_Insert", osgGA::GUIEventAdapter::KEY_Insert)
            .value("KEY_Undo", osgGA::GUIEventAdapter::KEY_Undo)
            .value("KEY_Redo", osgGA::GUIEventAdapter::KEY_Redo)
            .value("KEY_Menu", osgGA::GUIEventAdapter::KEY_Menu)
            .value("KEY_Find", osgGA::GUIEventAdapter::KEY_Find)
            .value("KEY_Cancel", osgGA::GUIEventAdapter::KEY_Cancel)
            .value("KEY_Help", osgGA::GUIEventAdapter::KEY_Help)
            .value("KEY_Break", osgGA::GUIEventAdapter::KEY_Break)
            .value("KEY_Mode_switch", osgGA::GUIEventAdapter::KEY_Mode_switch)
            .value("KEY_Script_switch", osgGA::GUIEventAdapter::KEY_Script_switch)
            .value("KEY_Num_Lock", osgGA::GUIEventAdapter::KEY_Num_Lock)
            .value("KEY_KP_Space", osgGA::GUIEventAdapter::KEY_KP_Space)
            .value("KEY_KP_Tab", osgGA::GUIEventAdapter::KEY_KP_Tab)
            .value("KEY_KP_Enter", osgGA::GUIEventAdapter::KEY_KP_Enter)
            .value("KEY_KP_F1", osgGA::GUIEventAdapter::KEY_KP_F1)
            .value("KEY_KP_F2", osgGA::GUIEventAdapter::KEY_KP_F2)
            .value("KEY_KP_F3", osgGA::GUIEventAdapter::KEY_KP_F3)
            .value("KEY_KP_F4", osgGA::GUIEventAdapter::KEY_KP_F4)
            .value("KEY_KP_Home", osgGA::GUIEventAdapter::KEY_KP_Home)
            .value("KEY_KP_Left", osgGA::GUIEventAdapter::KEY_KP_Left)
            .value("KEY_KP_Up", osgGA::GUIEventAdapter::KEY_KP_Up)
            .value("KEY_KP_Right", osgGA::GUIEventAdapter::KEY_KP_Right)
            .value("KEY_KP_Down", osgGA::GUIEventAdapter::KEY_KP_Down)
            .value("KEY_KP_Prior", osgGA::GUIEventAdapter::KEY_KP_Prior)
            .value("KEY_KP_Page_Up", osgGA::GUIEventAdapter::KEY_KP_Page_Up)
            .value("KEY_KP_Next", osgGA::GUIEventAdapter::KEY_KP_Next)
            .value("KEY_KP_Page_Down", osgGA::GUIEventAdapter::KEY_KP_Page_Down)
            .value("KEY_KP_End", osgGA::GUIEventAdapter::KEY_KP_End)
            .value("KEY_KP_Begin", osgGA::GUIEventAdapter::KEY_KP_Begin)
            .value("KEY_KP_Insert", osgGA::GUIEventAdapter::KEY_KP_Insert)
            .value("KEY_KP_Delete", osgGA::GUIEventAdapter::KEY_KP_Delete)
            .value("KEY_KP_Equal", osgGA::GUIEventAdapter::KEY_KP_Equal)
            .value("KEY_KP_Multiply", osgGA::GUIEventAdapter::KEY_KP_Multiply)
            .value("KEY_KP_Add", osgGA::GUIEventAdapter::KEY_KP_Add)
            .value("KEY_KP_Separator", osgGA::GUIEventAdapter::KEY_KP_Separator)
            .value("KEY_KP_Subtract", osgGA::GUIEventAdapter::KEY_KP_Subtract)
            .value("KEY_KP_Decimal", osgGA::GUIEventAdapter::KEY_KP_Decimal)
            .value("KEY_KP_Divide", osgGA::GUIEventAdapter::KEY_KP_Divide)
            .value("KEY_KP_0", osgGA::GUIEventAdapter::KEY_KP_0)
            .value("KEY_KP_1", osgGA::GUIEventAdapter::KEY_KP_1)
            .value("KEY_KP_2", osgGA::GUIEventAdapter::KEY_KP_2)
            .value("KEY_KP_3", osgGA::GUIEventAdapter::KEY_KP_3)
            .value("KEY_KP_4", osgGA::GUIEventAdapter::KEY_KP_4)
            .value("KEY_KP_5", osgGA::GUIEventAdapter::KEY_KP_5)
            .value("KEY_KP_6", osgGA::GUIEventAdapter::KEY_KP_6)
            .value("KEY_KP_7", osgGA::GUIEventAdapter::KEY_KP_7)
            .value("KEY_KP_8", osgGA::GUIEventAdapter::KEY_KP_8)
            .value("KEY_KP_9", osgGA::GUIEventAdapter::KEY_KP_9)
            .value("KEY_F1", osgGA::GUIEventAdapter::KEY_F1)
            .value("KEY_F2", osgGA::GUIEventAdapter::KEY_F2)
            .value("KEY_F3", osgGA::GUIEventAdapter::KEY_F3)
            .value("KEY_F4", osgGA::GUIEventAdapter::KEY_F4)
            .value("KEY_F5", osgGA::GUIEventAdapter::KEY_F5)
            .value("KEY_F6", osgGA::GUIEventAdapter::KEY_F6)
            .value("KEY_F7", osgGA::GUIEventAdapter::KEY_F7)
            .value("KEY_F8", osgGA::GUIEventAdapter::KEY_F8)
            .value("KEY_F9", osgGA::GUIEventAdapter::KEY_F9)
            .value("KEY_F10", osgGA::GUIEventAdapter::KEY_F10)
            .value("KEY_F11", osgGA::GUIEventAdapter::KEY_F11)
            .value("KEY_F12", osgGA::GUIEventAdapter::KEY_F12)
            .value("KEY_F13", osgGA::GUIEventAdapter::KEY_F13)
            .value("KEY_F14", osgGA::GUIEventAdapter::KEY_F14)
            .value("KEY_F15", osgGA::GUIEventAdapter::KEY_F15)
            .value("KEY_F16", osgGA::GUIEventAdapter::KEY_F16)
            .value("KEY_F17", osgGA::GUIEventAdapter::KEY_F17)
            .value("KEY_F18", osgGA::GUIEventAdapter::KEY_F18)
            .value("KEY_F19", osgGA::GUIEventAdapter::KEY_F19)
            .value("KEY_F20", osgGA::GUIEventAdapter::KEY_F20)
            .value("KEY_F21", osgGA::GUIEventAdapter::KEY_F21)
            .value("KEY_F22", osgGA::GUIEventAdapter::KEY_F22)
            .value("KEY_F23", osgGA::GUIEventAdapter::KEY_F23)
            .value("KEY_F24", osgGA::GUIEventAdapter::KEY_F24)
            .value("KEY_F25", osgGA::GUIEventAdapter::KEY_F25)
            .value("KEY_F26", osgGA::GUIEventAdapter::KEY_F26)
            .value("KEY_F27", osgGA::GUIEventAdapter::KEY_F27)
            .value("KEY_F28", osgGA::GUIEventAdapter::KEY_F28)
            .value("KEY_F29", osgGA::GUIEventAdapter::KEY_F29)
            .value("KEY_F30", osgGA::GUIEventAdapter::KEY_F30)
            .value("KEY_F31", osgGA::GUIEventAdapter::KEY_F31)
            .value("KEY_F32", osgGA::GUIEventAdapter::KEY_F32)
            .value("KEY_F33", osgGA::GUIEventAdapter::KEY_F33)
            .value("KEY_F34", osgGA::GUIEventAdapter::KEY_F34)
            .value("KEY_F35", osgGA::GUIEventAdapter::KEY_F35)
            .value("KEY_Shift_L", osgGA::GUIEventAdapter::KEY_Shift_L)
            .value("KEY_Shift_R", osgGA::GUIEventAdapter::KEY_Shift_R)
            .value("KEY_Control_L", osgGA::GUIEventAdapter::KEY_Control_L)
            .value("KEY_Control_R", osgGA::GUIEventAdapter::KEY_Control_R)
            .value("KEY_Caps_Lock", osgGA::GUIEventAdapter::KEY_Caps_Lock)
            .value("KEY_Shift_Lock", osgGA::GUIEventAdapter::KEY_Shift_Lock)
            .value("KEY_Meta_L", osgGA::GUIEventAdapter::KEY_Meta_L)
            .value("KEY_Meta_R", osgGA::GUIEventAdapter::KEY_Meta_R)
            .value("KEY_Alt_L", osgGA::GUIEventAdapter::KEY_Alt_L)
            .value("KEY_Alt_R", osgGA::GUIEventAdapter::KEY_Alt_R)
            .value("KEY_Super_L", osgGA::GUIEventAdapter::KEY_Super_L)
            .value("KEY_Super_R", osgGA::GUIEventAdapter::KEY_Super_R)
            .value("KEY_Hyper_L", osgGA::GUIEventAdapter::KEY_Hyper_L)
            .value("KEY_Hyper_R", osgGA::GUIEventAdapter::KEY_Hyper_R)
            .export_values()
            ;
        bp::enum_< osgGA::GUIEventAdapter::ModKeyMask>("ModKeyMask")
            .value("MODKEY_LEFT_SHIFT", osgGA::GUIEventAdapter::MODKEY_LEFT_SHIFT)
            .value("MODKEY_RIGHT_SHIFT", osgGA::GUIEventAdapter::MODKEY_RIGHT_SHIFT)
            .value("MODKEY_LEFT_CTRL", osgGA::GUIEventAdapter::MODKEY_LEFT_CTRL)
            .value("MODKEY_RIGHT_CTRL", osgGA::GUIEventAdapter::MODKEY_RIGHT_CTRL)
            .value("MODKEY_LEFT_ALT", osgGA::GUIEventAdapter::MODKEY_LEFT_ALT)
            .value("MODKEY_RIGHT_ALT", osgGA::GUIEventAdapter::MODKEY_RIGHT_ALT)
            .value("MODKEY_LEFT_META", osgGA::GUIEventAdapter::MODKEY_LEFT_META)
            .value("MODKEY_RIGHT_META", osgGA::GUIEventAdapter::MODKEY_RIGHT_META)
            .value("MODKEY_LEFT_SUPER", osgGA::GUIEventAdapter::MODKEY_LEFT_SUPER)
            .value("MODKEY_RIGHT_SUPER", osgGA::GUIEventAdapter::MODKEY_RIGHT_SUPER)
            .value("MODKEY_LEFT_HYPER", osgGA::GUIEventAdapter::MODKEY_LEFT_HYPER)
            .value("MODKEY_RIGHT_HYPER", osgGA::GUIEventAdapter::MODKEY_RIGHT_HYPER)
            .value("MODKEY_NUM_LOCK", osgGA::GUIEventAdapter::MODKEY_NUM_LOCK)
            .value("MODKEY_CAPS_LOCK", osgGA::GUIEventAdapter::MODKEY_CAPS_LOCK)
            .value("MODKEY_CTRL", osgGA::GUIEventAdapter::MODKEY_CTRL)
            .value("MODKEY_SHIFT", osgGA::GUIEventAdapter::MODKEY_SHIFT)
            .value("MODKEY_ALT", osgGA::GUIEventAdapter::MODKEY_ALT)
            .value("MODKEY_META", osgGA::GUIEventAdapter::MODKEY_META)
            .value("MODKEY_SUPER", osgGA::GUIEventAdapter::MODKEY_SUPER)
            .value("MODKEY_HYPER", osgGA::GUIEventAdapter::MODKEY_HYPER)
            .export_values()
            ;
        bp::enum_< osgGA::GUIEventAdapter::MouseButtonMask>("MouseButtonMask")
            .value("LEFT_MOUSE_BUTTON", osgGA::GUIEventAdapter::LEFT_MOUSE_BUTTON)
            .value("MIDDLE_MOUSE_BUTTON", osgGA::GUIEventAdapter::MIDDLE_MOUSE_BUTTON)
            .value("RIGHT_MOUSE_BUTTON", osgGA::GUIEventAdapter::RIGHT_MOUSE_BUTTON)
            .export_values()
            ;
        bp::enum_< osgGA::GUIEventAdapter::MouseYOrientation>("MouseYOrientation")
            .value("Y_INCREASING_UPWARDS", osgGA::GUIEventAdapter::Y_INCREASING_UPWARDS)
            .value("Y_INCREASING_DOWNWARDS", osgGA::GUIEventAdapter::Y_INCREASING_DOWNWARDS)
            .export_values()
            ;
        bp::enum_< osgGA::GUIEventAdapter::ScrollingMotion>("ScrollingMotion")
            .value("SCROLL_NONE", osgGA::GUIEventAdapter::SCROLL_NONE)
            .value("SCROLL_LEFT", osgGA::GUIEventAdapter::SCROLL_LEFT)
            .value("SCROLL_RIGHT", osgGA::GUIEventAdapter::SCROLL_RIGHT)
            .value("SCROLL_UP", osgGA::GUIEventAdapter::SCROLL_UP)
            .value("SCROLL_DOWN", osgGA::GUIEventAdapter::SCROLL_DOWN)
            .value("SCROLL_2D", osgGA::GUIEventAdapter::SCROLL_2D)
            .export_values()
            ;
        bp::enum_< osgGA::GUIEventAdapter::TabletPointerType>("TabletPointerType")
            .value("UNKNOWN", osgGA::GUIEventAdapter::UNKNOWN)
            .value("PEN", osgGA::GUIEventAdapter::PEN)
            .value("PUCK", osgGA::GUIEventAdapter::PUCK)
            .value("ERASER", osgGA::GUIEventAdapter::ERASER)
            .export_values()
            ;
        bp::enum_< osgGA::GUIEventAdapter::TouchPhase>("TouchPhase")
            .value("TOUCH_UNKNOWN", osgGA::GUIEventAdapter::TOUCH_UNKNOWN)
            .value("TOUCH_BEGAN", osgGA::GUIEventAdapter::TOUCH_BEGAN)
            .value("TOUCH_MOVED", osgGA::GUIEventAdapter::TOUCH_MOVED)
            .value("TOUCH_STATIONERY", osgGA::GUIEventAdapter::TOUCH_STATIONERY)
            .value("TOUCH_ENDED", osgGA::GUIEventAdapter::TOUCH_ENDED)
            .export_values()
            ;
        { //::osgGA::GUIEventAdapter::TouchData
            typedef bp::class_< GUIEventAdapter_wrapper::TouchData_wrapper, bp::bases< ::osg::Object >, osg::ref_ptr< GUIEventAdapter_wrapper::TouchData_wrapper >, boost::noncopyable > TouchData_exposer_t;
            TouchData_exposer_t TouchData_exposer = TouchData_exposer_t( "TouchData", bp::no_init );
            bp::scope TouchData_scope( TouchData_exposer );
            bp::class_< osgGA::GUIEventAdapter::TouchData::TouchPoint >( "TouchPoint", bp::init< >() )    
                .def( bp::init< unsigned int, osgGA::GUIEventAdapter::TouchPhase, float, float, unsigned int >(( bp::arg("in_id"), bp::arg("in_phase"), bp::arg("in_x"), bp::arg("in_y"), bp::arg("in_tap_count") )) )    
                .def_readwrite( "id", &osgGA::GUIEventAdapter::TouchData::TouchPoint::id )    
                .def_readwrite( "phase", &osgGA::GUIEventAdapter::TouchData::TouchPoint::phase )    
                .def_readwrite( "tapCount", &osgGA::GUIEventAdapter::TouchData::TouchPoint::tapCount )    
                .def_readwrite( "x", &osgGA::GUIEventAdapter::TouchData::TouchPoint::x )    
                .def_readwrite( "y", &osgGA::GUIEventAdapter::TouchData::TouchPoint::y );
            TouchData_exposer.def( bp::init< >() );
            { //::osgGA::GUIEventAdapter::TouchData::className
            
                typedef char const * ( ::osgGA::GUIEventAdapter::TouchData::*className_function_type )(  ) const;
                typedef char const * ( GUIEventAdapter_wrapper::TouchData_wrapper::*default_className_function_type )(  ) const;
                
                TouchData_exposer.def( 
                    "className"
                    , className_function_type(&::osgGA::GUIEventAdapter::TouchData::className)
                    , default_className_function_type(&GUIEventAdapter_wrapper::TouchData_wrapper::default_className) );
            
            }
            { //::osgGA::GUIEventAdapter::TouchData::clone
            
                typedef ::osg::Object * ( ::osgGA::GUIEventAdapter::TouchData::*clone_function_type )( ::osg::CopyOp const & ) const;
                typedef ::osg::Object * ( GUIEventAdapter_wrapper::TouchData_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
                
                TouchData_exposer.def( 
                    "clone"
                    , clone_function_type(&::osgGA::GUIEventAdapter::TouchData::clone)
                    , default_clone_function_type(&GUIEventAdapter_wrapper::TouchData_wrapper::default_clone)
                    , ( bp::arg("copyop") )
                    , bp::return_value_policy< bp::reference_existing_object >() );
            
            }
            { //::osgGA::GUIEventAdapter::TouchData::cloneType
            
                typedef ::osg::Object * ( ::osgGA::GUIEventAdapter::TouchData::*cloneType_function_type )(  ) const;
                typedef ::osg::Object * ( GUIEventAdapter_wrapper::TouchData_wrapper::*default_cloneType_function_type )(  ) const;
                
                TouchData_exposer.def( 
                    "cloneType"
                    , cloneType_function_type(&::osgGA::GUIEventAdapter::TouchData::cloneType)
                    , default_cloneType_function_type(&GUIEventAdapter_wrapper::TouchData_wrapper::default_cloneType)
                    , bp::return_value_policy< bp::reference_existing_object >() );
            
            }
            { //::osgGA::GUIEventAdapter::TouchData::get
            
                typedef ::osgGA::GUIEventAdapter::TouchData::TouchPoint const ( ::osgGA::GUIEventAdapter::TouchData::*get_function_type )( unsigned int ) const;
                
                TouchData_exposer.def( 
                    "get"
                    , get_function_type( &::osgGA::GUIEventAdapter::TouchData::get )
                    , ( bp::arg("i") ) );
            
            }
            { //::osgGA::GUIEventAdapter::TouchData::getNumTouchPoints
            
                typedef unsigned int ( ::osgGA::GUIEventAdapter::TouchData::*getNumTouchPoints_function_type )(  ) const;
                
                TouchData_exposer.def( 
                    "getNumTouchPoints"
                    , getNumTouchPoints_function_type( &::osgGA::GUIEventAdapter::TouchData::getNumTouchPoints ) );
            
            }
            { //::osgGA::GUIEventAdapter::TouchData::isSameKindAs
            
                typedef bool ( ::osgGA::GUIEventAdapter::TouchData::*isSameKindAs_function_type )( ::osg::Object const * ) const;
                typedef bool ( GUIEventAdapter_wrapper::TouchData_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
                
                TouchData_exposer.def( 
                    "isSameKindAs"
                    , isSameKindAs_function_type(&::osgGA::GUIEventAdapter::TouchData::isSameKindAs)
                    , default_isSameKindAs_function_type(&GUIEventAdapter_wrapper::TouchData_wrapper::default_isSameKindAs)
                    , ( bp::arg("obj") ) );
            
            }
            { //::osgGA::GUIEventAdapter::TouchData::libraryName
            
                typedef char const * ( ::osgGA::GUIEventAdapter::TouchData::*libraryName_function_type )(  ) const;
                typedef char const * ( GUIEventAdapter_wrapper::TouchData_wrapper::*default_libraryName_function_type )(  ) const;
                
                TouchData_exposer.def( 
                    "libraryName"
                    , libraryName_function_type(&::osgGA::GUIEventAdapter::TouchData::libraryName)
                    , default_libraryName_function_type(&GUIEventAdapter_wrapper::TouchData_wrapper::default_libraryName) );
            
            }
        }
        GUIEventAdapter_exposer.def( bp::init< >() );
        { //::osgGA::GUIEventAdapter::addPointerData
        
            typedef void ( ::osgGA::GUIEventAdapter::*addPointerData_function_type )( ::osgGA::PointerData * ) ;
            
            GUIEventAdapter_exposer.def( 
                "addPointerData"
                , addPointerData_function_type( &::osgGA::GUIEventAdapter::addPointerData )
                , ( bp::arg("pd") ) );
        
        }
        { //::osgGA::GUIEventAdapter::addTouchPoint
        
            typedef void ( ::osgGA::GUIEventAdapter::*addTouchPoint_function_type )( unsigned int,::osgGA::GUIEventAdapter::TouchPhase,float,float,unsigned int ) ;
            
            GUIEventAdapter_exposer.def( 
                "addTouchPoint"
                , addTouchPoint_function_type( &::osgGA::GUIEventAdapter::addTouchPoint )
                , ( bp::arg("id"), bp::arg("phase"), bp::arg("x"), bp::arg("y"), bp::arg("tapCount")=(unsigned int)(0) ) );
        
        }
        { //::osgGA::GUIEventAdapter::className
        
            typedef char const * ( ::osgGA::GUIEventAdapter::*className_function_type )(  ) const;
            typedef char const * ( GUIEventAdapter_wrapper::*default_className_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "className"
                , className_function_type(&::osgGA::GUIEventAdapter::className)
                , default_className_function_type(&GUIEventAdapter_wrapper::default_className) );
        
        }
        { //::osgGA::GUIEventAdapter::clone
        
            typedef ::osg::Object * ( ::osgGA::GUIEventAdapter::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( GUIEventAdapter_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            GUIEventAdapter_exposer.def( 
                "clone"
                , clone_function_type(&::osgGA::GUIEventAdapter::clone)
                , default_clone_function_type(&GUIEventAdapter_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgGA::GUIEventAdapter::cloneType
        
            typedef ::osg::Object * ( ::osgGA::GUIEventAdapter::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( GUIEventAdapter_wrapper::*default_cloneType_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgGA::GUIEventAdapter::cloneType)
                , default_cloneType_function_type(&GUIEventAdapter_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgGA::GUIEventAdapter::getAccumulatedEventState
        
            typedef ::osg::ref_ptr< osgGA::GUIEventAdapter > & ( *getAccumulatedEventState_function_type )(  );
            
            GUIEventAdapter_exposer.def( 
                "getAccumulatedEventState"
                , getAccumulatedEventState_function_type( &::osgGA::GUIEventAdapter::getAccumulatedEventState )
                , bp::return_internal_reference< >()
                , " Get the accumulated event state singleton.\n Typically all EventQueue will share this single GUIEventAdapter object for tracking\n the mouse position, keyboard and mouse masks." );
        
        }
        { //::osgGA::GUIEventAdapter::getButton
        
            typedef int ( ::osgGA::GUIEventAdapter::*getButton_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getButton"
                , getButton_function_type( &::osgGA::GUIEventAdapter::getButton )
                , " button pressed/released, return -1 if inappropriate for this GUIEventAdapter." );
        
        }
        { //::osgGA::GUIEventAdapter::getButtonMask
        
            typedef int ( ::osgGA::GUIEventAdapter::*getButtonMask_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getButtonMask"
                , getButtonMask_function_type( &::osgGA::GUIEventAdapter::getButtonMask )
                , " get current mouse button state." );
        
        }
        { //::osgGA::GUIEventAdapter::getEventType
        
            typedef ::osgGA::GUIEventAdapter::EventType ( ::osgGA::GUIEventAdapter::*getEventType_function_type )(  ) const;
            typedef ::osgGA::GUIEventAdapter::EventType ( GUIEventAdapter_wrapper::*default_getEventType_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getEventType"
                , getEventType_function_type(&::osgGA::GUIEventAdapter::getEventType)
                , default_getEventType_function_type(&GUIEventAdapter_wrapper::default_getEventType) );
        
        }
        { //::osgGA::GUIEventAdapter::getGraphicsContext
        
            typedef ::osg::GraphicsContext * ( ::osgGA::GUIEventAdapter::*getGraphicsContext_function_type )(  ) ;
            
            GUIEventAdapter_exposer.def( 
                "getGraphicsContext"
                , getGraphicsContext_function_type( &::osgGA::GUIEventAdapter::getGraphicsContext )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::GUIEventAdapter::getGraphicsContext
        
            typedef ::osg::GraphicsContext const * ( ::osgGA::GUIEventAdapter::*getGraphicsContext_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getGraphicsContext"
                , getGraphicsContext_function_type( &::osgGA::GUIEventAdapter::getGraphicsContext )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::GUIEventAdapter::getHandled
        
            typedef bool ( ::osgGA::GUIEventAdapter::*getHandled_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getHandled"
                , getHandled_function_type( &::osgGA::GUIEventAdapter::getHandled )
                , " Get whether this event has been handled by an event handler or not." );
        
        }
        { //::osgGA::GUIEventAdapter::getKey
        
            typedef int ( ::osgGA::GUIEventAdapter::*getKey_function_type )(  ) const;
            typedef int ( GUIEventAdapter_wrapper::*default_getKey_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getKey"
                , getKey_function_type(&::osgGA::GUIEventAdapter::getKey)
                , default_getKey_function_type(&GUIEventAdapter_wrapper::default_getKey) );
        
        }
        { //::osgGA::GUIEventAdapter::getModKeyMask
        
            typedef int ( ::osgGA::GUIEventAdapter::*getModKeyMask_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getModKeyMask"
                , getModKeyMask_function_type( &::osgGA::GUIEventAdapter::getModKeyMask )
                , " get modifier key mask." );
        
        }
        { //::osgGA::GUIEventAdapter::getMouseYOrientation
        
            typedef ::osgGA::GUIEventAdapter::MouseYOrientation ( ::osgGA::GUIEventAdapter::*getMouseYOrientation_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getMouseYOrientation"
                , getMouseYOrientation_function_type( &::osgGA::GUIEventAdapter::getMouseYOrientation )
                , " get mouse-Y orientation (mouse-Y increases upwards or downwards)." );
        
        }
        { //::osgGA::GUIEventAdapter::getNumPointerData
        
            typedef unsigned int ( ::osgGA::GUIEventAdapter::*getNumPointerData_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getNumPointerData"
                , getNumPointerData_function_type( &::osgGA::GUIEventAdapter::getNumPointerData ) );
        
        }
        { //::osgGA::GUIEventAdapter::getPenOrientation
        
            typedef ::osg::Matrix const ( ::osgGA::GUIEventAdapter::*getPenOrientation_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getPenOrientation"
                , getPenOrientation_function_type( &::osgGA::GUIEventAdapter::getPenOrientation )
                , " set the orientation from a tablet input device as a matrix." );
        
        }
        { //::osgGA::GUIEventAdapter::getPenPressure
        
            typedef float ( ::osgGA::GUIEventAdapter::*getPenPressure_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getPenPressure"
                , getPenPressure_function_type( &::osgGA::GUIEventAdapter::getPenPressure )
                , " get the tablet pen pressure (range 0..1)." );
        
        }
        { //::osgGA::GUIEventAdapter::getPenRotation
        
            typedef float ( ::osgGA::GUIEventAdapter::*getPenRotation_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getPenRotation"
                , getPenRotation_function_type( &::osgGA::GUIEventAdapter::getPenRotation )
                , " get the tablet pen rotation around the Z-axis in degrees." );
        
        }
        { //::osgGA::GUIEventAdapter::getPenTiltX
        
            typedef float ( ::osgGA::GUIEventAdapter::*getPenTiltX_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getPenTiltX"
                , getPenTiltX_function_type( &::osgGA::GUIEventAdapter::getPenTiltX )
                , " get the tablet pen tiltX in degrees." );
        
        }
        { //::osgGA::GUIEventAdapter::getPenTiltY
        
            typedef float ( ::osgGA::GUIEventAdapter::*getPenTiltY_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getPenTiltY"
                , getPenTiltY_function_type( &::osgGA::GUIEventAdapter::getPenTiltY )
                , " get the tablet pen tiltY in degrees." );
        
        }
        { //::osgGA::GUIEventAdapter::getPointerData
        
            typedef ::osgGA::PointerData * ( ::osgGA::GUIEventAdapter::*getPointerData_function_type )( unsigned int ) ;
            
            GUIEventAdapter_exposer.def( 
                "getPointerData"
                , getPointerData_function_type( &::osgGA::GUIEventAdapter::getPointerData )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::GUIEventAdapter::getPointerData
        
            typedef ::osgGA::PointerData const * ( ::osgGA::GUIEventAdapter::*getPointerData_function_type )( unsigned int ) const;
            
            GUIEventAdapter_exposer.def( 
                "getPointerData"
                , getPointerData_function_type( &::osgGA::GUIEventAdapter::getPointerData )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::GUIEventAdapter::getPointerData
        
            typedef ::osgGA::PointerData * ( ::osgGA::GUIEventAdapter::*getPointerData_function_type )( ::osg::Object * ) ;
            
            GUIEventAdapter_exposer.def( 
                "getPointerData"
                , getPointerData_function_type( &::osgGA::GUIEventAdapter::getPointerData )
                , ( bp::arg("obj") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::GUIEventAdapter::getPointerData
        
            typedef ::osgGA::PointerData const * ( ::osgGA::GUIEventAdapter::*getPointerData_function_type )( ::osg::Object * ) const;
            
            GUIEventAdapter_exposer.def( 
                "getPointerData"
                , getPointerData_function_type( &::osgGA::GUIEventAdapter::getPointerData )
                , ( bp::arg("obj") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::GUIEventAdapter::getPointerDataList
        
            typedef ::std::vector< osg::ref_ptr<osgGA::PointerData> > & ( ::osgGA::GUIEventAdapter::*getPointerDataList_function_type )(  ) ;
            
            GUIEventAdapter_exposer.def( 
                "getPointerDataList"
                , getPointerDataList_function_type( &::osgGA::GUIEventAdapter::getPointerDataList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::GUIEventAdapter::getPointerDataList
        
            typedef ::std::vector< osg::ref_ptr<osgGA::PointerData> > const & ( ::osgGA::GUIEventAdapter::*getPointerDataList_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getPointerDataList"
                , getPointerDataList_function_type( &::osgGA::GUIEventAdapter::getPointerDataList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::GUIEventAdapter::getScrollingDeltaX
        
            typedef float ( ::osgGA::GUIEventAdapter::*getScrollingDeltaX_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getScrollingDeltaX"
                , getScrollingDeltaX_function_type( &::osgGA::GUIEventAdapter::getScrollingDeltaX )
                , " get the scrolling x-delta." );
        
        }
        { //::osgGA::GUIEventAdapter::getScrollingDeltaY
        
            typedef float ( ::osgGA::GUIEventAdapter::*getScrollingDeltaY_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getScrollingDeltaY"
                , getScrollingDeltaY_function_type( &::osgGA::GUIEventAdapter::getScrollingDeltaY )
                , " get the scrolling y-delta." );
        
        }
        { //::osgGA::GUIEventAdapter::getScrollingMotion
        
            typedef ::osgGA::GUIEventAdapter::ScrollingMotion ( ::osgGA::GUIEventAdapter::*getScrollingMotion_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getScrollingMotion"
                , getScrollingMotion_function_type( &::osgGA::GUIEventAdapter::getScrollingMotion )
                , " get scrolling motion (for EventType::SCROLL)." );
        
        }
        { //::osgGA::GUIEventAdapter::getTabletPointerType
        
            typedef ::osgGA::GUIEventAdapter::TabletPointerType ( ::osgGA::GUIEventAdapter::*getTabletPointerType_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getTabletPointerType"
                , getTabletPointerType_function_type( &::osgGA::GUIEventAdapter::getTabletPointerType )
                , " get the tablet pointer type." );
        
        }
        { //::osgGA::GUIEventAdapter::getTime
        
            typedef double ( ::osgGA::GUIEventAdapter::*getTime_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getTime"
                , getTime_function_type( &::osgGA::GUIEventAdapter::getTime )
                , " get time in seconds of event." );
        
        }
        { //::osgGA::GUIEventAdapter::getTouchData
        
            typedef ::osgGA::GUIEventAdapter::TouchData * ( ::osgGA::GUIEventAdapter::*getTouchData_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getTouchData"
                , getTouchData_function_type( &::osgGA::GUIEventAdapter::getTouchData )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgGA::GUIEventAdapter::getUnmodifiedKey
        
            typedef int ( ::osgGA::GUIEventAdapter::*getUnmodifiedKey_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getUnmodifiedKey"
                , getUnmodifiedKey_function_type( &::osgGA::GUIEventAdapter::getUnmodifiedKey )
                , " get virtual key pressed." );
        
        }
        { //::osgGA::GUIEventAdapter::getWindowHeight
        
            typedef int ( ::osgGA::GUIEventAdapter::*getWindowHeight_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getWindowHeight"
                , getWindowHeight_function_type( &::osgGA::GUIEventAdapter::getWindowHeight )
                , " get window height." );
        
        }
        { //::osgGA::GUIEventAdapter::getWindowWidth
        
            typedef int ( ::osgGA::GUIEventAdapter::*getWindowWidth_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getWindowWidth"
                , getWindowWidth_function_type( &::osgGA::GUIEventAdapter::getWindowWidth )
                , " get window width." );
        
        }
        { //::osgGA::GUIEventAdapter::getWindowX
        
            typedef int ( ::osgGA::GUIEventAdapter::*getWindowX_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getWindowX"
                , getWindowX_function_type( &::osgGA::GUIEventAdapter::getWindowX )
                , " get window x origin." );
        
        }
        { //::osgGA::GUIEventAdapter::getWindowY
        
            typedef int ( ::osgGA::GUIEventAdapter::*getWindowY_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getWindowY"
                , getWindowY_function_type( &::osgGA::GUIEventAdapter::getWindowY )
                , " get window y origin." );
        
        }
        { //::osgGA::GUIEventAdapter::getX
        
            typedef float ( ::osgGA::GUIEventAdapter::*getX_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getX"
                , getX_function_type( &::osgGA::GUIEventAdapter::getX )
                , " get current mouse x position." );
        
        }
        { //::osgGA::GUIEventAdapter::getXmax
        
            typedef float ( ::osgGA::GUIEventAdapter::*getXmax_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getXmax"
                , getXmax_function_type( &::osgGA::GUIEventAdapter::getXmax )
                , " get mouse maximum x." );
        
        }
        { //::osgGA::GUIEventAdapter::getXmin
        
            typedef float ( ::osgGA::GUIEventAdapter::*getXmin_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getXmin"
                , getXmin_function_type( &::osgGA::GUIEventAdapter::getXmin )
                , " get mouse minimum x." );
        
        }
        { //::osgGA::GUIEventAdapter::getXnormalized
        
            typedef float ( ::osgGA::GUIEventAdapter::*getXnormalized_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getXnormalized"
                , getXnormalized_function_type( &::osgGA::GUIEventAdapter::getXnormalized ) );
        
        }
        { //::osgGA::GUIEventAdapter::getY
        
            typedef float ( ::osgGA::GUIEventAdapter::*getY_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getY"
                , getY_function_type( &::osgGA::GUIEventAdapter::getY )
                , " get current mouse y position." );
        
        }
        { //::osgGA::GUIEventAdapter::getYmax
        
            typedef float ( ::osgGA::GUIEventAdapter::*getYmax_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getYmax"
                , getYmax_function_type( &::osgGA::GUIEventAdapter::getYmax )
                , " get mouse maximum y." );
        
        }
        { //::osgGA::GUIEventAdapter::getYmin
        
            typedef float ( ::osgGA::GUIEventAdapter::*getYmin_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getYmin"
                , getYmin_function_type( &::osgGA::GUIEventAdapter::getYmin )
                , " get mouse minimum y." );
        
        }
        { //::osgGA::GUIEventAdapter::getYnormalized
        
            typedef float ( ::osgGA::GUIEventAdapter::*getYnormalized_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "getYnormalized"
                , getYnormalized_function_type( &::osgGA::GUIEventAdapter::getYnormalized ) );
        
        }
        { //::osgGA::GUIEventAdapter::isMultiTouchEvent
        
            typedef bool ( ::osgGA::GUIEventAdapter::*isMultiTouchEvent_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "isMultiTouchEvent"
                , isMultiTouchEvent_function_type( &::osgGA::GUIEventAdapter::isMultiTouchEvent ) );
        
        }
        { //::osgGA::GUIEventAdapter::isSameKindAs
        
            typedef bool ( ::osgGA::GUIEventAdapter::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( GUIEventAdapter_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            GUIEventAdapter_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgGA::GUIEventAdapter::isSameKindAs)
                , default_isSameKindAs_function_type(&GUIEventAdapter_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgGA::GUIEventAdapter::libraryName
        
            typedef char const * ( ::osgGA::GUIEventAdapter::*libraryName_function_type )(  ) const;
            typedef char const * ( GUIEventAdapter_wrapper::*default_libraryName_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgGA::GUIEventAdapter::libraryName)
                , default_libraryName_function_type(&GUIEventAdapter_wrapper::default_libraryName) );
        
        }
        { //::osgGA::GUIEventAdapter::setButton
        
            typedef void ( ::osgGA::GUIEventAdapter::*setButton_function_type )( int ) ;
            
            GUIEventAdapter_exposer.def( 
                "setButton"
                , setButton_function_type( &::osgGA::GUIEventAdapter::setButton )
                , ( bp::arg("button") )
                , " set button pressed/released." );
        
        }
        { //::osgGA::GUIEventAdapter::setButtonMask
        
            typedef void ( ::osgGA::GUIEventAdapter::*setButtonMask_function_type )( int ) ;
            
            GUIEventAdapter_exposer.def( 
                "setButtonMask"
                , setButtonMask_function_type( &::osgGA::GUIEventAdapter::setButtonMask )
                , ( bp::arg("mask") )
                , " set current mouse button state." );
        
        }
        { //::osgGA::GUIEventAdapter::setEventType
        
            typedef void ( ::osgGA::GUIEventAdapter::*setEventType_function_type )( ::osgGA::GUIEventAdapter::EventType ) ;
            
            GUIEventAdapter_exposer.def( 
                "setEventType"
                , setEventType_function_type( &::osgGA::GUIEventAdapter::setEventType )
                , ( bp::arg("Type") )
                , " set the event type." );
        
        }
        { //::osgGA::GUIEventAdapter::setGraphicsContext
        
            typedef void ( ::osgGA::GUIEventAdapter::*setGraphicsContext_function_type )( ::osg::GraphicsContext * ) ;
            
            GUIEventAdapter_exposer.def( 
                "setGraphicsContext"
                , setGraphicsContext_function_type( &::osgGA::GUIEventAdapter::setGraphicsContext )
                , ( bp::arg("context") ) );
        
        }
        { //::osgGA::GUIEventAdapter::setHandled
        
            typedef void ( ::osgGA::GUIEventAdapter::*setHandled_function_type )( bool ) const;
            
            GUIEventAdapter_exposer.def( 
                "setHandled"
                , setHandled_function_type( &::osgGA::GUIEventAdapter::setHandled )
                , ( bp::arg("handled") )
                , " Set whether this event has been handled by an event handler or not." );
        
        }
        { //::osgGA::GUIEventAdapter::setInputRange
        
            typedef void ( ::osgGA::GUIEventAdapter::*setInputRange_function_type )( float,float,float,float ) ;
            
            GUIEventAdapter_exposer.def( 
                "setInputRange"
                , setInputRange_function_type( &::osgGA::GUIEventAdapter::setInputRange )
                , ( bp::arg("Xmin"), bp::arg("Ymin"), bp::arg("Xmax"), bp::arg("Ymax") )
                , " set mouse input range." );
        
        }
        { //::osgGA::GUIEventAdapter::setKey
        
            typedef void ( ::osgGA::GUIEventAdapter::*setKey_function_type )( int ) ;
            
            GUIEventAdapter_exposer.def( 
                "setKey"
                , setKey_function_type( &::osgGA::GUIEventAdapter::setKey )
                , ( bp::arg("key") )
                , " set key pressed." );
        
        }
        { //::osgGA::GUIEventAdapter::setModKeyMask
        
            typedef void ( ::osgGA::GUIEventAdapter::*setModKeyMask_function_type )( int ) ;
            
            GUIEventAdapter_exposer.def( 
                "setModKeyMask"
                , setModKeyMask_function_type( &::osgGA::GUIEventAdapter::setModKeyMask )
                , ( bp::arg("mask") )
                , " set modifier key mask." );
        
        }
        { //::osgGA::GUIEventAdapter::setMouseYOrientation
        
            typedef void ( ::osgGA::GUIEventAdapter::*setMouseYOrientation_function_type )( ::osgGA::GUIEventAdapter::MouseYOrientation ) ;
            
            GUIEventAdapter_exposer.def( 
                "setMouseYOrientation"
                , setMouseYOrientation_function_type( &::osgGA::GUIEventAdapter::setMouseYOrientation )
                , ( bp::arg("myo") )
                , " set mouse-Y orientation (mouse-Y increases upwards or downwards)." );
        
        }
        { //::osgGA::GUIEventAdapter::setPenPressure
        
            typedef void ( ::osgGA::GUIEventAdapter::*setPenPressure_function_type )( float ) ;
            
            GUIEventAdapter_exposer.def( 
                "setPenPressure"
                , setPenPressure_function_type( &::osgGA::GUIEventAdapter::setPenPressure )
                , ( bp::arg("pressure") )
                , " set the tablet pen pressure (range 0..1)." );
        
        }
        { //::osgGA::GUIEventAdapter::setPenRotation
        
            typedef void ( ::osgGA::GUIEventAdapter::*setPenRotation_function_type )( float ) ;
            
            GUIEventAdapter_exposer.def( 
                "setPenRotation"
                , setPenRotation_function_type( &::osgGA::GUIEventAdapter::setPenRotation )
                , ( bp::arg("rotation") )
                , " set the tablet pen rotation around the Z-axis in degrees." );
        
        }
        { //::osgGA::GUIEventAdapter::setPenTiltX
        
            typedef void ( ::osgGA::GUIEventAdapter::*setPenTiltX_function_type )( float ) ;
            
            GUIEventAdapter_exposer.def( 
                "setPenTiltX"
                , setPenTiltX_function_type( &::osgGA::GUIEventAdapter::setPenTiltX )
                , ( bp::arg("tiltX") )
                , " set the tablet pen tiltX in degrees." );
        
        }
        { //::osgGA::GUIEventAdapter::setPenTiltY
        
            typedef void ( ::osgGA::GUIEventAdapter::*setPenTiltY_function_type )( float ) ;
            
            GUIEventAdapter_exposer.def( 
                "setPenTiltY"
                , setPenTiltY_function_type( &::osgGA::GUIEventAdapter::setPenTiltY )
                , ( bp::arg("tiltY") )
                , " set the tablet pen tiltY in degrees." );
        
        }
        { //::osgGA::GUIEventAdapter::setPointerDataList
        
            typedef void ( ::osgGA::GUIEventAdapter::*setPointerDataList_function_type )( ::std::vector< osg::ref_ptr<osgGA::PointerData> > const & ) ;
            
            GUIEventAdapter_exposer.def( 
                "setPointerDataList"
                , setPointerDataList_function_type( &::osgGA::GUIEventAdapter::setPointerDataList )
                , ( bp::arg("pdl") ) );
        
        }
        { //::osgGA::GUIEventAdapter::setScrollingDeltaX
        
            typedef void ( ::osgGA::GUIEventAdapter::*setScrollingDeltaX_function_type )( float ) ;
            
            GUIEventAdapter_exposer.def( 
                "setScrollingDeltaX"
                , setScrollingDeltaX_function_type( &::osgGA::GUIEventAdapter::setScrollingDeltaX )
                , ( bp::arg("v") )
                , " set the scrolling x-delta." );
        
        }
        { //::osgGA::GUIEventAdapter::setScrollingDeltaY
        
            typedef void ( ::osgGA::GUIEventAdapter::*setScrollingDeltaY_function_type )( float ) ;
            
            GUIEventAdapter_exposer.def( 
                "setScrollingDeltaY"
                , setScrollingDeltaY_function_type( &::osgGA::GUIEventAdapter::setScrollingDeltaY )
                , ( bp::arg("v") )
                , " set the scrolling y-delta." );
        
        }
        { //::osgGA::GUIEventAdapter::setScrollingMotion
        
            typedef void ( ::osgGA::GUIEventAdapter::*setScrollingMotion_function_type )( ::osgGA::GUIEventAdapter::ScrollingMotion ) ;
            
            GUIEventAdapter_exposer.def( 
                "setScrollingMotion"
                , setScrollingMotion_function_type( &::osgGA::GUIEventAdapter::setScrollingMotion )
                , ( bp::arg("motion") )
                , " set scrolling motion (for EventType::SCROLL)." );
        
        }
        { //::osgGA::GUIEventAdapter::setScrollingMotionDelta
        
            typedef void ( ::osgGA::GUIEventAdapter::*setScrollingMotionDelta_function_type )( float,float ) ;
            
            GUIEventAdapter_exposer.def( 
                "setScrollingMotionDelta"
                , setScrollingMotionDelta_function_type( &::osgGA::GUIEventAdapter::setScrollingMotionDelta )
                , ( bp::arg("x"), bp::arg("y") )
                , " set the scrolling delta to x,y and the scrolling motion to SCROLL_2D." );
        
        }
        { //::osgGA::GUIEventAdapter::setTabletPointerType
        
            typedef void ( ::osgGA::GUIEventAdapter::*setTabletPointerType_function_type )( ::osgGA::GUIEventAdapter::TabletPointerType ) ;
            
            GUIEventAdapter_exposer.def( 
                "setTabletPointerType"
                , setTabletPointerType_function_type( &::osgGA::GUIEventAdapter::setTabletPointerType )
                , ( bp::arg("pt") )
                , " set the tablet pointer type." );
        
        }
        { //::osgGA::GUIEventAdapter::setTime
        
            typedef void ( ::osgGA::GUIEventAdapter::*setTime_function_type )( double ) ;
            
            GUIEventAdapter_exposer.def( 
                "setTime"
                , setTime_function_type( &::osgGA::GUIEventAdapter::setTime )
                , ( bp::arg("time") )
                , " set time in seconds of event." );
        
        }
        { //::osgGA::GUIEventAdapter::setUnmodifiedKey
        
            typedef void ( ::osgGA::GUIEventAdapter::*setUnmodifiedKey_function_type )( int ) ;
            
            GUIEventAdapter_exposer.def( 
                "setUnmodifiedKey"
                , setUnmodifiedKey_function_type( &::osgGA::GUIEventAdapter::setUnmodifiedKey )
                , ( bp::arg("key") )
                , " set virtual key pressed." );
        
        }
        { //::osgGA::GUIEventAdapter::setWindowHeight
        
            typedef void ( ::osgGA::GUIEventAdapter::*setWindowHeight_function_type )( int ) ;
            
            GUIEventAdapter_exposer.def( 
                "setWindowHeight"
                , setWindowHeight_function_type( &::osgGA::GUIEventAdapter::setWindowHeight )
                , ( bp::arg("v") )
                , " set window height." );
        
        }
        { //::osgGA::GUIEventAdapter::setWindowRectangle
        
            typedef void ( ::osgGA::GUIEventAdapter::*setWindowRectangle_function_type )( int,int,int,int,bool ) ;
            
            GUIEventAdapter_exposer.def( 
                "setWindowRectangle"
                , setWindowRectangle_function_type( &::osgGA::GUIEventAdapter::setWindowRectangle )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("width"), bp::arg("height"), bp::arg("updateMouseRange")=(bool)(true) )
                , " set window rectangle." );
        
        }
        { //::osgGA::GUIEventAdapter::setWindowWidth
        
            typedef void ( ::osgGA::GUIEventAdapter::*setWindowWidth_function_type )( int ) ;
            
            GUIEventAdapter_exposer.def( 
                "setWindowWidth"
                , setWindowWidth_function_type( &::osgGA::GUIEventAdapter::setWindowWidth )
                , ( bp::arg("v") )
                , " set window width." );
        
        }
        { //::osgGA::GUIEventAdapter::setWindowX
        
            typedef void ( ::osgGA::GUIEventAdapter::*setWindowX_function_type )( int ) ;
            
            GUIEventAdapter_exposer.def( 
                "setWindowX"
                , setWindowX_function_type( &::osgGA::GUIEventAdapter::setWindowX )
                , ( bp::arg("v") )
                , " set window x origin." );
        
        }
        { //::osgGA::GUIEventAdapter::setWindowY
        
            typedef void ( ::osgGA::GUIEventAdapter::*setWindowY_function_type )( int ) ;
            
            GUIEventAdapter_exposer.def( 
                "setWindowY"
                , setWindowY_function_type( &::osgGA::GUIEventAdapter::setWindowY )
                , ( bp::arg("v") )
                , " set window x origin." );
        
        }
        { //::osgGA::GUIEventAdapter::setX
        
            typedef void ( ::osgGA::GUIEventAdapter::*setX_function_type )( float ) ;
            
            GUIEventAdapter_exposer.def( 
                "setX"
                , setX_function_type( &::osgGA::GUIEventAdapter::setX )
                , ( bp::arg("x") )
                , " set current mouse x position." );
        
        }
        { //::osgGA::GUIEventAdapter::setXmax
        
            typedef void ( ::osgGA::GUIEventAdapter::*setXmax_function_type )( float ) ;
            
            GUIEventAdapter_exposer.def( 
                "setXmax"
                , setXmax_function_type( &::osgGA::GUIEventAdapter::setXmax )
                , ( bp::arg("v") )
                , " set mouse maximum x." );
        
        }
        { //::osgGA::GUIEventAdapter::setXmin
        
            typedef void ( ::osgGA::GUIEventAdapter::*setXmin_function_type )( float ) ;
            
            GUIEventAdapter_exposer.def( 
                "setXmin"
                , setXmin_function_type( &::osgGA::GUIEventAdapter::setXmin )
                , ( bp::arg("v") )
                , " set mouse minimum x." );
        
        }
        { //::osgGA::GUIEventAdapter::setY
        
            typedef void ( ::osgGA::GUIEventAdapter::*setY_function_type )( float ) ;
            
            GUIEventAdapter_exposer.def( 
                "setY"
                , setY_function_type( &::osgGA::GUIEventAdapter::setY )
                , ( bp::arg("y") )
                , " set current mouse y position." );
        
        }
        { //::osgGA::GUIEventAdapter::setYmax
        
            typedef void ( ::osgGA::GUIEventAdapter::*setYmax_function_type )( float ) ;
            
            GUIEventAdapter_exposer.def( 
                "setYmax"
                , setYmax_function_type( &::osgGA::GUIEventAdapter::setYmax )
                , ( bp::arg("v") )
                , " set mouse maximum y." );
        
        }
        { //::osgGA::GUIEventAdapter::setYmin
        
            typedef void ( ::osgGA::GUIEventAdapter::*setYmin_function_type )( float ) ;
            
            GUIEventAdapter_exposer.def( 
                "setYmin"
                , setYmin_function_type( &::osgGA::GUIEventAdapter::setYmin )
                , ( bp::arg("v") )
                , " set mouse minimum x." );
        
        }
        { //::osgGA::GUIEventAdapter::time
        
            typedef double ( ::osgGA::GUIEventAdapter::*time_function_type )(  ) const;
            
            GUIEventAdapter_exposer.def( 
                "time"
                , time_function_type( &::osgGA::GUIEventAdapter::time )
                , " deprecated function for getting time of event." );
        
        }
        GUIEventAdapter_exposer.staticmethod( "getAccumulatedEventState" );
    }

}
