// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgText.h"
#include "wrap_referenced.h"
#include "TextBase.pypp.hpp"

namespace bp = boost::python;

struct TextBase_wrapper : osgText::TextBase, bp::wrapper< osgText::TextBase > {

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgText::TextBase::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgText::TextBase::className( );
    }

    virtual ::osg::BoundingBox computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osgText::TextBase::computeBound(  );
        }
    }
    
    ::osg::BoundingBox default_computeBound(  ) const  {
        return osgText::TextBase::computeBound( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgText::TextBase::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgText::TextBase::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgText::TextBase::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgText::TextBase::libraryName( );
    }

    virtual void releaseGLObjects( ::osg::State * state=0 ) const  {
        if( bp::override func_releaseGLObjects = this->get_override( "releaseGLObjects" ) )
            func_releaseGLObjects( boost::python::ptr(state) );
        else{
            this->osgText::TextBase::releaseGLObjects( boost::python::ptr(state) );
        }
    }
    
    void default_releaseGLObjects( ::osg::State * state=0 ) const  {
        osgText::TextBase::releaseGLObjects( boost::python::ptr(state) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osgText::TextBase::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osgText::TextBase::resizeGLObjectBuffers( maxSize );
    }

    virtual void setFont( ::osgText::Font * font=0 ) {
        if( bp::override func_setFont = this->get_override( "setFont" ) )
            func_setFont( boost::python::ptr(font) );
        else{
            this->osgText::TextBase::setFont( boost::python::ptr(font) );
        }
    }
    
    void default_setFont( ::osgText::Font * font=0 ) {
        osgText::TextBase::setFont( boost::python::ptr(font) );
    }

    virtual void setFont( ::osg::ref_ptr< osgText::Font > font ) {
        if( bp::override func_setFont = this->get_override( "setFont" ) )
            func_setFont( font );
        else{
            this->osgText::TextBase::setFont( font );
        }
    }
    
    void default_setFont( ::osg::ref_ptr< osgText::Font > font ) {
        osgText::TextBase::setFont( font );
    }

    virtual void setFont( ::std::string const & fontfile ) {
        if( bp::override func_setFont = this->get_override( "setFont" ) )
            func_setFont( fontfile );
        else{
            this->osgText::TextBase::setFont( fontfile );
        }
    }
    
    void default_setFont( ::std::string const & fontfile ) {
        osgText::TextBase::setFont( fontfile );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osgText::TextBase::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osgText::TextBase::setThreadSafeRefUnref( threadSafe );
    }

    virtual void accept( ::osg::Drawable::AttributeFunctor & arg0 ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(arg0) );
        else{
            this->osg::Drawable::accept( boost::ref(arg0) );
        }
    }
    
    void default_accept( ::osg::Drawable::AttributeFunctor & arg0 ) {
        osg::Drawable::accept( boost::ref(arg0) );
    }

    virtual void accept( ::osg::Drawable::ConstAttributeFunctor & arg0 ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(arg0) );
        else{
            this->osg::Drawable::accept( boost::ref(arg0) );
        }
    }
    
    void default_accept( ::osg::Drawable::ConstAttributeFunctor & arg0 ) const  {
        osg::Drawable::accept( boost::ref(arg0) );
    }

    virtual void accept( ::osg::PrimitiveFunctor & arg0 ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(arg0) );
        else{
            this->osg::Drawable::accept( boost::ref(arg0) );
        }
    }
    
    void default_accept( ::osg::PrimitiveFunctor & arg0 ) const  {
        osg::Drawable::accept( boost::ref(arg0) );
    }

    virtual void accept( ::osg::PrimitiveIndexFunctor & arg0 ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(arg0) );
        else{
            this->osg::Drawable::accept( boost::ref(arg0) );
        }
    }
    
    void default_accept( ::osg::PrimitiveIndexFunctor & arg0 ) const  {
        osg::Drawable::accept( boost::ref(arg0) );
    }

    virtual ::osg::Geometry * asGeometry(  ) {
        if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
            return func_asGeometry(  );
        else{
            return this->osg::Drawable::asGeometry(  );
        }
    }
    
    ::osg::Geometry * default_asGeometry(  ) {
        return osg::Drawable::asGeometry( );
    }

    virtual ::osg::Geometry const * asGeometry(  ) const  {
        if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
            return func_asGeometry(  );
        else{
            return this->osg::Drawable::asGeometry(  );
        }
    }
    
    ::osg::Geometry const * default_asGeometry(  ) const  {
        return osg::Drawable::asGeometry( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & arg0 ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone( boost::ref(arg0) );
    }

    virtual ::osg::Object * cloneType(  ) const {
        bp::override func_cloneType = this->get_override( "cloneType" );
        return func_cloneType(  );
    }

    virtual void compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
        if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
            func_compileGLObjects( boost::ref(renderInfo) );
        else{
            this->osg::Drawable::compileGLObjects( boost::ref(renderInfo) );
        }
    }
    
    void default_compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
        osg::Drawable::compileGLObjects( boost::ref(renderInfo) );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Drawable::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Drawable::computeDataVariance( );
    }

    virtual void dirtyDisplayList(  ) {
        if( bp::override func_dirtyDisplayList = this->get_override( "dirtyDisplayList" ) )
            func_dirtyDisplayList(  );
        else{
            this->osg::Drawable::dirtyDisplayList(  );
        }
    }
    
    void default_dirtyDisplayList(  ) {
        osg::Drawable::dirtyDisplayList( );
    }

    virtual void drawImplementation( ::osg::RenderInfo & renderInfo ) const {
        bp::override func_drawImplementation = this->get_override( "drawImplementation" );
        func_drawImplementation( boost::ref(renderInfo) );
    }

    virtual unsigned int getGLObjectSizeHint(  ) const  {
        if( bp::override func_getGLObjectSizeHint = this->get_override( "getGLObjectSizeHint" ) )
            return func_getGLObjectSizeHint(  );
        else{
            return this->osg::Drawable::getGLObjectSizeHint(  );
        }
    }
    
    unsigned int default_getGLObjectSizeHint(  ) const  {
        return osg::Drawable::getGLObjectSizeHint( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setCullCallback( ::osg::Drawable::CullCallback * cc ) {
        if( bp::override func_setCullCallback = this->get_override( "setCullCallback" ) )
            func_setCullCallback( boost::python::ptr(cc) );
        else{
            this->osg::Drawable::setCullCallback( boost::python::ptr(cc) );
        }
    }
    
    void default_setCullCallback( ::osg::Drawable::CullCallback * cc ) {
        osg::Drawable::setCullCallback( boost::python::ptr(cc) );
    }

    virtual void setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
        if( bp::override func_setDrawCallback = this->get_override( "setDrawCallback" ) )
            func_setDrawCallback( boost::python::ptr(dc) );
        else{
            this->osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
        }
    }
    
    void default_setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
        osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
    }

    virtual void setEventCallback( ::osg::Drawable::EventCallback * ac ) {
        if( bp::override func_setEventCallback = this->get_override( "setEventCallback" ) )
            func_setEventCallback( boost::python::ptr(ac) );
        else{
            this->osg::Drawable::setEventCallback( boost::python::ptr(ac) );
        }
    }
    
    void default_setEventCallback( ::osg::Drawable::EventCallback * ac ) {
        osg::Drawable::setEventCallback( boost::python::ptr(ac) );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
        if( bp::override func_setUpdateCallback = this->get_override( "setUpdateCallback" ) )
            func_setUpdateCallback( boost::python::ptr(ac) );
        else{
            this->osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
        }
    }
    
    void default_setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
        osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
    }

    virtual void setUseVertexBufferObjects( bool flag ) {
        if( bp::override func_setUseVertexBufferObjects = this->get_override( "setUseVertexBufferObjects" ) )
            func_setUseVertexBufferObjects( flag );
        else{
            this->osg::Drawable::setUseVertexBufferObjects( flag );
        }
    }
    
    void default_setUseVertexBufferObjects( bool flag ) {
        osg::Drawable::setUseVertexBufferObjects( flag );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual bool supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Drawable::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
        return osg::Drawable::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Drawable::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
        return osg::Drawable::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Drawable::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
        return osg::Drawable::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Drawable::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
        return osg::Drawable::supports( boost::ref(arg0) );
    }

};

void register_TextBase_class(){

    { //::osgText::TextBase
        typedef bp::class_< TextBase_wrapper, bp::bases< ::osg::Drawable >, osg::ref_ptr< TextBase_wrapper >, boost::noncopyable > TextBase_exposer_t;
        TextBase_exposer_t TextBase_exposer = TextBase_exposer_t( "TextBase", bp::no_init );
        bp::scope TextBase_scope( TextBase_exposer );
        bp::enum_< osgText::TextBase::AlignmentType>("AlignmentType")
            .value("LEFT_TOP", osgText::TextBase::LEFT_TOP)
            .value("LEFT_CENTER", osgText::TextBase::LEFT_CENTER)
            .value("LEFT_BOTTOM", osgText::TextBase::LEFT_BOTTOM)
            .value("CENTER_TOP", osgText::TextBase::CENTER_TOP)
            .value("CENTER_CENTER", osgText::TextBase::CENTER_CENTER)
            .value("CENTER_BOTTOM", osgText::TextBase::CENTER_BOTTOM)
            .value("RIGHT_TOP", osgText::TextBase::RIGHT_TOP)
            .value("RIGHT_CENTER", osgText::TextBase::RIGHT_CENTER)
            .value("RIGHT_BOTTOM", osgText::TextBase::RIGHT_BOTTOM)
            .value("LEFT_BASE_LINE", osgText::TextBase::LEFT_BASE_LINE)
            .value("CENTER_BASE_LINE", osgText::TextBase::CENTER_BASE_LINE)
            .value("RIGHT_BASE_LINE", osgText::TextBase::RIGHT_BASE_LINE)
            .value("LEFT_BOTTOM_BASE_LINE", osgText::TextBase::LEFT_BOTTOM_BASE_LINE)
            .value("CENTER_BOTTOM_BASE_LINE", osgText::TextBase::CENTER_BOTTOM_BASE_LINE)
            .value("RIGHT_BOTTOM_BASE_LINE", osgText::TextBase::RIGHT_BOTTOM_BASE_LINE)
            .value("BASE_LINE", osgText::TextBase::BASE_LINE)
            .export_values()
            ;
        bp::enum_< osgText::TextBase::AxisAlignment>("AxisAlignment")
            .value("XY_PLANE", osgText::TextBase::XY_PLANE)
            .value("REVERSED_XY_PLANE", osgText::TextBase::REVERSED_XY_PLANE)
            .value("XZ_PLANE", osgText::TextBase::XZ_PLANE)
            .value("REVERSED_XZ_PLANE", osgText::TextBase::REVERSED_XZ_PLANE)
            .value("YZ_PLANE", osgText::TextBase::YZ_PLANE)
            .value("REVERSED_YZ_PLANE", osgText::TextBase::REVERSED_YZ_PLANE)
            .value("SCREEN", osgText::TextBase::SCREEN)
            .value("USER_DEFINED_ROTATION", osgText::TextBase::USER_DEFINED_ROTATION)
            .export_values()
            ;
        bp::enum_< osgText::TextBase::CharacterSizeMode>("CharacterSizeMode")
            .value("OBJECT_COORDS", osgText::TextBase::OBJECT_COORDS)
            .value("SCREEN_COORDS", osgText::TextBase::SCREEN_COORDS)
            .value("OBJECT_COORDS_WITH_MAXIMUM_SCREEN_SIZE_CAPPED_BY_FONT_HEIGHT", osgText::TextBase::OBJECT_COORDS_WITH_MAXIMUM_SCREEN_SIZE_CAPPED_BY_FONT_HEIGHT)
            .export_values()
            ;
        bp::enum_< osgText::TextBase::DrawModeMask>("DrawModeMask")
            .value("TEXT", osgText::TextBase::TEXT)
            .value("BOUNDINGBOX", osgText::TextBase::BOUNDINGBOX)
            .value("FILLEDBOUNDINGBOX", osgText::TextBase::FILLEDBOUNDINGBOX)
            .value("ALIGNMENT", osgText::TextBase::ALIGNMENT)
            .export_values()
            ;
        bp::enum_< osgText::TextBase::Layout>("Layout")
            .value("LEFT_TO_RIGHT", osgText::TextBase::LEFT_TO_RIGHT)
            .value("RIGHT_TO_LEFT", osgText::TextBase::RIGHT_TO_LEFT)
            .value("VERTICAL", osgText::TextBase::VERTICAL)
            .export_values()
            ;
        { //::osgText::TextBase::className
        
            typedef char const * ( ::osgText::TextBase::*className_function_type )(  ) const;
            typedef char const * ( TextBase_wrapper::*default_className_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "className"
                , className_function_type(&::osgText::TextBase::className)
                , default_className_function_type(&TextBase_wrapper::default_className) );
        
        }
        { //::osgText::TextBase::computeBound
        
            typedef ::osg::BoundingBox ( ::osgText::TextBase::*computeBound_function_type )(  ) const;
            typedef ::osg::BoundingBox ( TextBase_wrapper::*default_computeBound_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "computeBound"
                , computeBound_function_type(&::osgText::TextBase::computeBound)
                , default_computeBound_function_type(&TextBase_wrapper::default_computeBound) );
        
        }
        { //::osgText::TextBase::getAlignment
        
            typedef ::osgText::TextBase::AlignmentType ( ::osgText::TextBase::*getAlignment_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getAlignment"
                , getAlignment_function_type( &::osgText::TextBase::getAlignment ) );
        
        }
        { //::osgText::TextBase::getAutoRotateToScreen
        
            typedef bool ( ::osgText::TextBase::*getAutoRotateToScreen_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getAutoRotateToScreen"
                , getAutoRotateToScreen_function_type( &::osgText::TextBase::getAutoRotateToScreen ) );
        
        }
        { //::osgText::TextBase::getAxisAlignment
        
            typedef ::osgText::TextBase::AxisAlignment ( ::osgText::TextBase::*getAxisAlignment_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getAxisAlignment"
                , getAxisAlignment_function_type( &::osgText::TextBase::getAxisAlignment ) );
        
        }
        { //::osgText::TextBase::getBoundingBoxColor
        
            typedef ::osg::Vec4 const & ( ::osgText::TextBase::*getBoundingBoxColor_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getBoundingBoxColor"
                , getBoundingBoxColor_function_type( &::osgText::TextBase::getBoundingBoxColor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgText::TextBase::getBoundingBoxMargin
        
            typedef float ( ::osgText::TextBase::*getBoundingBoxMargin_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getBoundingBoxMargin"
                , getBoundingBoxMargin_function_type( &::osgText::TextBase::getBoundingBoxMargin ) );
        
        }
        { //::osgText::TextBase::getCharacterAspectRatio
        
            typedef float ( ::osgText::TextBase::*getCharacterAspectRatio_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getCharacterAspectRatio"
                , getCharacterAspectRatio_function_type( &::osgText::TextBase::getCharacterAspectRatio ) );
        
        }
        { //::osgText::TextBase::getCharacterHeight
        
            typedef float ( ::osgText::TextBase::*getCharacterHeight_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getCharacterHeight"
                , getCharacterHeight_function_type( &::osgText::TextBase::getCharacterHeight ) );
        
        }
        { //::osgText::TextBase::getCharacterSizeMode
        
            typedef ::osgText::TextBase::CharacterSizeMode ( ::osgText::TextBase::*getCharacterSizeMode_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getCharacterSizeMode"
                , getCharacterSizeMode_function_type( &::osgText::TextBase::getCharacterSizeMode )
                , " Get the CharacterSizeMode." );
        
        }
        { //::osgText::TextBase::getColor
        
            typedef ::osg::Vec4 const & ( ::osgText::TextBase::*getColor_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getColor"
                , getColor_function_type( &::osgText::TextBase::getColor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgText::TextBase::getDrawMode
        
            typedef unsigned int ( ::osgText::TextBase::*getDrawMode_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getDrawMode"
                , getDrawMode_function_type( &::osgText::TextBase::getDrawMode ) );
        
        }
        { //::osgText::TextBase::getFont
        
            typedef ::osgText::Font const * ( ::osgText::TextBase::*getFont_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getFont"
                , getFont_function_type( &::osgText::TextBase::getFont )
                , bp::return_internal_reference< >()
                , " Get the font. Return 0 if default is being used." );
        
        }
        { //::osgText::TextBase::getFontHeight
        
            typedef unsigned int ( ::osgText::TextBase::*getFontHeight_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getFontHeight"
                , getFontHeight_function_type( &::osgText::TextBase::getFontHeight ) );
        
        }
        { //::osgText::TextBase::getFontWidth
        
            typedef unsigned int ( ::osgText::TextBase::*getFontWidth_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getFontWidth"
                , getFontWidth_function_type( &::osgText::TextBase::getFontWidth ) );
        
        }
        { //::osgText::TextBase::getKerningType
        
            typedef ::osgText::KerningType ( ::osgText::TextBase::*getKerningType_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getKerningType"
                , getKerningType_function_type( &::osgText::TextBase::getKerningType ) );
        
        }
        { //::osgText::TextBase::getLayout
        
            typedef ::osgText::TextBase::Layout ( ::osgText::TextBase::*getLayout_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getLayout"
                , getLayout_function_type( &::osgText::TextBase::getLayout ) );
        
        }
        { //::osgText::TextBase::getLineCount
        
            typedef unsigned int ( ::osgText::TextBase::*getLineCount_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getLineCount"
                , getLineCount_function_type( &::osgText::TextBase::getLineCount )
                , " Get the number of wrapped lines - only valid after computeGlyphRepresentation() has been called, returns 0 otherwise" );
        
        }
        { //::osgText::TextBase::getLineSpacing
        
            typedef float ( ::osgText::TextBase::*getLineSpacing_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getLineSpacing"
                , getLineSpacing_function_type( &::osgText::TextBase::getLineSpacing )
                , " Get the line spacing of the text box." );
        
        }
        { //::osgText::TextBase::getMaximumHeight
        
            typedef float ( ::osgText::TextBase::*getMaximumHeight_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getMaximumHeight"
                , getMaximumHeight_function_type( &::osgText::TextBase::getMaximumHeight )
                , " Get the maximum height of the text box." );
        
        }
        { //::osgText::TextBase::getMaximumWidth
        
            typedef float ( ::osgText::TextBase::*getMaximumWidth_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getMaximumWidth"
                , getMaximumWidth_function_type( &::osgText::TextBase::getMaximumWidth )
                , " Get the maximim width of the text box." );
        
        }
        { //::osgText::TextBase::getOrCreateStyle
        
            typedef ::osgText::Style * ( ::osgText::TextBase::*getOrCreateStyle_function_type )(  ) ;
            
            TextBase_exposer.def( 
                "getOrCreateStyle"
                , getOrCreateStyle_function_type( &::osgText::TextBase::getOrCreateStyle )
                , bp::return_internal_reference< >()
                , " Get or create the text style." );
        
        }
        { //::osgText::TextBase::getPosition
        
            typedef ::osg::Vec3 const & ( ::osgText::TextBase::*getPosition_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getPosition"
                , getPosition_function_type( &::osgText::TextBase::getPosition )
                , bp::return_internal_reference< >()
                , " Get the position of text." );
        
        }
        { //::osgText::TextBase::getRotation
        
            typedef ::osg::Quat const & ( ::osgText::TextBase::*getRotation_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getRotation"
                , getRotation_function_type( &::osgText::TextBase::getRotation )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgText::TextBase::getStyle
        
            typedef ::osgText::Style * ( ::osgText::TextBase::*getStyle_function_type )(  ) ;
            
            TextBase_exposer.def( 
                "getStyle"
                , getStyle_function_type( &::osgText::TextBase::getStyle )
                , bp::return_internal_reference< >()
                , " Get the text style." );
        
        }
        { //::osgText::TextBase::getStyle
        
            typedef ::osgText::Style const * ( ::osgText::TextBase::*getStyle_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getStyle"
                , getStyle_function_type( &::osgText::TextBase::getStyle )
                , bp::return_internal_reference< >()
                , " Get the const text style." );
        
        }
        { //::osgText::TextBase::getText
        
            typedef ::osgText::String & ( ::osgText::TextBase::*getText_function_type )(  ) ;
            
            TextBase_exposer.def( 
                "getText"
                , getText_function_type( &::osgText::TextBase::getText )
                , bp::return_internal_reference< >()
                , " Get the text string.\n Note, if you modify the string you must call Text::update() for\n the internal glyph reprentation to be updated." );
        
        }
        { //::osgText::TextBase::getText
        
            typedef ::osgText::String const & ( ::osgText::TextBase::*getText_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "getText"
                , getText_function_type( &::osgText::TextBase::getText )
                , bp::return_internal_reference< >()
                , " Get the const text string." );
        
        }
        { //::osgText::TextBase::isSameKindAs
        
            typedef bool ( ::osgText::TextBase::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( TextBase_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            TextBase_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgText::TextBase::isSameKindAs)
                , default_isSameKindAs_function_type(&TextBase_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgText::TextBase::libraryName
        
            typedef char const * ( ::osgText::TextBase::*libraryName_function_type )(  ) const;
            typedef char const * ( TextBase_wrapper::*default_libraryName_function_type )(  ) const;
            
            TextBase_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgText::TextBase::libraryName)
                , default_libraryName_function_type(&TextBase_wrapper::default_libraryName) );
        
        }
        { //::osgText::TextBase::releaseGLObjects
        
            typedef void ( ::osgText::TextBase::*releaseGLObjects_function_type )( ::osg::State * ) const;
            typedef void ( TextBase_wrapper::*default_releaseGLObjects_function_type )( ::osg::State * ) const;
            
            TextBase_exposer.def( 
                "releaseGLObjects"
                , releaseGLObjects_function_type(&::osgText::TextBase::releaseGLObjects)
                , default_releaseGLObjects_function_type(&TextBase_wrapper::default_releaseGLObjects)
                , ( bp::arg("state")=bp::object() ) );
        
        }
        { //::osgText::TextBase::resizeGLObjectBuffers
        
            typedef void ( ::osgText::TextBase::*resizeGLObjectBuffers_function_type )( unsigned int ) ;
            typedef void ( TextBase_wrapper::*default_resizeGLObjectBuffers_function_type )( unsigned int ) ;
            
            TextBase_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osgText::TextBase::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&TextBase_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
        { //::osgText::TextBase::setAlignment
        
            typedef void ( ::osgText::TextBase::*setAlignment_function_type )( ::osgText::TextBase::AlignmentType ) ;
            
            TextBase_exposer.def( 
                "setAlignment"
                , setAlignment_function_type( &::osgText::TextBase::setAlignment )
                , ( bp::arg("alignment") ) );
        
        }
        { //::osgText::TextBase::setAutoRotateToScreen
        
            typedef void ( ::osgText::TextBase::*setAutoRotateToScreen_function_type )( bool ) ;
            
            TextBase_exposer.def( 
                "setAutoRotateToScreen"
                , setAutoRotateToScreen_function_type( &::osgText::TextBase::setAutoRotateToScreen )
                , ( bp::arg("autoRotateToScreen") ) );
        
        }
        { //::osgText::TextBase::setAxisAlignment
        
            typedef void ( ::osgText::TextBase::*setAxisAlignment_function_type )( ::osgText::TextBase::AxisAlignment ) ;
            
            TextBase_exposer.def( 
                "setAxisAlignment"
                , setAxisAlignment_function_type( &::osgText::TextBase::setAxisAlignment )
                , ( bp::arg("axis") ) );
        
        }
        { //::osgText::TextBase::setBoundingBoxColor
        
            typedef void ( ::osgText::TextBase::*setBoundingBoxColor_function_type )( ::osg::Vec4 const & ) ;
            
            TextBase_exposer.def( 
                "setBoundingBoxColor"
                , setBoundingBoxColor_function_type( &::osgText::TextBase::setBoundingBoxColor )
                , ( bp::arg("color") ) );
        
        }
        { //::osgText::TextBase::setBoundingBoxMargin
        
            typedef void ( ::osgText::TextBase::*setBoundingBoxMargin_function_type )( float ) ;
            
            TextBase_exposer.def( 
                "setBoundingBoxMargin"
                , setBoundingBoxMargin_function_type( &::osgText::TextBase::setBoundingBoxMargin )
                , ( bp::arg("margin") ) );
        
        }
        { //::osgText::TextBase::setCharacterSize
        
            typedef void ( ::osgText::TextBase::*setCharacterSize_function_type )( float ) ;
            
            TextBase_exposer.def( 
                "setCharacterSize"
                , setCharacterSize_function_type( &::osgText::TextBase::setCharacterSize )
                , ( bp::arg("height") )
                , " Set the rendered character size in object coordinates." );
        
        }
        { //::osgText::TextBase::setCharacterSize
        
            typedef void ( ::osgText::TextBase::*setCharacterSize_function_type )( float,float ) ;
            
            TextBase_exposer.def( 
                "setCharacterSize"
                , setCharacterSize_function_type( &::osgText::TextBase::setCharacterSize )
                , ( bp::arg("height"), bp::arg("aspectRatio") )
                , " Set the rendered character size in object coordinates." );
        
        }
        { //::osgText::TextBase::setCharacterSizeMode
        
            typedef void ( ::osgText::TextBase::*setCharacterSizeMode_function_type )( ::osgText::TextBase::CharacterSizeMode ) ;
            
            TextBase_exposer.def( 
                "setCharacterSizeMode"
                , setCharacterSizeMode_function_type( &::osgText::TextBase::setCharacterSizeMode )
                , ( bp::arg("mode") )
                , " Set how the CharacterSize value relates to the final rendered character." );
        
        }
        { //::osgText::TextBase::setColor
        
            typedef void ( ::osgText::TextBase::*setColor_function_type )( ::osg::Vec4 const & ) ;
            
            TextBase_exposer.def( 
                "setColor"
                , setColor_function_type( &::osgText::TextBase::setColor )
                , ( bp::arg("color") ) );
        
        }
        { //::osgText::TextBase::setDrawMode
        
            typedef void ( ::osgText::TextBase::*setDrawMode_function_type )( unsigned int ) ;
            
            TextBase_exposer.def( 
                "setDrawMode"
                , setDrawMode_function_type( &::osgText::TextBase::setDrawMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::osgText::TextBase::setFont
        
            typedef void ( ::osgText::TextBase::*setFont_function_type )( ::osgText::Font * ) ;
            typedef void ( TextBase_wrapper::*default_setFont_function_type )( ::osgText::Font * ) ;
            
            TextBase_exposer.def( 
                "setFont"
                , setFont_function_type(&::osgText::TextBase::setFont)
                , default_setFont_function_type(&TextBase_wrapper::default_setFont)
                , ( bp::arg("font")=bp::object() ) );
        
        }
        { //::osgText::TextBase::setFont
        
            typedef void ( ::osgText::TextBase::*setFont_function_type )( ::osg::ref_ptr< osgText::Font > ) ;
            typedef void ( TextBase_wrapper::*default_setFont_function_type )( ::osg::ref_ptr< osgText::Font > ) ;
            
            TextBase_exposer.def( 
                "setFont"
                , setFont_function_type(&::osgText::TextBase::setFont)
                , default_setFont_function_type(&TextBase_wrapper::default_setFont)
                , ( bp::arg("font") ) );
        
        }
        { //::osgText::TextBase::setFont
        
            typedef void ( ::osgText::TextBase::*setFont_function_type )( ::std::string const & ) ;
            typedef void ( TextBase_wrapper::*default_setFont_function_type )( ::std::string const & ) ;
            
            TextBase_exposer.def( 
                "setFont"
                , setFont_function_type(&::osgText::TextBase::setFont)
                , default_setFont_function_type(&TextBase_wrapper::default_setFont)
                , ( bp::arg("fontfile") ) );
        
        }
        { //::osgText::TextBase::setFontResolution
        
            typedef void ( ::osgText::TextBase::*setFontResolution_function_type )( unsigned int,unsigned int ) ;
            
            TextBase_exposer.def( 
                "setFontResolution"
                , setFontResolution_function_type( &::osgText::TextBase::setFontResolution )
                , ( bp::arg("width"), bp::arg("height") )
                , " Set the Font reference width and height resolution in texels.\n Note, the size may not be supported by current font,\n the closest supported font size will be selected." );
        
        }
        { //::osgText::TextBase::setKerningType
        
            typedef void ( ::osgText::TextBase::*setKerningType_function_type )( ::osgText::KerningType ) ;
            
            TextBase_exposer.def( 
                "setKerningType"
                , setKerningType_function_type( &::osgText::TextBase::setKerningType )
                , ( bp::arg("kerningType") ) );
        
        }
        { //::osgText::TextBase::setLayout
        
            typedef void ( ::osgText::TextBase::*setLayout_function_type )( ::osgText::TextBase::Layout ) ;
            
            TextBase_exposer.def( 
                "setLayout"
                , setLayout_function_type( &::osgText::TextBase::setLayout )
                , ( bp::arg("layout") ) );
        
        }
        { //::osgText::TextBase::setLineSpacing
        
            typedef void ( ::osgText::TextBase::*setLineSpacing_function_type )( float ) ;
            
            TextBase_exposer.def( 
                "setLineSpacing"
                , setLineSpacing_function_type( &::osgText::TextBase::setLineSpacing )
                , ( bp::arg("lineSpacing") )
                , " Set the line spacing of the text box, given as a percentage of\n the character height. The default value is 0 for backward\n compatibility. For longer paragraphs of text, a value of at\n least 25% (i.e. set line spacing to 0.25) is recommended." );
        
        }
        { //::osgText::TextBase::setMaximumHeight
        
            typedef void ( ::osgText::TextBase::*setMaximumHeight_function_type )( float ) ;
            
            TextBase_exposer.def( 
                "setMaximumHeight"
                , setMaximumHeight_function_type( &::osgText::TextBase::setMaximumHeight )
                , ( bp::arg("maximumHeight") )
                , " Set the maximum height of the text box.\n With horizontal layouts any characters which do not fit are wrapped around.\n 0 or negative values indicate that no maximum height is set, lines can be as long as\n they need be to fit the required text" );
        
        }
        { //::osgText::TextBase::setMaximumWidth
        
            typedef void ( ::osgText::TextBase::*setMaximumWidth_function_type )( float ) ;
            
            TextBase_exposer.def( 
                "setMaximumWidth"
                , setMaximumWidth_function_type( &::osgText::TextBase::setMaximumWidth )
                , ( bp::arg("maximumWidth") )
                , " Set the maximum width of the text box.\n With horizontal layouts any characters which do not fit are wrapped around.\n 0 or negative values indicate that no maximum width is set, lines can be as long as\n they need be to fit thre required text" );
        
        }
        { //::osgText::TextBase::setPosition
        
            typedef void ( ::osgText::TextBase::*setPosition_function_type )( ::osg::Vec3 const & ) ;
            
            TextBase_exposer.def( 
                "setPosition"
                , setPosition_function_type( &::osgText::TextBase::setPosition )
                , ( bp::arg("pos") )
                , " Set the position of text." );
        
        }
        { //::osgText::TextBase::setRotation
        
            typedef void ( ::osgText::TextBase::*setRotation_function_type )( ::osg::Quat const & ) ;
            
            TextBase_exposer.def( 
                "setRotation"
                , setRotation_function_type( &::osgText::TextBase::setRotation )
                , ( bp::arg("quat") ) );
        
        }
        { //::osgText::TextBase::setStyle
        
            typedef void ( ::osgText::TextBase::*setStyle_function_type )( ::osgText::Style * ) ;
            
            TextBase_exposer.def( 
                "setStyle"
                , setStyle_function_type( &::osgText::TextBase::setStyle )
                , ( bp::arg("style") )
                , " Set the text style." );
        
        }
        { //::osgText::TextBase::setText
        
            typedef void ( ::osgText::TextBase::*setText_function_type )( ::osgText::String const & ) ;
            
            TextBase_exposer.def( 
                "setText"
                , setText_function_type( &::osgText::TextBase::setText )
                , ( bp::arg("text") )
                , " Set the text using a osgText::String." );
        
        }
        { //::osgText::TextBase::setText
        
            typedef void ( ::osgText::TextBase::*setText_function_type )( ::std::string const & ) ;
            
            TextBase_exposer.def( 
                "setText"
                , setText_function_type( &::osgText::TextBase::setText )
                , ( bp::arg("text") )
                , " Set the text using a std::string,\n which is converted to an internal TextString." );
        
        }
        { //::osgText::TextBase::setText
        
            typedef void ( ::osgText::TextBase::*setText_function_type )( ::std::string const &,::osgText::String::Encoding ) ;
            
            TextBase_exposer.def( 
                "setText"
                , setText_function_type( &::osgText::TextBase::setText )
                , ( bp::arg("text"), bp::arg("encoding") )
                , " Set the text using a Unicode encoded std::string, which is converted to an internal TextString.\n The encoding parameter specificies which Unicode encodeding is used in the std::string." );
        
        }
        { //::osgText::TextBase::setText
        
            typedef void ( ::osgText::TextBase::*setText_function_type )( wchar_t const * ) ;
            
            TextBase_exposer.def( 
                "setText"
                , setText_function_type( &::osgText::TextBase::setText )
                , ( bp::arg("text") )
                , " Set the text using a wchar_t string,\n which is converted to an internal TextString." );
        
        }
        { //::osgText::TextBase::setThreadSafeRefUnref
        
            typedef void ( ::osgText::TextBase::*setThreadSafeRefUnref_function_type )( bool ) ;
            typedef void ( TextBase_wrapper::*default_setThreadSafeRefUnref_function_type )( bool ) ;
            
            TextBase_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osgText::TextBase::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&TextBase_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osgText::TextBase::update
        
            typedef void ( ::osgText::TextBase::*update_function_type )(  ) ;
            
            TextBase_exposer.def( 
                "update"
                , update_function_type( &::osgText::TextBase::update )
                , " update internal glyph respresentation used for rendering,\n and bounding volume." );
        
        }
    }

}
