// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgText.h"
#include "wrap_referenced.h"
#include "Glyph.pypp.hpp"

namespace bp = boost::python;

struct Glyph_wrapper : osgText::Glyph, bp::wrapper< osgText::Glyph > {

    Glyph_wrapper(::osgText::Font * font, unsigned int glyphCode )
    : osgText::Glyph( boost::python::ptr(font), glyphCode )
      , bp::wrapper< osgText::Glyph >(){
        // constructor
    
    }

    virtual void allocateImage( int s, int t, int r, ::GLenum pixelFormat, ::GLenum type, int packing=1 ) {
        if( bp::override func_allocateImage = this->get_override( "allocateImage" ) )
            func_allocateImage( s, t, r, pixelFormat, type, packing );
        else{
            this->osg::Image::allocateImage( s, t, r, pixelFormat, type, packing );
        }
    }
    
    void default_allocateImage( int s, int t, int r, ::GLenum pixelFormat, ::GLenum type, int packing=1 ) {
        osg::Image::allocateImage( s, t, r, pixelFormat, type, packing );
    }

    virtual ::osg::Array * asArray(  ) {
        if( bp::override func_asArray = this->get_override( "asArray" ) )
            return func_asArray(  );
        else{
            return this->osg::BufferData::asArray(  );
        }
    }
    
    ::osg::Array * default_asArray(  ) {
        return osg::BufferData::asArray( );
    }

    virtual ::osg::Array const * asArray(  ) const  {
        if( bp::override func_asArray = this->get_override( "asArray" ) )
            return func_asArray(  );
        else{
            return this->osg::BufferData::asArray(  );
        }
    }
    
    ::osg::Array const * default_asArray(  ) const  {
        return osg::BufferData::asArray( );
    }

    virtual ::osg::Image * asImage(  ) {
        if( bp::override func_asImage = this->get_override( "asImage" ) )
            return func_asImage(  );
        else{
            return this->osg::Image::asImage(  );
        }
    }
    
    ::osg::Image * default_asImage(  ) {
        return osg::Image::asImage( );
    }

    virtual ::osg::Image const * asImage(  ) const  {
        if( bp::override func_asImage = this->get_override( "asImage" ) )
            return func_asImage(  );
        else{
            return this->osg::Image::asImage(  );
        }
    }
    
    ::osg::Image const * default_asImage(  ) const  {
        return osg::Image::asImage( );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::Image::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::Image::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osg::Image::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osg::Image::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osg::Image::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osg::Image::cloneType( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual void copySubImage( int s_offset, int t_offset, int r_offset, ::osg::Image const * source ) {
        if( bp::override func_copySubImage = this->get_override( "copySubImage" ) )
            func_copySubImage( s_offset, t_offset, r_offset, boost::python::ptr(source) );
        else{
            this->osg::Image::copySubImage( s_offset, t_offset, r_offset, boost::python::ptr(source) );
        }
    }
    
    void default_copySubImage( int s_offset, int t_offset, int r_offset, ::osg::Image const * source ) {
        osg::Image::copySubImage( s_offset, t_offset, r_offset, boost::python::ptr(source) );
    }

    virtual ::GLvoid const * getDataPointer(  ) const  {
        if( bp::override func_getDataPointer = this->get_override( "getDataPointer" ) )
            return func_getDataPointer(  );
        else{
            return this->osg::Image::getDataPointer(  );
        }
    }
    
    ::GLvoid const * default_getDataPointer(  ) const  {
        return osg::Image::getDataPointer( );
    }

    virtual unsigned int getTotalDataSize(  ) const  {
        if( bp::override func_getTotalDataSize = this->get_override( "getTotalDataSize" ) )
            return func_getTotalDataSize(  );
        else{
            return this->osg::Image::getTotalDataSize(  );
        }
    }
    
    unsigned int default_getTotalDataSize(  ) const  {
        return osg::Image::getTotalDataSize( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool isImageTranslucent(  ) const  {
        if( bp::override func_isImageTranslucent = this->get_override( "isImageTranslucent" ) )
            return func_isImageTranslucent(  );
        else{
            return this->osg::Image::isImageTranslucent(  );
        }
    }
    
    bool default_isImageTranslucent(  ) const  {
        return osg::Image::isImageTranslucent( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osg::Image::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osg::Image::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::Image::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::Image::libraryName( );
    }

    virtual void readImageFromCurrentTexture( unsigned int contextID, bool copyMipMapsIfAvailable, ::GLenum type=5121, unsigned int face=0 ) {
        if( bp::override func_readImageFromCurrentTexture = this->get_override( "readImageFromCurrentTexture" ) )
            func_readImageFromCurrentTexture( contextID, copyMipMapsIfAvailable, type, face );
        else{
            this->osg::Image::readImageFromCurrentTexture( contextID, copyMipMapsIfAvailable, type, face );
        }
    }
    
    void default_readImageFromCurrentTexture( unsigned int contextID, bool copyMipMapsIfAvailable, ::GLenum type=5121, unsigned int face=0 ) {
        osg::Image::readImageFromCurrentTexture( contextID, copyMipMapsIfAvailable, type, face );
    }

    virtual void readPixels( int x, int y, int width, int height, ::GLenum pixelFormat, ::GLenum type, int packing=1 ) {
        if( bp::override func_readPixels = this->get_override( "readPixels" ) )
            func_readPixels( x, y, width, height, pixelFormat, type, packing );
        else{
            this->osg::Image::readPixels( x, y, width, height, pixelFormat, type, packing );
        }
    }
    
    void default_readPixels( int x, int y, int width, int height, ::GLenum pixelFormat, ::GLenum type, int packing=1 ) {
        osg::Image::readPixels( x, y, width, height, pixelFormat, type, packing );
    }

    virtual bool requiresUpdateCall(  ) const  {
        if( bp::override func_requiresUpdateCall = this->get_override( "requiresUpdateCall" ) )
            return func_requiresUpdateCall(  );
        else{
            return this->osg::Image::requiresUpdateCall(  );
        }
    }
    
    bool default_requiresUpdateCall(  ) const  {
        return osg::Image::requiresUpdateCall( );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::BufferData::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::BufferData::resizeGLObjectBuffers( maxSize );
    }

    virtual void scaleImage( int s, int t, int r, ::GLenum newDataType ) {
        if( bp::override func_scaleImage = this->get_override( "scaleImage" ) )
            func_scaleImage( s, t, r, newDataType );
        else{
            this->osg::Image::scaleImage( s, t, r, newDataType );
        }
    }
    
    void default_scaleImage( int s, int t, int r, ::GLenum newDataType ) {
        osg::Image::scaleImage( s, t, r, newDataType );
    }

    virtual bool sendFocusHint( bool arg0 ) {
        if( bp::override func_sendFocusHint = this->get_override( "sendFocusHint" ) )
            return func_sendFocusHint( arg0 );
        else{
            return this->osg::Image::sendFocusHint( arg0 );
        }
    }
    
    bool default_sendFocusHint( bool arg0 ) {
        return osg::Image::sendFocusHint( arg0 );
    }

    virtual bool sendKeyEvent( int arg0, bool arg1 ) {
        if( bp::override func_sendKeyEvent = this->get_override( "sendKeyEvent" ) )
            return func_sendKeyEvent( arg0, arg1 );
        else{
            return this->osg::Image::sendKeyEvent( arg0, arg1 );
        }
    }
    
    bool default_sendKeyEvent( int arg0, bool arg1 ) {
        return osg::Image::sendKeyEvent( arg0, arg1 );
    }

    virtual bool sendPointerEvent( int arg0, int arg1, int arg2 ) {
        if( bp::override func_sendPointerEvent = this->get_override( "sendPointerEvent" ) )
            return func_sendPointerEvent( arg0, arg1, arg2 );
        else{
            return this->osg::Image::sendPointerEvent( arg0, arg1, arg2 );
        }
    }
    
    bool default_sendPointerEvent( int arg0, int arg1, int arg2 ) {
        return osg::Image::sendPointerEvent( arg0, arg1, arg2 );
    }

    virtual void setFrameLastRendered( ::osg::FrameStamp const * arg0 ) {
        if( bp::override func_setFrameLastRendered = this->get_override( "setFrameLastRendered" ) )
            func_setFrameLastRendered( boost::python::ptr(arg0) );
        else{
            this->osg::Image::setFrameLastRendered( boost::python::ptr(arg0) );
        }
    }
    
    void default_setFrameLastRendered( ::osg::FrameStamp const * arg0 ) {
        osg::Image::setFrameLastRendered( boost::python::ptr(arg0) );
    }

    virtual void setImage( int s, int t, int r, ::GLint internalTextureformat, ::GLenum pixelFormat, ::GLenum type, unsigned char * data, ::osg::Image::AllocationMode mode, int packing=1, int rowLength=0 ) {
        if( bp::override func_setImage = this->get_override( "setImage" ) )
            func_setImage( s, t, r, internalTextureformat, pixelFormat, type, data, mode, packing, rowLength );
        else{
            this->osg::Image::setImage( s, t, r, internalTextureformat, pixelFormat, type, data, mode, packing, rowLength );
        }
    }
    
    void default_setImage( int s, int t, int r, ::GLint internalTextureformat, ::GLenum pixelFormat, ::GLenum type, unsigned char * data, ::osg::Image::AllocationMode mode, int packing=1, int rowLength=0 ) {
        osg::Image::setImage( s, t, r, internalTextureformat, pixelFormat, type, data, mode, packing, rowLength );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual void update( ::osg::NodeVisitor * arg0 ) {
        if( bp::override func_update = this->get_override( "update" ) )
            func_update( boost::python::ptr(arg0) );
        else{
            this->osg::Image::update( boost::python::ptr(arg0) );
        }
    }
    
    void default_update( ::osg::NodeVisitor * arg0 ) {
        osg::Image::update( boost::python::ptr(arg0) );
    }

};

void register_Glyph_class(){

    bp::class_< Glyph_wrapper, bp::bases< ::osg::Image >, osg::ref_ptr< Glyph_wrapper >, boost::noncopyable >( "Glyph", bp::no_init )    
        .def( bp::init< osgText::Font *, unsigned int >(( bp::arg("font"), bp::arg("glyphCode") )) )    
        .def( 
            "getFont"
            , (::osgText::Font * ( ::osgText::Glyph::* )(  ) )( &::osgText::Glyph::getFont )
            , bp::return_internal_reference< >() )    
        .def( 
            "getFont"
            , (::osgText::Font const * ( ::osgText::Glyph::* )(  ) const)( &::osgText::Glyph::getFont )
            , bp::return_internal_reference< >() )    
        .def( 
            "getGlyphCode"
            , (unsigned int ( ::osgText::Glyph::* )(  ) const)( &::osgText::Glyph::getGlyphCode ) )    
        .def( 
            "getHeight"
            , (float ( ::osgText::Glyph::* )(  ) const)( &::osgText::Glyph::getHeight ) )    
        .def( 
            "getHorizontalAdvance"
            , (float ( ::osgText::Glyph::* )(  ) const)( &::osgText::Glyph::getHorizontalAdvance ) )    
        .def( 
            "getHorizontalBearing"
            , (::osg::Vec2 const & ( ::osgText::Glyph::* )(  ) const)( &::osgText::Glyph::getHorizontalBearing )
            , bp::return_internal_reference< >() )    
        .def( 
            "getMaxTexCoord"
            , (::osg::Vec2 const & ( ::osgText::Glyph::* )(  ) const)( &::osgText::Glyph::getMaxTexCoord )
            , bp::return_internal_reference< >() )    
        .def( 
            "getMinTexCoord"
            , (::osg::Vec2 const & ( ::osgText::Glyph::* )(  ) const)( &::osgText::Glyph::getMinTexCoord )
            , bp::return_internal_reference< >() )    
        .def( 
            "getTexture"
            , (::osgText::GlyphTexture * ( ::osgText::Glyph::* )(  ) )( &::osgText::Glyph::getTexture )
            , bp::return_internal_reference< >() )    
        .def( 
            "getTexture"
            , (::osgText::GlyphTexture const * ( ::osgText::Glyph::* )(  ) const)( &::osgText::Glyph::getTexture )
            , bp::return_internal_reference< >() )    
        .def( 
            "getTexturePositionX"
            , (int ( ::osgText::Glyph::* )(  ) const)( &::osgText::Glyph::getTexturePositionX ) )    
        .def( 
            "getTexturePositionY"
            , (int ( ::osgText::Glyph::* )(  ) const)( &::osgText::Glyph::getTexturePositionY ) )    
        .def( 
            "getVerticalAdvance"
            , (float ( ::osgText::Glyph::* )(  ) const)( &::osgText::Glyph::getVerticalAdvance ) )    
        .def( 
            "getVerticalBearing"
            , (::osg::Vec2 const & ( ::osgText::Glyph::* )(  ) const)( &::osgText::Glyph::getVerticalBearing )
            , bp::return_internal_reference< >() )    
        .def( 
            "getWidth"
            , (float ( ::osgText::Glyph::* )(  ) const)( &::osgText::Glyph::getWidth ) )    
        .def( 
            "setHeight"
            , (void ( ::osgText::Glyph::* )( float ) )( &::osgText::Glyph::setHeight )
            , ( bp::arg("height") ) )    
        .def( 
            "setHorizontalAdvance"
            , (void ( ::osgText::Glyph::* )( float ) )( &::osgText::Glyph::setHorizontalAdvance )
            , ( bp::arg("advance") ) )    
        .def( 
            "setHorizontalBearing"
            , (void ( ::osgText::Glyph::* )( ::osg::Vec2 const & ) )( &::osgText::Glyph::setHorizontalBearing )
            , ( bp::arg("bearing") ) )    
        .def( 
            "setMaxTexCoord"
            , (void ( ::osgText::Glyph::* )( ::osg::Vec2 const & ) )( &::osgText::Glyph::setMaxTexCoord )
            , ( bp::arg("coord") ) )    
        .def( 
            "setMinTexCoord"
            , (void ( ::osgText::Glyph::* )( ::osg::Vec2 const & ) )( &::osgText::Glyph::setMinTexCoord )
            , ( bp::arg("coord") ) )    
        .def( 
            "setTexture"
            , (void ( ::osgText::Glyph::* )( ::osgText::GlyphTexture * ) )( &::osgText::Glyph::setTexture )
            , ( bp::arg("texture") ) )    
        .def( 
            "setTexturePosition"
            , (void ( ::osgText::Glyph::* )( int,int ) )( &::osgText::Glyph::setTexturePosition )
            , ( bp::arg("posX"), bp::arg("posY") ) )    
        .def( 
            "setVerticalAdvance"
            , (void ( ::osgText::Glyph::* )( float ) )( &::osgText::Glyph::setVerticalAdvance )
            , ( bp::arg("advance") ) )    
        .def( 
            "setVerticalBearing"
            , (void ( ::osgText::Glyph::* )( ::osg::Vec2 const & ) )( &::osgText::Glyph::setVerticalBearing )
            , ( bp::arg("bearing") ) )    
        .def( 
            "setWidth"
            , (void ( ::osgText::Glyph::* )( float ) )( &::osgText::Glyph::setWidth )
            , ( bp::arg("width") ) )    
        .def( 
            "subload"
            , (void ( ::osgText::Glyph::* )(  ) const)( &::osgText::Glyph::subload ) );

}
