// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgText.h"
#include "wrap_referenced.h"
#include "Text3D.pypp.hpp"

namespace bp = boost::python;

struct Text3D_wrapper : osgText::Text3D, bp::wrapper< osgText::Text3D > {

    Text3D_wrapper( )
    : osgText::Text3D( )
      , bp::wrapper< osgText::Text3D >(){
        // null constructor
    
    }

    virtual void accept( ::osg::Drawable::ConstAttributeFunctor & af ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(af) );
        else{
            this->osgText::Text3D::accept( boost::ref(af) );
        }
    }
    
    void default_accept( ::osg::Drawable::ConstAttributeFunctor & af ) const  {
        osgText::Text3D::accept( boost::ref(af) );
    }

    virtual void accept( ::osg::PrimitiveFunctor & pf ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(pf) );
        else{
            this->osgText::Text3D::accept( boost::ref(pf) );
        }
    }
    
    void default_accept( ::osg::PrimitiveFunctor & pf ) const  {
        osgText::Text3D::accept( boost::ref(pf) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgText::Text3D::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgText::Text3D::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgText::Text3D::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgText::Text3D::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgText::Text3D::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgText::Text3D::cloneType( );
    }

    virtual ::osg::BoundingBox computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osgText::Text3D::computeBound(  );
        }
    }
    
    ::osg::BoundingBox default_computeBound(  ) const  {
        return osgText::Text3D::computeBound( );
    }

    virtual void drawImplementation( ::osg::RenderInfo & renderInfo ) const  {
        if( bp::override func_drawImplementation = this->get_override( "drawImplementation" ) )
            func_drawImplementation( boost::ref(renderInfo) );
        else{
            this->osgText::Text3D::drawImplementation( boost::ref(renderInfo) );
        }
    }
    
    void default_drawImplementation( ::osg::RenderInfo & renderInfo ) const  {
        osgText::Text3D::drawImplementation( boost::ref(renderInfo) );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgText::Text3D::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgText::Text3D::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgText::Text3D::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgText::Text3D::libraryName( );
    }

    virtual void releaseGLObjects( ::osg::State * state=0 ) const  {
        if( bp::override func_releaseGLObjects = this->get_override( "releaseGLObjects" ) )
            func_releaseGLObjects( boost::python::ptr(state) );
        else{
            this->osgText::Text3D::releaseGLObjects( boost::python::ptr(state) );
        }
    }
    
    void default_releaseGLObjects( ::osg::State * state=0 ) const  {
        osgText::Text3D::releaseGLObjects( boost::python::ptr(state) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osgText::Text3D::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osgText::Text3D::resizeGLObjectBuffers( maxSize );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osgText::Text3D::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osgText::Text3D::setThreadSafeRefUnref( threadSafe );
    }

    virtual bool supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osgText::Text3D::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
        return osgText::Text3D::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osgText::Text3D::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
        return osgText::Text3D::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osgText::Text3D::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
        return osgText::Text3D::supports( boost::ref(arg0) );
    }

    virtual void accept( ::osg::Drawable::AttributeFunctor & arg0 ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(arg0) );
        else{
            this->osg::Drawable::accept( boost::ref(arg0) );
        }
    }
    
    void default_accept( ::osg::Drawable::AttributeFunctor & arg0 ) {
        osg::Drawable::accept( boost::ref(arg0) );
    }

    virtual void accept( ::osg::PrimitiveIndexFunctor & arg0 ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(arg0) );
        else{
            this->osg::Drawable::accept( boost::ref(arg0) );
        }
    }
    
    void default_accept( ::osg::PrimitiveIndexFunctor & arg0 ) const  {
        osg::Drawable::accept( boost::ref(arg0) );
    }

    virtual ::osg::Geometry * asGeometry(  ) {
        if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
            return func_asGeometry(  );
        else{
            return this->osg::Drawable::asGeometry(  );
        }
    }
    
    ::osg::Geometry * default_asGeometry(  ) {
        return osg::Drawable::asGeometry( );
    }

    virtual ::osg::Geometry const * asGeometry(  ) const  {
        if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
            return func_asGeometry(  );
        else{
            return this->osg::Drawable::asGeometry(  );
        }
    }
    
    ::osg::Geometry const * default_asGeometry(  ) const  {
        return osg::Drawable::asGeometry( );
    }

    virtual void compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
        if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
            func_compileGLObjects( boost::ref(renderInfo) );
        else{
            this->osg::Drawable::compileGLObjects( boost::ref(renderInfo) );
        }
    }
    
    void default_compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
        osg::Drawable::compileGLObjects( boost::ref(renderInfo) );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Drawable::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Drawable::computeDataVariance( );
    }

    virtual void dirtyDisplayList(  ) {
        if( bp::override func_dirtyDisplayList = this->get_override( "dirtyDisplayList" ) )
            func_dirtyDisplayList(  );
        else{
            this->osg::Drawable::dirtyDisplayList(  );
        }
    }
    
    void default_dirtyDisplayList(  ) {
        osg::Drawable::dirtyDisplayList( );
    }

    virtual unsigned int getGLObjectSizeHint(  ) const  {
        if( bp::override func_getGLObjectSizeHint = this->get_override( "getGLObjectSizeHint" ) )
            return func_getGLObjectSizeHint(  );
        else{
            return this->osg::Drawable::getGLObjectSizeHint(  );
        }
    }
    
    unsigned int default_getGLObjectSizeHint(  ) const  {
        return osg::Drawable::getGLObjectSizeHint( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setCullCallback( ::osg::Drawable::CullCallback * cc ) {
        if( bp::override func_setCullCallback = this->get_override( "setCullCallback" ) )
            func_setCullCallback( boost::python::ptr(cc) );
        else{
            this->osg::Drawable::setCullCallback( boost::python::ptr(cc) );
        }
    }
    
    void default_setCullCallback( ::osg::Drawable::CullCallback * cc ) {
        osg::Drawable::setCullCallback( boost::python::ptr(cc) );
    }

    virtual void setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
        if( bp::override func_setDrawCallback = this->get_override( "setDrawCallback" ) )
            func_setDrawCallback( boost::python::ptr(dc) );
        else{
            this->osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
        }
    }
    
    void default_setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
        osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
    }

    virtual void setEventCallback( ::osg::Drawable::EventCallback * ac ) {
        if( bp::override func_setEventCallback = this->get_override( "setEventCallback" ) )
            func_setEventCallback( boost::python::ptr(ac) );
        else{
            this->osg::Drawable::setEventCallback( boost::python::ptr(ac) );
        }
    }
    
    void default_setEventCallback( ::osg::Drawable::EventCallback * ac ) {
        osg::Drawable::setEventCallback( boost::python::ptr(ac) );
    }

    virtual void setFont( ::osgText::Font * font=0 ) {
        if( bp::override func_setFont = this->get_override( "setFont" ) )
            func_setFont( boost::python::ptr(font) );
        else{
            this->osgText::TextBase::setFont( boost::python::ptr(font) );
        }
    }
    
    void default_setFont( ::osgText::Font * font=0 ) {
        osgText::TextBase::setFont( boost::python::ptr(font) );
    }

    virtual void setFont( ::osg::ref_ptr< osgText::Font > font ) {
        if( bp::override func_setFont = this->get_override( "setFont" ) )
            func_setFont( font );
        else{
            this->osgText::TextBase::setFont( font );
        }
    }
    
    void default_setFont( ::osg::ref_ptr< osgText::Font > font ) {
        osgText::TextBase::setFont( font );
    }

    virtual void setFont( ::std::string const & fontfile ) {
        if( bp::override func_setFont = this->get_override( "setFont" ) )
            func_setFont( fontfile );
        else{
            this->osgText::TextBase::setFont( fontfile );
        }
    }
    
    void default_setFont( ::std::string const & fontfile ) {
        osgText::TextBase::setFont( fontfile );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
        if( bp::override func_setUpdateCallback = this->get_override( "setUpdateCallback" ) )
            func_setUpdateCallback( boost::python::ptr(ac) );
        else{
            this->osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
        }
    }
    
    void default_setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
        osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
    }

    virtual void setUseVertexBufferObjects( bool flag ) {
        if( bp::override func_setUseVertexBufferObjects = this->get_override( "setUseVertexBufferObjects" ) )
            func_setUseVertexBufferObjects( flag );
        else{
            this->osg::Drawable::setUseVertexBufferObjects( flag );
        }
    }
    
    void default_setUseVertexBufferObjects( bool flag ) {
        osg::Drawable::setUseVertexBufferObjects( flag );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual bool supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Drawable::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
        return osg::Drawable::supports( boost::ref(arg0) );
    }

};

void register_Text3D_class(){

    { //::osgText::Text3D
        typedef bp::class_< Text3D_wrapper, bp::bases< osgText::TextBase >, osg::ref_ptr< Text3D_wrapper >, boost::noncopyable > Text3D_exposer_t;
        Text3D_exposer_t Text3D_exposer = Text3D_exposer_t( "Text3D", bp::no_init );
        bp::scope Text3D_scope( Text3D_exposer );
        bp::enum_< osgText::Text3D::RenderMode>("RenderMode")
            .value("PER_FACE", osgText::Text3D::PER_FACE)
            .value("PER_GLYPH", osgText::Text3D::PER_GLYPH)
            .export_values()
            ;
        Text3D_exposer.def( bp::init< >() );
        { //::osgText::Text3D::accept
        
            typedef void ( ::osgText::Text3D::*accept_function_type )( ::osg::Drawable::ConstAttributeFunctor & ) const;
            typedef void ( Text3D_wrapper::*default_accept_function_type )( ::osg::Drawable::ConstAttributeFunctor & ) const;
            
            Text3D_exposer.def( 
                "accept"
                , accept_function_type(&::osgText::Text3D::accept)
                , default_accept_function_type(&Text3D_wrapper::default_accept)
                , ( bp::arg("af") ) );
        
        }
        { //::osgText::Text3D::accept
        
            typedef void ( ::osgText::Text3D::*accept_function_type )( ::osg::PrimitiveFunctor & ) const;
            typedef void ( Text3D_wrapper::*default_accept_function_type )( ::osg::PrimitiveFunctor & ) const;
            
            Text3D_exposer.def( 
                "accept"
                , accept_function_type(&::osgText::Text3D::accept)
                , default_accept_function_type(&Text3D_wrapper::default_accept)
                , ( bp::arg("pf") ) );
        
        }
        { //::osgText::Text3D::className
        
            typedef char const * ( ::osgText::Text3D::*className_function_type )(  ) const;
            typedef char const * ( Text3D_wrapper::*default_className_function_type )(  ) const;
            
            Text3D_exposer.def( 
                "className"
                , className_function_type(&::osgText::Text3D::className)
                , default_className_function_type(&Text3D_wrapper::default_className) );
        
        }
        { //::osgText::Text3D::clone
        
            typedef ::osg::Object * ( ::osgText::Text3D::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Text3D_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Text3D_exposer.def( 
                "clone"
                , clone_function_type(&::osgText::Text3D::clone)
                , default_clone_function_type(&Text3D_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgText::Text3D::cloneType
        
            typedef ::osg::Object * ( ::osgText::Text3D::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Text3D_wrapper::*default_cloneType_function_type )(  ) const;
            
            Text3D_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgText::Text3D::cloneType)
                , default_cloneType_function_type(&Text3D_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgText::Text3D::computeBound
        
            typedef ::osg::BoundingBox ( ::osgText::Text3D::*computeBound_function_type )(  ) const;
            typedef ::osg::BoundingBox ( Text3D_wrapper::*default_computeBound_function_type )(  ) const;
            
            Text3D_exposer.def( 
                "computeBound"
                , computeBound_function_type(&::osgText::Text3D::computeBound)
                , default_computeBound_function_type(&Text3D_wrapper::default_computeBound) );
        
        }
        { //::osgText::Text3D::drawImplementation
        
            typedef void ( ::osgText::Text3D::*drawImplementation_function_type )( ::osg::RenderInfo & ) const;
            typedef void ( Text3D_wrapper::*default_drawImplementation_function_type )( ::osg::RenderInfo & ) const;
            
            Text3D_exposer.def( 
                "drawImplementation"
                , drawImplementation_function_type(&::osgText::Text3D::drawImplementation)
                , default_drawImplementation_function_type(&Text3D_wrapper::default_drawImplementation)
                , ( bp::arg("renderInfo") ) );
        
        }
        { //::osgText::Text3D::getBackStateSet
        
            typedef ::osg::StateSet * ( ::osgText::Text3D::*getBackStateSet_function_type )(  ) ;
            
            Text3D_exposer.def( 
                "getBackStateSet"
                , getBackStateSet_function_type( &::osgText::Text3D::getBackStateSet )
                , bp::return_internal_reference< >()
                , " Get the back StateSet" );
        
        }
        { //::osgText::Text3D::getBackStateSet
        
            typedef ::osg::StateSet * ( ::osgText::Text3D::*getBackStateSet_function_type )(  ) const;
            
            Text3D_exposer.def( 
                "getBackStateSet"
                , getBackStateSet_function_type( &::osgText::Text3D::getBackStateSet )
                , bp::return_internal_reference< >()
                , " Get the back StateSet" );
        
        }
        { //::osgText::Text3D::getCharacterDepth
        
            typedef float ( ::osgText::Text3D::*getCharacterDepth_function_type )(  ) const;
            
            Text3D_exposer.def( 
                "getCharacterDepth"
                , getCharacterDepth_function_type( &::osgText::Text3D::getCharacterDepth )
                , " Get the Charactere Depth of text." );
        
        }
        { //::osgText::Text3D::getOrCreateBackStateSet
        
            typedef ::osg::StateSet * ( ::osgText::Text3D::*getOrCreateBackStateSet_function_type )(  ) ;
            
            Text3D_exposer.def( 
                "getOrCreateBackStateSet"
                , getOrCreateBackStateSet_function_type( &::osgText::Text3D::getOrCreateBackStateSet )
                , bp::return_internal_reference< >()
                , " Get or create the back StateSet" );
        
        }
        { //::osgText::Text3D::getOrCreateWallStateSet
        
            typedef ::osg::StateSet * ( ::osgText::Text3D::*getOrCreateWallStateSet_function_type )(  ) ;
            
            Text3D_exposer.def( 
                "getOrCreateWallStateSet"
                , getOrCreateWallStateSet_function_type( &::osgText::Text3D::getOrCreateWallStateSet )
                , bp::return_internal_reference< >()
                , " Get or create the wall StateSet" );
        
        }
        { //::osgText::Text3D::getRenderMode
        
            typedef ::osgText::Text3D::RenderMode ( ::osgText::Text3D::*getRenderMode_function_type )(  ) const;
            
            Text3D_exposer.def( 
                "getRenderMode"
                , getRenderMode_function_type( &::osgText::Text3D::getRenderMode )
                , " Get the render mode used to render the text." );
        
        }
        { //::osgText::Text3D::getWallStateSet
        
            typedef ::osg::StateSet * ( ::osgText::Text3D::*getWallStateSet_function_type )(  ) ;
            
            Text3D_exposer.def( 
                "getWallStateSet"
                , getWallStateSet_function_type( &::osgText::Text3D::getWallStateSet )
                , bp::return_internal_reference< >()
                , " Get the wall StateSet" );
        
        }
        { //::osgText::Text3D::getWallStateSet
        
            typedef ::osg::StateSet const * ( ::osgText::Text3D::*getWallStateSet_function_type )(  ) const;
            
            Text3D_exposer.def( 
                "getWallStateSet"
                , getWallStateSet_function_type( &::osgText::Text3D::getWallStateSet )
                , bp::return_internal_reference< >()
                , " Get the wall StateSet" );
        
        }
        { //::osgText::Text3D::isSameKindAs
        
            typedef bool ( ::osgText::Text3D::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Text3D_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Text3D_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgText::Text3D::isSameKindAs)
                , default_isSameKindAs_function_type(&Text3D_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgText::Text3D::libraryName
        
            typedef char const * ( ::osgText::Text3D::*libraryName_function_type )(  ) const;
            typedef char const * ( Text3D_wrapper::*default_libraryName_function_type )(  ) const;
            
            Text3D_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgText::Text3D::libraryName)
                , default_libraryName_function_type(&Text3D_wrapper::default_libraryName) );
        
        }
        { //::osgText::Text3D::releaseGLObjects
        
            typedef void ( ::osgText::Text3D::*releaseGLObjects_function_type )( ::osg::State * ) const;
            typedef void ( Text3D_wrapper::*default_releaseGLObjects_function_type )( ::osg::State * ) const;
            
            Text3D_exposer.def( 
                "releaseGLObjects"
                , releaseGLObjects_function_type(&::osgText::Text3D::releaseGLObjects)
                , default_releaseGLObjects_function_type(&Text3D_wrapper::default_releaseGLObjects)
                , ( bp::arg("state")=bp::object() ) );
        
        }
        { //::osgText::Text3D::resizeGLObjectBuffers
        
            typedef void ( ::osgText::Text3D::*resizeGLObjectBuffers_function_type )( unsigned int ) ;
            typedef void ( Text3D_wrapper::*default_resizeGLObjectBuffers_function_type )( unsigned int ) ;
            
            Text3D_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osgText::Text3D::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&Text3D_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
        { //::osgText::Text3D::setBackStateSet
        
            typedef void ( ::osgText::Text3D::*setBackStateSet_function_type )( ::osg::StateSet * ) ;
            
            Text3D_exposer.def( 
                "setBackStateSet"
                , setBackStateSet_function_type( &::osgText::Text3D::setBackStateSet )
                , ( bp::arg("backStateSet") )
                , " Set the back StateSet" );
        
        }
        { //::osgText::Text3D::setCharacterDepth
        
            typedef void ( ::osgText::Text3D::*setCharacterDepth_function_type )( float ) ;
            
            Text3D_exposer.def( 
                "setCharacterDepth"
                , setCharacterDepth_function_type( &::osgText::Text3D::setCharacterDepth )
                , ( bp::arg("characterDepth") )
                , " Set the Charactere Depth of text." );
        
        }
        { //::osgText::Text3D::setRenderMode
        
            typedef void ( ::osgText::Text3D::*setRenderMode_function_type )( ::osgText::Text3D::RenderMode ) ;
            
            Text3D_exposer.def( 
                "setRenderMode"
                , setRenderMode_function_type( &::osgText::Text3D::setRenderMode )
                , ( bp::arg("renderMode") )
                , " Set the render mode used to render the text." );
        
        }
        { //::osgText::Text3D::setThreadSafeRefUnref
        
            typedef void ( ::osgText::Text3D::*setThreadSafeRefUnref_function_type )( bool ) ;
            typedef void ( Text3D_wrapper::*default_setThreadSafeRefUnref_function_type )( bool ) ;
            
            Text3D_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osgText::Text3D::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&Text3D_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        { //::osgText::Text3D::setWallStateSet
        
            typedef void ( ::osgText::Text3D::*setWallStateSet_function_type )( ::osg::StateSet * ) ;
            
            Text3D_exposer.def( 
                "setWallStateSet"
                , setWallStateSet_function_type( &::osgText::Text3D::setWallStateSet )
                , ( bp::arg("wallStateSet") )
                , " Set the wall StateSet" );
        
        }
        { //::osgText::Text3D::supports
        
            typedef bool ( ::osgText::Text3D::*supports_function_type )( ::osg::Drawable::AttributeFunctor const & ) const;
            typedef bool ( Text3D_wrapper::*default_supports_function_type )( ::osg::Drawable::AttributeFunctor const & ) const;
            
            Text3D_exposer.def( 
                "supports"
                , supports_function_type(&::osgText::Text3D::supports)
                , default_supports_function_type(&Text3D_wrapper::default_supports)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgText::Text3D::supports
        
            typedef bool ( ::osgText::Text3D::*supports_function_type )( ::osg::Drawable::ConstAttributeFunctor const & ) const;
            typedef bool ( Text3D_wrapper::*default_supports_function_type )( ::osg::Drawable::ConstAttributeFunctor const & ) const;
            
            Text3D_exposer.def( 
                "supports"
                , supports_function_type(&::osgText::Text3D::supports)
                , default_supports_function_type(&Text3D_wrapper::default_supports)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgText::Text3D::supports
        
            typedef bool ( ::osgText::Text3D::*supports_function_type )( ::osg::PrimitiveFunctor const & ) const;
            typedef bool ( Text3D_wrapper::*default_supports_function_type )( ::osg::PrimitiveFunctor const & ) const;
            
            Text3D_exposer.def( 
                "supports"
                , supports_function_type(&::osgText::Text3D::supports)
                , default_supports_function_type(&Text3D_wrapper::default_supports)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgText::TextBase::setFont
        
            typedef void ( ::osgText::TextBase::*setFont_function_type )( ::osgText::Font * ) ;
            typedef void ( Text3D_wrapper::*default_setFont_function_type )( ::osgText::Font * ) ;
            
            Text3D_exposer.def( 
                "setFont"
                , setFont_function_type(&::osgText::TextBase::setFont)
                , default_setFont_function_type(&Text3D_wrapper::default_setFont)
                , ( bp::arg("font")=bp::object() ) );
        
        }
        { //::osgText::TextBase::setFont
        
            typedef void ( ::osgText::TextBase::*setFont_function_type )( ::osg::ref_ptr< osgText::Font > ) ;
            typedef void ( Text3D_wrapper::*default_setFont_function_type )( ::osg::ref_ptr< osgText::Font > ) ;
            
            Text3D_exposer.def( 
                "setFont"
                , setFont_function_type(&::osgText::TextBase::setFont)
                , default_setFont_function_type(&Text3D_wrapper::default_setFont)
                , ( bp::arg("font") ) );
        
        }
        { //::osgText::TextBase::setFont
        
            typedef void ( ::osgText::TextBase::*setFont_function_type )( ::std::string const & ) ;
            typedef void ( Text3D_wrapper::*default_setFont_function_type )( ::std::string const & ) ;
            
            Text3D_exposer.def( 
                "setFont"
                , setFont_function_type(&::osgText::TextBase::setFont)
                , default_setFont_function_type(&Text3D_wrapper::default_setFont)
                , ( bp::arg("fontfile") ) );
        
        }
    }

}
