// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgText.h"
#include "wrap_referenced.h"
#include "Font.pypp.hpp"

namespace bp = boost::python;

struct Font_wrapper : osgText::Font, bp::wrapper< osgText::Font > {

    struct FontImplementation_wrapper : osgText::Font::FontImplementation, bp::wrapper< osgText::Font::FontImplementation > {
    
        virtual ::std::string getFileName(  ) const {
            bp::override func_getFileName = this->get_override( "getFileName" );
            return func_getFileName(  );
        }
    
        virtual ::osgText::Glyph * getGlyph( ::osgText::FontResolution const & fontRes, unsigned int charcode ){
            bp::override func_getGlyph = this->get_override( "getGlyph" );
            return func_getGlyph( boost::ref(fontRes), charcode );
        }
    
        virtual ::osgText::Glyph3D * getGlyph3D( unsigned int charcode ){
            bp::override func_getGlyph3D = this->get_override( "getGlyph3D" );
            return func_getGlyph3D( charcode );
        }
    
        virtual ::osg::Vec2 getKerning( unsigned int leftcharcode, unsigned int rightcharcode, ::osgText::KerningType kerningType ){
            bp::override func_getKerning = this->get_override( "getKerning" );
            return func_getKerning( leftcharcode, rightcharcode, kerningType );
        }
    
        virtual bool getVerticalSize( float & arg0, float & arg1 ) const  {
            if( bp::override func_getVerticalSize = this->get_override( "getVerticalSize" ) )
                return func_getVerticalSize( arg0, arg1 );
            else{
                return this->osgText::Font::FontImplementation::getVerticalSize( arg0, arg1 );
            }
        }
        
        bool default_getVerticalSize( float & arg0, float & arg1 ) const  {
            return osgText::Font::FontImplementation::getVerticalSize( arg0, arg1 );
        }
    
        virtual bool hasVertical(  ) const {
            bp::override func_hasVertical = this->get_override( "hasVertical" );
            return func_hasVertical(  );
        }
    
        virtual bool supportsMultipleFontResolutions(  ) const {
            bp::override func_supportsMultipleFontResolutions = this->get_override( "supportsMultipleFontResolutions" );
            return func_supportsMultipleFontResolutions(  );
        }
    
        static ::osgText::Font * get__facade(osgText::Font::FontImplementation const & inst ){
            return inst._facade;
        }
        
        static void set__facade( osgText::Font::FontImplementation & inst, ::osgText::Font * new_value ){ 
            inst._facade = new_value;
        }
    
    };

    Font_wrapper(::osgText::Font::FontImplementation * implementation=0 )
    : osgText::Font( boost::python::ptr(implementation) )
      , bp::wrapper< osgText::Font >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgText::Font::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgText::Font::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & arg0 ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(arg0) );
        else{
            return this->osgText::Font::clone( boost::ref(arg0) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & arg0 ) const  {
        return osgText::Font::clone( boost::ref(arg0) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgText::Font::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgText::Font::cloneType( );
    }

    virtual ::std::string getFileName(  ) const  {
        if( bp::override func_getFileName = this->get_override( "getFileName" ) )
            return func_getFileName(  );
        else{
            return this->osgText::Font::getFileName(  );
        }
    }
    
    ::std::string default_getFileName(  ) const  {
        return osgText::Font::getFileName( );
    }

    virtual ::osgText::Glyph * getGlyph( ::osgText::FontResolution const & fontSize, unsigned int charcode ) {
        if( bp::override func_getGlyph = this->get_override( "getGlyph" ) )
            return func_getGlyph( boost::ref(fontSize), charcode );
        else{
            return this->osgText::Font::getGlyph( boost::ref(fontSize), charcode );
        }
    }
    
    ::osgText::Glyph * default_getGlyph( ::osgText::FontResolution const & fontSize, unsigned int charcode ) {
        return osgText::Font::getGlyph( boost::ref(fontSize), charcode );
    }

    virtual ::osgText::Glyph3D * getGlyph3D( unsigned int charcode ) {
        if( bp::override func_getGlyph3D = this->get_override( "getGlyph3D" ) )
            return func_getGlyph3D( charcode );
        else{
            return this->osgText::Font::getGlyph3D( charcode );
        }
    }
    
    ::osgText::Glyph3D * default_getGlyph3D( unsigned int charcode ) {
        return osgText::Font::getGlyph3D( charcode );
    }

    virtual ::osg::Vec2 getKerning( unsigned int leftcharcode, unsigned int rightcharcode, ::osgText::KerningType kerningType ) {
        if( bp::override func_getKerning = this->get_override( "getKerning" ) )
            return func_getKerning( leftcharcode, rightcharcode, kerningType );
        else{
            return this->osgText::Font::getKerning( leftcharcode, rightcharcode, kerningType );
        }
    }
    
    ::osg::Vec2 default_getKerning( unsigned int leftcharcode, unsigned int rightcharcode, ::osgText::KerningType kerningType ) {
        return osgText::Font::getKerning( leftcharcode, rightcharcode, kerningType );
    }

    virtual bool getVerticalSize( float & ascender, float & descender ) const  {
        if( bp::override func_getVerticalSize = this->get_override( "getVerticalSize" ) )
            return func_getVerticalSize( ascender, descender );
        else{
            return this->osgText::Font::getVerticalSize( ascender, descender );
        }
    }
    
    bool default_getVerticalSize( float & ascender, float & descender ) const  {
        return osgText::Font::getVerticalSize( ascender, descender );
    }

    virtual bool hasVertical(  ) const  {
        if( bp::override func_hasVertical = this->get_override( "hasVertical" ) )
            return func_hasVertical(  );
        else{
            return this->osgText::Font::hasVertical(  );
        }
    }
    
    bool default_hasVertical(  ) const  {
        return osgText::Font::hasVertical( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgText::Font::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgText::Font::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgText::Font::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgText::Font::libraryName( );
    }

    virtual void releaseGLObjects( ::osg::State * state=0 ) const  {
        if( bp::override func_releaseGLObjects = this->get_override( "releaseGLObjects" ) )
            func_releaseGLObjects( boost::python::ptr(state) );
        else{
            this->osgText::Font::releaseGLObjects( boost::python::ptr(state) );
        }
    }
    
    void default_releaseGLObjects( ::osg::State * state=0 ) const  {
        osgText::Font::releaseGLObjects( boost::python::ptr(state) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osgText::Font::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osgText::Font::resizeGLObjectBuffers( maxSize );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osgText::Font::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osgText::Font::setThreadSafeRefUnref( threadSafe );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_Font_class(){

    { //::osgText::Font
        typedef bp::class_< Font_wrapper, bp::bases< ::osg::Object >, osg::ref_ptr< Font_wrapper >, boost::noncopyable > Font_exposer_t;
        Font_exposer_t Font_exposer = Font_exposer_t( "Font", "\n Pure virtual base class for fonts.\n Concrete implementation are the DefaultFont found in src/osgText/DefaultFont.cpp\n and FreeTypeFont found in src/osgPlugins/freetype/FreeTypeFont.cpp\n", bp::no_init );
        bp::scope Font_scope( Font_exposer );
        bp::class_< Font_wrapper::FontImplementation_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< Font_wrapper::FontImplementation_wrapper >, boost::noncopyable >( "FontImplementation", bp::no_init )    
            .def( 
                "addGlyph"
                , (void ( ::osgText::Font::FontImplementation::* )( ::osgText::FontResolution const &,unsigned int,::osgText::Glyph * ) )( &::osgText::Font::FontImplementation::addGlyph )
                , ( bp::arg("fontRes"), bp::arg("charcode"), bp::arg("glyph") ) )    
            .def( 
                "getFileName"
                , bp::pure_virtual( (::std::string ( ::osgText::Font::FontImplementation::* )(  ) const)(&::osgText::Font::FontImplementation::getFileName) ) )    
            .def( 
                "getGlyph"
                , bp::pure_virtual( (::osgText::Glyph * ( ::osgText::Font::FontImplementation::* )( ::osgText::FontResolution const &,unsigned int ) )(&::osgText::Font::FontImplementation::getGlyph) )
                , ( bp::arg("fontRes"), bp::arg("charcode") )
                , bp::return_internal_reference< >()
                , "\n Get a Glyph for specified charcode, and the font size nearest to the current font size hint.\n" )    
            .def( 
                "getGlyph3D"
                , bp::pure_virtual( (::osgText::Glyph3D * ( ::osgText::Font::FontImplementation::* )( unsigned int ) )(&::osgText::Font::FontImplementation::getGlyph3D) )
                , ( bp::arg("charcode") )
                , bp::return_internal_reference< >()
                , "\n Get a Glyph3D for specified charcode.\n" )    
            .def( 
                "getKerning"
                , bp::pure_virtual( (::osg::Vec2 ( ::osgText::Font::FontImplementation::* )( unsigned int,unsigned int,::osgText::KerningType ) )(&::osgText::Font::FontImplementation::getKerning) )
                , ( bp::arg("leftcharcode"), bp::arg("rightcharcode"), bp::arg("kerningType") )
                , "\n Get a kerning (adjustment of spacing of two adjacent character) for specified charcodes, w.r.t the current font size hint.\n" )    
            .def( 
                "getVerticalSize"
                , (bool ( ::osgText::Font::FontImplementation::* )( float &,float & ) const)(&::osgText::Font::FontImplementation::getVerticalSize)
                , (bool ( Font_wrapper::FontImplementation_wrapper::* )( float &,float & ) const)(&Font_wrapper::FontImplementation_wrapper::default_getVerticalSize)
                , ( bp::arg("arg0"), bp::arg("arg1") ) )    
            .def( 
                "hasVertical"
                , bp::pure_virtual( (bool ( ::osgText::Font::FontImplementation::* )(  ) const)(&::osgText::Font::FontImplementation::hasVertical) )
                , "\n Return true if this font provides vertical alignments and spacing or glyphs.\n" )    
            .def( 
                "supportsMultipleFontResolutions"
                , bp::pure_virtual( (bool ( ::osgText::Font::FontImplementation::* )(  ) const)(&::osgText::Font::FontImplementation::supportsMultipleFontResolutions) ) )    
            .add_property( "_facade"
                        , bp::make_function( (::osgText::Font * (*)( ::osgText::Font::FontImplementation const & ))(&Font_wrapper::FontImplementation_wrapper::get__facade), bp::return_internal_reference< >() )
                        , bp::make_function( (void (*)( ::osgText::Font::FontImplementation &,::osgText::Font * ))(&Font_wrapper::FontImplementation_wrapper::set__facade), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
        Font_exposer.def( bp::init< bp::optional< osgText::Font::FontImplementation * > >(( bp::arg("implementation")=bp::object() )) );
        bp::implicitly_convertible< osgText::Font::FontImplementation *, osgText::Font >();
        { //::osgText::Font::className
        
            typedef char const * ( ::osgText::Font::*className_function_type )(  ) const;
            typedef char const * ( Font_wrapper::*default_className_function_type )(  ) const;
            
            Font_exposer.def( 
                "className"
                , className_function_type(&::osgText::Font::className)
                , default_className_function_type(&Font_wrapper::default_className) );
        
        }
        { //::osgText::Font::clone
        
            typedef ::osg::Object * ( ::osgText::Font::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Font_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Font_exposer.def( 
                "clone"
                , clone_function_type(&::osgText::Font::clone)
                , default_clone_function_type(&Font_wrapper::default_clone)
                , ( bp::arg("arg0") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgText::Font::cloneType
        
            typedef ::osg::Object * ( ::osgText::Font::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Font_wrapper::*default_cloneType_function_type )(  ) const;
            
            Font_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgText::Font::cloneType)
                , default_cloneType_function_type(&Font_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgText::Font::getDefaultFont
        
            typedef ::osg::ref_ptr< osgText::Font > & ( *getDefaultFont_function_type )(  );
            
            Font_exposer.def( 
                "getDefaultFont"
                , getDefaultFont_function_type( &::osgText::Font::getDefaultFont )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgText::Font::getFileName
        
            typedef ::std::string ( ::osgText::Font::*getFileName_function_type )(  ) const;
            typedef ::std::string ( Font_wrapper::*default_getFileName_function_type )(  ) const;
            
            Font_exposer.def( 
                "getFileName"
                , getFileName_function_type(&::osgText::Font::getFileName)
                , default_getFileName_function_type(&Font_wrapper::default_getFileName) );
        
        }
        { //::osgText::Font::getFontDepth
        
            typedef unsigned int ( ::osgText::Font::*getFontDepth_function_type )(  ) const;
            
            Font_exposer.def( 
                "getFontDepth"
                , getFontDepth_function_type( &::osgText::Font::getFontDepth ) );
        
        }
        { //::osgText::Font::getGlyph
        
            typedef ::osgText::Glyph * ( ::osgText::Font::*getGlyph_function_type )( ::osgText::FontResolution const &,unsigned int ) ;
            typedef ::osgText::Glyph * ( Font_wrapper::*default_getGlyph_function_type )( ::osgText::FontResolution const &,unsigned int ) ;
            
            Font_exposer.def( 
                "getGlyph"
                , getGlyph_function_type(&::osgText::Font::getGlyph)
                , default_getGlyph_function_type(&Font_wrapper::default_getGlyph)
                , ( bp::arg("fontSize"), bp::arg("charcode") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgText::Font::getGlyph3D
        
            typedef ::osgText::Glyph3D * ( ::osgText::Font::*getGlyph3D_function_type )( unsigned int ) ;
            typedef ::osgText::Glyph3D * ( Font_wrapper::*default_getGlyph3D_function_type )( unsigned int ) ;
            
            Font_exposer.def( 
                "getGlyph3D"
                , getGlyph3D_function_type(&::osgText::Font::getGlyph3D)
                , default_getGlyph3D_function_type(&Font_wrapper::default_getGlyph3D)
                , ( bp::arg("charcode") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgText::Font::getGlyphImageMargin
        
            typedef unsigned int ( ::osgText::Font::*getGlyphImageMargin_function_type )(  ) const;
            
            Font_exposer.def( 
                "getGlyphImageMargin"
                , getGlyphImageMargin_function_type( &::osgText::Font::getGlyphImageMargin ) );
        
        }
        { //::osgText::Font::getGlyphImageMarginRatio
        
            typedef float ( ::osgText::Font::*getGlyphImageMarginRatio_function_type )(  ) const;
            
            Font_exposer.def( 
                "getGlyphImageMarginRatio"
                , getGlyphImageMarginRatio_function_type( &::osgText::Font::getGlyphImageMarginRatio ) );
        
        }
        { //::osgText::Font::getGlyphTextureList
        
            typedef ::std::vector< osg::ref_ptr<osgText::GlyphTexture> > & ( ::osgText::Font::*getGlyphTextureList_function_type )(  ) ;
            
            Font_exposer.def( 
                "getGlyphTextureList"
                , getGlyphTextureList_function_type( &::osgText::Font::getGlyphTextureList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgText::Font::getImplementation
        
            typedef ::osgText::Font::FontImplementation * ( ::osgText::Font::*getImplementation_function_type )(  ) ;
            
            Font_exposer.def( 
                "getImplementation"
                , getImplementation_function_type( &::osgText::Font::getImplementation )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgText::Font::getImplementation
        
            typedef ::osgText::Font::FontImplementation const * ( ::osgText::Font::*getImplementation_function_type )(  ) const;
            
            Font_exposer.def( 
                "getImplementation"
                , getImplementation_function_type( &::osgText::Font::getImplementation )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgText::Font::getKerning
        
            typedef ::osg::Vec2 ( ::osgText::Font::*getKerning_function_type )( unsigned int,unsigned int,::osgText::KerningType ) ;
            typedef ::osg::Vec2 ( Font_wrapper::*default_getKerning_function_type )( unsigned int,unsigned int,::osgText::KerningType ) ;
            
            Font_exposer.def( 
                "getKerning"
                , getKerning_function_type(&::osgText::Font::getKerning)
                , default_getKerning_function_type(&Font_wrapper::default_getKerning)
                , ( bp::arg("leftcharcode"), bp::arg("rightcharcode"), bp::arg("kerningType") ) );
        
        }
        { //::osgText::Font::getMagFilterHint
        
            typedef ::osg::Texture::FilterMode ( ::osgText::Font::*getMagFilterHint_function_type )(  ) const;
            
            Font_exposer.def( 
                "getMagFilterHint"
                , getMagFilterHint_function_type( &::osgText::Font::getMagFilterHint ) );
        
        }
        { //::osgText::Font::getMinFilterHint
        
            typedef ::osg::Texture::FilterMode ( ::osgText::Font::*getMinFilterHint_function_type )(  ) const;
            
            Font_exposer.def( 
                "getMinFilterHint"
                , getMinFilterHint_function_type( &::osgText::Font::getMinFilterHint ) );
        
        }
        { //::osgText::Font::getNumberCurveSamples
        
            typedef unsigned int ( ::osgText::Font::*getNumberCurveSamples_function_type )(  ) const;
            
            Font_exposer.def( 
                "getNumberCurveSamples"
                , getNumberCurveSamples_function_type( &::osgText::Font::getNumberCurveSamples ) );
        
        }
        { //::osgText::Font::getStateSet
        
            typedef ::osg::StateSet * ( ::osgText::Font::*getStateSet_function_type )(  ) ;
            
            Font_exposer.def( 
                "getStateSet"
                , getStateSet_function_type( &::osgText::Font::getStateSet )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgText::Font::getStateSet
        
            typedef ::osg::StateSet const * ( ::osgText::Font::*getStateSet_function_type )(  ) const;
            
            Font_exposer.def( 
                "getStateSet"
                , getStateSet_function_type( &::osgText::Font::getStateSet )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgText::Font::getTexEnv
        
            typedef ::osg::TexEnv * ( ::osgText::Font::*getTexEnv_function_type )(  ) ;
            
            Font_exposer.def( 
                "getTexEnv"
                , getTexEnv_function_type( &::osgText::Font::getTexEnv )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgText::Font::getTexEnv
        
            typedef ::osg::TexEnv const * ( ::osgText::Font::*getTexEnv_function_type )(  ) const;
            
            Font_exposer.def( 
                "getTexEnv"
                , getTexEnv_function_type( &::osgText::Font::getTexEnv )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgText::Font::getTextureHeightHint
        
            typedef unsigned int ( ::osgText::Font::*getTextureHeightHint_function_type )(  ) const;
            
            Font_exposer.def( 
                "getTextureHeightHint"
                , getTextureHeightHint_function_type( &::osgText::Font::getTextureHeightHint ) );
        
        }
        { //::osgText::Font::getTextureWidthHint
        
            typedef unsigned int ( ::osgText::Font::*getTextureWidthHint_function_type )(  ) const;
            
            Font_exposer.def( 
                "getTextureWidthHint"
                , getTextureWidthHint_function_type( &::osgText::Font::getTextureWidthHint ) );
        
        }
        { //::osgText::Font::getVerticalSize
        
            typedef bool ( ::osgText::Font::*getVerticalSize_function_type )( float &,float & ) const;
            typedef bool ( Font_wrapper::*default_getVerticalSize_function_type )( float &,float & ) const;
            
            Font_exposer.def( 
                "getVerticalSize"
                , getVerticalSize_function_type(&::osgText::Font::getVerticalSize)
                , default_getVerticalSize_function_type(&Font_wrapper::default_getVerticalSize)
                , ( bp::arg("ascender"), bp::arg("descender") ) );
        
        }
        { //::osgText::Font::hasVertical
        
            typedef bool ( ::osgText::Font::*hasVertical_function_type )(  ) const;
            typedef bool ( Font_wrapper::*default_hasVertical_function_type )(  ) const;
            
            Font_exposer.def( 
                "hasVertical"
                , hasVertical_function_type(&::osgText::Font::hasVertical)
                , default_hasVertical_function_type(&Font_wrapper::default_hasVertical) );
        
        }
        { //::osgText::Font::isSameKindAs
        
            typedef bool ( ::osgText::Font::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Font_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Font_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgText::Font::isSameKindAs)
                , default_isSameKindAs_function_type(&Font_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgText::Font::libraryName
        
            typedef char const * ( ::osgText::Font::*libraryName_function_type )(  ) const;
            typedef char const * ( Font_wrapper::*default_libraryName_function_type )(  ) const;
            
            Font_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgText::Font::libraryName)
                , default_libraryName_function_type(&Font_wrapper::default_libraryName) );
        
        }
        { //::osgText::Font::releaseGLObjects
        
            typedef void ( ::osgText::Font::*releaseGLObjects_function_type )( ::osg::State * ) const;
            typedef void ( Font_wrapper::*default_releaseGLObjects_function_type )( ::osg::State * ) const;
            
            Font_exposer.def( 
                "releaseGLObjects"
                , releaseGLObjects_function_type(&::osgText::Font::releaseGLObjects)
                , default_releaseGLObjects_function_type(&Font_wrapper::default_releaseGLObjects)
                , ( bp::arg("state")=bp::object() ) );
        
        }
        { //::osgText::Font::resizeGLObjectBuffers
        
            typedef void ( ::osgText::Font::*resizeGLObjectBuffers_function_type )( unsigned int ) ;
            typedef void ( Font_wrapper::*default_resizeGLObjectBuffers_function_type )( unsigned int ) ;
            
            Font_exposer.def( 
                "resizeGLObjectBuffers"
                , resizeGLObjectBuffers_function_type(&::osgText::Font::resizeGLObjectBuffers)
                , default_resizeGLObjectBuffers_function_type(&Font_wrapper::default_resizeGLObjectBuffers)
                , ( bp::arg("maxSize") ) );
        
        }
        { //::osgText::Font::setGlyphImageMargin
        
            typedef void ( ::osgText::Font::*setGlyphImageMargin_function_type )( unsigned int ) ;
            
            Font_exposer.def( 
                "setGlyphImageMargin"
                , setGlyphImageMargin_function_type( &::osgText::Font::setGlyphImageMargin )
                , ( bp::arg("margin") )
                , " Set the margin around each glyph,\n to ensure that texture filtering doesnt bleed adjacent glyphs into each other.\n Default margin is 1 texels." );
        
        }
        { //::osgText::Font::setGlyphImageMarginRatio
        
            typedef void ( ::osgText::Font::*setGlyphImageMarginRatio_function_type )( float ) ;
            
            Font_exposer.def( 
                "setGlyphImageMarginRatio"
                , setGlyphImageMarginRatio_function_type( &::osgText::Font::setGlyphImageMarginRatio )
                , ( bp::arg("margin") )
                , " Set the margin ratio around each glyph, relative to the glyphs size.\n to ensure that texture filtering doesnt bleed adjacent glyphs into each other.\n Default margin is 0.05." );
        
        }
        { //::osgText::Font::setImplementation
        
            typedef void ( ::osgText::Font::*setImplementation_function_type )( ::osgText::Font::FontImplementation * ) ;
            
            Font_exposer.def( 
                "setImplementation"
                , setImplementation_function_type( &::osgText::Font::setImplementation )
                , ( bp::arg("implementation") ) );
        
        }
        { //::osgText::Font::setMagFilterHint
        
            typedef void ( ::osgText::Font::*setMagFilterHint_function_type )( ::osg::Texture::FilterMode ) ;
            
            Font_exposer.def( 
                "setMagFilterHint"
                , setMagFilterHint_function_type( &::osgText::Font::setMagFilterHint )
                , ( bp::arg("mode") )
                , " Set the magnification texture filter to use when creating the texture to store the glyph images when rendering.\n Note, this doesnt affect already created Texture Glhphs." );
        
        }
        { //::osgText::Font::setMinFilterHint
        
            typedef void ( ::osgText::Font::*setMinFilterHint_function_type )( ::osg::Texture::FilterMode ) ;
            
            Font_exposer.def( 
                "setMinFilterHint"
                , setMinFilterHint_function_type( &::osgText::Font::setMinFilterHint )
                , ( bp::arg("mode") )
                , " Set the minification texture filter to use when creating the texture to store the glyph images when rendering.\n Note, this doesnt affect already created Texture Glhphs." );
        
        }
        { //::osgText::Font::setNumberCurveSamples
        
            typedef void ( ::osgText::Font::*setNumberCurveSamples_function_type )( unsigned int ) ;
            
            Font_exposer.def( 
                "setNumberCurveSamples"
                , setNumberCurveSamples_function_type( &::osgText::Font::setNumberCurveSamples )
                , ( bp::arg("numSamples") ) );
        
        }
        { //::osgText::Font::setStateSet
        
            typedef void ( ::osgText::Font::*setStateSet_function_type )( ::osg::StateSet * ) ;
            
            Font_exposer.def( 
                "setStateSet"
                , setStateSet_function_type( &::osgText::Font::setStateSet )
                , ( bp::arg("stateset") ) );
        
        }
        { //::osgText::Font::setTexEnv
        
            typedef void ( ::osgText::Font::*setTexEnv_function_type )( ::osg::TexEnv * ) ;
            
            Font_exposer.def( 
                "setTexEnv"
                , setTexEnv_function_type( &::osgText::Font::setTexEnv )
                , ( bp::arg("texenv") ) );
        
        }
        { //::osgText::Font::setTextureSizeHint
        
            typedef void ( ::osgText::Font::*setTextureSizeHint_function_type )( unsigned int,unsigned int ) ;
            
            Font_exposer.def( 
                "setTextureSizeHint"
                , setTextureSizeHint_function_type( &::osgText::Font::setTextureSizeHint )
                , ( bp::arg("width"), bp::arg("height") )
                , " Set the size of texture to create to store the glyph images when rendering.\n Note, this doesnt affect already created Texture Glhphs." );
        
        }
        { //::osgText::Font::setThreadSafeRefUnref
        
            typedef void ( ::osgText::Font::*setThreadSafeRefUnref_function_type )( bool ) ;
            typedef void ( Font_wrapper::*default_setThreadSafeRefUnref_function_type )( bool ) ;
            
            Font_exposer.def( 
                "setThreadSafeRefUnref"
                , setThreadSafeRefUnref_function_type(&::osgText::Font::setThreadSafeRefUnref)
                , default_setThreadSafeRefUnref_function_type(&Font_wrapper::default_setThreadSafeRefUnref)
                , ( bp::arg("threadSafe") ) );
        
        }
        Font_exposer.staticmethod( "getDefaultFont" );
    }

}
