// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "__convenience.pypp.hpp"
#include "wrap_osgManipulator.h"
#include "wrap_referenced.h"
#include "TrackballDragger.pypp.hpp"

namespace bp = boost::python;

struct TrackballDragger_wrapper : osgManipulator::TrackballDragger, bp::wrapper< osgManipulator::TrackballDragger > {

    TrackballDragger_wrapper(bool useAutoTransform=false )
    : osgManipulator::TrackballDragger( useAutoTransform )
      , bp::wrapper< osgManipulator::TrackballDragger >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgManipulator::TrackballDragger::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgManipulator::TrackballDragger::className( );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgManipulator::TrackballDragger::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgManipulator::TrackballDragger::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgManipulator::TrackballDragger::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgManipulator::TrackballDragger::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgManipulator::TrackballDragger::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgManipulator::TrackballDragger::libraryName( );
    }

    virtual void setupDefaultGeometry(  ) {
        if( bp::override func_setupDefaultGeometry = this->get_override( "setupDefaultGeometry" ) )
            func_setupDefaultGeometry(  );
        else{
            this->osgManipulator::TrackballDragger::setupDefaultGeometry(  );
        }
    }
    
    void default_setupDefaultGeometry(  ) {
        osgManipulator::TrackballDragger::setupDefaultGeometry( );
    }

    virtual void accept( ::osg::NodeVisitor & nv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(nv) );
        else{
            this->osgManipulator::CompositeDragger::accept( boost::ref(nv) );
        }
    }
    
    void default_accept( ::osg::NodeVisitor & nv ) {
        osgManipulator::CompositeDragger::accept( boost::ref(nv) );
    }

    virtual bool addChild( ::osg::Node * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            return func_addChild( boost::python::ptr(child) );
        else{
            return this->osg::Group::addChild( boost::python::ptr(child) );
        }
    }
    
    bool default_addChild( ::osg::Node * child ) {
        return osg::Group::addChild( boost::python::ptr(child) );
    }

    virtual bool addDragger( ::osgManipulator::Dragger * dragger ) {
        if( bp::override func_addDragger = this->get_override( "addDragger" ) )
            return func_addDragger( boost::python::ptr(dragger) );
        else{
            return this->osgManipulator::CompositeDragger::addDragger( boost::python::ptr(dragger) );
        }
    }
    
    bool default_addDragger( ::osgManipulator::Dragger * dragger ) {
        return osgManipulator::CompositeDragger::addDragger( boost::python::ptr(dragger) );
    }

    virtual ::osg::Camera * asCamera(  ) {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera * default_asCamera(  ) {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Camera const * asCamera(  ) const  {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera const * default_asCamera(  ) const  {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Geode * asGeode(  ) {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode * default_asGeode(  ) {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Geode const * asGeode(  ) const  {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode const * default_asGeode(  ) const  {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Group * asGroup(  ) {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group * default_asGroup(  ) {
        return osg::Group::asGroup( );
    }

    virtual ::osg::Group const * asGroup(  ) const  {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group const * default_asGroup(  ) const  {
        return osg::Group::asGroup( );
    }

    virtual ::osg::MatrixTransform * asMatrixTransform(  ) {
        if( bp::override func_asMatrixTransform = this->get_override( "asMatrixTransform" ) )
            return func_asMatrixTransform(  );
        else{
            return this->osg::MatrixTransform::asMatrixTransform(  );
        }
    }
    
    ::osg::MatrixTransform * default_asMatrixTransform(  ) {
        return osg::MatrixTransform::asMatrixTransform( );
    }

    virtual ::osg::MatrixTransform const * asMatrixTransform(  ) const  {
        if( bp::override func_asMatrixTransform = this->get_override( "asMatrixTransform" ) )
            return func_asMatrixTransform(  );
        else{
            return this->osg::MatrixTransform::asMatrixTransform(  );
        }
    }
    
    ::osg::MatrixTransform const * default_asMatrixTransform(  ) const  {
        return osg::MatrixTransform::asMatrixTransform( );
    }

    virtual ::osg::PositionAttitudeTransform * asPositionAttitudeTransform(  ) {
        if( bp::override func_asPositionAttitudeTransform = this->get_override( "asPositionAttitudeTransform" ) )
            return func_asPositionAttitudeTransform(  );
        else{
            return this->osg::Transform::asPositionAttitudeTransform(  );
        }
    }
    
    ::osg::PositionAttitudeTransform * default_asPositionAttitudeTransform(  ) {
        return osg::Transform::asPositionAttitudeTransform( );
    }

    virtual ::osg::PositionAttitudeTransform const * asPositionAttitudeTransform(  ) const  {
        if( bp::override func_asPositionAttitudeTransform = this->get_override( "asPositionAttitudeTransform" ) )
            return func_asPositionAttitudeTransform(  );
        else{
            return this->osg::Transform::asPositionAttitudeTransform(  );
        }
    }
    
    ::osg::PositionAttitudeTransform const * default_asPositionAttitudeTransform(  ) const  {
        return osg::Transform::asPositionAttitudeTransform( );
    }

    virtual ::osg::Switch * asSwitch(  ) {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch * default_asSwitch(  ) {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Switch const * asSwitch(  ) const  {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch const * default_asSwitch(  ) const  {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Transform * asTransform(  ) {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Transform::asTransform(  );
        }
    }
    
    ::osg::Transform * default_asTransform(  ) {
        return osg::Transform::asTransform( );
    }

    virtual ::osg::Transform const * asTransform(  ) const  {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Transform::asTransform(  );
        }
    }
    
    ::osg::Transform const * default_asTransform(  ) const  {
        return osg::Transform::asTransform( );
    }

    virtual void ascend( ::osg::NodeVisitor & nv ) {
        if( bp::override func_ascend = this->get_override( "ascend" ) )
            func_ascend( boost::ref(nv) );
        else{
            this->osg::Node::ascend( boost::ref(nv) );
        }
    }
    
    void default_ascend( ::osg::NodeVisitor & nv ) {
        osg::Node::ascend( boost::ref(nv) );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgManipulator::CompositeDragger::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgManipulator::CompositeDragger::clone( boost::ref(copyop) );
    }

    virtual ::osg::BoundingSphere computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osg::Transform::computeBound(  );
        }
    }
    
    ::osg::BoundingSphere default_computeBound(  ) const  {
        return osg::Transform::computeBound( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual bool computeLocalToWorldMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        if( bp::override func_computeLocalToWorldMatrix = this->get_override( "computeLocalToWorldMatrix" ) )
            return func_computeLocalToWorldMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        else{
            return this->osg::MatrixTransform::computeLocalToWorldMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        }
    }
    
    bool default_computeLocalToWorldMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        return osg::MatrixTransform::computeLocalToWorldMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
    }

    virtual bool computeWorldToLocalMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        if( bp::override func_computeWorldToLocalMatrix = this->get_override( "computeWorldToLocalMatrix" ) )
            return func_computeWorldToLocalMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        else{
            return this->osg::MatrixTransform::computeWorldToLocalMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        }
    }
    
    bool default_computeWorldToLocalMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        return osg::MatrixTransform::computeWorldToLocalMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
    }

    virtual void dispatch( ::osgManipulator::MotionCommand & command ) {
        namespace bpl = boost::python;
        if( bpl::override func_dispatch = this->get_override( "dispatch" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_dispatch.ptr(), command );
        }
        else{
            osgManipulator::Dragger::dispatch( boost::ref(command) );
        }
    }
    
    static void default_dispatch( ::osgManipulator::Dragger & inst, ::osgManipulator::MotionCommand & command ){
        if( dynamic_cast< TrackballDragger_wrapper * >( boost::addressof( inst ) ) ){
            inst.::osgManipulator::Dragger::dispatch(command);
        }
        else{
            inst.dispatch(command);
        }
    }

    virtual ::osgManipulator::CompositeDragger const * getComposite(  ) const  {
        if( bp::override func_getComposite = this->get_override( "getComposite" ) )
            return func_getComposite(  );
        else{
            return this->osgManipulator::CompositeDragger::getComposite(  );
        }
    }
    
    ::osgManipulator::CompositeDragger const * default_getComposite(  ) const  {
        return osgManipulator::CompositeDragger::getComposite( );
    }

    virtual ::osgManipulator::CompositeDragger * getComposite(  ) {
        if( bp::override func_getComposite = this->get_override( "getComposite" ) )
            return func_getComposite(  );
        else{
            return this->osgManipulator::CompositeDragger::getComposite(  );
        }
    }
    
    ::osgManipulator::CompositeDragger * default_getComposite(  ) {
        return osgManipulator::CompositeDragger::getComposite( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool handle( ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & aa ) {
        namespace bpl = boost::python;
        if( bpl::override func_handle = this->get_override( "handle" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_handle.ptr(), ea, aa );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return osgManipulator::Dragger::handle( boost::ref(ea), boost::ref(aa) );
        }
    }
    
    static boost::python::object default_handle_bfc7c2b1255fcef353f72f723625fd47( ::osgManipulator::Dragger & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & aa ){
        bool result;
        if( dynamic_cast< TrackballDragger_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::osgManipulator::Dragger::handle(ea, aa);
        }
        else{
            result = inst.handle(ea, aa);
        }
        return bp::object( result );
    }

    virtual bool handle( ::osgManipulator::PointerInfo const & pi, ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & aa ) {
        namespace bpl = boost::python;
        if( bpl::override func_handle = this->get_override( "handle" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_handle.ptr(), pi, ea, aa );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return osgManipulator::CompositeDragger::handle( boost::ref(pi), boost::ref(ea), boost::ref(aa) );
        }
    }
    
    static boost::python::object default_handle( ::osgManipulator::CompositeDragger & inst, ::osgManipulator::PointerInfo const & pi, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & aa ){
        bool result;
        if( dynamic_cast< TrackballDragger_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::osgManipulator::CompositeDragger::handle(pi, ea, aa);
        }
        else{
            result = inst.handle(pi, ea, aa);
        }
        return bp::object( result );
    }

    virtual bool insertChild( unsigned int index, ::osg::Node * child ) {
        if( bp::override func_insertChild = this->get_override( "insertChild" ) )
            return func_insertChild( index, boost::python::ptr(child) );
        else{
            return this->osg::Group::insertChild( index, boost::python::ptr(child) );
        }
    }
    
    bool default_insertChild( unsigned int index, ::osg::Node * child ) {
        return osg::Group::insertChild( index, boost::python::ptr(child) );
    }

    virtual bool receive( ::osgManipulator::MotionCommand const & command ) {
        namespace bpl = boost::python;
        if( bpl::override func_receive = this->get_override( "receive" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_receive.ptr(), command );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return osgManipulator::Dragger::receive( boost::ref(command) );
        }
    }
    
    static boost::python::object default_receive( ::osgManipulator::Dragger & inst, ::osgManipulator::MotionCommand & command ){
        bool result;
        if( dynamic_cast< TrackballDragger_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::osgManipulator::Dragger::receive(command);
        }
        else{
            result = inst.receive(command);
        }
        return bp::object( result );
    }

    virtual bool removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        if( bp::override func_removeChildren = this->get_override( "removeChildren" ) )
            return func_removeChildren( pos, numChildrenToRemove );
        else{
            return this->osg::Group::removeChildren( pos, numChildrenToRemove );
        }
    }
    
    bool default_removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        return osg::Group::removeChildren( pos, numChildrenToRemove );
    }

    virtual bool removeDragger( ::osgManipulator::Dragger * dragger ) {
        if( bp::override func_removeDragger = this->get_override( "removeDragger" ) )
            return func_removeDragger( boost::python::ptr(dragger) );
        else{
            return this->osgManipulator::CompositeDragger::removeDragger( boost::python::ptr(dragger) );
        }
    }
    
    bool default_removeDragger( ::osgManipulator::Dragger * dragger ) {
        return osgManipulator::CompositeDragger::removeDragger( boost::python::ptr(dragger) );
    }

    virtual bool replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        if( bp::override func_replaceChild = this->get_override( "replaceChild" ) )
            return func_replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        else{
            return this->osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        }
    }
    
    bool default_replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        return osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Group::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Group::resizeGLObjectBuffers( maxSize );
    }

    virtual bool setChild( unsigned int i, ::osg::Node * node ) {
        if( bp::override func_setChild = this->get_override( "setChild" ) )
            return func_setChild( i, boost::python::ptr(node) );
        else{
            return this->osg::Group::setChild( i, boost::python::ptr(node) );
        }
    }
    
    bool default_setChild( unsigned int i, ::osg::Node * node ) {
        return osg::Group::setChild( i, boost::python::ptr(node) );
    }

    virtual void setIntersectionMask( unsigned int intersectionMask ) {
        if( bp::override func_setIntersectionMask = this->get_override( "setIntersectionMask" ) )
            func_setIntersectionMask( intersectionMask );
        else{
            this->osgManipulator::CompositeDragger::setIntersectionMask( intersectionMask );
        }
    }
    
    void default_setIntersectionMask( unsigned int intersectionMask ) {
        osgManipulator::CompositeDragger::setIntersectionMask( intersectionMask );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setParentDragger( ::osgManipulator::Dragger * parent ) {
        if( bp::override func_setParentDragger = this->get_override( "setParentDragger" ) )
            func_setParentDragger( boost::python::ptr(parent) );
        else{
            this->osgManipulator::CompositeDragger::setParentDragger( boost::python::ptr(parent) );
        }
    }
    
    void default_setParentDragger( ::osgManipulator::Dragger * parent ) {
        osgManipulator::CompositeDragger::setParentDragger( boost::python::ptr(parent) );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Group::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Group::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual void traverse( ::osg::NodeVisitor & nv ) {
        if( bp::override func_traverse = this->get_override( "traverse" ) )
            func_traverse( boost::ref(nv) );
        else{
            this->osgManipulator::Dragger::traverse( boost::ref(nv) );
        }
    }
    
    void default_traverse( ::osg::NodeVisitor & nv ) {
        osgManipulator::Dragger::traverse( boost::ref(nv) );
    }

};

void register_TrackballDragger_class(){

    { //::osgManipulator::TrackballDragger
        typedef bp::class_< TrackballDragger_wrapper, bp::bases< osgManipulator::CompositeDragger >, osg::ref_ptr< TrackballDragger_wrapper >, boost::noncopyable > TrackballDragger_exposer_t;
        TrackballDragger_exposer_t TrackballDragger_exposer = TrackballDragger_exposer_t( "TrackballDragger", "\n Dragger for performing rotation in all axes.\n", bp::no_init );
        bp::scope TrackballDragger_scope( TrackballDragger_exposer );
        TrackballDragger_exposer.def( bp::init< bp::optional< bool > >(( bp::arg("useAutoTransform")=(bool)(false) ), "\n Dragger for performing rotation in all axes.\n") );
        bp::implicitly_convertible< bool, osgManipulator::TrackballDragger >();
        { //::osgManipulator::TrackballDragger::className
        
            typedef char const * ( ::osgManipulator::TrackballDragger::*className_function_type )(  ) const;
            typedef char const * ( TrackballDragger_wrapper::*default_className_function_type )(  ) const;
            
            TrackballDragger_exposer.def( 
                "className"
                , className_function_type(&::osgManipulator::TrackballDragger::className)
                , default_className_function_type(&TrackballDragger_wrapper::default_className) );
        
        }
        { //::osgManipulator::TrackballDragger::cloneType
        
            typedef ::osg::Object * ( ::osgManipulator::TrackballDragger::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( TrackballDragger_wrapper::*default_cloneType_function_type )(  ) const;
            
            TrackballDragger_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgManipulator::TrackballDragger::cloneType)
                , default_cloneType_function_type(&TrackballDragger_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgManipulator::TrackballDragger::isSameKindAs
        
            typedef bool ( ::osgManipulator::TrackballDragger::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( TrackballDragger_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            TrackballDragger_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgManipulator::TrackballDragger::isSameKindAs)
                , default_isSameKindAs_function_type(&TrackballDragger_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgManipulator::TrackballDragger::libraryName
        
            typedef char const * ( ::osgManipulator::TrackballDragger::*libraryName_function_type )(  ) const;
            typedef char const * ( TrackballDragger_wrapper::*default_libraryName_function_type )(  ) const;
            
            TrackballDragger_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgManipulator::TrackballDragger::libraryName)
                , default_libraryName_function_type(&TrackballDragger_wrapper::default_libraryName) );
        
        }
        { //::osgManipulator::TrackballDragger::setupDefaultGeometry
        
            typedef void ( ::osgManipulator::TrackballDragger::*setupDefaultGeometry_function_type )(  ) ;
            typedef void ( TrackballDragger_wrapper::*default_setupDefaultGeometry_function_type )(  ) ;
            
            TrackballDragger_exposer.def( 
                "setupDefaultGeometry"
                , setupDefaultGeometry_function_type(&::osgManipulator::TrackballDragger::setupDefaultGeometry)
                , default_setupDefaultGeometry_function_type(&TrackballDragger_wrapper::default_setupDefaultGeometry) );
        
        }
        { //::osgManipulator::CompositeDragger::accept
        
            typedef void ( ::osgManipulator::CompositeDragger::*accept_function_type )( ::osg::NodeVisitor & ) ;
            typedef void ( TrackballDragger_wrapper::*default_accept_function_type )( ::osg::NodeVisitor & ) ;
            
            TrackballDragger_exposer.def( 
                "accept"
                , accept_function_type(&::osgManipulator::CompositeDragger::accept)
                , default_accept_function_type(&TrackballDragger_wrapper::default_accept)
                , ( bp::arg("nv") ) );
        
        }
        { //::osgManipulator::CompositeDragger::addDragger
        
            typedef bool ( ::osgManipulator::CompositeDragger::*addDragger_function_type )( ::osgManipulator::Dragger * ) ;
            typedef bool ( TrackballDragger_wrapper::*default_addDragger_function_type )( ::osgManipulator::Dragger * ) ;
            
            TrackballDragger_exposer.def( 
                "addDragger"
                , addDragger_function_type(&::osgManipulator::CompositeDragger::addDragger)
                , default_addDragger_function_type(&TrackballDragger_wrapper::default_addDragger)
                , ( bp::arg("dragger") ) );
        
        }
        { //::osgManipulator::CompositeDragger::clone
        
            typedef ::osg::Object * ( ::osgManipulator::CompositeDragger::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( TrackballDragger_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            TrackballDragger_exposer.def( 
                "clone"
                , clone_function_type(&::osgManipulator::CompositeDragger::clone)
                , default_clone_function_type(&TrackballDragger_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgManipulator::Dragger::dispatch
        
            typedef void ( *default_dispatch_function_type )( ::osgManipulator::Dragger &,::osgManipulator::MotionCommand & );
            
            TrackballDragger_exposer.def( 
                "dispatch"
                , default_dispatch_function_type( &TrackballDragger_wrapper::default_dispatch )
                , ( bp::arg("inst"), bp::arg("command") ) );
        
        }
        { //::osgManipulator::CompositeDragger::getComposite
        
            typedef ::osgManipulator::CompositeDragger const * ( ::osgManipulator::CompositeDragger::*getComposite_function_type )(  ) const;
            typedef ::osgManipulator::CompositeDragger const * ( TrackballDragger_wrapper::*default_getComposite_function_type )(  ) const;
            
            TrackballDragger_exposer.def( 
                "getComposite"
                , getComposite_function_type(&::osgManipulator::CompositeDragger::getComposite)
                , default_getComposite_function_type(&TrackballDragger_wrapper::default_getComposite)
                , bp::return_internal_reference< >() );
        
        }
        { //::osgManipulator::CompositeDragger::getComposite
        
            typedef ::osgManipulator::CompositeDragger * ( ::osgManipulator::CompositeDragger::*getComposite_function_type )(  ) ;
            typedef ::osgManipulator::CompositeDragger * ( TrackballDragger_wrapper::*default_getComposite_function_type )(  ) ;
            
            TrackballDragger_exposer.def( 
                "getComposite"
                , getComposite_function_type(&::osgManipulator::CompositeDragger::getComposite)
                , default_getComposite_function_type(&TrackballDragger_wrapper::default_getComposite)
                , bp::return_internal_reference< >() );
        
        }
        { //::osgManipulator::Dragger::handle
        
            typedef boost::python::object ( *default_handle_function_type )( ::osgManipulator::Dragger &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter & );
            
            TrackballDragger_exposer.def( 
                "handle"
                , default_handle_function_type( &TrackballDragger_wrapper::default_handle_bfc7c2b1255fcef353f72f723625fd47 )
                , ( bp::arg("inst"), bp::arg("ea"), bp::arg("aa") ) );
        
        }
        { //::osgManipulator::CompositeDragger::handle
        
            typedef boost::python::object ( *default_handle_function_type )( ::osgManipulator::CompositeDragger &,::osgManipulator::PointerInfo const &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter & );
            
            TrackballDragger_exposer.def( 
                "handle"
                , default_handle_function_type( &TrackballDragger_wrapper::default_handle )
                , ( bp::arg("inst"), bp::arg("pi"), bp::arg("ea"), bp::arg("aa") ) );
        
        }
        { //::osgManipulator::Dragger::receive
        
            typedef boost::python::object ( *default_receive_function_type )( ::osgManipulator::Dragger &,::osgManipulator::MotionCommand & );
            
            TrackballDragger_exposer.def( 
                "receive"
                , default_receive_function_type( &TrackballDragger_wrapper::default_receive )
                , ( bp::arg("inst"), bp::arg("command") )
                , "\n Setup default geometry for dragger.\n" );
        
        }
        { //::osgManipulator::CompositeDragger::removeDragger
        
            typedef bool ( ::osgManipulator::CompositeDragger::*removeDragger_function_type )( ::osgManipulator::Dragger * ) ;
            typedef bool ( TrackballDragger_wrapper::*default_removeDragger_function_type )( ::osgManipulator::Dragger * ) ;
            
            TrackballDragger_exposer.def( 
                "removeDragger"
                , removeDragger_function_type(&::osgManipulator::CompositeDragger::removeDragger)
                , default_removeDragger_function_type(&TrackballDragger_wrapper::default_removeDragger)
                , ( bp::arg("dragger") ) );
        
        }
        { //::osgManipulator::CompositeDragger::setIntersectionMask
        
            typedef void ( ::osgManipulator::CompositeDragger::*setIntersectionMask_function_type )( unsigned int ) ;
            typedef void ( TrackballDragger_wrapper::*default_setIntersectionMask_function_type )( unsigned int ) ;
            
            TrackballDragger_exposer.def( 
                "setIntersectionMask"
                , setIntersectionMask_function_type(&::osgManipulator::CompositeDragger::setIntersectionMask)
                , default_setIntersectionMask_function_type(&TrackballDragger_wrapper::default_setIntersectionMask)
                , ( bp::arg("intersectionMask") ) );
        
        }
        { //::osgManipulator::CompositeDragger::setParentDragger
        
            typedef void ( ::osgManipulator::CompositeDragger::*setParentDragger_function_type )( ::osgManipulator::Dragger * ) ;
            typedef void ( TrackballDragger_wrapper::*default_setParentDragger_function_type )( ::osgManipulator::Dragger * ) ;
            
            TrackballDragger_exposer.def( 
                "setParentDragger"
                , setParentDragger_function_type(&::osgManipulator::CompositeDragger::setParentDragger)
                , default_setParentDragger_function_type(&TrackballDragger_wrapper::default_setParentDragger)
                , ( bp::arg("parent") ) );
        
        }
        { //::osgManipulator::Dragger::traverse
        
            typedef void ( ::osgManipulator::Dragger::*traverse_function_type )( ::osg::NodeVisitor & ) ;
            typedef void ( TrackballDragger_wrapper::*default_traverse_function_type )( ::osg::NodeVisitor & ) ;
            
            TrackballDragger_exposer.def( 
                "traverse"
                , traverse_function_type(&::osgManipulator::Dragger::traverse)
                , default_traverse_function_type(&TrackballDragger_wrapper::default_traverse)
                , ( bp::arg("nv") ) );
        
        }
    }

}
