// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgManipulator.h"
#include "wrap_referenced.h"
#include "CylinderProjector.pypp.hpp"

namespace bp = boost::python;

struct CylinderProjector_wrapper : osgManipulator::CylinderProjector, bp::wrapper< osgManipulator::CylinderProjector > {

    CylinderProjector_wrapper( )
    : osgManipulator::CylinderProjector( )
      , bp::wrapper< osgManipulator::CylinderProjector >(){
        // null constructor
    
    }

    CylinderProjector_wrapper(::osg::Cylinder * cylinder )
    : osgManipulator::CylinderProjector( boost::python::ptr(cylinder) )
      , bp::wrapper< osgManipulator::CylinderProjector >(){
        // constructor
    
    }

    virtual bool project( ::osgManipulator::PointerInfo const & pi, ::osg::Vec3d & projectedPoint ) const  {
        if( bp::override func_project = this->get_override( "project" ) )
            return func_project( boost::ref(pi), boost::ref(projectedPoint) );
        else{
            return this->osgManipulator::CylinderProjector::project( boost::ref(pi), boost::ref(projectedPoint) );
        }
    }
    
    bool default_project( ::osgManipulator::PointerInfo const & pi, ::osg::Vec3d & projectedPoint ) const  {
        return osgManipulator::CylinderProjector::project( boost::ref(pi), boost::ref(projectedPoint) );
    }

};

void register_CylinderProjector_class(){

    { //::osgManipulator::CylinderProjector
        typedef bp::class_< CylinderProjector_wrapper, bp::bases< osgManipulator::Projector >, osg::ref_ptr< CylinderProjector_wrapper >, boost::noncopyable > CylinderProjector_exposer_t;
        CylinderProjector_exposer_t CylinderProjector_exposer = CylinderProjector_exposer_t( "CylinderProjector", "\n CylinderProjector projects points onto the given cylinder.\n", bp::no_init );
        bp::scope CylinderProjector_scope( CylinderProjector_exposer );
        CylinderProjector_exposer.def( bp::init< >("\n CylinderProjector projects points onto the given cylinder.\n") );
        CylinderProjector_exposer.def( bp::init< osg::Cylinder * >(( bp::arg("cylinder") )) );
        bp::implicitly_convertible< osg::Cylinder *, osgManipulator::CylinderProjector >();
        { //::osgManipulator::CylinderProjector::getCylinder
        
            typedef ::osg::Cylinder const * ( ::osgManipulator::CylinderProjector::*getCylinder_function_type )(  ) const;
            
            CylinderProjector_exposer.def( 
                "getCylinder"
                , getCylinder_function_type( &::osgManipulator::CylinderProjector::getCylinder )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgManipulator::CylinderProjector::isPointInFront
        
            typedef bool ( ::osgManipulator::CylinderProjector::*isPointInFront_function_type )( ::osgManipulator::PointerInfo const &,::osg::Matrix const & ) const;
            
            CylinderProjector_exposer.def( 
                "isPointInFront"
                , isPointInFront_function_type( &::osgManipulator::CylinderProjector::isPointInFront )
                , ( bp::arg("pi"), bp::arg("localToWorld") )
                , " Returns true is the point is in front of the cylinder given the eye\n direction." );
        
        }
        { //::osgManipulator::CylinderProjector::project
        
            typedef bool ( ::osgManipulator::CylinderProjector::*project_function_type )( ::osgManipulator::PointerInfo const &,::osg::Vec3d & ) const;
            typedef bool ( CylinderProjector_wrapper::*default_project_function_type )( ::osgManipulator::PointerInfo const &,::osg::Vec3d & ) const;
            
            CylinderProjector_exposer.def( 
                "project"
                , project_function_type(&::osgManipulator::CylinderProjector::project)
                , default_project_function_type(&CylinderProjector_wrapper::default_project)
                , ( bp::arg("pi"), bp::arg("projectedPoint") ) );
        
        }
        { //::osgManipulator::CylinderProjector::setCylinder
        
            typedef void ( ::osgManipulator::CylinderProjector::*setCylinder_function_type )( ::osg::Cylinder * ) ;
            
            CylinderProjector_exposer.def( 
                "setCylinder"
                , setCylinder_function_type( &::osgManipulator::CylinderProjector::setCylinder )
                , ( bp::arg("cylinder") ) );
        
        }
        { //::osgManipulator::CylinderProjector::setFront
        
            typedef void ( ::osgManipulator::CylinderProjector::*setFront_function_type )( bool ) ;
            
            CylinderProjector_exposer.def( 
                "setFront"
                , setFront_function_type( &::osgManipulator::CylinderProjector::setFront )
                , ( bp::arg("front") ) );
        
        }
    }

}
