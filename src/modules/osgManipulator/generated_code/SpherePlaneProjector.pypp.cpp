// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgManipulator.h"
#include "wrap_referenced.h"
#include "SpherePlaneProjector.pypp.hpp"

namespace bp = boost::python;

struct SpherePlaneProjector_wrapper : osgManipulator::SpherePlaneProjector, bp::wrapper< osgManipulator::SpherePlaneProjector > {

    SpherePlaneProjector_wrapper( )
    : osgManipulator::SpherePlaneProjector( )
      , bp::wrapper< osgManipulator::SpherePlaneProjector >(){
        // null constructor
    
    }

    SpherePlaneProjector_wrapper(::osg::Sphere * sphere )
    : osgManipulator::SpherePlaneProjector( boost::python::ptr(sphere) )
      , bp::wrapper< osgManipulator::SpherePlaneProjector >(){
        // constructor
    
    }

    virtual bool project( ::osgManipulator::PointerInfo const & pi, ::osg::Vec3d & projectedPoint ) const  {
        if( bp::override func_project = this->get_override( "project" ) )
            return func_project( boost::ref(pi), boost::ref(projectedPoint) );
        else{
            return this->osgManipulator::SpherePlaneProjector::project( boost::ref(pi), boost::ref(projectedPoint) );
        }
    }
    
    bool default_project( ::osgManipulator::PointerInfo const & pi, ::osg::Vec3d & projectedPoint ) const  {
        return osgManipulator::SpherePlaneProjector::project( boost::ref(pi), boost::ref(projectedPoint) );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_SpherePlaneProjector_class(){

    { //::osgManipulator::SpherePlaneProjector
        typedef bp::class_< SpherePlaneProjector_wrapper, bp::bases< osgManipulator::SphereProjector >, osg::ref_ptr< SpherePlaneProjector_wrapper >, boost::noncopyable > SpherePlaneProjector_exposer_t;
        SpherePlaneProjector_exposer_t SpherePlaneProjector_exposer = SpherePlaneProjector_exposer_t( "SpherePlaneProjector", "\n SpherePlaneProjector projects points onto a sphere, failing which it project\n onto a plane oriented to the viewing direction.\n", bp::no_init );
        bp::scope SpherePlaneProjector_scope( SpherePlaneProjector_exposer );
        SpherePlaneProjector_exposer.def( bp::init< >("\n SpherePlaneProjector projects points onto a sphere, failing which it project\n onto a plane oriented to the viewing direction.\n") );
        SpherePlaneProjector_exposer.def( bp::init< osg::Sphere * >(( bp::arg("sphere") )) );
        bp::implicitly_convertible< osg::Sphere *, osgManipulator::SpherePlaneProjector >();
        { //::osgManipulator::SpherePlaneProjector::getRotation
        
            typedef ::osg::Quat ( ::osgManipulator::SpherePlaneProjector::*getRotation_function_type )( ::osg::Vec3d const &,bool,::osg::Vec3d const &,bool,float ) const;
            
            SpherePlaneProjector_exposer.def( 
                "getRotation"
                , getRotation_function_type( &::osgManipulator::SpherePlaneProjector::getRotation )
                , ( bp::arg("p1"), bp::arg("p1OnSphere"), bp::arg("p2"), bp::arg("p2OnSphere"), bp::arg("radialFactor")=0.0f ) );
        
        }
        { //::osgManipulator::SpherePlaneProjector::isProjectionOnSphere
        
            typedef bool ( ::osgManipulator::SpherePlaneProjector::*isProjectionOnSphere_function_type )(  ) const;
            
            SpherePlaneProjector_exposer.def( 
                "isProjectionOnSphere"
                , isProjectionOnSphere_function_type( &::osgManipulator::SpherePlaneProjector::isProjectionOnSphere )
                , " Returns true if the previous projection was on the sphere and false\n if the projection was on the plane." );
        
        }
        { //::osgManipulator::SpherePlaneProjector::project
        
            typedef bool ( ::osgManipulator::SpherePlaneProjector::*project_function_type )( ::osgManipulator::PointerInfo const &,::osg::Vec3d & ) const;
            typedef bool ( SpherePlaneProjector_wrapper::*default_project_function_type )( ::osgManipulator::PointerInfo const &,::osg::Vec3d & ) const;
            
            SpherePlaneProjector_exposer.def( 
                "project"
                , project_function_type(&::osgManipulator::SpherePlaneProjector::project)
                , default_project_function_type(&SpherePlaneProjector_wrapper::default_project)
                , ( bp::arg("pi"), bp::arg("projectedPoint") ) );
        
        }
    }

}
