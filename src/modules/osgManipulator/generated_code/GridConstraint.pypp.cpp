// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgManipulator.h"
#include "wrap_referenced.h"
#include "GridConstraint.pypp.hpp"

namespace bp = boost::python;

struct GridConstraint_wrapper : osgManipulator::GridConstraint, bp::wrapper< osgManipulator::GridConstraint > {

    GridConstraint_wrapper(::osg::Node & refNode, ::osg::Vec3d const & origin, ::osg::Vec3d const & spacing )
    : osgManipulator::GridConstraint( boost::ref(refNode), boost::ref(origin), boost::ref(spacing) )
      , bp::wrapper< osgManipulator::GridConstraint >(){
        // constructor
    
    }

    virtual bool constrain( ::osgManipulator::TranslateInLineCommand & command ) const  {
        if( bp::override func_constrain = this->get_override( "constrain" ) )
            return func_constrain( boost::ref(command) );
        else{
            return this->osgManipulator::GridConstraint::constrain( boost::ref(command) );
        }
    }
    
    bool default_constrain( ::osgManipulator::TranslateInLineCommand & command ) const  {
        return osgManipulator::GridConstraint::constrain( boost::ref(command) );
    }

    virtual bool constrain( ::osgManipulator::TranslateInPlaneCommand & command ) const  {
        if( bp::override func_constrain = this->get_override( "constrain" ) )
            return func_constrain( boost::ref(command) );
        else{
            return this->osgManipulator::GridConstraint::constrain( boost::ref(command) );
        }
    }
    
    bool default_constrain( ::osgManipulator::TranslateInPlaneCommand & command ) const  {
        return osgManipulator::GridConstraint::constrain( boost::ref(command) );
    }

    virtual bool constrain( ::osgManipulator::Scale1DCommand & command ) const  {
        if( bp::override func_constrain = this->get_override( "constrain" ) )
            return func_constrain( boost::ref(command) );
        else{
            return this->osgManipulator::GridConstraint::constrain( boost::ref(command) );
        }
    }
    
    bool default_constrain( ::osgManipulator::Scale1DCommand & command ) const  {
        return osgManipulator::GridConstraint::constrain( boost::ref(command) );
    }

    virtual bool constrain( ::osgManipulator::Scale2DCommand & command ) const  {
        if( bp::override func_constrain = this->get_override( "constrain" ) )
            return func_constrain( boost::ref(command) );
        else{
            return this->osgManipulator::GridConstraint::constrain( boost::ref(command) );
        }
    }
    
    bool default_constrain( ::osgManipulator::Scale2DCommand & command ) const  {
        return osgManipulator::GridConstraint::constrain( boost::ref(command) );
    }

    virtual bool constrain( ::osgManipulator::ScaleUniformCommand & command ) const  {
        if( bp::override func_constrain = this->get_override( "constrain" ) )
            return func_constrain( boost::ref(command) );
        else{
            return this->osgManipulator::GridConstraint::constrain( boost::ref(command) );
        }
    }
    
    bool default_constrain( ::osgManipulator::ScaleUniformCommand & command ) const  {
        return osgManipulator::GridConstraint::constrain( boost::ref(command) );
    }

    virtual bool constrain( ::osgManipulator::MotionCommand & arg0 ) const  {
        if( bp::override func_constrain = this->get_override( "constrain" ) )
            return func_constrain( boost::ref(arg0) );
        else{
            return this->osgManipulator::Constraint::constrain( boost::ref(arg0) );
        }
    }
    
    bool default_constrain( ::osgManipulator::MotionCommand & arg0 ) const  {
        return osgManipulator::Constraint::constrain( boost::ref(arg0) );
    }

    virtual bool constrain( ::osgManipulator::Rotate3DCommand & command ) const  {
        if( bp::override func_constrain = this->get_override( "constrain" ) )
            return func_constrain( boost::ref(command) );
        else{
            return this->osgManipulator::Constraint::constrain( boost::ref(command) );
        }
    }
    
    bool default_constrain( ::osgManipulator::Rotate3DCommand & command ) const  {
        return osgManipulator::Constraint::constrain( boost::ref(command) );
    }

};

void register_GridConstraint_class(){

    bp::class_< GridConstraint_wrapper, bp::bases< osgManipulator::Constraint >, osg::ref_ptr< GridConstraint_wrapper >, boost::noncopyable >( "GridConstraint", "\n Constraint to snap motion commands to a sugar cube grid.\n", bp::no_init )    
        .def( bp::init< osg::Node &, osg::Vec3d const &, osg::Vec3d const & >(( bp::arg("refNode"), bp::arg("origin"), bp::arg("spacing") ), "\n Constraint to snap motion commands to a sugar cube grid.\n") )    
        .def( 
            "constrain"
            , (bool ( ::osgManipulator::GridConstraint::* )( ::osgManipulator::TranslateInLineCommand & ) const)(&::osgManipulator::GridConstraint::constrain)
            , (bool ( GridConstraint_wrapper::* )( ::osgManipulator::TranslateInLineCommand & ) const)(&GridConstraint_wrapper::default_constrain)
            , ( bp::arg("command") ) )    
        .def( 
            "constrain"
            , (bool ( ::osgManipulator::GridConstraint::* )( ::osgManipulator::TranslateInPlaneCommand & ) const)(&::osgManipulator::GridConstraint::constrain)
            , (bool ( GridConstraint_wrapper::* )( ::osgManipulator::TranslateInPlaneCommand & ) const)(&GridConstraint_wrapper::default_constrain)
            , ( bp::arg("command") ) )    
        .def( 
            "constrain"
            , (bool ( ::osgManipulator::GridConstraint::* )( ::osgManipulator::Scale1DCommand & ) const)(&::osgManipulator::GridConstraint::constrain)
            , (bool ( GridConstraint_wrapper::* )( ::osgManipulator::Scale1DCommand & ) const)(&GridConstraint_wrapper::default_constrain)
            , ( bp::arg("command") ) )    
        .def( 
            "constrain"
            , (bool ( ::osgManipulator::GridConstraint::* )( ::osgManipulator::Scale2DCommand & ) const)(&::osgManipulator::GridConstraint::constrain)
            , (bool ( GridConstraint_wrapper::* )( ::osgManipulator::Scale2DCommand & ) const)(&GridConstraint_wrapper::default_constrain)
            , ( bp::arg("command") ) )    
        .def( 
            "constrain"
            , (bool ( ::osgManipulator::GridConstraint::* )( ::osgManipulator::ScaleUniformCommand & ) const)(&::osgManipulator::GridConstraint::constrain)
            , (bool ( GridConstraint_wrapper::* )( ::osgManipulator::ScaleUniformCommand & ) const)(&GridConstraint_wrapper::default_constrain)
            , ( bp::arg("command") ) )    
        .def( 
            "getOrigin"
            , (::osg::Vec3d const & ( ::osgManipulator::GridConstraint::* )(  ) const)( &::osgManipulator::GridConstraint::getOrigin )
            , bp::return_internal_reference< >() )    
        .def( 
            "getSpacing"
            , (::osg::Vec3d const & ( ::osgManipulator::GridConstraint::* )(  ) const)( &::osgManipulator::GridConstraint::getSpacing )
            , bp::return_internal_reference< >() )    
        .def( 
            "setOrigin"
            , (void ( ::osgManipulator::GridConstraint::* )( ::osg::Vec3d const & ) )( &::osgManipulator::GridConstraint::setOrigin )
            , ( bp::arg("origin") ) )    
        .def( 
            "setSpacing"
            , (void ( ::osgManipulator::GridConstraint::* )( ::osg::Vec3d const & ) )( &::osgManipulator::GridConstraint::setSpacing )
            , ( bp::arg("spacing") ) )    
        .def( 
            "constrain"
            , (bool ( ::osgManipulator::Constraint::* )( ::osgManipulator::MotionCommand & ) const)(&::osgManipulator::Constraint::constrain)
            , (bool ( GridConstraint_wrapper::* )( ::osgManipulator::MotionCommand & ) const)(&GridConstraint_wrapper::default_constrain)
            , ( bp::arg("arg0") ) )    
        .def( 
            "constrain"
            , (bool ( ::osgManipulator::Constraint::* )( ::osgManipulator::Rotate3DCommand & ) const)(&::osgManipulator::Constraint::constrain)
            , (bool ( GridConstraint_wrapper::* )( ::osgManipulator::Rotate3DCommand & ) const)(&GridConstraint_wrapper::default_constrain)
            , ( bp::arg("command") ) );

}
