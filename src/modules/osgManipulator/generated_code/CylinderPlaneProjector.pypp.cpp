// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgManipulator.h"
#include "wrap_referenced.h"
#include "CylinderPlaneProjector.pypp.hpp"

namespace bp = boost::python;

struct CylinderPlaneProjector_wrapper : osgManipulator::CylinderPlaneProjector, bp::wrapper< osgManipulator::CylinderPlaneProjector > {

    CylinderPlaneProjector_wrapper( )
    : osgManipulator::CylinderPlaneProjector( )
      , bp::wrapper< osgManipulator::CylinderPlaneProjector >(){
        // null constructor
    
    }

    CylinderPlaneProjector_wrapper(::osg::Cylinder * cylinder )
    : osgManipulator::CylinderPlaneProjector( boost::python::ptr(cylinder) )
      , bp::wrapper< osgManipulator::CylinderPlaneProjector >(){
        // constructor
    
    }

    virtual bool project( ::osgManipulator::PointerInfo const & pi, ::osg::Vec3d & projectedPoint ) const  {
        if( bp::override func_project = this->get_override( "project" ) )
            return func_project( boost::ref(pi), boost::ref(projectedPoint) );
        else{
            return this->osgManipulator::CylinderPlaneProjector::project( boost::ref(pi), boost::ref(projectedPoint) );
        }
    }
    
    bool default_project( ::osgManipulator::PointerInfo const & pi, ::osg::Vec3d & projectedPoint ) const  {
        return osgManipulator::CylinderPlaneProjector::project( boost::ref(pi), boost::ref(projectedPoint) );
    }

};

void register_CylinderPlaneProjector_class(){

    { //::osgManipulator::CylinderPlaneProjector
        typedef bp::class_< CylinderPlaneProjector_wrapper, bp::bases< osgManipulator::CylinderProjector >, osg::ref_ptr< CylinderPlaneProjector_wrapper >, boost::noncopyable > CylinderPlaneProjector_exposer_t;
        CylinderPlaneProjector_exposer_t CylinderPlaneProjector_exposer = CylinderPlaneProjector_exposer_t( "CylinderPlaneProjector", "\n CylinderPlaneProjector projects a point onto a plane relative to the\n given cylinder.  For most cases, the plane will be parallel to the\n cylinder axis oriented towards the eyepoint.  When the eyepoint and\n cylinder axis are close to parallel, then it will project onto a plane\n perpendicular to the cylinder.\n", bp::no_init );
        bp::scope CylinderPlaneProjector_scope( CylinderPlaneProjector_exposer );
        CylinderPlaneProjector_exposer.def( bp::init< >("\n CylinderPlaneProjector projects a point onto a plane relative to the\n given cylinder.  For most cases, the plane will be parallel to the\n cylinder axis oriented towards the eyepoint.  When the eyepoint and\n cylinder axis are close to parallel, then it will project onto a plane\n perpendicular to the cylinder.\n") );
        CylinderPlaneProjector_exposer.def( bp::init< osg::Cylinder * >(( bp::arg("cylinder") )) );
        bp::implicitly_convertible< osg::Cylinder *, osgManipulator::CylinderPlaneProjector >();
        { //::osgManipulator::CylinderPlaneProjector::getRotation
        
            typedef ::osg::Quat ( ::osgManipulator::CylinderPlaneProjector::*getRotation_function_type )( ::osg::Vec3d const &,::osg::Vec3d const & ) const;
            
            CylinderPlaneProjector_exposer.def( 
                "getRotation"
                , getRotation_function_type( &::osgManipulator::CylinderPlaneProjector::getRotation )
                , ( bp::arg("p1"), bp::arg("p2") )
                , " Generates a rotation about the cylinder axis based upon the incoming\n projected points on the plane computed from project().\n \\param[in] p1 Initial projection point\n \\param[in] p2 Second projection point\n Return: osg::Quat Rotation about cylinder axis" );
        
        }
        { //::osgManipulator::CylinderPlaneProjector::project
        
            typedef bool ( ::osgManipulator::CylinderPlaneProjector::*project_function_type )( ::osgManipulator::PointerInfo const &,::osg::Vec3d & ) const;
            typedef bool ( CylinderPlaneProjector_wrapper::*default_project_function_type )( ::osgManipulator::PointerInfo const &,::osg::Vec3d & ) const;
            
            CylinderPlaneProjector_exposer.def( 
                "project"
                , project_function_type(&::osgManipulator::CylinderPlaneProjector::project)
                , default_project_function_type(&CylinderPlaneProjector_wrapper::default_project)
                , ( bp::arg("pi"), bp::arg("projectedPoint") ) );
        
        }
    }

}
