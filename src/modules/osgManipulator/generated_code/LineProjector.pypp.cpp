// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgManipulator.h"
#include "wrap_referenced.h"
#include "LineProjector.pypp.hpp"

namespace bp = boost::python;

struct LineProjector_wrapper : osgManipulator::LineProjector, bp::wrapper< osgManipulator::LineProjector > {

    LineProjector_wrapper( )
    : osgManipulator::LineProjector( )
      , bp::wrapper< osgManipulator::LineProjector >(){
        // null constructor
    
    }

    LineProjector_wrapper(::osg::Vec3d const & s, ::osg::Vec3d const & e )
    : osgManipulator::LineProjector( boost::ref(s), boost::ref(e) )
      , bp::wrapper< osgManipulator::LineProjector >(){
        // constructor
    
    }

    virtual bool project( ::osgManipulator::PointerInfo const & pi, ::osg::Vec3d & projectedPoint ) const  {
        if( bp::override func_project = this->get_override( "project" ) )
            return func_project( boost::ref(pi), boost::ref(projectedPoint) );
        else{
            return this->osgManipulator::LineProjector::project( boost::ref(pi), boost::ref(projectedPoint) );
        }
    }
    
    bool default_project( ::osgManipulator::PointerInfo const & pi, ::osg::Vec3d & projectedPoint ) const  {
        return osgManipulator::LineProjector::project( boost::ref(pi), boost::ref(projectedPoint) );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_LineProjector_class(){

    bp::class_< LineProjector_wrapper, bp::bases< osgManipulator::Projector >, osg::ref_ptr< LineProjector_wrapper >, boost::noncopyable >( "LineProjector", "\n LineProjector projects points onto the closest point on the given line.\n", bp::no_init )    
        .def( bp::init< >("\n LineProjector projects points onto the closest point on the given line.\n") )    
        .def( bp::init< osg::Vec3d const &, osg::Vec3d const & >(( bp::arg("s"), bp::arg("e") )) )    
        .def( 
            "getLineEnd"
            , (::osg::Vec3d const & ( ::osgManipulator::LineProjector::* )(  ) const)( &::osgManipulator::LineProjector::getLineEnd )
            , bp::return_internal_reference< >() )    
        .def( 
            "getLineEnd"
            , (::osg::Vec3d & ( ::osgManipulator::LineProjector::* )(  ) )( &::osgManipulator::LineProjector::getLineEnd )
            , bp::return_internal_reference< >() )    
        .def( 
            "getLineStart"
            , (::osg::Vec3d const & ( ::osgManipulator::LineProjector::* )(  ) const)( &::osgManipulator::LineProjector::getLineStart )
            , bp::return_internal_reference< >() )    
        .def( 
            "getLineStart"
            , (::osg::Vec3d & ( ::osgManipulator::LineProjector::* )(  ) )( &::osgManipulator::LineProjector::getLineStart )
            , bp::return_internal_reference< >() )    
        .def( 
            "project"
            , (bool ( ::osgManipulator::LineProjector::* )( ::osgManipulator::PointerInfo const &,::osg::Vec3d & ) const)(&::osgManipulator::LineProjector::project)
            , (bool ( LineProjector_wrapper::* )( ::osgManipulator::PointerInfo const &,::osg::Vec3d & ) const)(&LineProjector_wrapper::default_project)
            , ( bp::arg("pi"), bp::arg("projectedPoint") ) )    
        .def( 
            "setLine"
            , (void ( ::osgManipulator::LineProjector::* )( ::osg::Vec3d const &,::osg::Vec3d const & ) )( &::osgManipulator::LineProjector::setLine )
            , ( bp::arg("s"), bp::arg("e") ) );

}
