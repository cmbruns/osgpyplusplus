// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgSim.h"
#include "ElevationSlice.pypp.hpp"

namespace bp = boost::python;

void register_ElevationSlice_class(){

    bp::class_< osgSim::ElevationSlice, boost::noncopyable >( "ElevationSlice", "\n Helper class for setting up and acquiring height above terrain intersections with terrain.\n By default assigns a osgSim::DatabaseCacheReadCallback that enables automatic loading\n of external PagedLOD tiles to ensure that the highest level of detail is used in intersections.\n This automatic loading of tiles is done by the intersection traversal that is done within\n the computeIntersections(..) method, so can result in long intersection times when external\n tiles have to be loaded.\n The external loading of tiles can be disabled by removing the read callback, this is done by\n calling the setDatabaseCacheReadCallback(DatabaseCacheReadCallback*) method with a value of 0.\n", bp::no_init )    
        .def( bp::init< >("\n Helper class for setting up and acquiring height above terrain intersections with terrain.\n By default assigns a osgSim::DatabaseCacheReadCallback that enables automatic loading\n of external PagedLOD tiles to ensure that the highest level of detail is used in intersections.\n This automatic loading of tiles is done by the intersection traversal that is done within\n the computeIntersections(..) method, so can result in long intersection times when external\n tiles have to be loaded.\n The external loading of tiles can be disabled by removing the read callback, this is done by\n calling the setDatabaseCacheReadCallback(DatabaseCacheReadCallback*) method with a value of 0.\n") )    
        .def( 
            "clearDatabaseCache"
            , (void ( ::osgSim::ElevationSlice::* )(  ) )( &::osgSim::ElevationSlice::clearDatabaseCache )
            , "\n Clear the database cache.\n" )    
        .def( 
            "computeElevationSlice"
            , (::std::vector< osg::Vec3d > (*)( ::osg::Node *,::osg::Vec3d const &,::osg::Vec3d const &,unsigned int ))( &::osgSim::ElevationSlice::computeElevationSlice )
            , ( bp::arg("scene"), bp::arg("startPoint"), bp::arg("endPoint"), bp::arg("traversalMask")=(unsigned int)(4294967295u) )
            , "\n Compute the vertical distance between the specified scene graph and a single HAT point.\n" )    
        .def( 
            "computeIntersections"
            , (void ( ::osgSim::ElevationSlice::* )( ::osg::Node *,unsigned int ) )( &::osgSim::ElevationSlice::computeIntersections )
            , ( bp::arg("scene"), bp::arg("traversalMask")=(unsigned int)(4294967295u) )
            , "\n Compute the intersections with the specified scene graph, the results are stored in vectors of Vec3d.\n Note, if the topmost node is a CoordinateSystemNode then the input points are assumed to be geocentric,\n with the up vector defined by the EllipsoidModel attached to the CoordinateSystemNode.\n If the topmost node is not a CoordinateSystemNode then a local coordinates frame is assumed, with a local up vector.\n" )    
        .def( 
            "getDatabaseCacheReadCallback"
            , (::osgSim::DatabaseCacheReadCallback * ( ::osgSim::ElevationSlice::* )(  ) )( &::osgSim::ElevationSlice::getDatabaseCacheReadCallback )
            , bp::return_internal_reference< >()
            , "\n Get the ReadCallback that does the reading of external PagedLOD models, and caching of loaded subgraphs.\n" )    
        .def( 
            "getEndPoint"
            , (::osg::Vec3d const & ( ::osgSim::ElevationSlice::* )(  ) const)( &::osgSim::ElevationSlice::getEndPoint )
            , bp::return_internal_reference< >()
            , "\n Get the end point of the slice.\n" )    
        .def( 
            "getIntersections"
            , (::std::vector< osg::Vec3d > const & ( ::osgSim::ElevationSlice::* )(  ) const)( &::osgSim::ElevationSlice::getIntersections )
            , bp::return_internal_reference< >()
            , "\n Get the intersections in the form of a vector of Vec3d.\n" )    
        .def( 
            "getStartPoint"
            , (::osg::Vec3d const & ( ::osgSim::ElevationSlice::* )(  ) const)( &::osgSim::ElevationSlice::getStartPoint )
            , bp::return_internal_reference< >()
            , "\n Get the start point of the slice.\n" )    
        .def( 
            "setDatabaseCacheReadCallback"
            , (void ( ::osgSim::ElevationSlice::* )( ::osgSim::DatabaseCacheReadCallback * ) )( &::osgSim::ElevationSlice::setDatabaseCacheReadCallback )
            , ( bp::arg("dcrc") )
            , "\n Set the ReadCallback that does the reading of external PagedLOD models, and caching of loaded subgraphs.\n Note, if you have multiple LineOfSight or ElevationSlice objects in use at one time then you should share a single\n DatabaseCacheReadCallback between all of them.\n" )    
        .def( 
            "setEndPoint"
            , (void ( ::osgSim::ElevationSlice::* )( ::osg::Vec3d const & ) )( &::osgSim::ElevationSlice::setEndPoint )
            , ( bp::arg("endPoint") )
            , "\n Set the end point of the slice.\n" )    
        .def( 
            "setStartPoint"
            , (void ( ::osgSim::ElevationSlice::* )( ::osg::Vec3d const & ) )( &::osgSim::ElevationSlice::setStartPoint )
            , ( bp::arg("startPoint") )
            , "\n Set the start point of the slice.\n" )    
        .staticmethod( "computeElevationSlice" );

}
