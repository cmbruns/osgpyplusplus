// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgSim.h"
#include "wrap_referenced.h"
#include "DatabaseCacheReadCallback.pypp.hpp"

namespace bp = boost::python;

struct DatabaseCacheReadCallback_wrapper : osgSim::DatabaseCacheReadCallback, bp::wrapper< osgSim::DatabaseCacheReadCallback > {

    DatabaseCacheReadCallback_wrapper( )
    : osgSim::DatabaseCacheReadCallback( )
      , bp::wrapper< osgSim::DatabaseCacheReadCallback >(){
        // null constructor
    
    }

    virtual ::osg::Node * readNodeFile( ::std::string const & filename ) {
        if( bp::override func_readNodeFile = this->get_override( "readNodeFile" ) )
            return func_readNodeFile( filename );
        else{
            return this->osgSim::DatabaseCacheReadCallback::readNodeFile( filename );
        }
    }
    
    ::osg::Node * default_readNodeFile( ::std::string const & filename ) {
        return osgSim::DatabaseCacheReadCallback::readNodeFile( filename );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_DatabaseCacheReadCallback_class(){

    bp::class_< DatabaseCacheReadCallback_wrapper, osg::ref_ptr< DatabaseCacheReadCallback_wrapper >, boost::noncopyable >( "DatabaseCacheReadCallback", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "clearDatabaseCache"
            , (void ( ::osgSim::DatabaseCacheReadCallback::* )(  ) )( &::osgSim::DatabaseCacheReadCallback::clearDatabaseCache ) )    
        .def( 
            "getMaximumNumOfFilesToCache"
            , (unsigned int ( ::osgSim::DatabaseCacheReadCallback::* )(  ) const)( &::osgSim::DatabaseCacheReadCallback::getMaximumNumOfFilesToCache ) )    
        .def( 
            "pruneUnusedDatabaseCache"
            , (void ( ::osgSim::DatabaseCacheReadCallback::* )(  ) )( &::osgSim::DatabaseCacheReadCallback::pruneUnusedDatabaseCache ) )    
        .def( 
            "readNodeFile"
            , (::osg::Node * ( ::osgSim::DatabaseCacheReadCallback::* )( ::std::string const & ) )(&::osgSim::DatabaseCacheReadCallback::readNodeFile)
            , (::osg::Node * ( DatabaseCacheReadCallback_wrapper::* )( ::std::string const & ) )(&DatabaseCacheReadCallback_wrapper::default_readNodeFile)
            , ( bp::arg("filename") )
            , bp::return_internal_reference< >() )    
        .def( 
            "setMaximumNumOfFilesToCache"
            , (void ( ::osgSim::DatabaseCacheReadCallback::* )( unsigned int ) )( &::osgSim::DatabaseCacheReadCallback::setMaximumNumOfFilesToCache )
            , ( bp::arg("maxNumFilesToCache") ) );

}
