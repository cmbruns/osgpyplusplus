// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgSim.h"
#include "LineOfSight.pypp.hpp"

namespace bp = boost::python;

void register_LineOfSight_class(){

    bp::class_< osgSim::LineOfSight, boost::noncopyable >( "LineOfSight", "\n Helper class for setting up and acquiring line of sight intersections with terrain.\n By default assigns a osgSim::DatabaseCacheReadCallback that enables automatic loading\n of external PagedLOD tiles to ensure that the highest level of detail is used in intersections.\n This automatic loading of tiles is done by the intersection traversal that is done within\n the computeIntersections(..) method, so can result in long intersection times when external\n tiles have to be loaded.\n The external loading of tiles can be disabled by removing the read callback, this is done by\n calling the setDatabaseCacheReadCallback(DatabaseCacheReadCallback*) method with a value of 0.\n", bp::no_init )    
        .def( bp::init< >("\n Helper class for setting up and acquiring line of sight intersections with terrain.\n By default assigns a osgSim::DatabaseCacheReadCallback that enables automatic loading\n of external PagedLOD tiles to ensure that the highest level of detail is used in intersections.\n This automatic loading of tiles is done by the intersection traversal that is done within\n the computeIntersections(..) method, so can result in long intersection times when external\n tiles have to be loaded.\n The external loading of tiles can be disabled by removing the read callback, this is done by\n calling the setDatabaseCacheReadCallback(DatabaseCacheReadCallback*) method with a value of 0.\n") )    
        .def( 
            "addLOS"
            , (unsigned int ( ::osgSim::LineOfSight::* )( ::osg::Vec3d const &,::osg::Vec3d const & ) )( &::osgSim::LineOfSight::addLOS )
            , ( bp::arg("start"), bp::arg("end") )
            , "\n Add a line of sight test, consisting of start and end point. Returns the index number of the newly adding LOS test.\n" )    
        .def( 
            "clear"
            , (void ( ::osgSim::LineOfSight::* )(  ) )( &::osgSim::LineOfSight::clear )
            , "\n Clear the internal LOS List so it contains no line of sight tests.\n" )    
        .def( 
            "clearDatabaseCache"
            , (void ( ::osgSim::LineOfSight::* )(  ) )( &::osgSim::LineOfSight::clearDatabaseCache )
            , "\n Clear the database cache.\n" )    
        .def( 
            "computeIntersections"
            , (void ( ::osgSim::LineOfSight::* )( ::osg::Node *,unsigned int ) )( &::osgSim::LineOfSight::computeIntersections )
            , ( bp::arg("scene"), bp::arg("traversalMask")=(unsigned int)(4294967295u) )
            , "\n Compute the LOS intersections with the specified scene graph.\n The results are all stored in the form of Intersections list, one per LOS test.\n" )    
        .def( 
            "computeIntersections"
            , (::std::vector< osg::Vec3d > (*)( ::osg::Node *,::osg::Vec3d const &,::osg::Vec3d const &,unsigned int ))( &::osgSim::LineOfSight::computeIntersections )
            , ( bp::arg("scene"), bp::arg("start"), bp::arg("end"), bp::arg("traversalMask")=(unsigned int)(4294967295u) )
            , "\n Compute the intersection between the specified scene graph and a single LOS start,end pair. Returns an IntersectionList, of all the points intersected.\n" )    
        .def( 
            "getDatabaseCacheReadCallback"
            , (::osgSim::DatabaseCacheReadCallback * ( ::osgSim::LineOfSight::* )(  ) )( &::osgSim::LineOfSight::getDatabaseCacheReadCallback )
            , bp::return_internal_reference< >()
            , "\n Get the ReadCallback that does the reading of external PagedLOD models, and caching of loaded subgraphs.\n" )    
        .def( 
            "getEndPoint"
            , (::osg::Vec3d const & ( ::osgSim::LineOfSight::* )( unsigned int ) const)( &::osgSim::LineOfSight::getEndPoint )
            , ( bp::arg("i") )
            , bp::return_internal_reference< >()
            , "\n Get the end point of single line of sight test.\n" )    
        .def( 
            "getIntersections"
            , (::std::vector< osg::Vec3d > const & ( ::osgSim::LineOfSight::* )( unsigned int ) const)( &::osgSim::LineOfSight::getIntersections )
            , ( bp::arg("i") )
            , bp::return_internal_reference< >()
            , "\n Get the intersection points for a single line of sight test.\n" )    
        .def( 
            "getNumLOS"
            , (unsigned int ( ::osgSim::LineOfSight::* )(  ) const)( &::osgSim::LineOfSight::getNumLOS )
            , "\n Get the number of line of sight tests.\n" )    
        .def( 
            "getStartPoint"
            , (::osg::Vec3d const & ( ::osgSim::LineOfSight::* )( unsigned int ) const)( &::osgSim::LineOfSight::getStartPoint )
            , ( bp::arg("i") )
            , bp::return_internal_reference< >()
            , "\n Get the start point of single line of sight test.\n" )    
        .def( 
            "setDatabaseCacheReadCallback"
            , (void ( ::osgSim::LineOfSight::* )( ::osgSim::DatabaseCacheReadCallback * ) )( &::osgSim::LineOfSight::setDatabaseCacheReadCallback )
            , ( bp::arg("dcrc") )
            , "\n Set the ReadCallback that does the reading of external PagedLOD models, and caching of loaded subgraphs.\n Note, if you have multiple LineOfSight or HeightAboveTerrain objects in use at one time then you should share a single\n DatabaseCacheReadCallback between all of them.\n" )    
        .def( 
            "setEndPoint"
            , (void ( ::osgSim::LineOfSight::* )( unsigned int,::osg::Vec3d const & ) )( &::osgSim::LineOfSight::setEndPoint )
            , ( bp::arg("i"), bp::arg("end") )
            , "\n Set the end point of single line of sight test.\n" )    
        .def( 
            "setStartPoint"
            , (void ( ::osgSim::LineOfSight::* )( unsigned int,::osg::Vec3d const & ) )( &::osgSim::LineOfSight::setStartPoint )
            , ( bp::arg("i"), bp::arg("start") )
            , "\n Set the start point of single line of sight test.\n" )    
        .staticmethod( "computeIntersections" );

}
