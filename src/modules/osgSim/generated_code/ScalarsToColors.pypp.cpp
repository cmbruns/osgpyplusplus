// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgSim.h"
#include "wrap_referenced.h"
#include "ScalarsToColors.pypp.hpp"

namespace bp = boost::python;

struct ScalarsToColors_wrapper : osgSim::ScalarsToColors, bp::wrapper< osgSim::ScalarsToColors > {

    ScalarsToColors_wrapper(float scalarMin, float scalarMax )
    : osgSim::ScalarsToColors( scalarMin, scalarMax )
      , bp::wrapper< osgSim::ScalarsToColors >(){
        // constructor
    
    }

    virtual ::osg::Vec4 getColor( float scalar ) const  {
        if( bp::override func_getColor = this->get_override( "getColor" ) )
            return func_getColor( scalar );
        else{
            return this->osgSim::ScalarsToColors::getColor( scalar );
        }
    }
    
    ::osg::Vec4 default_getColor( float scalar ) const  {
        return osgSim::ScalarsToColors::getColor( scalar );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_ScalarsToColors_class(){

    bp::class_< ScalarsToColors_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< ScalarsToColors_wrapper >, boost::noncopyable >( "ScalarsToColors", "\nScalarsToColors defines the interface to map a scalar value to a color,\nand provides a default implementation of the mapping functionaltity,\nwith colors ranging from black to white across the min - max scalar\nrange.\n", bp::init< float, float >(( bp::arg("scalarMin"), bp::arg("scalarMax") ), "\nScalarsToColors defines the interface to map a scalar value to a color,\nand provides a default implementation of the mapping functionaltity,\nwith colors ranging from black to white across the min - max scalar\nrange.\n") )    
        .def( 
            "getColor"
            , (::osg::Vec4 ( ::osgSim::ScalarsToColors::* )( float ) const)(&::osgSim::ScalarsToColors::getColor)
            , (::osg::Vec4 ( ScalarsToColors_wrapper::* )( float ) const)(&ScalarsToColors_wrapper::default_getColor)
            , ( bp::arg("scalar") ) )    
        .def( 
            "getMax"
            , (float ( ::osgSim::ScalarsToColors::* )(  ) const)( &::osgSim::ScalarsToColors::getMax )
            , " Get the maximum scalar value." )    
        .def( 
            "getMin"
            , (float ( ::osgSim::ScalarsToColors::* )(  ) const)( &::osgSim::ScalarsToColors::getMin )
            , " Get the minimum scalar value." );

}
