// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgSim.h"
#include "wrap_referenced.h"
#include "ObjectRecordData.pypp.hpp"

namespace bp = boost::python;

struct ObjectRecordData_wrapper : osgSim::ObjectRecordData, bp::wrapper< osgSim::ObjectRecordData > {

    ObjectRecordData_wrapper( )
    : osgSim::ObjectRecordData( )
      , bp::wrapper< osgSim::ObjectRecordData >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgSim::ObjectRecordData::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgSim::ObjectRecordData::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgSim::ObjectRecordData::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgSim::ObjectRecordData::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgSim::ObjectRecordData::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgSim::ObjectRecordData::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgSim::ObjectRecordData::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgSim::ObjectRecordData::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgSim::ObjectRecordData::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgSim::ObjectRecordData::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_ObjectRecordData_class(){

    bp::class_< ObjectRecordData_wrapper, bp::bases< ::osg::Object >, osg::ref_ptr< ObjectRecordData_wrapper >, boost::noncopyable >( "ObjectRecordData", "\n When the OpenFlight importer encounters an Object record, it stores\n    the data in one of these classes, and attaches the instance of the\n    class as UserData to the corresponding osgLLGroup node.\n", bp::init< >("\n When the OpenFlight importer encounters an Object record, it stores\n    the data in one of these classes, and attaches the instance of the\n    class as UserData to the corresponding osgLLGroup node.\n") )    
        .def( 
            "className"
            , (char const * ( ::osgSim::ObjectRecordData::* )(  ) const)(&::osgSim::ObjectRecordData::className)
            , (char const * ( ObjectRecordData_wrapper::* )(  ) const)(&ObjectRecordData_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osgSim::ObjectRecordData::* )( ::osg::CopyOp const & ) const)(&::osgSim::ObjectRecordData::clone)
            , (::osg::Object * ( ObjectRecordData_wrapper::* )( ::osg::CopyOp const & ) const)(&ObjectRecordData_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osgSim::ObjectRecordData::* )(  ) const)(&::osgSim::ObjectRecordData::cloneType)
            , (::osg::Object * ( ObjectRecordData_wrapper::* )(  ) const)(&ObjectRecordData_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osgSim::ObjectRecordData::* )( ::osg::Object const * ) const)(&::osgSim::ObjectRecordData::isSameKindAs)
            , (bool ( ObjectRecordData_wrapper::* )( ::osg::Object const * ) const)(&ObjectRecordData_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osgSim::ObjectRecordData::* )(  ) const)(&::osgSim::ObjectRecordData::libraryName)
            , (char const * ( ObjectRecordData_wrapper::* )(  ) const)(&ObjectRecordData_wrapper::default_libraryName) )    
        .def_readonly( "DONT_DISPLAY_AT_DUSK", osgSim::ObjectRecordData::DONT_DISPLAY_AT_DUSK )    
        .def_readonly( "DONT_DISPLAY_AT_NIGHT", osgSim::ObjectRecordData::DONT_DISPLAY_AT_NIGHT )    
        .def_readonly( "DONT_DISPLAY_IN_DAYLIGHT", osgSim::ObjectRecordData::DONT_DISPLAY_IN_DAYLIGHT )    
        .def_readonly( "DONT_ILLUMINATE", osgSim::ObjectRecordData::DONT_ILLUMINATE )    
        .def_readonly( "FLAT_SHADED", osgSim::ObjectRecordData::FLAT_SHADED )    
        .def_readonly( "GROUPS_SHADOW_OBJECT", osgSim::ObjectRecordData::GROUPS_SHADOW_OBJECT )    
        .def_readwrite( "_effectID1", &osgSim::ObjectRecordData::_effectID1 )    
        .def_readwrite( "_effectID2", &osgSim::ObjectRecordData::_effectID2 )    
        .def_readwrite( "_flags", &osgSim::ObjectRecordData::_flags )    
        .def_readwrite( "_relativePriority", &osgSim::ObjectRecordData::_relativePriority )    
        .def_readwrite( "_significance", &osgSim::ObjectRecordData::_significance )    
        .def_readwrite( "_transparency", &osgSim::ObjectRecordData::_transparency );

}
