// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgSim.h"
#include "ShapeAttribute.pypp.hpp"

namespace bp = boost::python;

void register_ShapeAttribute_class(){

    { //::osgSim::ShapeAttribute
        typedef bp::class_< osgSim::ShapeAttribute > ShapeAttribute_exposer_t;
        ShapeAttribute_exposer_t ShapeAttribute_exposer = ShapeAttribute_exposer_t( "ShapeAttribute", bp::init< >() );
        bp::scope ShapeAttribute_scope( ShapeAttribute_exposer );
        bp::enum_< osgSim::ShapeAttribute::Type>("Type")
            .value("UNKNOWN", osgSim::ShapeAttribute::UNKNOWN)
            .value("INTEGER", osgSim::ShapeAttribute::INTEGER)
            .value("DOUBLE", osgSim::ShapeAttribute::DOUBLE)
            .value("STRING", osgSim::ShapeAttribute::STRING)
            .export_values()
            ;
        ShapeAttribute_exposer.def( bp::init< char const * >(( bp::arg("name") )) );
        bp::implicitly_convertible< char const *, osgSim::ShapeAttribute >();
        ShapeAttribute_exposer.def( bp::init< char const *, int >(( bp::arg("name"), bp::arg("value") )) );
        ShapeAttribute_exposer.def( bp::init< char const *, double >(( bp::arg("name"), bp::arg("value") )) );
        ShapeAttribute_exposer.def( bp::init< char const *, char const * >(( bp::arg("name"), bp::arg("value") ), "\n Note, ShapeAttribute takes a copy of both name and value, the calling code should manage its own clean up of the original strings.\n") );
        ShapeAttribute_exposer.def( bp::init< osgSim::ShapeAttribute const & >(( bp::arg("sa") )) );
        { //::osgSim::ShapeAttribute::compare
        
            typedef int ( ::osgSim::ShapeAttribute::*compare_function_type )( ::osgSim::ShapeAttribute const & ) const;
            
            ShapeAttribute_exposer.def( 
                "compare"
                , compare_function_type( &::osgSim::ShapeAttribute::compare )
                , ( bp::arg("sa") )
                , "\n return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs.\n" );
        
        }
        { //::osgSim::ShapeAttribute::getDouble
        
            typedef double ( ::osgSim::ShapeAttribute::*getDouble_function_type )(  ) const;
            
            ShapeAttribute_exposer.def( 
                "getDouble"
                , getDouble_function_type( &::osgSim::ShapeAttribute::getDouble )
                , "\n Get the attribute data as a double.\n" );
        
        }
        { //::osgSim::ShapeAttribute::getInt
        
            typedef int ( ::osgSim::ShapeAttribute::*getInt_function_type )(  ) const;
            
            ShapeAttribute_exposer.def( 
                "getInt"
                , getInt_function_type( &::osgSim::ShapeAttribute::getInt )
                , "\n Get the attribute data as an int.\n" );
        
        }
        { //::osgSim::ShapeAttribute::getName
        
            typedef ::std::string const & ( ::osgSim::ShapeAttribute::*getName_function_type )(  ) const;
            
            ShapeAttribute_exposer.def( 
                "getName"
                , getName_function_type( &::osgSim::ShapeAttribute::getName )
                , bp::return_value_policy< bp::copy_const_reference >()
                , "\n Get the attribute name.\n" );
        
        }
        { //::osgSim::ShapeAttribute::getString
        
            typedef char const * ( ::osgSim::ShapeAttribute::*getString_function_type )(  ) const;
            
            ShapeAttribute_exposer.def( 
                "getString"
                , getString_function_type( &::osgSim::ShapeAttribute::getString )
                , "\n Get the attribute data as a string.\n" );
        
        }
        { //::osgSim::ShapeAttribute::getType
        
            typedef ::osgSim::ShapeAttribute::Type ( ::osgSim::ShapeAttribute::*getType_function_type )(  ) const;
            
            ShapeAttribute_exposer.def( 
                "getType"
                , getType_function_type( &::osgSim::ShapeAttribute::getType )
                , "\n Get the attribute data type.\n" );
        
        }
        ShapeAttribute_exposer.def( bp::self != bp::self );
        ShapeAttribute_exposer.def( bp::self < bp::self );
        { //::osgSim::ShapeAttribute::operator=
        
            typedef ::osgSim::ShapeAttribute & ( ::osgSim::ShapeAttribute::*assign_function_type )( ::osgSim::ShapeAttribute const & ) ;
            
            ShapeAttribute_exposer.def( 
                "assign"
                , assign_function_type( &::osgSim::ShapeAttribute::operator= )
                , ( bp::arg("sa") )
                , bp::return_self< >() );
        
        }
        ShapeAttribute_exposer.def( bp::self == bp::self );
        { //::osgSim::ShapeAttribute::setName
        
            typedef void ( ::osgSim::ShapeAttribute::*setName_function_type )( ::std::string const & ) ;
            
            ShapeAttribute_exposer.def( 
                "setName"
                , setName_function_type( &::osgSim::ShapeAttribute::setName )
                , ( bp::arg("name") )
                , "\n Set the attribute name.\n" );
        
        }
        { //::osgSim::ShapeAttribute::setValue
        
            typedef void ( ::osgSim::ShapeAttribute::*setValue_function_type )( int ) ;
            
            ShapeAttribute_exposer.def( 
                "setValue"
                , setValue_function_type( &::osgSim::ShapeAttribute::setValue )
                , ( bp::arg("value") )
                , "\n Set an integer attribute data.\n" );
        
        }
        { //::osgSim::ShapeAttribute::setValue
        
            typedef void ( ::osgSim::ShapeAttribute::*setValue_function_type )( double ) ;
            
            ShapeAttribute_exposer.def( 
                "setValue"
                , setValue_function_type( &::osgSim::ShapeAttribute::setValue )
                , ( bp::arg("value") )
                , "\n Set a double attribute data.\n" );
        
        }
        { //::osgSim::ShapeAttribute::setValue
        
            typedef void ( ::osgSim::ShapeAttribute::*setValue_function_type )( char const * ) ;
            
            ShapeAttribute_exposer.def( 
                "setValue"
                , setValue_function_type( &::osgSim::ShapeAttribute::setValue )
                , ( bp::arg("value") )
                , "\n Set a string attribute data.\n" );
        
        }
    }

}
