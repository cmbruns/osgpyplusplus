// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgSim.h"
#include "wrap_referenced.h"
#include "LightPointNode.pypp.hpp"

namespace bp = boost::python;

struct LightPointNode_wrapper : osgSim::LightPointNode, bp::wrapper< osgSim::LightPointNode > {

    LightPointNode_wrapper( )
    : osgSim::LightPointNode( )
      , bp::wrapper< osgSim::LightPointNode >(){
        // null constructor
    
    }

    virtual void accept( ::osg::NodeVisitor & nv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(nv) );
        else{
            this->osgSim::LightPointNode::accept( boost::ref(nv) );
        }
    }
    
    void default_accept( ::osg::NodeVisitor & nv ) {
        osgSim::LightPointNode::accept( boost::ref(nv) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgSim::LightPointNode::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgSim::LightPointNode::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgSim::LightPointNode::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgSim::LightPointNode::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgSim::LightPointNode::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgSim::LightPointNode::cloneType( );
    }

    virtual ::osg::BoundingSphere computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osgSim::LightPointNode::computeBound(  );
        }
    }
    
    ::osg::BoundingSphere default_computeBound(  ) const  {
        return osgSim::LightPointNode::computeBound( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgSim::LightPointNode::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgSim::LightPointNode::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgSim::LightPointNode::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgSim::LightPointNode::libraryName( );
    }

    virtual void traverse( ::osg::NodeVisitor & nv ) {
        if( bp::override func_traverse = this->get_override( "traverse" ) )
            func_traverse( boost::ref(nv) );
        else{
            this->osgSim::LightPointNode::traverse( boost::ref(nv) );
        }
    }
    
    void default_traverse( ::osg::NodeVisitor & nv ) {
        osgSim::LightPointNode::traverse( boost::ref(nv) );
    }

    virtual ::osg::Camera * asCamera(  ) {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera * default_asCamera(  ) {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Camera const * asCamera(  ) const  {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera const * default_asCamera(  ) const  {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Geode * asGeode(  ) {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode * default_asGeode(  ) {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Geode const * asGeode(  ) const  {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode const * default_asGeode(  ) const  {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Group * asGroup(  ) {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Node::asGroup(  );
        }
    }
    
    ::osg::Group * default_asGroup(  ) {
        return osg::Node::asGroup( );
    }

    virtual ::osg::Group const * asGroup(  ) const  {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Node::asGroup(  );
        }
    }
    
    ::osg::Group const * default_asGroup(  ) const  {
        return osg::Node::asGroup( );
    }

    virtual ::osg::Switch * asSwitch(  ) {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch * default_asSwitch(  ) {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Switch const * asSwitch(  ) const  {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch const * default_asSwitch(  ) const  {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Transform * asTransform(  ) {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Node::asTransform(  );
        }
    }
    
    ::osg::Transform * default_asTransform(  ) {
        return osg::Node::asTransform( );
    }

    virtual ::osg::Transform const * asTransform(  ) const  {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Node::asTransform(  );
        }
    }
    
    ::osg::Transform const * default_asTransform(  ) const  {
        return osg::Node::asTransform( );
    }

    virtual void ascend( ::osg::NodeVisitor & nv ) {
        if( bp::override func_ascend = this->get_override( "ascend" ) )
            func_ascend( boost::ref(nv) );
        else{
            this->osg::Node::ascend( boost::ref(nv) );
        }
    }
    
    void default_ascend( ::osg::NodeVisitor & nv ) {
        osg::Node::ascend( boost::ref(nv) );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Node::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Node::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Node::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Node::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_LightPointNode_class(){

    bp::class_< LightPointNode_wrapper, bp::bases< ::osg::Node >, osg::ref_ptr< LightPointNode_wrapper >, boost::noncopyable >( "LightPointNode", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "accept"
            , (void ( ::osgSim::LightPointNode::* )( ::osg::NodeVisitor & ) )(&::osgSim::LightPointNode::accept)
            , (void ( LightPointNode_wrapper::* )( ::osg::NodeVisitor & ) )(&LightPointNode_wrapper::default_accept)
            , ( bp::arg("nv") ) )    
        .def( 
            "addLightPoint"
            , (unsigned int ( ::osgSim::LightPointNode::* )( ::osgSim::LightPoint const & ) )( &::osgSim::LightPointNode::addLightPoint )
            , ( bp::arg("lp") ) )    
        .def( 
            "className"
            , (char const * ( ::osgSim::LightPointNode::* )(  ) const)(&::osgSim::LightPointNode::className)
            , (char const * ( LightPointNode_wrapper::* )(  ) const)(&LightPointNode_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osgSim::LightPointNode::* )( ::osg::CopyOp const & ) const)(&::osgSim::LightPointNode::clone)
            , (::osg::Object * ( LightPointNode_wrapper::* )( ::osg::CopyOp const & ) const)(&LightPointNode_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osgSim::LightPointNode::* )(  ) const)(&::osgSim::LightPointNode::cloneType)
            , (::osg::Object * ( LightPointNode_wrapper::* )(  ) const)(&LightPointNode_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "computeBound"
            , (::osg::BoundingSphere ( ::osgSim::LightPointNode::* )(  ) const)(&::osgSim::LightPointNode::computeBound)
            , (::osg::BoundingSphere ( LightPointNode_wrapper::* )(  ) const)(&LightPointNode_wrapper::default_computeBound) )    
        .def( 
            "getLightPoint"
            , (::osgSim::LightPoint & ( ::osgSim::LightPointNode::* )( unsigned int ) )( &::osgSim::LightPointNode::getLightPoint )
            , ( bp::arg("pos") )
            , bp::return_internal_reference< >() )    
        .def( 
            "getLightPoint"
            , (::osgSim::LightPoint const & ( ::osgSim::LightPointNode::* )( unsigned int ) const)( &::osgSim::LightPointNode::getLightPoint )
            , ( bp::arg("pos") )
            , bp::return_internal_reference< >() )    
        .def( 
            "getLightPointList"
            , (::std::vector< osgSim::LightPoint > & ( ::osgSim::LightPointNode::* )(  ) )( &::osgSim::LightPointNode::getLightPointList )
            , bp::return_internal_reference< >() )    
        .def( 
            "getLightPointList"
            , (::std::vector< osgSim::LightPoint > const & ( ::osgSim::LightPointNode::* )(  ) const)( &::osgSim::LightPointNode::getLightPointList )
            , bp::return_internal_reference< >() )    
        .def( 
            "getLightPointSystem"
            , (::osgSim::LightPointSystem * ( ::osgSim::LightPointNode::* )(  ) )( &::osgSim::LightPointNode::getLightPointSystem )
            , bp::return_internal_reference< >() )    
        .def( 
            "getLightPointSystem"
            , (::osgSim::LightPointSystem const * ( ::osgSim::LightPointNode::* )(  ) const)( &::osgSim::LightPointNode::getLightPointSystem )
            , bp::return_internal_reference< >() )    
        .def( 
            "getMaxPixelSize"
            , (float ( ::osgSim::LightPointNode::* )(  ) const)( &::osgSim::LightPointNode::getMaxPixelSize ) )    
        .def( 
            "getMaxVisibleDistance2"
            , (float ( ::osgSim::LightPointNode::* )(  ) const)( &::osgSim::LightPointNode::getMaxVisibleDistance2 ) )    
        .def( 
            "getMinPixelSize"
            , (float ( ::osgSim::LightPointNode::* )(  ) const)( &::osgSim::LightPointNode::getMinPixelSize ) )    
        .def( 
            "getNumLightPoints"
            , (unsigned int ( ::osgSim::LightPointNode::* )(  ) const)( &::osgSim::LightPointNode::getNumLightPoints ) )    
        .def( 
            "getPointSprite"
            , (bool ( ::osgSim::LightPointNode::* )(  ) const)( &::osgSim::LightPointNode::getPointSprite ) )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osgSim::LightPointNode::* )( ::osg::Object const * ) const)(&::osgSim::LightPointNode::isSameKindAs)
            , (bool ( LightPointNode_wrapper::* )( ::osg::Object const * ) const)(&LightPointNode_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osgSim::LightPointNode::* )(  ) const)(&::osgSim::LightPointNode::libraryName)
            , (char const * ( LightPointNode_wrapper::* )(  ) const)(&LightPointNode_wrapper::default_libraryName) )    
        .def( 
            "removeLightPoint"
            , (void ( ::osgSim::LightPointNode::* )( unsigned int ) )( &::osgSim::LightPointNode::removeLightPoint )
            , ( bp::arg("pos") ) )    
        .def( 
            "setLightPointList"
            , (void ( ::osgSim::LightPointNode::* )( ::std::vector< osgSim::LightPoint > const & ) )( &::osgSim::LightPointNode::setLightPointList )
            , ( bp::arg("lpl") ) )    
        .def( 
            "setLightPointSystem"
            , (void ( ::osgSim::LightPointNode::* )( ::osgSim::LightPointSystem * ) )( &::osgSim::LightPointNode::setLightPointSystem )
            , ( bp::arg("lps") ) )    
        .def( 
            "setMaxPixelSize"
            , (void ( ::osgSim::LightPointNode::* )( float ) )( &::osgSim::LightPointNode::setMaxPixelSize )
            , ( bp::arg("maxPixelSize") ) )    
        .def( 
            "setMaxVisibleDistance2"
            , (void ( ::osgSim::LightPointNode::* )( float ) )( &::osgSim::LightPointNode::setMaxVisibleDistance2 )
            , ( bp::arg("maxVisibleDistance2") ) )    
        .def( 
            "setMinPixelSize"
            , (void ( ::osgSim::LightPointNode::* )( float ) )( &::osgSim::LightPointNode::setMinPixelSize )
            , ( bp::arg("minPixelSize") ) )    
        .def( 
            "setPointSprite"
            , (void ( ::osgSim::LightPointNode::* )( bool ) )( &::osgSim::LightPointNode::setPointSprite )
            , ( bp::arg("enable")=(bool)(true) ) )    
        .def( 
            "traverse"
            , (void ( ::osgSim::LightPointNode::* )( ::osg::NodeVisitor & ) )(&::osgSim::LightPointNode::traverse)
            , (void ( LightPointNode_wrapper::* )( ::osg::NodeVisitor & ) )(&LightPointNode_wrapper::default_traverse)
            , ( bp::arg("nv") ) );

}
