// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgSim.h"
#include "wrap_referenced.h"
#include "BlinkSequence.pypp.hpp"

namespace bp = boost::python;

struct BlinkSequence_wrapper : osgSim::BlinkSequence, bp::wrapper< osgSim::BlinkSequence > {

    BlinkSequence_wrapper( )
    : osgSim::BlinkSequence( )
      , bp::wrapper< osgSim::BlinkSequence >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgSim::BlinkSequence::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgSim::BlinkSequence::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgSim::BlinkSequence::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgSim::BlinkSequence::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgSim::BlinkSequence::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgSim::BlinkSequence::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgSim::BlinkSequence::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgSim::BlinkSequence::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgSim::BlinkSequence::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgSim::BlinkSequence::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_BlinkSequence_class(){

    bp::class_< BlinkSequence_wrapper, bp::bases< ::osg::Object >, osg::ref_ptr< BlinkSequence_wrapper >, boost::noncopyable >( "BlinkSequence", bp::init< >() )    
        .def( 
            "addPulse"
            , (void ( ::osgSim::BlinkSequence::* )( double,::osg::Vec4 const & ) )( &::osgSim::BlinkSequence::addPulse )
            , ( bp::arg("length"), bp::arg("color") ) )    
        .def( 
            "className"
            , (char const * ( ::osgSim::BlinkSequence::* )(  ) const)(&::osgSim::BlinkSequence::className)
            , (char const * ( BlinkSequence_wrapper::* )(  ) const)(&BlinkSequence_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osgSim::BlinkSequence::* )( ::osg::CopyOp const & ) const)(&::osgSim::BlinkSequence::clone)
            , (::osg::Object * ( BlinkSequence_wrapper::* )( ::osg::CopyOp const & ) const)(&BlinkSequence_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osgSim::BlinkSequence::* )(  ) const)(&::osgSim::BlinkSequence::cloneType)
            , (::osg::Object * ( BlinkSequence_wrapper::* )(  ) const)(&BlinkSequence_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "color"
            , (::osg::Vec4 ( ::osgSim::BlinkSequence::* )( double,double ) const)( &::osgSim::BlinkSequence::color )
            , ( bp::arg("time"), bp::arg("length") ) )    
        .def( 
            "getNumPulses"
            , (int ( ::osgSim::BlinkSequence::* )(  ) const)( &::osgSim::BlinkSequence::getNumPulses )
            , " return the number of pulses." )    
        .def( 
            "getPhaseShift"
            , (double ( ::osgSim::BlinkSequence::* )(  ) const)( &::osgSim::BlinkSequence::getPhaseShift )
            , " get the pahse shift." )    
        .def( 
            "getPulse"
            , (void ( ::osgSim::BlinkSequence::* )( unsigned int,double &,::osg::Vec4 & ) const)( &::osgSim::BlinkSequence::getPulse )
            , ( bp::arg("i"), bp::arg("length"), bp::arg("color") ) )    
        .def( 
            "getPulsePeriod"
            , (double ( ::osgSim::BlinkSequence::* )(  ) const)( &::osgSim::BlinkSequence::getPulsePeriod )
            , " get the total pulse period of the blink sequence, which is equal to the sum of all the pulse periods." )    
        .def( 
            "getSequenceGroup"
            , (::osgSim::SequenceGroup * ( ::osgSim::BlinkSequence::* )(  ) )( &::osgSim::BlinkSequence::getSequenceGroup )
            , bp::return_internal_reference< >()
            , " get the non const sequence group." )    
        .def( 
            "getSequenceGroup"
            , (::osgSim::SequenceGroup const * ( ::osgSim::BlinkSequence::* )(  ) const)( &::osgSim::BlinkSequence::getSequenceGroup )
            , bp::return_internal_reference< >()
            , " get the const sequence group." )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osgSim::BlinkSequence::* )( ::osg::Object const * ) const)(&::osgSim::BlinkSequence::isSameKindAs)
            , (bool ( BlinkSequence_wrapper::* )( ::osg::Object const * ) const)(&BlinkSequence_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osgSim::BlinkSequence::* )(  ) const)(&::osgSim::BlinkSequence::libraryName)
            , (char const * ( BlinkSequence_wrapper::* )(  ) const)(&BlinkSequence_wrapper::default_libraryName) )    
        .def( 
            "localTime"
            , (double ( ::osgSim::BlinkSequence::* )( double ) const)( &::osgSim::BlinkSequence::localTime )
            , ( bp::arg("time") ) )    
        .def( 
            "setPhaseShift"
            , (void ( ::osgSim::BlinkSequence::* )( double ) )( &::osgSim::BlinkSequence::setPhaseShift )
            , ( bp::arg("ps") )
            , " set the phase shift of the blink sequence, this would be used to shift a sequence within a sequence group." )    
        .def( 
            "setPulse"
            , (void ( ::osgSim::BlinkSequence::* )( unsigned int,double,::osg::Vec4 const & ) )( &::osgSim::BlinkSequence::setPulse )
            , ( bp::arg("i"), bp::arg("length"), bp::arg("color") ) )    
        .def( 
            "setSequenceGroup"
            , (void ( ::osgSim::BlinkSequence::* )( ::osgSim::SequenceGroup * ) )( &::osgSim::BlinkSequence::setSequenceGroup )
            , ( bp::arg("sg") )
            , " set the sequence group which can be used to synchronize related blink sequences." );

}
