// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgSim.h"
#include "LightPoint.pypp.hpp"

namespace bp = boost::python;

void register_LightPoint_class(){

    { //::osgSim::LightPoint
        typedef bp::class_< osgSim::LightPoint > LightPoint_exposer_t;
        LightPoint_exposer_t LightPoint_exposer = LightPoint_exposer_t( "LightPoint", bp::init< >() );
        bp::scope LightPoint_scope( LightPoint_exposer );
        bp::enum_< osgSim::LightPoint::BlendingMode>("BlendingMode")
            .value("ADDITIVE", osgSim::LightPoint::ADDITIVE)
            .value("BLENDED", osgSim::LightPoint::BLENDED)
            .export_values()
            ;
        LightPoint_exposer.def( bp::init< osg::Vec3 const &, osg::Vec4 const & >(( bp::arg("position"), bp::arg("color") )) );
        LightPoint_exposer.def( bp::init< bool, osg::Vec3 const &, osg::Vec4 const &, bp::optional< float, float, osgSim::Sector *, osgSim::BlinkSequence *, osgSim::LightPoint::BlendingMode > >(( bp::arg("on"), bp::arg("position"), bp::arg("color"), bp::arg("intensity")=1.0e+0f, bp::arg("radius")=1.0e+0f, bp::arg("sector")=bp::object(), bp::arg("blinkSequence")=bp::object(), bp::arg("blendingMode")=(long)(::osgSim::LightPoint::BLENDED) )) );
        LightPoint_exposer.def( bp::init< osgSim::LightPoint const & >(( bp::arg("lp") )) );
        { //::osgSim::LightPoint::operator=
        
            typedef ::osgSim::LightPoint & ( ::osgSim::LightPoint::*assign_function_type )( ::osgSim::LightPoint const & ) ;
            
            LightPoint_exposer.def( 
                "assign"
                , assign_function_type( &::osgSim::LightPoint::operator= )
                , ( bp::arg("lp") )
                , bp::return_self< >() );
        
        }
        LightPoint_exposer.def_readwrite( "_blendingMode", &osgSim::LightPoint::_blendingMode );
        LightPoint_exposer.def_readwrite( "_blinkSequence", &osgSim::LightPoint::_blinkSequence );
        LightPoint_exposer.def_readwrite( "_color", &osgSim::LightPoint::_color );
        LightPoint_exposer.def_readwrite( "_intensity", &osgSim::LightPoint::_intensity );
        LightPoint_exposer.def_readwrite( "_on", &osgSim::LightPoint::_on );
        LightPoint_exposer.def_readwrite( "_position", &osgSim::LightPoint::_position );
        LightPoint_exposer.def_readwrite( "_radius", &osgSim::LightPoint::_radius );
        LightPoint_exposer.def_readwrite( "_sector", &osgSim::LightPoint::_sector );
    }

}
