// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgSim.h"
#include "wrap_referenced.h"
#include "DOFTransform.pypp.hpp"

namespace bp = boost::python;

struct DOFTransform_wrapper : osgSim::DOFTransform, bp::wrapper< osgSim::DOFTransform > {

    DOFTransform_wrapper( )
    : osgSim::DOFTransform( )
      , bp::wrapper< osgSim::DOFTransform >(){
        // null constructor
    
    }

    virtual void accept( ::osg::NodeVisitor & nv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(nv) );
        else{
            this->osgSim::DOFTransform::accept( boost::ref(nv) );
        }
    }
    
    void default_accept( ::osg::NodeVisitor & nv ) {
        osgSim::DOFTransform::accept( boost::ref(nv) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgSim::DOFTransform::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgSim::DOFTransform::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgSim::DOFTransform::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgSim::DOFTransform::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgSim::DOFTransform::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgSim::DOFTransform::cloneType( );
    }

    virtual bool computeLocalToWorldMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * nv ) const  {
        if( bp::override func_computeLocalToWorldMatrix = this->get_override( "computeLocalToWorldMatrix" ) )
            return func_computeLocalToWorldMatrix( boost::ref(matrix), boost::python::ptr(nv) );
        else{
            return this->osgSim::DOFTransform::computeLocalToWorldMatrix( boost::ref(matrix), boost::python::ptr(nv) );
        }
    }
    
    bool default_computeLocalToWorldMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * nv ) const  {
        return osgSim::DOFTransform::computeLocalToWorldMatrix( boost::ref(matrix), boost::python::ptr(nv) );
    }

    virtual bool computeWorldToLocalMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * nv ) const  {
        if( bp::override func_computeWorldToLocalMatrix = this->get_override( "computeWorldToLocalMatrix" ) )
            return func_computeWorldToLocalMatrix( boost::ref(matrix), boost::python::ptr(nv) );
        else{
            return this->osgSim::DOFTransform::computeWorldToLocalMatrix( boost::ref(matrix), boost::python::ptr(nv) );
        }
    }
    
    bool default_computeWorldToLocalMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * nv ) const  {
        return osgSim::DOFTransform::computeWorldToLocalMatrix( boost::ref(matrix), boost::python::ptr(nv) );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgSim::DOFTransform::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgSim::DOFTransform::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgSim::DOFTransform::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgSim::DOFTransform::libraryName( );
    }

    virtual void traverse( ::osg::NodeVisitor & nv ) {
        if( bp::override func_traverse = this->get_override( "traverse" ) )
            func_traverse( boost::ref(nv) );
        else{
            this->osgSim::DOFTransform::traverse( boost::ref(nv) );
        }
    }
    
    void default_traverse( ::osg::NodeVisitor & nv ) {
        osgSim::DOFTransform::traverse( boost::ref(nv) );
    }

    virtual bool addChild( ::osg::Node * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            return func_addChild( boost::python::ptr(child) );
        else{
            return this->osg::Group::addChild( boost::python::ptr(child) );
        }
    }
    
    bool default_addChild( ::osg::Node * child ) {
        return osg::Group::addChild( boost::python::ptr(child) );
    }

    virtual ::osg::Camera * asCamera(  ) {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera * default_asCamera(  ) {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Camera const * asCamera(  ) const  {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera const * default_asCamera(  ) const  {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Geode * asGeode(  ) {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode * default_asGeode(  ) {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Geode const * asGeode(  ) const  {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode const * default_asGeode(  ) const  {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Group * asGroup(  ) {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group * default_asGroup(  ) {
        return osg::Group::asGroup( );
    }

    virtual ::osg::Group const * asGroup(  ) const  {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group const * default_asGroup(  ) const  {
        return osg::Group::asGroup( );
    }

    virtual ::osg::MatrixTransform * asMatrixTransform(  ) {
        if( bp::override func_asMatrixTransform = this->get_override( "asMatrixTransform" ) )
            return func_asMatrixTransform(  );
        else{
            return this->osg::Transform::asMatrixTransform(  );
        }
    }
    
    ::osg::MatrixTransform * default_asMatrixTransform(  ) {
        return osg::Transform::asMatrixTransform( );
    }

    virtual ::osg::MatrixTransform const * asMatrixTransform(  ) const  {
        if( bp::override func_asMatrixTransform = this->get_override( "asMatrixTransform" ) )
            return func_asMatrixTransform(  );
        else{
            return this->osg::Transform::asMatrixTransform(  );
        }
    }
    
    ::osg::MatrixTransform const * default_asMatrixTransform(  ) const  {
        return osg::Transform::asMatrixTransform( );
    }

    virtual ::osg::PositionAttitudeTransform * asPositionAttitudeTransform(  ) {
        if( bp::override func_asPositionAttitudeTransform = this->get_override( "asPositionAttitudeTransform" ) )
            return func_asPositionAttitudeTransform(  );
        else{
            return this->osg::Transform::asPositionAttitudeTransform(  );
        }
    }
    
    ::osg::PositionAttitudeTransform * default_asPositionAttitudeTransform(  ) {
        return osg::Transform::asPositionAttitudeTransform( );
    }

    virtual ::osg::PositionAttitudeTransform const * asPositionAttitudeTransform(  ) const  {
        if( bp::override func_asPositionAttitudeTransform = this->get_override( "asPositionAttitudeTransform" ) )
            return func_asPositionAttitudeTransform(  );
        else{
            return this->osg::Transform::asPositionAttitudeTransform(  );
        }
    }
    
    ::osg::PositionAttitudeTransform const * default_asPositionAttitudeTransform(  ) const  {
        return osg::Transform::asPositionAttitudeTransform( );
    }

    virtual ::osg::Switch * asSwitch(  ) {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch * default_asSwitch(  ) {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Switch const * asSwitch(  ) const  {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch const * default_asSwitch(  ) const  {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Transform * asTransform(  ) {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Transform::asTransform(  );
        }
    }
    
    ::osg::Transform * default_asTransform(  ) {
        return osg::Transform::asTransform( );
    }

    virtual ::osg::Transform const * asTransform(  ) const  {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Transform::asTransform(  );
        }
    }
    
    ::osg::Transform const * default_asTransform(  ) const  {
        return osg::Transform::asTransform( );
    }

    virtual void ascend( ::osg::NodeVisitor & nv ) {
        if( bp::override func_ascend = this->get_override( "ascend" ) )
            func_ascend( boost::ref(nv) );
        else{
            this->osg::Node::ascend( boost::ref(nv) );
        }
    }
    
    void default_ascend( ::osg::NodeVisitor & nv ) {
        osg::Node::ascend( boost::ref(nv) );
    }

    virtual ::osg::BoundingSphere computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osg::Transform::computeBound(  );
        }
    }
    
    ::osg::BoundingSphere default_computeBound(  ) const  {
        return osg::Transform::computeBound( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool insertChild( unsigned int index, ::osg::Node * child ) {
        if( bp::override func_insertChild = this->get_override( "insertChild" ) )
            return func_insertChild( index, boost::python::ptr(child) );
        else{
            return this->osg::Group::insertChild( index, boost::python::ptr(child) );
        }
    }
    
    bool default_insertChild( unsigned int index, ::osg::Node * child ) {
        return osg::Group::insertChild( index, boost::python::ptr(child) );
    }

    virtual bool removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        if( bp::override func_removeChildren = this->get_override( "removeChildren" ) )
            return func_removeChildren( pos, numChildrenToRemove );
        else{
            return this->osg::Group::removeChildren( pos, numChildrenToRemove );
        }
    }
    
    bool default_removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        return osg::Group::removeChildren( pos, numChildrenToRemove );
    }

    virtual bool replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        if( bp::override func_replaceChild = this->get_override( "replaceChild" ) )
            return func_replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        else{
            return this->osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        }
    }
    
    bool default_replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        return osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Group::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Group::resizeGLObjectBuffers( maxSize );
    }

    virtual bool setChild( unsigned int i, ::osg::Node * node ) {
        if( bp::override func_setChild = this->get_override( "setChild" ) )
            return func_setChild( i, boost::python::ptr(node) );
        else{
            return this->osg::Group::setChild( i, boost::python::ptr(node) );
        }
    }
    
    bool default_setChild( unsigned int i, ::osg::Node * node ) {
        return osg::Group::setChild( i, boost::python::ptr(node) );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Group::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Group::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_DOFTransform_class(){

    { //::osgSim::DOFTransform
        typedef bp::class_< DOFTransform_wrapper, bp::bases< ::osg::Transform >, osg::ref_ptr< DOFTransform_wrapper >, boost::noncopyable > DOFTransform_exposer_t;
        DOFTransform_exposer_t DOFTransform_exposer = DOFTransform_exposer_t( "DOFTransform", "\n DOFTransform - encapsulates Multigen DOF behavior\n", bp::no_init );
        bp::scope DOFTransform_scope( DOFTransform_exposer );
        bp::enum_< osgSim::DOFTransform::MultOrder>("MultOrder")
            .value("PRH", osgSim::DOFTransform::PRH)
            .value("PHR", osgSim::DOFTransform::PHR)
            .value("HPR", osgSim::DOFTransform::HPR)
            .value("HRP", osgSim::DOFTransform::HRP)
            .value("RPH", osgSim::DOFTransform::RPH)
            .value("RHP", osgSim::DOFTransform::RHP)
            .export_values()
            ;
        DOFTransform_exposer.def( bp::init< >("\n constructor\n") );
        { //::osgSim::DOFTransform::accept
        
            typedef void ( ::osgSim::DOFTransform::*accept_function_type )( ::osg::NodeVisitor & ) ;
            typedef void ( DOFTransform_wrapper::*default_accept_function_type )( ::osg::NodeVisitor & ) ;
            
            DOFTransform_exposer.def( 
                "accept"
                , accept_function_type(&::osgSim::DOFTransform::accept)
                , default_accept_function_type(&DOFTransform_wrapper::default_accept)
                , ( bp::arg("nv") ) );
        
        }
        { //::osgSim::DOFTransform::animate
        
            typedef void ( ::osgSim::DOFTransform::*animate_function_type )( float ) ;
            
            DOFTransform_exposer.def( 
                "animate"
                , animate_function_type( &::osgSim::DOFTransform::animate )
                , ( bp::arg("deltaTime") ) );
        
        }
        { //::osgSim::DOFTransform::className
        
            typedef char const * ( ::osgSim::DOFTransform::*className_function_type )(  ) const;
            typedef char const * ( DOFTransform_wrapper::*default_className_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "className"
                , className_function_type(&::osgSim::DOFTransform::className)
                , default_className_function_type(&DOFTransform_wrapper::default_className) );
        
        }
        { //::osgSim::DOFTransform::clone
        
            typedef ::osg::Object * ( ::osgSim::DOFTransform::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( DOFTransform_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            DOFTransform_exposer.def( 
                "clone"
                , clone_function_type(&::osgSim::DOFTransform::clone)
                , default_clone_function_type(&DOFTransform_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgSim::DOFTransform::cloneType
        
            typedef ::osg::Object * ( ::osgSim::DOFTransform::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( DOFTransform_wrapper::*default_cloneType_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgSim::DOFTransform::cloneType)
                , default_cloneType_function_type(&DOFTransform_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgSim::DOFTransform::computeLocalToWorldMatrix
        
            typedef bool ( ::osgSim::DOFTransform::*computeLocalToWorldMatrix_function_type )( ::osg::Matrix &,::osg::NodeVisitor * ) const;
            typedef bool ( DOFTransform_wrapper::*default_computeLocalToWorldMatrix_function_type )( ::osg::Matrix &,::osg::NodeVisitor * ) const;
            
            DOFTransform_exposer.def( 
                "computeLocalToWorldMatrix"
                , computeLocalToWorldMatrix_function_type(&::osgSim::DOFTransform::computeLocalToWorldMatrix)
                , default_computeLocalToWorldMatrix_function_type(&DOFTransform_wrapper::default_computeLocalToWorldMatrix)
                , ( bp::arg("matrix"), bp::arg("nv") ) );
        
        }
        { //::osgSim::DOFTransform::computeWorldToLocalMatrix
        
            typedef bool ( ::osgSim::DOFTransform::*computeWorldToLocalMatrix_function_type )( ::osg::Matrix &,::osg::NodeVisitor * ) const;
            typedef bool ( DOFTransform_wrapper::*default_computeWorldToLocalMatrix_function_type )( ::osg::Matrix &,::osg::NodeVisitor * ) const;
            
            DOFTransform_exposer.def( 
                "computeWorldToLocalMatrix"
                , computeWorldToLocalMatrix_function_type(&::osgSim::DOFTransform::computeWorldToLocalMatrix)
                , default_computeWorldToLocalMatrix_function_type(&DOFTransform_wrapper::default_computeWorldToLocalMatrix)
                , ( bp::arg("matrix"), bp::arg("nv") ) );
        
        }
        { //::osgSim::DOFTransform::getAnimationOn
        
            typedef bool ( ::osgSim::DOFTransform::*getAnimationOn_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "getAnimationOn"
                , getAnimationOn_function_type( &::osgSim::DOFTransform::getAnimationOn ) );
        
        }
        { //::osgSim::DOFTransform::getCurrentHPR
        
            typedef ::osg::Vec3 const & ( ::osgSim::DOFTransform::*getCurrentHPR_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "getCurrentHPR"
                , getCurrentHPR_function_type( &::osgSim::DOFTransform::getCurrentHPR )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgSim::DOFTransform::getCurrentScale
        
            typedef ::osg::Vec3 const & ( ::osgSim::DOFTransform::*getCurrentScale_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "getCurrentScale"
                , getCurrentScale_function_type( &::osgSim::DOFTransform::getCurrentScale )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgSim::DOFTransform::getCurrentTranslate
        
            typedef ::osg::Vec3 const & ( ::osgSim::DOFTransform::*getCurrentTranslate_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "getCurrentTranslate"
                , getCurrentTranslate_function_type( &::osgSim::DOFTransform::getCurrentTranslate )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgSim::DOFTransform::getHPRMultOrder
        
            typedef ::osgSim::DOFTransform::MultOrder ( ::osgSim::DOFTransform::*getHPRMultOrder_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "getHPRMultOrder"
                , getHPRMultOrder_function_type( &::osgSim::DOFTransform::getHPRMultOrder ) );
        
        }
        { //::osgSim::DOFTransform::getIncrementHPR
        
            typedef ::osg::Vec3 const & ( ::osgSim::DOFTransform::*getIncrementHPR_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "getIncrementHPR"
                , getIncrementHPR_function_type( &::osgSim::DOFTransform::getIncrementHPR )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgSim::DOFTransform::getIncrementScale
        
            typedef ::osg::Vec3 const & ( ::osgSim::DOFTransform::*getIncrementScale_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "getIncrementScale"
                , getIncrementScale_function_type( &::osgSim::DOFTransform::getIncrementScale )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgSim::DOFTransform::getIncrementTranslate
        
            typedef ::osg::Vec3 const & ( ::osgSim::DOFTransform::*getIncrementTranslate_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "getIncrementTranslate"
                , getIncrementTranslate_function_type( &::osgSim::DOFTransform::getIncrementTranslate )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgSim::DOFTransform::getInversePutMatrix
        
            typedef ::osg::Matrix const & ( ::osgSim::DOFTransform::*getInversePutMatrix_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "getInversePutMatrix"
                , getInversePutMatrix_function_type( &::osgSim::DOFTransform::getInversePutMatrix )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgSim::DOFTransform::getLimitationFlags
        
            typedef long unsigned int ( ::osgSim::DOFTransform::*getLimitationFlags_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "getLimitationFlags"
                , getLimitationFlags_function_type( &::osgSim::DOFTransform::getLimitationFlags ) );
        
        }
        { //::osgSim::DOFTransform::getMaxHPR
        
            typedef ::osg::Vec3 const & ( ::osgSim::DOFTransform::*getMaxHPR_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "getMaxHPR"
                , getMaxHPR_function_type( &::osgSim::DOFTransform::getMaxHPR )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgSim::DOFTransform::getMaxScale
        
            typedef ::osg::Vec3 const & ( ::osgSim::DOFTransform::*getMaxScale_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "getMaxScale"
                , getMaxScale_function_type( &::osgSim::DOFTransform::getMaxScale )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgSim::DOFTransform::getMaxTranslate
        
            typedef ::osg::Vec3 const & ( ::osgSim::DOFTransform::*getMaxTranslate_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "getMaxTranslate"
                , getMaxTranslate_function_type( &::osgSim::DOFTransform::getMaxTranslate )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgSim::DOFTransform::getMinHPR
        
            typedef ::osg::Vec3 const & ( ::osgSim::DOFTransform::*getMinHPR_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "getMinHPR"
                , getMinHPR_function_type( &::osgSim::DOFTransform::getMinHPR )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgSim::DOFTransform::getMinScale
        
            typedef ::osg::Vec3 const & ( ::osgSim::DOFTransform::*getMinScale_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "getMinScale"
                , getMinScale_function_type( &::osgSim::DOFTransform::getMinScale )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgSim::DOFTransform::getMinTranslate
        
            typedef ::osg::Vec3 const & ( ::osgSim::DOFTransform::*getMinTranslate_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "getMinTranslate"
                , getMinTranslate_function_type( &::osgSim::DOFTransform::getMinTranslate )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgSim::DOFTransform::getPutMatrix
        
            typedef ::osg::Matrix const & ( ::osgSim::DOFTransform::*getPutMatrix_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "getPutMatrix"
                , getPutMatrix_function_type( &::osgSim::DOFTransform::getPutMatrix )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgSim::DOFTransform::isSameKindAs
        
            typedef bool ( ::osgSim::DOFTransform::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( DOFTransform_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            DOFTransform_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgSim::DOFTransform::isSameKindAs)
                , default_isSameKindAs_function_type(&DOFTransform_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgSim::DOFTransform::libraryName
        
            typedef char const * ( ::osgSim::DOFTransform::*libraryName_function_type )(  ) const;
            typedef char const * ( DOFTransform_wrapper::*default_libraryName_function_type )(  ) const;
            
            DOFTransform_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgSim::DOFTransform::libraryName)
                , default_libraryName_function_type(&DOFTransform_wrapper::default_libraryName) );
        
        }
        { //::osgSim::DOFTransform::setAnimationOn
        
            typedef void ( ::osgSim::DOFTransform::*setAnimationOn_function_type )( bool ) ;
            
            DOFTransform_exposer.def( 
                "setAnimationOn"
                , setAnimationOn_function_type( &::osgSim::DOFTransform::setAnimationOn )
                , ( bp::arg("do_animate") ) );
        
        }
        { //::osgSim::DOFTransform::setCurrentHPR
        
            typedef void ( ::osgSim::DOFTransform::*setCurrentHPR_function_type )( ::osg::Vec3 const & ) ;
            
            DOFTransform_exposer.def( 
                "setCurrentHPR"
                , setCurrentHPR_function_type( &::osgSim::DOFTransform::setCurrentHPR )
                , ( bp::arg("hpr") ) );
        
        }
        { //::osgSim::DOFTransform::setCurrentScale
        
            typedef void ( ::osgSim::DOFTransform::*setCurrentScale_function_type )( ::osg::Vec3 const & ) ;
            
            DOFTransform_exposer.def( 
                "setCurrentScale"
                , setCurrentScale_function_type( &::osgSim::DOFTransform::setCurrentScale )
                , ( bp::arg("scale") ) );
        
        }
        { //::osgSim::DOFTransform::setCurrentTranslate
        
            typedef void ( ::osgSim::DOFTransform::*setCurrentTranslate_function_type )( ::osg::Vec3 const & ) ;
            
            DOFTransform_exposer.def( 
                "setCurrentTranslate"
                , setCurrentTranslate_function_type( &::osgSim::DOFTransform::setCurrentTranslate )
                , ( bp::arg("translate") ) );
        
        }
        { //::osgSim::DOFTransform::setHPRMultOrder
        
            typedef void ( ::osgSim::DOFTransform::*setHPRMultOrder_function_type )( ::osgSim::DOFTransform::MultOrder ) ;
            
            DOFTransform_exposer.def( 
                "setHPRMultOrder"
                , setHPRMultOrder_function_type( &::osgSim::DOFTransform::setHPRMultOrder )
                , ( bp::arg("order") ) );
        
        }
        { //::osgSim::DOFTransform::setIncrementHPR
        
            typedef void ( ::osgSim::DOFTransform::*setIncrementHPR_function_type )( ::osg::Vec3 const & ) ;
            
            DOFTransform_exposer.def( 
                "setIncrementHPR"
                , setIncrementHPR_function_type( &::osgSim::DOFTransform::setIncrementHPR )
                , ( bp::arg("hpr") ) );
        
        }
        { //::osgSim::DOFTransform::setIncrementScale
        
            typedef void ( ::osgSim::DOFTransform::*setIncrementScale_function_type )( ::osg::Vec3 const & ) ;
            
            DOFTransform_exposer.def( 
                "setIncrementScale"
                , setIncrementScale_function_type( &::osgSim::DOFTransform::setIncrementScale )
                , ( bp::arg("scale") ) );
        
        }
        { //::osgSim::DOFTransform::setIncrementTranslate
        
            typedef void ( ::osgSim::DOFTransform::*setIncrementTranslate_function_type )( ::osg::Vec3 const & ) ;
            
            DOFTransform_exposer.def( 
                "setIncrementTranslate"
                , setIncrementTranslate_function_type( &::osgSim::DOFTransform::setIncrementTranslate )
                , ( bp::arg("translate") ) );
        
        }
        { //::osgSim::DOFTransform::setInversePutMatrix
        
            typedef void ( ::osgSim::DOFTransform::*setInversePutMatrix_function_type )( ::osg::Matrix const & ) ;
            
            DOFTransform_exposer.def( 
                "setInversePutMatrix"
                , setInversePutMatrix_function_type( &::osgSim::DOFTransform::setInversePutMatrix )
                , ( bp::arg("inversePut") ) );
        
        }
        { //::osgSim::DOFTransform::setLimitationFlags
        
            typedef void ( ::osgSim::DOFTransform::*setLimitationFlags_function_type )( long unsigned int ) ;
            
            DOFTransform_exposer.def( 
                "setLimitationFlags"
                , setLimitationFlags_function_type( &::osgSim::DOFTransform::setLimitationFlags )
                , ( bp::arg("flags") ) );
        
        }
        { //::osgSim::DOFTransform::setMaxHPR
        
            typedef void ( ::osgSim::DOFTransform::*setMaxHPR_function_type )( ::osg::Vec3 const & ) ;
            
            DOFTransform_exposer.def( 
                "setMaxHPR"
                , setMaxHPR_function_type( &::osgSim::DOFTransform::setMaxHPR )
                , ( bp::arg("hpr") ) );
        
        }
        { //::osgSim::DOFTransform::setMaxScale
        
            typedef void ( ::osgSim::DOFTransform::*setMaxScale_function_type )( ::osg::Vec3 const & ) ;
            
            DOFTransform_exposer.def( 
                "setMaxScale"
                , setMaxScale_function_type( &::osgSim::DOFTransform::setMaxScale )
                , ( bp::arg("scale") ) );
        
        }
        { //::osgSim::DOFTransform::setMaxTranslate
        
            typedef void ( ::osgSim::DOFTransform::*setMaxTranslate_function_type )( ::osg::Vec3 const & ) ;
            
            DOFTransform_exposer.def( 
                "setMaxTranslate"
                , setMaxTranslate_function_type( &::osgSim::DOFTransform::setMaxTranslate )
                , ( bp::arg("translate") ) );
        
        }
        { //::osgSim::DOFTransform::setMinHPR
        
            typedef void ( ::osgSim::DOFTransform::*setMinHPR_function_type )( ::osg::Vec3 const & ) ;
            
            DOFTransform_exposer.def( 
                "setMinHPR"
                , setMinHPR_function_type( &::osgSim::DOFTransform::setMinHPR )
                , ( bp::arg("hpr") ) );
        
        }
        { //::osgSim::DOFTransform::setMinScale
        
            typedef void ( ::osgSim::DOFTransform::*setMinScale_function_type )( ::osg::Vec3 const & ) ;
            
            DOFTransform_exposer.def( 
                "setMinScale"
                , setMinScale_function_type( &::osgSim::DOFTransform::setMinScale )
                , ( bp::arg("scale") ) );
        
        }
        { //::osgSim::DOFTransform::setMinTranslate
        
            typedef void ( ::osgSim::DOFTransform::*setMinTranslate_function_type )( ::osg::Vec3 const & ) ;
            
            DOFTransform_exposer.def( 
                "setMinTranslate"
                , setMinTranslate_function_type( &::osgSim::DOFTransform::setMinTranslate )
                , ( bp::arg("translate") ) );
        
        }
        { //::osgSim::DOFTransform::setPutMatrix
        
            typedef void ( ::osgSim::DOFTransform::*setPutMatrix_function_type )( ::osg::Matrix const & ) ;
            
            DOFTransform_exposer.def( 
                "setPutMatrix"
                , setPutMatrix_function_type( &::osgSim::DOFTransform::setPutMatrix )
                , ( bp::arg("put") ) );
        
        }
        { //::osgSim::DOFTransform::traverse
        
            typedef void ( ::osgSim::DOFTransform::*traverse_function_type )( ::osg::NodeVisitor & ) ;
            typedef void ( DOFTransform_wrapper::*default_traverse_function_type )( ::osg::NodeVisitor & ) ;
            
            DOFTransform_exposer.def( 
                "traverse"
                , traverse_function_type(&::osgSim::DOFTransform::traverse)
                , default_traverse_function_type(&DOFTransform_wrapper::default_traverse)
                , ( bp::arg("nv") ) );
        
        }
        { //::osgSim::DOFTransform::updateCurrentHPR
        
            typedef void ( ::osgSim::DOFTransform::*updateCurrentHPR_function_type )( ::osg::Vec3 const & ) ;
            
            DOFTransform_exposer.def( 
                "updateCurrentHPR"
                , updateCurrentHPR_function_type( &::osgSim::DOFTransform::updateCurrentHPR )
                , ( bp::arg("hpr") ) );
        
        }
        { //::osgSim::DOFTransform::updateCurrentScale
        
            typedef void ( ::osgSim::DOFTransform::*updateCurrentScale_function_type )( ::osg::Vec3 const & ) ;
            
            DOFTransform_exposer.def( 
                "updateCurrentScale"
                , updateCurrentScale_function_type( &::osgSim::DOFTransform::updateCurrentScale )
                , ( bp::arg("scale") ) );
        
        }
        { //::osgSim::DOFTransform::updateCurrentTranslate
        
            typedef void ( ::osgSim::DOFTransform::*updateCurrentTranslate_function_type )( ::osg::Vec3 const & ) ;
            
            DOFTransform_exposer.def( 
                "updateCurrentTranslate"
                , updateCurrentTranslate_function_type( &::osgSim::DOFTransform::updateCurrentTranslate )
                , ( bp::arg("translate") ) );
        
        }
    }

}
