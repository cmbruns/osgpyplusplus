// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgWidget.h"
#include "EventInterface.pypp.hpp"

namespace bp = boost::python;

struct EventInterface_wrapper : osgWidget::EventInterface, bp::wrapper< osgWidget::EventInterface > {

    EventInterface_wrapper( )
    : osgWidget::EventInterface( )
      , bp::wrapper< osgWidget::EventInterface >(){
        // null constructor
    
    }

    EventInterface_wrapper(::osgWidget::EventInterface const & ei )
    : osgWidget::EventInterface( boost::ref(ei) )
      , bp::wrapper< osgWidget::EventInterface >(){
        // copy constructor
    
    }

    virtual bool focus( ::osgWidget::WindowManager const * arg0 ) {
        if( bp::override func_focus = this->get_override( "focus" ) )
            return func_focus( boost::python::ptr(arg0) );
        else{
            return this->osgWidget::EventInterface::focus( boost::python::ptr(arg0) );
        }
    }
    
    bool default_focus( ::osgWidget::WindowManager const * arg0 ) {
        return osgWidget::EventInterface::focus( boost::python::ptr(arg0) );
    }

    virtual bool keyDown( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_keyDown = this->get_override( "keyDown" ) )
            return func_keyDown( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::keyDown( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_keyDown( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::keyDown( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool keyUp( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_keyUp = this->get_override( "keyUp" ) )
            return func_keyUp( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::keyUp( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_keyUp( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::keyUp( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseDrag( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseDrag = this->get_override( "mouseDrag" ) )
            return func_mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseDrag( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseEnter( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseEnter = this->get_override( "mouseEnter" ) )
            return func_mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseEnter( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseLeave( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseLeave = this->get_override( "mouseLeave" ) )
            return func_mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseLeave( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseOver( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseOver = this->get_override( "mouseOver" ) )
            return func_mouseOver( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseOver( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseOver( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseOver( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mousePush( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mousePush = this->get_override( "mousePush" ) )
            return func_mousePush( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mousePush( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mousePush( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mousePush( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseRelease( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseRelease = this->get_override( "mouseRelease" ) )
            return func_mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseRelease( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseScroll( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseScroll = this->get_override( "mouseScroll" ) )
            return func_mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseScroll( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool unfocus( ::osgWidget::WindowManager const * arg0 ) {
        if( bp::override func_unfocus = this->get_override( "unfocus" ) )
            return func_unfocus( boost::python::ptr(arg0) );
        else{
            return this->osgWidget::EventInterface::unfocus( boost::python::ptr(arg0) );
        }
    }
    
    bool default_unfocus( ::osgWidget::WindowManager const * arg0 ) {
        return osgWidget::EventInterface::unfocus( boost::python::ptr(arg0) );
    }

};

void register_EventInterface_class(){

    bp::class_< EventInterface_wrapper >( "EventInterface", bp::init< >() )    
        .def( bp::init< osgWidget::EventInterface const & >(( bp::arg("ei") )) )    
        .def( 
            "addCallback"
            , (void ( ::osgWidget::EventInterface::* )( ::osgWidget::Callback * ) )( &::osgWidget::EventInterface::addCallback )
            , ( bp::arg("cb") ) )    
        .def( 
            "addEventMask"
            , (void ( ::osgWidget::EventInterface::* )( unsigned int ) )( &::osgWidget::EventInterface::addEventMask )
            , ( bp::arg("mask") ) )    
        .def( 
            "callCallbacks"
            , (bool ( ::osgWidget::EventInterface::* )( ::osgWidget::Event & ) )( &::osgWidget::EventInterface::callCallbacks )
            , ( bp::arg("ev") ) )    
        .def( 
            "callMethodAndCallbacks"
            , (bool ( ::osgWidget::EventInterface::* )( ::osgWidget::Event & ) )( &::osgWidget::EventInterface::callMethodAndCallbacks )
            , ( bp::arg("ev") ) )    
        .def( 
            "canFocus"
            , (bool ( ::osgWidget::EventInterface::* )(  ) const)( &::osgWidget::EventInterface::canFocus ) )    
        .def( 
            "canKeyDown"
            , (bool ( ::osgWidget::EventInterface::* )(  ) const)( &::osgWidget::EventInterface::canKeyDown ) )    
        .def( 
            "canKeyUp"
            , (bool ( ::osgWidget::EventInterface::* )(  ) const)( &::osgWidget::EventInterface::canKeyUp ) )    
        .def( 
            "canMouseDrag"
            , (bool ( ::osgWidget::EventInterface::* )(  ) const)( &::osgWidget::EventInterface::canMouseDrag ) )    
        .def( 
            "canMouseEnter"
            , (bool ( ::osgWidget::EventInterface::* )(  ) const)( &::osgWidget::EventInterface::canMouseEnter ) )    
        .def( 
            "canMouseLeave"
            , (bool ( ::osgWidget::EventInterface::* )(  ) const)( &::osgWidget::EventInterface::canMouseLeave ) )    
        .def( 
            "canMouseOver"
            , (bool ( ::osgWidget::EventInterface::* )(  ) const)( &::osgWidget::EventInterface::canMouseOver ) )    
        .def( 
            "canMousePush"
            , (bool ( ::osgWidget::EventInterface::* )(  ) const)( &::osgWidget::EventInterface::canMousePush ) )    
        .def( 
            "canMouseRelease"
            , (bool ( ::osgWidget::EventInterface::* )(  ) const)( &::osgWidget::EventInterface::canMouseRelease ) )    
        .def( 
            "canMouseScroll"
            , (bool ( ::osgWidget::EventInterface::* )(  ) const)( &::osgWidget::EventInterface::canMouseScroll ) )    
        .def( 
            "canUnfocus"
            , (bool ( ::osgWidget::EventInterface::* )(  ) const)( &::osgWidget::EventInterface::canUnfocus ) )    
        .def( 
            "focus"
            , (bool ( ::osgWidget::EventInterface::* )( ::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::focus)
            , (bool ( EventInterface_wrapper::* )( ::osgWidget::WindowManager const * ) )(&EventInterface_wrapper::default_focus)
            , ( bp::arg("arg0") ) )    
        .def( 
            "getEventMask"
            , (unsigned int ( ::osgWidget::EventInterface::* )(  ) const)( &::osgWidget::EventInterface::getEventMask ) )    
        .def( 
            "keyDown"
            , (bool ( ::osgWidget::EventInterface::* )( int,int,::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::keyDown)
            , (bool ( EventInterface_wrapper::* )( int,int,::osgWidget::WindowManager const * ) )(&EventInterface_wrapper::default_keyDown)
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "keyUp"
            , (bool ( ::osgWidget::EventInterface::* )( int,int,::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::keyUp)
            , (bool ( EventInterface_wrapper::* )( int,int,::osgWidget::WindowManager const * ) )(&EventInterface_wrapper::default_keyUp)
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "mouseDrag"
            , (bool ( ::osgWidget::EventInterface::* )( double,double,::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::mouseDrag)
            , (bool ( EventInterface_wrapper::* )( double,double,::osgWidget::WindowManager const * ) )(&EventInterface_wrapper::default_mouseDrag)
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "mouseEnter"
            , (bool ( ::osgWidget::EventInterface::* )( double,double,::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::mouseEnter)
            , (bool ( EventInterface_wrapper::* )( double,double,::osgWidget::WindowManager const * ) )(&EventInterface_wrapper::default_mouseEnter)
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "mouseLeave"
            , (bool ( ::osgWidget::EventInterface::* )( double,double,::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::mouseLeave)
            , (bool ( EventInterface_wrapper::* )( double,double,::osgWidget::WindowManager const * ) )(&EventInterface_wrapper::default_mouseLeave)
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "mouseOver"
            , (bool ( ::osgWidget::EventInterface::* )( double,double,::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::mouseOver)
            , (bool ( EventInterface_wrapper::* )( double,double,::osgWidget::WindowManager const * ) )(&EventInterface_wrapper::default_mouseOver)
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "mousePush"
            , (bool ( ::osgWidget::EventInterface::* )( double,double,::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::mousePush)
            , (bool ( EventInterface_wrapper::* )( double,double,::osgWidget::WindowManager const * ) )(&EventInterface_wrapper::default_mousePush)
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "mouseRelease"
            , (bool ( ::osgWidget::EventInterface::* )( double,double,::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::mouseRelease)
            , (bool ( EventInterface_wrapper::* )( double,double,::osgWidget::WindowManager const * ) )(&EventInterface_wrapper::default_mouseRelease)
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "mouseScroll"
            , (bool ( ::osgWidget::EventInterface::* )( double,double,::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::mouseScroll)
            , (bool ( EventInterface_wrapper::* )( double,double,::osgWidget::WindowManager const * ) )(&EventInterface_wrapper::default_mouseScroll)
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )    
        .def( 
            "removeEventMask"
            , (void ( ::osgWidget::EventInterface::* )( unsigned int ) )( &::osgWidget::EventInterface::removeEventMask )
            , ( bp::arg("mask") ) )    
        .def( 
            "setEventMask"
            , (void ( ::osgWidget::EventInterface::* )( unsigned int ) )( &::osgWidget::EventInterface::setEventMask )
            , ( bp::arg("mask") ) )    
        .def( 
            "unfocus"
            , (bool ( ::osgWidget::EventInterface::* )( ::osgWidget::WindowManager const * ) )(&::osgWidget::EventInterface::unfocus)
            , (bool ( EventInterface_wrapper::* )( ::osgWidget::WindowManager const * ) )(&EventInterface_wrapper::default_unfocus)
            , ( bp::arg("arg0") ) );

}
