// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgWidget.h"
#include "wrap_referenced.h"
#include "Widget.pypp.hpp"

namespace bp = boost::python;

struct Widget_wrapper : osgWidget::Widget, bp::wrapper< osgWidget::Widget > {

    Widget_wrapper(::std::string const & arg0="", ::osgWidget::point_type arg1=0.0f, ::osgWidget::point_type arg2=0.0f )
    : osgWidget::Widget( arg0, arg1, arg2 )
      , bp::wrapper< osgWidget::Widget >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgWidget::Widget::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgWidget::Widget::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgWidget::Widget::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgWidget::Widget::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgWidget::Widget::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgWidget::Widget::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgWidget::Widget::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgWidget::Widget::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgWidget::Widget::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgWidget::Widget::libraryName( );
    }

    virtual void managed( ::osgWidget::WindowManager * arg0 ) {
        if( bp::override func_managed = this->get_override( "managed" ) )
            func_managed( boost::python::ptr(arg0) );
        else{
            this->osgWidget::Widget::managed( boost::python::ptr(arg0) );
        }
    }
    
    void default_managed( ::osgWidget::WindowManager * arg0 ) {
        osgWidget::Widget::managed( boost::python::ptr(arg0) );
    }

    virtual void parented( ::osgWidget::Window * arg0 ) {
        if( bp::override func_parented = this->get_override( "parented" ) )
            func_parented( boost::python::ptr(arg0) );
        else{
            this->osgWidget::Widget::parented( boost::python::ptr(arg0) );
        }
    }
    
    void default_parented( ::osgWidget::Window * arg0 ) {
        osgWidget::Widget::parented( boost::python::ptr(arg0) );
    }

    virtual void positioned(  ) {
        if( bp::override func_positioned = this->get_override( "positioned" ) )
            func_positioned(  );
        else{
            this->osgWidget::Widget::positioned(  );
        }
    }
    
    void default_positioned(  ) {
        osgWidget::Widget::positioned( );
    }

    virtual void unmanaged( ::osgWidget::WindowManager * arg0 ) {
        if( bp::override func_unmanaged = this->get_override( "unmanaged" ) )
            func_unmanaged( boost::python::ptr(arg0) );
        else{
            this->osgWidget::Widget::unmanaged( boost::python::ptr(arg0) );
        }
    }
    
    void default_unmanaged( ::osgWidget::WindowManager * arg0 ) {
        osgWidget::Widget::unmanaged( boost::python::ptr(arg0) );
    }

    virtual void unparented( ::osgWidget::Window * arg0 ) {
        if( bp::override func_unparented = this->get_override( "unparented" ) )
            func_unparented( boost::python::ptr(arg0) );
        else{
            this->osgWidget::Widget::unparented( boost::python::ptr(arg0) );
        }
    }
    
    void default_unparented( ::osgWidget::Window * arg0 ) {
        osgWidget::Widget::unparented( boost::python::ptr(arg0) );
    }

    virtual void accept( ::osg::Drawable::AttributeFunctor & af ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(af) );
        else{
            this->osg::Geometry::accept( boost::ref(af) );
        }
    }
    
    void default_accept( ::osg::Drawable::AttributeFunctor & af ) {
        osg::Geometry::accept( boost::ref(af) );
    }

    virtual void accept( ::osg::Drawable::ConstAttributeFunctor & af ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(af) );
        else{
            this->osg::Geometry::accept( boost::ref(af) );
        }
    }
    
    void default_accept( ::osg::Drawable::ConstAttributeFunctor & af ) const  {
        osg::Geometry::accept( boost::ref(af) );
    }

    virtual void accept( ::osg::PrimitiveFunctor & pf ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(pf) );
        else{
            this->osg::Geometry::accept( boost::ref(pf) );
        }
    }
    
    void default_accept( ::osg::PrimitiveFunctor & pf ) const  {
        osg::Geometry::accept( boost::ref(pf) );
    }

    virtual void accept( ::osg::PrimitiveIndexFunctor & pf ) const  {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(pf) );
        else{
            this->osg::Geometry::accept( boost::ref(pf) );
        }
    }
    
    void default_accept( ::osg::PrimitiveIndexFunctor & pf ) const  {
        osg::Geometry::accept( boost::ref(pf) );
    }

    virtual ::osg::Geometry * asGeometry(  ) {
        if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
            return func_asGeometry(  );
        else{
            return this->osg::Geometry::asGeometry(  );
        }
    }
    
    ::osg::Geometry * default_asGeometry(  ) {
        return osg::Geometry::asGeometry( );
    }

    virtual ::osg::Geometry const * asGeometry(  ) const  {
        if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
            return func_asGeometry(  );
        else{
            return this->osg::Geometry::asGeometry(  );
        }
    }
    
    ::osg::Geometry const * default_asGeometry(  ) const  {
        return osg::Geometry::asGeometry( );
    }

    virtual void compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
        if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
            func_compileGLObjects( boost::ref(renderInfo) );
        else{
            this->osg::Geometry::compileGLObjects( boost::ref(renderInfo) );
        }
    }
    
    void default_compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
        osg::Geometry::compileGLObjects( boost::ref(renderInfo) );
    }

    virtual ::osg::BoundingBox computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osg::Drawable::computeBound(  );
        }
    }
    
    ::osg::BoundingBox default_computeBound(  ) const  {
        return osg::Drawable::computeBound( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Drawable::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Drawable::computeDataVariance( );
    }

    virtual void dirtyDisplayList(  ) {
        if( bp::override func_dirtyDisplayList = this->get_override( "dirtyDisplayList" ) )
            func_dirtyDisplayList(  );
        else{
            this->osg::Geometry::dirtyDisplayList(  );
        }
    }
    
    void default_dirtyDisplayList(  ) {
        osg::Geometry::dirtyDisplayList( );
    }

    virtual void drawImplementation( ::osg::RenderInfo & renderInfo ) const  {
        if( bp::override func_drawImplementation = this->get_override( "drawImplementation" ) )
            func_drawImplementation( boost::ref(renderInfo) );
        else{
            this->osg::Geometry::drawImplementation( boost::ref(renderInfo) );
        }
    }
    
    void default_drawImplementation( ::osg::RenderInfo & renderInfo ) const  {
        osg::Geometry::drawImplementation( boost::ref(renderInfo) );
    }

    virtual bool focus( ::osgWidget::WindowManager const * arg0 ) {
        if( bp::override func_focus = this->get_override( "focus" ) )
            return func_focus( boost::python::ptr(arg0) );
        else{
            return this->osgWidget::EventInterface::focus( boost::python::ptr(arg0) );
        }
    }
    
    bool default_focus( ::osgWidget::WindowManager const * arg0 ) {
        return osgWidget::EventInterface::focus( boost::python::ptr(arg0) );
    }

    virtual unsigned int getGLObjectSizeHint(  ) const  {
        if( bp::override func_getGLObjectSizeHint = this->get_override( "getGLObjectSizeHint" ) )
            return func_getGLObjectSizeHint(  );
        else{
            return this->osg::Geometry::getGLObjectSizeHint(  );
        }
    }
    
    unsigned int default_getGLObjectSizeHint(  ) const  {
        return osg::Geometry::getGLObjectSizeHint( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool keyDown( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_keyDown = this->get_override( "keyDown" ) )
            return func_keyDown( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::keyDown( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_keyDown( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::keyDown( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool keyUp( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_keyUp = this->get_override( "keyUp" ) )
            return func_keyUp( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::keyUp( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_keyUp( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::keyUp( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseDrag( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseDrag = this->get_override( "mouseDrag" ) )
            return func_mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseDrag( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseEnter( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseEnter = this->get_override( "mouseEnter" ) )
            return func_mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseEnter( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseLeave( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseLeave = this->get_override( "mouseLeave" ) )
            return func_mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseLeave( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseOver( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseOver = this->get_override( "mouseOver" ) )
            return func_mouseOver( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseOver( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseOver( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseOver( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mousePush( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mousePush = this->get_override( "mousePush" ) )
            return func_mousePush( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mousePush( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mousePush( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mousePush( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseRelease( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseRelease = this->get_override( "mouseRelease" ) )
            return func_mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseRelease( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseScroll( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseScroll = this->get_override( "mouseScroll" ) )
            return func_mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseScroll( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Geometry::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Geometry::resizeGLObjectBuffers( maxSize );
    }

    virtual void setCullCallback( ::osg::Drawable::CullCallback * cc ) {
        if( bp::override func_setCullCallback = this->get_override( "setCullCallback" ) )
            func_setCullCallback( boost::python::ptr(cc) );
        else{
            this->osg::Drawable::setCullCallback( boost::python::ptr(cc) );
        }
    }
    
    void default_setCullCallback( ::osg::Drawable::CullCallback * cc ) {
        osg::Drawable::setCullCallback( boost::python::ptr(cc) );
    }

    virtual void setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
        if( bp::override func_setDrawCallback = this->get_override( "setDrawCallback" ) )
            func_setDrawCallback( boost::python::ptr(dc) );
        else{
            this->osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
        }
    }
    
    void default_setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
        osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
    }

    virtual void setEventCallback( ::osg::Drawable::EventCallback * ac ) {
        if( bp::override func_setEventCallback = this->get_override( "setEventCallback" ) )
            func_setEventCallback( boost::python::ptr(ac) );
        else{
            this->osg::Drawable::setEventCallback( boost::python::ptr(ac) );
        }
    }
    
    void default_setEventCallback( ::osg::Drawable::EventCallback * ac ) {
        osg::Drawable::setEventCallback( boost::python::ptr(ac) );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Drawable::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Drawable::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
        if( bp::override func_setUpdateCallback = this->get_override( "setUpdateCallback" ) )
            func_setUpdateCallback( boost::python::ptr(ac) );
        else{
            this->osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
        }
    }
    
    void default_setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
        osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
    }

    virtual void setUseVertexBufferObjects( bool flag ) {
        if( bp::override func_setUseVertexBufferObjects = this->get_override( "setUseVertexBufferObjects" ) )
            func_setUseVertexBufferObjects( flag );
        else{
            this->osg::Geometry::setUseVertexBufferObjects( flag );
        }
    }
    
    void default_setUseVertexBufferObjects( bool flag ) {
        osg::Geometry::setUseVertexBufferObjects( flag );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual bool supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Geometry::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
        return osg::Geometry::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Geometry::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
        return osg::Geometry::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Geometry::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
        return osg::Geometry::supports( boost::ref(arg0) );
    }

    virtual bool supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
        if( bp::override func_supports = this->get_override( "supports" ) )
            return func_supports( boost::ref(arg0) );
        else{
            return this->osg::Geometry::supports( boost::ref(arg0) );
        }
    }
    
    bool default_supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
        return osg::Geometry::supports( boost::ref(arg0) );
    }

    virtual bool unfocus( ::osgWidget::WindowManager const * arg0 ) {
        if( bp::override func_unfocus = this->get_override( "unfocus" ) )
            return func_unfocus( boost::python::ptr(arg0) );
        else{
            return this->osgWidget::EventInterface::unfocus( boost::python::ptr(arg0) );
        }
    }
    
    bool default_unfocus( ::osgWidget::WindowManager const * arg0 ) {
        return osgWidget::EventInterface::unfocus( boost::python::ptr(arg0) );
    }

};

void register_Widget_class(){

    { //::osgWidget::Widget
        typedef bp::class_< Widget_wrapper, bp::bases< ::osg::Geometry, osgWidget::EventInterface, osgWidget::StyleInterface >, osg::ref_ptr< Widget_wrapper >, boost::noncopyable > Widget_exposer_t;
        Widget_exposer_t Widget_exposer = Widget_exposer_t( "Widget", bp::init< bp::optional< std::string const &, osgWidget::point_type, osgWidget::point_type > >(( bp::arg("arg0")="", bp::arg("arg1")=0.0f, bp::arg("arg2")=0.0f )) );
        bp::scope Widget_scope( Widget_exposer );
        bp::enum_< osgWidget::Widget::CoordinateMode>("CoordinateMode")
            .value("CM_ABSOLUTE", osgWidget::Widget::CM_ABSOLUTE)
            .value("CM_RELATIVE", osgWidget::Widget::CM_RELATIVE)
            .export_values()
            ;
        bp::enum_< osgWidget::Widget::Corner>("Corner")
            .value("LOWER_LEFT", osgWidget::Widget::LOWER_LEFT)
            .value("LOWER_RIGHT", osgWidget::Widget::LOWER_RIGHT)
            .value("UPPER_RIGHT", osgWidget::Widget::UPPER_RIGHT)
            .value("UPPER_LEFT", osgWidget::Widget::UPPER_LEFT)
            .value("LL", osgWidget::Widget::LL)
            .value("LR", osgWidget::Widget::LR)
            .value("UR", osgWidget::Widget::UR)
            .value("UL", osgWidget::Widget::UL)
            .value("ALL_CORNERS", osgWidget::Widget::ALL_CORNERS)
            .export_values()
            ;
        bp::enum_< osgWidget::Widget::HorizontalAlignment>("HorizontalAlignment")
            .value("HA_CENTER", osgWidget::Widget::HA_CENTER)
            .value("HA_LEFT", osgWidget::Widget::HA_LEFT)
            .value("HA_RIGHT", osgWidget::Widget::HA_RIGHT)
            .export_values()
            ;
        bp::enum_< osgWidget::Widget::Layer>("Layer")
            .value("LAYER_TOP", osgWidget::Widget::LAYER_TOP)
            .value("LAYER_HIGH", osgWidget::Widget::LAYER_HIGH)
            .value("LAYER_MIDDLE", osgWidget::Widget::LAYER_MIDDLE)
            .value("LAYER_LOW", osgWidget::Widget::LAYER_LOW)
            .value("LAYER_BG", osgWidget::Widget::LAYER_BG)
            .export_values()
            ;
        bp::enum_< osgWidget::Widget::VerticalAlignment>("VerticalAlignment")
            .value("VA_CENTER", osgWidget::Widget::VA_CENTER)
            .value("VA_TOP", osgWidget::Widget::VA_TOP)
            .value("VA_BOTTOM", osgWidget::Widget::VA_BOTTOM)
            .export_values()
            ;
        bp::implicitly_convertible< std::string const &, osgWidget::Widget >();
        { //::osgWidget::Widget::addColor
        
            typedef void ( ::osgWidget::Widget::*addColor_function_type )( ::osgWidget::color_type,::osgWidget::color_type,::osgWidget::color_type,::osgWidget::color_type,::osgWidget::Widget::Corner ) ;
            
            Widget_exposer.def( 
                "addColor"
                , addColor_function_type( &::osgWidget::Widget::addColor )
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2"), bp::arg("arg3"), bp::arg("arg4")=::osgWidget::Widget::ALL_CORNERS ) );
        
        }
        { //::osgWidget::Widget::addColor
        
            typedef void ( ::osgWidget::Widget::*addColor_function_type )( ::osgWidget::Color const &,::osgWidget::Widget::Corner ) ;
            
            Widget_exposer.def( 
                "addColor"
                , addColor_function_type( &::osgWidget::Widget::addColor )
                , ( bp::arg("col"), bp::arg("p")=::osgWidget::Widget::ALL_CORNERS ) );
        
        }
        { //::osgWidget::Widget::addHeight
        
            typedef void ( ::osgWidget::Widget::*addHeight_function_type )( ::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "addHeight"
                , addHeight_function_type( &::osgWidget::Widget::addHeight )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Widget::addOrigin
        
            typedef void ( ::osgWidget::Widget::*addOrigin_function_type )( ::osgWidget::point_type,::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "addOrigin"
                , addOrigin_function_type( &::osgWidget::Widget::addOrigin )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::Widget::addOrigin
        
            typedef void ( ::osgWidget::Widget::*addOrigin_function_type )( ::osgWidget::XYCoord const & ) ;
            
            Widget_exposer.def( 
                "addOrigin"
                , addOrigin_function_type( &::osgWidget::Widget::addOrigin )
                , ( bp::arg("xy") ) );
        
        }
        { //::osgWidget::Widget::addSize
        
            typedef void ( ::osgWidget::Widget::*addSize_function_type )( ::osgWidget::point_type,::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "addSize"
                , addSize_function_type( &::osgWidget::Widget::addSize )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::Widget::addSize
        
            typedef void ( ::osgWidget::Widget::*addSize_function_type )( ::osgWidget::XYCoord const & ) ;
            
            Widget_exposer.def( 
                "addSize"
                , addSize_function_type( &::osgWidget::Widget::addSize )
                , ( bp::arg("xy") ) );
        
        }
        { //::osgWidget::Widget::addWidth
        
            typedef void ( ::osgWidget::Widget::*addWidth_function_type )( ::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "addWidth"
                , addWidth_function_type( &::osgWidget::Widget::addWidth )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Widget::addX
        
            typedef void ( ::osgWidget::Widget::*addX_function_type )( ::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "addX"
                , addX_function_type( &::osgWidget::Widget::addX )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Widget::addY
        
            typedef void ( ::osgWidget::Widget::*addY_function_type )( ::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "addY"
                , addY_function_type( &::osgWidget::Widget::addY )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Widget::canClone
        
            typedef bool ( ::osgWidget::Widget::*canClone_function_type )(  ) const;
            
            Widget_exposer.def( 
                "canClone"
                , canClone_function_type( &::osgWidget::Widget::canClone ) );
        
        }
        { //::osgWidget::Widget::canFill
        
            typedef bool ( ::osgWidget::Widget::*canFill_function_type )(  ) const;
            
            Widget_exposer.def( 
                "canFill"
                , canFill_function_type( &::osgWidget::Widget::canFill ) );
        
        }
        { //::osgWidget::Widget::className
        
            typedef char const * ( ::osgWidget::Widget::*className_function_type )(  ) const;
            typedef char const * ( Widget_wrapper::*default_className_function_type )(  ) const;
            
            Widget_exposer.def( 
                "className"
                , className_function_type(&::osgWidget::Widget::className)
                , default_className_function_type(&Widget_wrapper::default_className) );
        
        }
        { //::osgWidget::Widget::clone
        
            typedef ::osg::Object * ( ::osgWidget::Widget::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Widget_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Widget_exposer.def( 
                "clone"
                , clone_function_type(&::osgWidget::Widget::clone)
                , default_clone_function_type(&Widget_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgWidget::Widget::cloneType
        
            typedef ::osg::Object * ( ::osgWidget::Widget::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Widget_wrapper::*default_cloneType_function_type )(  ) const;
            
            Widget_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgWidget::Widget::cloneType)
                , default_cloneType_function_type(&Widget_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgWidget::Widget::getAlignHorizontal
        
            typedef ::osgWidget::Widget::HorizontalAlignment ( ::osgWidget::Widget::*getAlignHorizontal_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getAlignHorizontal"
                , getAlignHorizontal_function_type( &::osgWidget::Widget::getAlignHorizontal ) );
        
        }
        { //::osgWidget::Widget::getAlignVertical
        
            typedef ::osgWidget::Widget::VerticalAlignment ( ::osgWidget::Widget::*getAlignVertical_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getAlignVertical"
                , getAlignVertical_function_type( &::osgWidget::Widget::getAlignVertical ) );
        
        }
        { //::osgWidget::Widget::getColor
        
            typedef ::osgWidget::Color const & ( ::osgWidget::Widget::*getColor_function_type )( ::osgWidget::Widget::Corner ) const;
            
            Widget_exposer.def( 
                "getColor"
                , getColor_function_type( &::osgWidget::Widget::getColor )
                , ( bp::arg("arg0")=::osgWidget::Widget::ALL_CORNERS )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Widget::getCoordinateMode
        
            typedef ::osgWidget::Widget::CoordinateMode ( ::osgWidget::Widget::*getCoordinateMode_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getCoordinateMode"
                , getCoordinateMode_function_type( &::osgWidget::Widget::getCoordinateMode ) );
        
        }
        { //::osgWidget::Widget::getDimensions
        
            typedef ::osgWidget::Quad ( ::osgWidget::Widget::*getDimensions_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getDimensions"
                , getDimensions_function_type( &::osgWidget::Widget::getDimensions ) );
        
        }
        { //::osgWidget::Widget::getFillAsNumeric
        
            typedef ::osgWidget::point_type ( ::osgWidget::Widget::*getFillAsNumeric_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getFillAsNumeric"
                , getFillAsNumeric_function_type( &::osgWidget::Widget::getFillAsNumeric ) );
        
        }
        { //::osgWidget::Widget::getHeight
        
            typedef ::osgWidget::point_type ( ::osgWidget::Widget::*getHeight_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getHeight"
                , getHeight_function_type( &::osgWidget::Widget::getHeight ) );
        
        }
        { //::osgWidget::Widget::getHeightTotal
        
            typedef ::osgWidget::point_type ( ::osgWidget::Widget::*getHeightTotal_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getHeightTotal"
                , getHeightTotal_function_type( &::osgWidget::Widget::getHeightTotal ) );
        
        }
        { //::osgWidget::Widget::getImageColorAtPointerXY
        
            typedef ::osgWidget::Color ( ::osgWidget::Widget::*getImageColorAtPointerXY_function_type )( double,double ) const;
            
            Widget_exposer.def( 
                "getImageColorAtPointerXY"
                , getImageColorAtPointerXY_function_type( &::osgWidget::Widget::getImageColorAtPointerXY )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::osgWidget::Widget::getImageColorAtXY
        
            typedef ::osgWidget::Color ( ::osgWidget::Widget::*getImageColorAtXY_function_type )( ::osgWidget::point_type,::osgWidget::point_type ) const;
            
            Widget_exposer.def( 
                "getImageColorAtXY"
                , getImageColorAtXY_function_type( &::osgWidget::Widget::getImageColorAtXY )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::osgWidget::Widget::getImageColorAtXY
        
            typedef ::osgWidget::Color ( ::osgWidget::Widget::*getImageColorAtXY_function_type )( ::osgWidget::XYCoord const & ) const;
            
            Widget_exposer.def( 
                "getImageColorAtXY"
                , getImageColorAtXY_function_type( &::osgWidget::Widget::getImageColorAtXY )
                , ( bp::arg("xy") ) );
        
        }
        { //::osgWidget::Widget::getIndex
        
            typedef unsigned int ( ::osgWidget::Widget::*getIndex_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getIndex"
                , getIndex_function_type( &::osgWidget::Widget::getIndex ) );
        
        }
        { //::osgWidget::Widget::getLayer
        
            typedef unsigned int ( ::osgWidget::Widget::*getLayer_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getLayer"
                , getLayer_function_type( &::osgWidget::Widget::getLayer ) );
        
        }
        { //::osgWidget::Widget::getMinHeight
        
            typedef ::osgWidget::point_type ( ::osgWidget::Widget::*getMinHeight_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getMinHeight"
                , getMinHeight_function_type( &::osgWidget::Widget::getMinHeight ) );
        
        }
        { //::osgWidget::Widget::getMinHeightTotal
        
            typedef ::osgWidget::point_type ( ::osgWidget::Widget::*getMinHeightTotal_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getMinHeightTotal"
                , getMinHeightTotal_function_type( &::osgWidget::Widget::getMinHeightTotal ) );
        
        }
        { //::osgWidget::Widget::getMinWidth
        
            typedef ::osgWidget::point_type ( ::osgWidget::Widget::*getMinWidth_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getMinWidth"
                , getMinWidth_function_type( &::osgWidget::Widget::getMinWidth ) );
        
        }
        { //::osgWidget::Widget::getMinWidthTotal
        
            typedef ::osgWidget::point_type ( ::osgWidget::Widget::*getMinWidthTotal_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getMinWidthTotal"
                , getMinWidthTotal_function_type( &::osgWidget::Widget::getMinWidthTotal ) );
        
        }
        { //::osgWidget::Widget::getOrigin
        
            typedef ::osgWidget::XYCoord ( ::osgWidget::Widget::*getOrigin_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getOrigin"
                , getOrigin_function_type( &::osgWidget::Widget::getOrigin ) );
        
        }
        { //::osgWidget::Widget::getPadBottom
        
            typedef ::osgWidget::point_type ( ::osgWidget::Widget::*getPadBottom_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getPadBottom"
                , getPadBottom_function_type( &::osgWidget::Widget::getPadBottom ) );
        
        }
        { //::osgWidget::Widget::getPadHorizontal
        
            typedef ::osgWidget::point_type ( ::osgWidget::Widget::*getPadHorizontal_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getPadHorizontal"
                , getPadHorizontal_function_type( &::osgWidget::Widget::getPadHorizontal ) );
        
        }
        { //::osgWidget::Widget::getPadLeft
        
            typedef ::osgWidget::point_type ( ::osgWidget::Widget::*getPadLeft_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getPadLeft"
                , getPadLeft_function_type( &::osgWidget::Widget::getPadLeft ) );
        
        }
        { //::osgWidget::Widget::getPadRight
        
            typedef ::osgWidget::point_type ( ::osgWidget::Widget::*getPadRight_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getPadRight"
                , getPadRight_function_type( &::osgWidget::Widget::getPadRight ) );
        
        }
        { //::osgWidget::Widget::getPadTop
        
            typedef ::osgWidget::point_type ( ::osgWidget::Widget::*getPadTop_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getPadTop"
                , getPadTop_function_type( &::osgWidget::Widget::getPadTop ) );
        
        }
        { //::osgWidget::Widget::getPadVertical
        
            typedef ::osgWidget::point_type ( ::osgWidget::Widget::*getPadVertical_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getPadVertical"
                , getPadVertical_function_type( &::osgWidget::Widget::getPadVertical ) );
        
        }
        { //::osgWidget::Widget::getParent
        
            typedef ::osgWidget::Window * ( ::osgWidget::Widget::*getParent_function_type )(  ) ;
            
            Widget_exposer.def( 
                "getParent"
                , getParent_function_type( &::osgWidget::Widget::getParent )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Widget::getParent
        
            typedef ::osgWidget::Window const * ( ::osgWidget::Widget::*getParent_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getParent"
                , getParent_function_type( &::osgWidget::Widget::getParent )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Widget::getPoint
        
            typedef ::osgWidget::Point const & ( ::osgWidget::Widget::*getPoint_function_type )( ::osgWidget::Widget::Corner ) const;
            
            Widget_exposer.def( 
                "getPoint"
                , getPoint_function_type( &::osgWidget::Widget::getPoint )
                , ( bp::arg("arg0")=::osgWidget::Widget::ALL_CORNERS )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Widget::getPosition
        
            typedef ::osgWidget::Point ( ::osgWidget::Widget::*getPosition_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getPosition"
                , getPosition_function_type( &::osgWidget::Widget::getPosition ) );
        
        }
        { //::osgWidget::Widget::getSize
        
            typedef ::osgWidget::XYCoord ( ::osgWidget::Widget::*getSize_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getSize"
                , getSize_function_type( &::osgWidget::Widget::getSize ) );
        
        }
        { //::osgWidget::Widget::getTexCoord
        
            typedef ::osgWidget::TexCoord const & ( ::osgWidget::Widget::*getTexCoord_function_type )( ::osgWidget::Widget::Corner ) const;
            
            Widget_exposer.def( 
                "getTexCoord"
                , getTexCoord_function_type( &::osgWidget::Widget::getTexCoord )
                , ( bp::arg("arg0")=::osgWidget::Widget::ALL_CORNERS )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Widget::getWidth
        
            typedef ::osgWidget::point_type ( ::osgWidget::Widget::*getWidth_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getWidth"
                , getWidth_function_type( &::osgWidget::Widget::getWidth ) );
        
        }
        { //::osgWidget::Widget::getWidthTotal
        
            typedef ::osgWidget::point_type ( ::osgWidget::Widget::*getWidthTotal_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getWidthTotal"
                , getWidthTotal_function_type( &::osgWidget::Widget::getWidthTotal ) );
        
        }
        { //::osgWidget::Widget::getWindowManager
        
            typedef ::osgWidget::WindowManager * ( ::osgWidget::Widget::*getWindowManager_function_type )(  ) ;
            
            Widget_exposer.def( 
                "getWindowManager"
                , getWindowManager_function_type( &::osgWidget::Widget::getWindowManager )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Widget::getWindowManager
        
            typedef ::osgWidget::WindowManager const * ( ::osgWidget::Widget::*getWindowManager_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getWindowManager"
                , getWindowManager_function_type( &::osgWidget::Widget::getWindowManager )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Widget::getX
        
            typedef ::osgWidget::point_type ( ::osgWidget::Widget::*getX_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getX"
                , getX_function_type( &::osgWidget::Widget::getX ) );
        
        }
        { //::osgWidget::Widget::getY
        
            typedef ::osgWidget::point_type ( ::osgWidget::Widget::*getY_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getY"
                , getY_function_type( &::osgWidget::Widget::getY ) );
        
        }
        { //::osgWidget::Widget::getZ
        
            typedef ::osgWidget::point_type ( ::osgWidget::Widget::*getZ_function_type )(  ) const;
            
            Widget_exposer.def( 
                "getZ"
                , getZ_function_type( &::osgWidget::Widget::getZ ) );
        
        }
        { //::osgWidget::Widget::isManaged
        
            typedef bool ( ::osgWidget::Widget::*isManaged_function_type )(  ) const;
            
            Widget_exposer.def( 
                "isManaged"
                , isManaged_function_type( &::osgWidget::Widget::isManaged ) );
        
        }
        { //::osgWidget::Widget::isPaddingUniform
        
            typedef bool ( ::osgWidget::Widget::*isPaddingUniform_function_type )(  ) const;
            
            Widget_exposer.def( 
                "isPaddingUniform"
                , isPaddingUniform_function_type( &::osgWidget::Widget::isPaddingUniform ) );
        
        }
        { //::osgWidget::Widget::isSameKindAs
        
            typedef bool ( ::osgWidget::Widget::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Widget_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Widget_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgWidget::Widget::isSameKindAs)
                , default_isSameKindAs_function_type(&Widget_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgWidget::Widget::isStyled
        
            typedef bool ( ::osgWidget::Widget::*isStyled_function_type )(  ) const;
            
            Widget_exposer.def( 
                "isStyled"
                , isStyled_function_type( &::osgWidget::Widget::isStyled ) );
        
        }
        { //::osgWidget::Widget::libraryName
        
            typedef char const * ( ::osgWidget::Widget::*libraryName_function_type )(  ) const;
            typedef char const * ( Widget_wrapper::*default_libraryName_function_type )(  ) const;
            
            Widget_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgWidget::Widget::libraryName)
                , default_libraryName_function_type(&Widget_wrapper::default_libraryName) );
        
        }
        { //::osgWidget::Widget::localXY
        
            typedef ::osgWidget::XYCoord ( ::osgWidget::Widget::*localXY_function_type )( double,double ) const;
            
            Widget_exposer.def( 
                "localXY"
                , localXY_function_type( &::osgWidget::Widget::localXY )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::Widget::managed
        
            typedef void ( ::osgWidget::Widget::*managed_function_type )( ::osgWidget::WindowManager * ) ;
            typedef void ( Widget_wrapper::*default_managed_function_type )( ::osgWidget::WindowManager * ) ;
            
            Widget_exposer.def( 
                "managed"
                , managed_function_type(&::osgWidget::Widget::managed)
                , default_managed_function_type(&Widget_wrapper::default_managed)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Widget::parented
        
            typedef void ( ::osgWidget::Widget::*parented_function_type )( ::osgWidget::Window * ) ;
            typedef void ( Widget_wrapper::*default_parented_function_type )( ::osgWidget::Window * ) ;
            
            Widget_exposer.def( 
                "parented"
                , parented_function_type(&::osgWidget::Widget::parented)
                , default_parented_function_type(&Widget_wrapper::default_parented)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Widget::positioned
        
            typedef void ( ::osgWidget::Widget::*positioned_function_type )(  ) ;
            typedef void ( Widget_wrapper::*default_positioned_function_type )(  ) ;
            
            Widget_exposer.def( 
                "positioned"
                , positioned_function_type(&::osgWidget::Widget::positioned)
                , default_positioned_function_type(&Widget_wrapper::default_positioned) );
        
        }
        { //::osgWidget::Widget::setAlignHorizontal
        
            typedef void ( ::osgWidget::Widget::*setAlignHorizontal_function_type )( ::osgWidget::Widget::HorizontalAlignment ) ;
            
            Widget_exposer.def( 
                "setAlignHorizontal"
                , setAlignHorizontal_function_type( &::osgWidget::Widget::setAlignHorizontal )
                , ( bp::arg("h") ) );
        
        }
        { //::osgWidget::Widget::setAlignVertical
        
            typedef void ( ::osgWidget::Widget::*setAlignVertical_function_type )( ::osgWidget::Widget::VerticalAlignment ) ;
            
            Widget_exposer.def( 
                "setAlignVertical"
                , setAlignVertical_function_type( &::osgWidget::Widget::setAlignVertical )
                , ( bp::arg("v") ) );
        
        }
        { //::osgWidget::Widget::setCanClone
        
            typedef void ( ::osgWidget::Widget::*setCanClone_function_type )( bool ) ;
            
            Widget_exposer.def( 
                "setCanClone"
                , setCanClone_function_type( &::osgWidget::Widget::setCanClone )
                , ( bp::arg("c") ) );
        
        }
        { //::osgWidget::Widget::setCanFill
        
            typedef void ( ::osgWidget::Widget::*setCanFill_function_type )( bool ) ;
            
            Widget_exposer.def( 
                "setCanFill"
                , setCanFill_function_type( &::osgWidget::Widget::setCanFill )
                , ( bp::arg("f") ) );
        
        }
        { //::osgWidget::Widget::setColor
        
            typedef void ( ::osgWidget::Widget::*setColor_function_type )( ::osgWidget::color_type,::osgWidget::color_type,::osgWidget::color_type,::osgWidget::color_type,::osgWidget::Widget::Corner ) ;
            
            Widget_exposer.def( 
                "setColor"
                , setColor_function_type( &::osgWidget::Widget::setColor )
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2"), bp::arg("arg3"), bp::arg("arg4")=::osgWidget::Widget::ALL_CORNERS ) );
        
        }
        { //::osgWidget::Widget::setColor
        
            typedef void ( ::osgWidget::Widget::*setColor_function_type )( ::osgWidget::Color const &,::osgWidget::Widget::Corner ) ;
            
            Widget_exposer.def( 
                "setColor"
                , setColor_function_type( &::osgWidget::Widget::setColor )
                , ( bp::arg("col"), bp::arg("p")=::osgWidget::Widget::ALL_CORNERS ) );
        
        }
        { //::osgWidget::Widget::setCoordinateMode
        
            typedef void ( ::osgWidget::Widget::*setCoordinateMode_function_type )( ::osgWidget::Widget::CoordinateMode ) ;
            
            Widget_exposer.def( 
                "setCoordinateMode"
                , setCoordinateMode_function_type( &::osgWidget::Widget::setCoordinateMode )
                , ( bp::arg("cm") ) );
        
        }
        { //::osgWidget::Widget::setDimensions
        
            typedef void ( ::osgWidget::Widget::*setDimensions_function_type )( ::osgWidget::point_type,::osgWidget::point_type,::osgWidget::point_type,::osgWidget::point_type,::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "setDimensions"
                , setDimensions_function_type( &::osgWidget::Widget::setDimensions )
                , ( bp::arg("arg0")=-1.0e+0f, bp::arg("arg1")=-1.0e+0f, bp::arg("arg2")=-1.0e+0f, bp::arg("arg3")=-1.0e+0f, bp::arg("arg4")=-1.0e+0f ) );
        
        }
        { //::osgWidget::Widget::setDimensions
        
            typedef void ( ::osgWidget::Widget::*setDimensions_function_type )( ::osgWidget::Quad const &,::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "setDimensions"
                , setDimensions_function_type( &::osgWidget::Widget::setDimensions )
                , ( bp::arg("q"), bp::arg("z")=-1.0e+0f ) );
        
        }
        { //::osgWidget::Widget::setHeight
        
            typedef void ( ::osgWidget::Widget::*setHeight_function_type )( ::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "setHeight"
                , setHeight_function_type( &::osgWidget::Widget::setHeight )
                , ( bp::arg("h") ) );
        
        }
        { //::osgWidget::Widget::setImage
        
            typedef bool ( ::osgWidget::Widget::*setImage_function_type )( ::osg::Image *,bool,bool ) ;
            
            Widget_exposer.def( 
                "setImage"
                , setImage_function_type( &::osgWidget::Widget::setImage )
                , ( bp::arg("arg0"), bp::arg("arg1")=(bool)(false), bp::arg("arg2")=(bool)(false) ) );
        
        }
        { //::osgWidget::Widget::setImage
        
            typedef bool ( ::osgWidget::Widget::*setImage_function_type )( ::std::string const &,bool,bool ) ;
            
            Widget_exposer.def( 
                "setImage"
                , setImage_function_type( &::osgWidget::Widget::setImage )
                , ( bp::arg("arg0"), bp::arg("arg1")=(bool)(false), bp::arg("arg2")=(bool)(false) ) );
        
        }
        { //::osgWidget::Widget::setLayer
        
            typedef void ( ::osgWidget::Widget::*setLayer_function_type )( ::osgWidget::Widget::Layer,unsigned int ) ;
            
            Widget_exposer.def( 
                "setLayer"
                , setLayer_function_type( &::osgWidget::Widget::setLayer )
                , ( bp::arg("l"), bp::arg("offset")=(unsigned int)(0) ) );
        
        }
        { //::osgWidget::Widget::setMinimumSize
        
            typedef void ( ::osgWidget::Widget::*setMinimumSize_function_type )( ::osgWidget::point_type,::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "setMinimumSize"
                , setMinimumSize_function_type( &::osgWidget::Widget::setMinimumSize )
                , ( bp::arg("width"), bp::arg("height") ) );
        
        }
        { //::osgWidget::Widget::setMinimumSize
        
            typedef void ( ::osgWidget::Widget::*setMinimumSize_function_type )( ::osgWidget::XYCoord const & ) ;
            
            Widget_exposer.def( 
                "setMinimumSize"
                , setMinimumSize_function_type( &::osgWidget::Widget::setMinimumSize )
                , ( bp::arg("xy") ) );
        
        }
        { //::osgWidget::Widget::setOrigin
        
            typedef void ( ::osgWidget::Widget::*setOrigin_function_type )( ::osgWidget::point_type,::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "setOrigin"
                , setOrigin_function_type( &::osgWidget::Widget::setOrigin )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::osgWidget::Widget::setOrigin
        
            typedef void ( ::osgWidget::Widget::*setOrigin_function_type )( ::osgWidget::XYCoord const & ) ;
            
            Widget_exposer.def( 
                "setOrigin"
                , setOrigin_function_type( &::osgWidget::Widget::setOrigin )
                , ( bp::arg("xy") ) );
        
        }
        { //::osgWidget::Widget::setPadBottom
        
            typedef void ( ::osgWidget::Widget::*setPadBottom_function_type )( ::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "setPadBottom"
                , setPadBottom_function_type( &::osgWidget::Widget::setPadBottom )
                , ( bp::arg("p") ) );
        
        }
        { //::osgWidget::Widget::setPadLeft
        
            typedef void ( ::osgWidget::Widget::*setPadLeft_function_type )( ::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "setPadLeft"
                , setPadLeft_function_type( &::osgWidget::Widget::setPadLeft )
                , ( bp::arg("p") ) );
        
        }
        { //::osgWidget::Widget::setPadRight
        
            typedef void ( ::osgWidget::Widget::*setPadRight_function_type )( ::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "setPadRight"
                , setPadRight_function_type( &::osgWidget::Widget::setPadRight )
                , ( bp::arg("p") ) );
        
        }
        { //::osgWidget::Widget::setPadTop
        
            typedef void ( ::osgWidget::Widget::*setPadTop_function_type )( ::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "setPadTop"
                , setPadTop_function_type( &::osgWidget::Widget::setPadTop )
                , ( bp::arg("p") ) );
        
        }
        { //::osgWidget::Widget::setPadding
        
            typedef void ( ::osgWidget::Widget::*setPadding_function_type )( ::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "setPadding"
                , setPadding_function_type( &::osgWidget::Widget::setPadding )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Widget::setSize
        
            typedef void ( ::osgWidget::Widget::*setSize_function_type )( ::osgWidget::point_type,::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "setSize"
                , setSize_function_type( &::osgWidget::Widget::setSize )
                , ( bp::arg("w"), bp::arg("h") ) );
        
        }
        { //::osgWidget::Widget::setSize
        
            typedef void ( ::osgWidget::Widget::*setSize_function_type )( ::osgWidget::XYCoord const & ) ;
            
            Widget_exposer.def( 
                "setSize"
                , setSize_function_type( &::osgWidget::Widget::setSize )
                , ( bp::arg("xy") ) );
        
        }
        { //::osgWidget::Widget::setTexCoord
        
            typedef void ( ::osgWidget::Widget::*setTexCoord_function_type )( ::osgWidget::texcoord_type,::osgWidget::texcoord_type,::osgWidget::Widget::Corner ) ;
            
            Widget_exposer.def( 
                "setTexCoord"
                , setTexCoord_function_type( &::osgWidget::Widget::setTexCoord )
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2")=::osgWidget::Widget::ALL_CORNERS ) );
        
        }
        { //::osgWidget::Widget::setTexCoord
        
            typedef void ( ::osgWidget::Widget::*setTexCoord_function_type )( ::osgWidget::XYCoord const &,::osgWidget::Widget::Corner ) ;
            
            Widget_exposer.def( 
                "setTexCoord"
                , setTexCoord_function_type( &::osgWidget::Widget::setTexCoord )
                , ( bp::arg("xy"), bp::arg("p")=::osgWidget::Widget::ALL_CORNERS ) );
        
        }
        { //::osgWidget::Widget::setTexCoordRegion
        
            typedef void ( ::osgWidget::Widget::*setTexCoordRegion_function_type )( ::osgWidget::point_type,::osgWidget::point_type,::osgWidget::point_type,::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "setTexCoordRegion"
                , setTexCoordRegion_function_type( &::osgWidget::Widget::setTexCoordRegion )
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2"), bp::arg("arg3") ) );
        
        }
        { //::osgWidget::Widget::setTexCoordRegion
        
            typedef void ( ::osgWidget::Widget::*setTexCoordRegion_function_type )( ::osgWidget::XYCoord const &,::osgWidget::point_type,::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "setTexCoordRegion"
                , setTexCoordRegion_function_type( &::osgWidget::Widget::setTexCoordRegion )
                , ( bp::arg("xy"), bp::arg("w"), bp::arg("h") ) );
        
        }
        { //::osgWidget::Widget::setTexCoordRegion
        
            typedef void ( ::osgWidget::Widget::*setTexCoordRegion_function_type )( ::osgWidget::point_type,::osgWidget::point_type,::osgWidget::XYCoord const & ) ;
            
            Widget_exposer.def( 
                "setTexCoordRegion"
                , setTexCoordRegion_function_type( &::osgWidget::Widget::setTexCoordRegion )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("wh") ) );
        
        }
        { //::osgWidget::Widget::setTexCoordRegion
        
            typedef void ( ::osgWidget::Widget::*setTexCoordRegion_function_type )( ::osgWidget::XYCoord const &,::osgWidget::XYCoord const & ) ;
            
            Widget_exposer.def( 
                "setTexCoordRegion"
                , setTexCoordRegion_function_type( &::osgWidget::Widget::setTexCoordRegion )
                , ( bp::arg("xy"), bp::arg("wh") ) );
        
        }
        { //::osgWidget::Widget::setTexCoordWrapHorizontal
        
            typedef void ( ::osgWidget::Widget::*setTexCoordWrapHorizontal_function_type )(  ) ;
            
            Widget_exposer.def( 
                "setTexCoordWrapHorizontal"
                , setTexCoordWrapHorizontal_function_type( &::osgWidget::Widget::setTexCoordWrapHorizontal ) );
        
        }
        { //::osgWidget::Widget::setTexCoordWrapVertical
        
            typedef void ( ::osgWidget::Widget::*setTexCoordWrapVertical_function_type )(  ) ;
            
            Widget_exposer.def( 
                "setTexCoordWrapVertical"
                , setTexCoordWrapVertical_function_type( &::osgWidget::Widget::setTexCoordWrapVertical ) );
        
        }
        { //::osgWidget::Widget::setTexture
        
            typedef bool ( ::osgWidget::Widget::*setTexture_function_type )( ::osg::Texture *,bool,bool ) ;
            
            Widget_exposer.def( 
                "setTexture"
                , setTexture_function_type( &::osgWidget::Widget::setTexture )
                , ( bp::arg("arg0"), bp::arg("arg1")=(bool)(false), bp::arg("arg2")=(bool)(false) ) );
        
        }
        { //::osgWidget::Widget::setWidth
        
            typedef void ( ::osgWidget::Widget::*setWidth_function_type )( ::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "setWidth"
                , setWidth_function_type( &::osgWidget::Widget::setWidth )
                , ( bp::arg("w") ) );
        
        }
        { //::osgWidget::Widget::setX
        
            typedef void ( ::osgWidget::Widget::*setX_function_type )( ::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "setX"
                , setX_function_type( &::osgWidget::Widget::setX )
                , ( bp::arg("x") ) );
        
        }
        { //::osgWidget::Widget::setY
        
            typedef void ( ::osgWidget::Widget::*setY_function_type )( ::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "setY"
                , setY_function_type( &::osgWidget::Widget::setY )
                , ( bp::arg("y") ) );
        
        }
        { //::osgWidget::Widget::setZ
        
            typedef void ( ::osgWidget::Widget::*setZ_function_type )( ::osgWidget::point_type ) ;
            
            Widget_exposer.def( 
                "setZ"
                , setZ_function_type( &::osgWidget::Widget::setZ )
                , ( bp::arg("z") ) );
        
        }
        { //::osgWidget::Widget::unmanaged
        
            typedef void ( ::osgWidget::Widget::*unmanaged_function_type )( ::osgWidget::WindowManager * ) ;
            typedef void ( Widget_wrapper::*default_unmanaged_function_type )( ::osgWidget::WindowManager * ) ;
            
            Widget_exposer.def( 
                "unmanaged"
                , unmanaged_function_type(&::osgWidget::Widget::unmanaged)
                , default_unmanaged_function_type(&Widget_wrapper::default_unmanaged)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Widget::unparented
        
            typedef void ( ::osgWidget::Widget::*unparented_function_type )( ::osgWidget::Window * ) ;
            typedef void ( Widget_wrapper::*default_unparented_function_type )( ::osgWidget::Window * ) ;
            
            Widget_exposer.def( 
                "unparented"
                , unparented_function_type(&::osgWidget::Widget::unparented)
                , default_unparented_function_type(&Widget_wrapper::default_unparented)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::EventInterface::focus
        
            typedef bool ( ::osgWidget::EventInterface::*focus_function_type )( ::osgWidget::WindowManager const * ) ;
            typedef bool ( Widget_wrapper::*default_focus_function_type )( ::osgWidget::WindowManager const * ) ;
            
            Widget_exposer.def( 
                "focus"
                , focus_function_type(&::osgWidget::EventInterface::focus)
                , default_focus_function_type(&Widget_wrapper::default_focus)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::EventInterface::keyDown
        
            typedef bool ( ::osgWidget::EventInterface::*keyDown_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            typedef bool ( Widget_wrapper::*default_keyDown_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            
            Widget_exposer.def( 
                "keyDown"
                , keyDown_function_type(&::osgWidget::EventInterface::keyDown)
                , default_keyDown_function_type(&Widget_wrapper::default_keyDown)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::keyUp
        
            typedef bool ( ::osgWidget::EventInterface::*keyUp_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            typedef bool ( Widget_wrapper::*default_keyUp_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            
            Widget_exposer.def( 
                "keyUp"
                , keyUp_function_type(&::osgWidget::EventInterface::keyUp)
                , default_keyUp_function_type(&Widget_wrapper::default_keyUp)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseDrag
        
            typedef bool ( ::osgWidget::EventInterface::*mouseDrag_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Widget_wrapper::*default_mouseDrag_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Widget_exposer.def( 
                "mouseDrag"
                , mouseDrag_function_type(&::osgWidget::EventInterface::mouseDrag)
                , default_mouseDrag_function_type(&Widget_wrapper::default_mouseDrag)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseEnter
        
            typedef bool ( ::osgWidget::EventInterface::*mouseEnter_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Widget_wrapper::*default_mouseEnter_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Widget_exposer.def( 
                "mouseEnter"
                , mouseEnter_function_type(&::osgWidget::EventInterface::mouseEnter)
                , default_mouseEnter_function_type(&Widget_wrapper::default_mouseEnter)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseLeave
        
            typedef bool ( ::osgWidget::EventInterface::*mouseLeave_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Widget_wrapper::*default_mouseLeave_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Widget_exposer.def( 
                "mouseLeave"
                , mouseLeave_function_type(&::osgWidget::EventInterface::mouseLeave)
                , default_mouseLeave_function_type(&Widget_wrapper::default_mouseLeave)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseOver
        
            typedef bool ( ::osgWidget::EventInterface::*mouseOver_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Widget_wrapper::*default_mouseOver_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Widget_exposer.def( 
                "mouseOver"
                , mouseOver_function_type(&::osgWidget::EventInterface::mouseOver)
                , default_mouseOver_function_type(&Widget_wrapper::default_mouseOver)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mousePush
        
            typedef bool ( ::osgWidget::EventInterface::*mousePush_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Widget_wrapper::*default_mousePush_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Widget_exposer.def( 
                "mousePush"
                , mousePush_function_type(&::osgWidget::EventInterface::mousePush)
                , default_mousePush_function_type(&Widget_wrapper::default_mousePush)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseRelease
        
            typedef bool ( ::osgWidget::EventInterface::*mouseRelease_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Widget_wrapper::*default_mouseRelease_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Widget_exposer.def( 
                "mouseRelease"
                , mouseRelease_function_type(&::osgWidget::EventInterface::mouseRelease)
                , default_mouseRelease_function_type(&Widget_wrapper::default_mouseRelease)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseScroll
        
            typedef bool ( ::osgWidget::EventInterface::*mouseScroll_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Widget_wrapper::*default_mouseScroll_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Widget_exposer.def( 
                "mouseScroll"
                , mouseScroll_function_type(&::osgWidget::EventInterface::mouseScroll)
                , default_mouseScroll_function_type(&Widget_wrapper::default_mouseScroll)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::unfocus
        
            typedef bool ( ::osgWidget::EventInterface::*unfocus_function_type )( ::osgWidget::WindowManager const * ) ;
            typedef bool ( Widget_wrapper::*default_unfocus_function_type )( ::osgWidget::WindowManager const * ) ;
            
            Widget_exposer.def( 
                "unfocus"
                , unfocus_function_type(&::osgWidget::EventInterface::unfocus)
                , default_unfocus_function_type(&Widget_wrapper::default_unfocus)
                , ( bp::arg("arg0") ) );
        
        }
    }

}
