// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgWidget.h"
#include "_osgWidget_free_functions.pypp.hpp"

namespace bp = boost::python;

void register_free_functions(){

    { //::osgWidget::_notify
    
        typedef ::std::ostream & ( *_notify_function_type )( ::osg::NotifySeverity );
        
        bp::def( 
            "_notify"
            , _notify_function_type( &::osgWidget::_notify )
            , ( bp::arg("ns")=::osg::INFO )
            , bp::return_value_policy< bp::reference_existing_object >() );
    
    }

    { //::osgWidget::callbackWindowMove
    
        typedef bool ( *callbackWindowMove_function_type )( ::osgWidget::Event & );
        
        bp::def( 
            "callbackWindowMove"
            , callbackWindowMove_function_type( &::osgWidget::callbackWindowMove )
            , ( bp::arg("arg0") ) );
    
    }

    { //::osgWidget::callbackWindowRotate
    
        typedef bool ( *callbackWindowRotate_function_type )( ::osgWidget::Event & );
        
        bp::def( 
            "callbackWindowRotate"
            , callbackWindowRotate_function_type( &::osgWidget::callbackWindowRotate )
            , ( bp::arg("arg0") ) );
    
    }

    { //::osgWidget::callbackWindowScale
    
        typedef bool ( *callbackWindowScale_function_type )( ::osgWidget::Event & );
        
        bp::def( 
            "callbackWindowScale"
            , callbackWindowScale_function_type( &::osgWidget::callbackWindowScale )
            , ( bp::arg("arg0") ) );
    
    }

    { //::osgWidget::callbackWindowTabFocus
    
        typedef bool ( *callbackWindowTabFocus_function_type )( ::osgWidget::Event & );
        
        bp::def( 
            "callbackWindowTabFocus"
            , callbackWindowTabFocus_function_type( &::osgWidget::callbackWindowTabFocus )
            , ( bp::arg("arg0") ) );
    
    }

    { //::osgWidget::createExample
    
        typedef int ( *createExample_function_type )( ::osgViewer::Viewer &,::osgWidget::WindowManager *,::osg::Node * );
        
        bp::def( 
            "createExample"
            , createExample_function_type( &::osgWidget::createExample )
            , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2")=bp::object() ) );
    
    }

    { //::osgWidget::createOrthoCamera
    
        typedef ::osg::Camera * ( *createOrthoCamera_function_type )( ::osgWidget::matrix_type,::osgWidget::matrix_type );
        
        bp::def( 
            "createOrthoCamera"
            , createOrthoCamera_function_type( &::osgWidget::createOrthoCamera )
            , ( bp::arg("arg0"), bp::arg("arg1") )
            , bp::return_value_policy< bp::reference_existing_object >() );
    
    }

    { //::osgWidget::generateRandomName
    
        typedef ::std::string ( *generateRandomName_function_type )( ::std::string const & );
        
        bp::def( 
            "generateRandomName"
            , generateRandomName_function_type( &::osgWidget::generateRandomName )
            , ( bp::arg("arg0") ) );
    
    }

    { //::osgWidget::getFilePath
    
        typedef ::std::string ( *getFilePath_function_type )( ::std::string const & );
        
        bp::def( 
            "getFilePath"
            , getFilePath_function_type( &::osgWidget::getFilePath )
            , ( bp::arg("arg0") ) );
    
    }

    { //::osgWidget::info
    
        typedef ::std::ostream & ( *info_function_type )(  );
        
        bp::def( 
            "info"
            , info_function_type( &::osgWidget::info )
            , bp::return_value_policy< bp::reference_existing_object >() );
    
    }

    { //::osgWidget::lowerCase
    
        typedef ::std::string ( *lowerCase_function_type )( ::std::string const & );
        
        bp::def( 
            "lowerCase"
            , lowerCase_function_type( &::osgWidget::lowerCase )
            , ( bp::arg("str") ) );
    
    }

    { //::osgWidgetGetLibraryName
    
        typedef char const * ( *osgWidgetGetLibraryName_function_type )(  );
        
        bp::def( 
            "osgWidgetGetLibraryName"
            , osgWidgetGetLibraryName_function_type( &::osgWidgetGetLibraryName )
            , " osgWidgetGetLibraryName() returns the library name in human friendly form." );
    
    }

    { //::osgWidgetGetVersion
    
        typedef char const * ( *osgWidgetGetVersion_function_type )(  );
        
        bp::def( 
            "osgWidgetGetVersion"
            , osgWidgetGetVersion_function_type( &::osgWidgetGetVersion )
            , " osgWidgetGetVersion() returns the library version number.\n Numbering convention : OpenSceneGraph-1.0 will return 1.0 from osgWidgetGetVersion.\n\n This C function can be also used to check for the existence of the OpenSceneGraph\n library using autoconf and its m4 macro AC_CHECK_LIB.\n\n Here is the code to add to your configure.in:\n Verbatim:\n #\n # Check for the OpenSceneGraph (OSG) Util library\n #\n AC_CHECK_LIB(osg, osgWidgetGetVersion, ,\n    [AC_MSG_ERROR(OpenSceneGraph Util library not found. See http://www.openscenegraph.org)],)\n E:ndverbatim" );
    
    }

    { //::osgWidget::warn
    
        typedef ::std::ostream & ( *warn_function_type )(  );
        
        bp::def( 
            "warn"
            , warn_function_type( &::osgWidget::warn )
            , bp::return_value_policy< bp::reference_existing_object >() );
    
    }

    { //::osgWidget::writeWindowManagerNode
    
        typedef bool ( *writeWindowManagerNode_function_type )( ::osgWidget::WindowManager * );
        
        bp::def( 
            "writeWindowManagerNode"
            , writeWindowManagerNode_function_type( &::osgWidget::writeWindowManagerNode )
            , ( bp::arg("arg0") ) );
    
    }

}
