// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgWidget.h"
#include "wrap_referenced.h"
#include "Style.pypp.hpp"

namespace bp = boost::python;

struct Style_wrapper : osgWidget::Style, bp::wrapper< osgWidget::Style > {

    Style_wrapper(::std::string const & arg0="", ::std::string const & arg1="" )
    : osgWidget::Style( arg0, arg1 )
      , bp::wrapper< osgWidget::Style >(){
        // constructor
    
    }

    virtual bool applyStyle( ::osgWidget::Widget * arg0, ::osgWidget::Reader arg1 ) {
        if( bp::override func_applyStyle = this->get_override( "applyStyle" ) )
            return func_applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
        else{
            return this->osgWidget::Style::applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
        }
    }
    
    bool default_applyStyle( ::osgWidget::Widget * arg0, ::osgWidget::Reader arg1 ) {
        return osgWidget::Style::applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
    }

    virtual bool applyStyle( ::osgWidget::Label * arg0, ::osgWidget::Reader arg1 ) {
        if( bp::override func_applyStyle = this->get_override( "applyStyle" ) )
            return func_applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
        else{
            return this->osgWidget::Style::applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
        }
    }
    
    bool default_applyStyle( ::osgWidget::Label * arg0, ::osgWidget::Reader arg1 ) {
        return osgWidget::Style::applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
    }

    virtual bool applyStyle( ::osgWidget::Input * arg0, ::osgWidget::Reader arg1 ) {
        if( bp::override func_applyStyle = this->get_override( "applyStyle" ) )
            return func_applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
        else{
            return this->osgWidget::Style::applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
        }
    }
    
    bool default_applyStyle( ::osgWidget::Input * arg0, ::osgWidget::Reader arg1 ) {
        return osgWidget::Style::applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
    }

    virtual bool applyStyle( ::osgWidget::Window * arg0, ::osgWidget::Reader arg1 ) {
        if( bp::override func_applyStyle = this->get_override( "applyStyle" ) )
            return func_applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
        else{
            return this->osgWidget::Style::applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
        }
    }
    
    bool default_applyStyle( ::osgWidget::Window * arg0, ::osgWidget::Reader arg1 ) {
        return osgWidget::Style::applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
    }

    virtual bool applyStyle( ::osgWidget::Window::EmbeddedWindow * arg0, ::osgWidget::Reader arg1 ) {
        if( bp::override func_applyStyle = this->get_override( "applyStyle" ) )
            return func_applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
        else{
            return this->osgWidget::Style::applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
        }
    }
    
    bool default_applyStyle( ::osgWidget::Window::EmbeddedWindow * arg0, ::osgWidget::Reader arg1 ) {
        return osgWidget::Style::applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
    }

    virtual bool applyStyle( ::osgWidget::Box * arg0, ::osgWidget::Reader arg1 ) {
        if( bp::override func_applyStyle = this->get_override( "applyStyle" ) )
            return func_applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
        else{
            return this->osgWidget::Style::applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
        }
    }
    
    bool default_applyStyle( ::osgWidget::Box * arg0, ::osgWidget::Reader arg1 ) {
        return osgWidget::Style::applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
    }

    virtual bool applyStyle( ::osgWidget::Frame::Corner * arg0, ::osgWidget::Reader arg1 ) {
        if( bp::override func_applyStyle = this->get_override( "applyStyle" ) )
            return func_applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
        else{
            return this->osgWidget::Style::applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
        }
    }
    
    bool default_applyStyle( ::osgWidget::Frame::Corner * arg0, ::osgWidget::Reader arg1 ) {
        return osgWidget::Style::applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
    }

    virtual bool applyStyle( ::osgWidget::Frame::Border * arg0, ::osgWidget::Reader arg1 ) {
        if( bp::override func_applyStyle = this->get_override( "applyStyle" ) )
            return func_applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
        else{
            return this->osgWidget::Style::applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
        }
    }
    
    bool default_applyStyle( ::osgWidget::Frame::Border * arg0, ::osgWidget::Reader arg1 ) {
        return osgWidget::Style::applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
    }

    virtual bool applyStyle( ::osgWidget::Canvas * arg0, ::osgWidget::Reader arg1 ) {
        if( bp::override func_applyStyle = this->get_override( "applyStyle" ) )
            return func_applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
        else{
            return this->osgWidget::Style::applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
        }
    }
    
    bool default_applyStyle( ::osgWidget::Canvas * arg0, ::osgWidget::Reader arg1 ) {
        return osgWidget::Style::applyStyle( boost::python::ptr(arg0), boost::ref(arg1) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgWidget::Style::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgWidget::Style::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgWidget::Style::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgWidget::Style::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgWidget::Style::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgWidget::Style::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgWidget::Style::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgWidget::Style::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgWidget::Style::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgWidget::Style::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_Style_class(){

    { //::osgWidget::Style
        typedef bp::class_< Style_wrapper, bp::bases< ::osg::Object >, osg::ref_ptr< Style_wrapper >, boost::noncopyable > Style_exposer_t;
        Style_exposer_t Style_exposer = Style_exposer_t( "Style", bp::init< bp::optional< std::string const &, std::string const & > >(( bp::arg("arg0")="", bp::arg("arg1")="" )) );
        bp::scope Style_scope( Style_exposer );
        bp::implicitly_convertible< std::string const &, osgWidget::Style >();
        { //::osgWidget::Style::applyStyle
        
            typedef bool ( ::osgWidget::Style::*applyStyle_function_type )( ::osgWidget::Widget *,::osgWidget::Reader ) ;
            typedef bool ( Style_wrapper::*default_applyStyle_function_type )( ::osgWidget::Widget *,::osgWidget::Reader ) ;
            
            Style_exposer.def( 
                "applyStyle"
                , applyStyle_function_type(&::osgWidget::Style::applyStyle)
                , default_applyStyle_function_type(&Style_wrapper::default_applyStyle)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::Style::applyStyle
        
            typedef bool ( ::osgWidget::Style::*applyStyle_function_type )( ::osgWidget::Label *,::osgWidget::Reader ) ;
            typedef bool ( Style_wrapper::*default_applyStyle_function_type )( ::osgWidget::Label *,::osgWidget::Reader ) ;
            
            Style_exposer.def( 
                "applyStyle"
                , applyStyle_function_type(&::osgWidget::Style::applyStyle)
                , default_applyStyle_function_type(&Style_wrapper::default_applyStyle)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::Style::applyStyle
        
            typedef bool ( ::osgWidget::Style::*applyStyle_function_type )( ::osgWidget::Input *,::osgWidget::Reader ) ;
            typedef bool ( Style_wrapper::*default_applyStyle_function_type )( ::osgWidget::Input *,::osgWidget::Reader ) ;
            
            Style_exposer.def( 
                "applyStyle"
                , applyStyle_function_type(&::osgWidget::Style::applyStyle)
                , default_applyStyle_function_type(&Style_wrapper::default_applyStyle)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::Style::applyStyle
        
            typedef bool ( ::osgWidget::Style::*applyStyle_function_type )( ::osgWidget::Window *,::osgWidget::Reader ) ;
            typedef bool ( Style_wrapper::*default_applyStyle_function_type )( ::osgWidget::Window *,::osgWidget::Reader ) ;
            
            Style_exposer.def( 
                "applyStyle"
                , applyStyle_function_type(&::osgWidget::Style::applyStyle)
                , default_applyStyle_function_type(&Style_wrapper::default_applyStyle)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::Style::applyStyle
        
            typedef bool ( ::osgWidget::Style::*applyStyle_function_type )( ::osgWidget::Window::EmbeddedWindow *,::osgWidget::Reader ) ;
            typedef bool ( Style_wrapper::*default_applyStyle_function_type )( ::osgWidget::Window::EmbeddedWindow *,::osgWidget::Reader ) ;
            
            Style_exposer.def( 
                "applyStyle"
                , applyStyle_function_type(&::osgWidget::Style::applyStyle)
                , default_applyStyle_function_type(&Style_wrapper::default_applyStyle)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::Style::applyStyle
        
            typedef bool ( ::osgWidget::Style::*applyStyle_function_type )( ::osgWidget::Box *,::osgWidget::Reader ) ;
            typedef bool ( Style_wrapper::*default_applyStyle_function_type )( ::osgWidget::Box *,::osgWidget::Reader ) ;
            
            Style_exposer.def( 
                "applyStyle"
                , applyStyle_function_type(&::osgWidget::Style::applyStyle)
                , default_applyStyle_function_type(&Style_wrapper::default_applyStyle)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::Style::applyStyle
        
            typedef bool ( ::osgWidget::Style::*applyStyle_function_type )( ::osgWidget::Frame::Corner *,::osgWidget::Reader ) ;
            typedef bool ( Style_wrapper::*default_applyStyle_function_type )( ::osgWidget::Frame::Corner *,::osgWidget::Reader ) ;
            
            Style_exposer.def( 
                "applyStyle"
                , applyStyle_function_type(&::osgWidget::Style::applyStyle)
                , default_applyStyle_function_type(&Style_wrapper::default_applyStyle)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::Style::applyStyle
        
            typedef bool ( ::osgWidget::Style::*applyStyle_function_type )( ::osgWidget::Frame::Border *,::osgWidget::Reader ) ;
            typedef bool ( Style_wrapper::*default_applyStyle_function_type )( ::osgWidget::Frame::Border *,::osgWidget::Reader ) ;
            
            Style_exposer.def( 
                "applyStyle"
                , applyStyle_function_type(&::osgWidget::Style::applyStyle)
                , default_applyStyle_function_type(&Style_wrapper::default_applyStyle)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::Style::applyStyle
        
            typedef bool ( ::osgWidget::Style::*applyStyle_function_type )( ::osgWidget::Canvas *,::osgWidget::Reader ) ;
            typedef bool ( Style_wrapper::*default_applyStyle_function_type )( ::osgWidget::Canvas *,::osgWidget::Reader ) ;
            
            Style_exposer.def( 
                "applyStyle"
                , applyStyle_function_type(&::osgWidget::Style::applyStyle)
                , default_applyStyle_function_type(&Style_wrapper::default_applyStyle)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::Style::className
        
            typedef char const * ( ::osgWidget::Style::*className_function_type )(  ) const;
            typedef char const * ( Style_wrapper::*default_className_function_type )(  ) const;
            
            Style_exposer.def( 
                "className"
                , className_function_type(&::osgWidget::Style::className)
                , default_className_function_type(&Style_wrapper::default_className) );
        
        }
        { //::osgWidget::Style::clone
        
            typedef ::osg::Object * ( ::osgWidget::Style::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Style_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Style_exposer.def( 
                "clone"
                , clone_function_type(&::osgWidget::Style::clone)
                , default_clone_function_type(&Style_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgWidget::Style::cloneType
        
            typedef ::osg::Object * ( ::osgWidget::Style::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Style_wrapper::*default_cloneType_function_type )(  ) const;
            
            Style_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgWidget::Style::cloneType)
                , default_cloneType_function_type(&Style_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgWidget::Style::getStyle
        
            typedef ::std::string & ( ::osgWidget::Style::*getStyle_function_type )(  ) ;
            
            Style_exposer.def( 
                "getStyle"
                , getStyle_function_type( &::osgWidget::Style::getStyle )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Style::getStyle
        
            typedef ::std::string const & ( ::osgWidget::Style::*getStyle_function_type )(  ) const;
            
            Style_exposer.def( 
                "getStyle"
                , getStyle_function_type( &::osgWidget::Style::getStyle )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::osgWidget::Style::isSameKindAs
        
            typedef bool ( ::osgWidget::Style::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Style_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Style_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgWidget::Style::isSameKindAs)
                , default_isSameKindAs_function_type(&Style_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgWidget::Style::libraryName
        
            typedef char const * ( ::osgWidget::Style::*libraryName_function_type )(  ) const;
            typedef char const * ( Style_wrapper::*default_libraryName_function_type )(  ) const;
            
            Style_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgWidget::Style::libraryName)
                , default_libraryName_function_type(&Style_wrapper::default_libraryName) );
        
        }
        { //::osgWidget::Style::setStyle
        
            typedef void ( ::osgWidget::Style::*setStyle_function_type )( ::std::string const & ) ;
            
            Style_exposer.def( 
                "setStyle"
                , setStyle_function_type( &::osgWidget::Style::setStyle )
                , ( bp::arg("style") ) );
        
        }
        { //::osgWidget::Style::strToCoordMode
        
            typedef ::osgWidget::Widget::CoordinateMode ( *strToCoordMode_function_type )( ::std::string const & );
            
            Style_exposer.def( 
                "strToCoordMode"
                , strToCoordMode_function_type( &::osgWidget::Style::strToCoordMode )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Style::strToFill
        
            typedef bool ( *strToFill_function_type )( ::std::string const & );
            
            Style_exposer.def( 
                "strToFill"
                , strToFill_function_type( &::osgWidget::Style::strToFill )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Style::strToHAlign
        
            typedef ::osgWidget::Widget::HorizontalAlignment ( *strToHAlign_function_type )( ::std::string const & );
            
            Style_exposer.def( 
                "strToHAlign"
                , strToHAlign_function_type( &::osgWidget::Style::strToHAlign )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Style::strToLayer
        
            typedef ::osgWidget::Widget::Layer ( *strToLayer_function_type )( ::std::string const & );
            
            Style_exposer.def( 
                "strToLayer"
                , strToLayer_function_type( &::osgWidget::Style::strToLayer )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Style::strToVAlign
        
            typedef ::osgWidget::Widget::VerticalAlignment ( *strToVAlign_function_type )( ::std::string const & );
            
            Style_exposer.def( 
                "strToVAlign"
                , strToVAlign_function_type( &::osgWidget::Style::strToVAlign )
                , ( bp::arg("arg0") ) );
        
        }
        Style_exposer.staticmethod( "strToCoordMode" );
        Style_exposer.staticmethod( "strToFill" );
        Style_exposer.staticmethod( "strToHAlign" );
        Style_exposer.staticmethod( "strToLayer" );
        Style_exposer.staticmethod( "strToVAlign" );
    }

}
