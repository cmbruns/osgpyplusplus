// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgWidget.h"
#include "Event.pypp.hpp"

namespace bp = boost::python;

void register_Event_class(){

    { //::osgWidget::Event
        typedef bp::class_< osgWidget::Event > Event_exposer_t;
        Event_exposer_t Event_exposer = Event_exposer_t( "Event", bp::init< osgWidget::WindowManager *, bp::optional< osgWidget::EventType > >(( bp::arg("wm"), bp::arg("_type")=::osgWidget::EVENT_NONE )) );
        bp::scope Event_scope( Event_exposer );
        bp::implicitly_convertible< osgWidget::WindowManager *, osgWidget::Event >();
        { //::osgWidget::Event::getWidget
        
            typedef ::osgWidget::Widget * ( ::osgWidget::Event::*getWidget_function_type )(  ) ;
            
            Event_exposer.def( 
                "getWidget"
                , getWidget_function_type( &::osgWidget::Event::getWidget )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Event::getWidget
        
            typedef ::osgWidget::Widget const * ( ::osgWidget::Event::*getWidget_function_type )(  ) const;
            
            Event_exposer.def( 
                "getWidget"
                , getWidget_function_type( &::osgWidget::Event::getWidget )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Event::getWindow
        
            typedef ::osgWidget::Window * ( ::osgWidget::Event::*getWindow_function_type )(  ) ;
            
            Event_exposer.def( 
                "getWindow"
                , getWindow_function_type( &::osgWidget::Event::getWindow )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Event::getWindow
        
            typedef ::osgWidget::Window const * ( ::osgWidget::Event::*getWindow_function_type )(  ) const;
            
            Event_exposer.def( 
                "getWindow"
                , getWindow_function_type( &::osgWidget::Event::getWindow )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Event::getWindowManager
        
            typedef ::osgWidget::WindowManager * ( ::osgWidget::Event::*getWindowManager_function_type )(  ) ;
            
            Event_exposer.def( 
                "getWindowManager"
                , getWindowManager_function_type( &::osgWidget::Event::getWindowManager )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Event::getWindowManager
        
            typedef ::osgWidget::WindowManager const * ( ::osgWidget::Event::*getWindowManager_function_type )(  ) const;
            
            Event_exposer.def( 
                "getWindowManager"
                , getWindowManager_function_type( &::osgWidget::Event::getWindowManager )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Event::makeKey
        
            typedef ::osgWidget::Event & ( ::osgWidget::Event::*makeKey_function_type )( int,int,::osgWidget::EventType ) ;
            
            Event_exposer.def( 
                "makeKey"
                , makeKey_function_type( &::osgWidget::Event::makeKey )
                , ( bp::arg("_key"), bp::arg("_keyMask"), bp::arg("_type")=::osgWidget::EVENT_NONE )
                , bp::return_self< >() );
        
        }
        { //::osgWidget::Event::makeMouse
        
            typedef ::osgWidget::Event & ( ::osgWidget::Event::*makeMouse_function_type )( double,double,::osgWidget::EventType ) ;
            
            Event_exposer.def( 
                "makeMouse"
                , makeMouse_function_type( &::osgWidget::Event::makeMouse )
                , ( bp::arg("_x"), bp::arg("_y"), bp::arg("_type")=::osgWidget::EVENT_NONE )
                , bp::return_self< >() );
        
        }
        { //::osgWidget::Event::makeType
        
            typedef ::osgWidget::Event & ( ::osgWidget::Event::*makeType_function_type )( ::osgWidget::EventType ) ;
            
            Event_exposer.def( 
                "makeType"
                , makeType_function_type( &::osgWidget::Event::makeType )
                , ( bp::arg("_type") )
                , bp::return_self< >() );
        
        }
        { //::osgWidget::Event::setData
        
            typedef void ( ::osgWidget::Event::*setData_function_type )( void * ) ;
            
            Event_exposer.def( 
                "setData"
                , setData_function_type( &::osgWidget::Event::setData )
                , ( bp::arg("data") ) );
        
        }
        Event_exposer.def_readwrite( "key", &osgWidget::Event::key );
        Event_exposer.def_readwrite( "keyMask", &osgWidget::Event::keyMask );
        Event_exposer.def_readwrite( "type", &osgWidget::Event::type );
        Event_exposer.def_readwrite( "x", &osgWidget::Event::x );
        Event_exposer.def_readwrite( "y", &osgWidget::Event::y );
    }

}
