// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgWidget.h"
#include "wrap_referenced.h"
#include "Canvas.pypp.hpp"

namespace bp = boost::python;

struct Canvas_wrapper : osgWidget::Canvas, bp::wrapper< osgWidget::Canvas > {

    Canvas_wrapper(::std::string const & arg0="" )
    : osgWidget::Canvas( arg0 )
      , bp::wrapper< osgWidget::Canvas >(){
        // constructor
    
    }

    virtual bool addWidget( ::osgWidget::Widget * arg0, ::osgWidget::point_type arg1, ::osgWidget::point_type arg2 ) {
        if( bp::override func_addWidget = this->get_override( "addWidget" ) )
            return func_addWidget( boost::python::ptr(arg0), arg1, arg2 );
        else{
            return this->osgWidget::Canvas::addWidget( boost::python::ptr(arg0), arg1, arg2 );
        }
    }
    
    bool default_addWidget( ::osgWidget::Widget * arg0, ::osgWidget::point_type arg1, ::osgWidget::point_type arg2 ) {
        return osgWidget::Canvas::addWidget( boost::python::ptr(arg0), arg1, arg2 );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgWidget::Canvas::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgWidget::Canvas::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgWidget::Canvas::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgWidget::Canvas::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgWidget::Canvas::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgWidget::Canvas::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgWidget::Canvas::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgWidget::Canvas::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgWidget::Canvas::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgWidget::Canvas::libraryName( );
    }

    virtual void accept( ::osg::NodeVisitor & nv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(nv) );
        else{
            this->osg::MatrixTransform::accept( boost::ref(nv) );
        }
    }
    
    void default_accept( ::osg::NodeVisitor & nv ) {
        osg::MatrixTransform::accept( boost::ref(nv) );
    }

    virtual bool addChild( ::osg::Node * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            return func_addChild( boost::python::ptr(child) );
        else{
            return this->osg::Group::addChild( boost::python::ptr(child) );
        }
    }
    
    bool default_addChild( ::osg::Node * child ) {
        return osg::Group::addChild( boost::python::ptr(child) );
    }

    virtual bool addWidget( ::osgWidget::Widget * arg0 ) {
        if( bp::override func_addWidget = this->get_override( "addWidget" ) )
            return func_addWidget( boost::python::ptr(arg0) );
        else{
            return this->osgWidget::Window::addWidget( boost::python::ptr(arg0) );
        }
    }
    
    bool default_addWidget( ::osgWidget::Widget * arg0 ) {
        return osgWidget::Window::addWidget( boost::python::ptr(arg0) );
    }

    virtual ::osg::Camera * asCamera(  ) {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera * default_asCamera(  ) {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Camera const * asCamera(  ) const  {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera const * default_asCamera(  ) const  {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Geode * asGeode(  ) {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode * default_asGeode(  ) {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Geode const * asGeode(  ) const  {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode const * default_asGeode(  ) const  {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Group * asGroup(  ) {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group * default_asGroup(  ) {
        return osg::Group::asGroup( );
    }

    virtual ::osg::Group const * asGroup(  ) const  {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group const * default_asGroup(  ) const  {
        return osg::Group::asGroup( );
    }

    virtual ::osg::MatrixTransform * asMatrixTransform(  ) {
        if( bp::override func_asMatrixTransform = this->get_override( "asMatrixTransform" ) )
            return func_asMatrixTransform(  );
        else{
            return this->osg::MatrixTransform::asMatrixTransform(  );
        }
    }
    
    ::osg::MatrixTransform * default_asMatrixTransform(  ) {
        return osg::MatrixTransform::asMatrixTransform( );
    }

    virtual ::osg::MatrixTransform const * asMatrixTransform(  ) const  {
        if( bp::override func_asMatrixTransform = this->get_override( "asMatrixTransform" ) )
            return func_asMatrixTransform(  );
        else{
            return this->osg::MatrixTransform::asMatrixTransform(  );
        }
    }
    
    ::osg::MatrixTransform const * default_asMatrixTransform(  ) const  {
        return osg::MatrixTransform::asMatrixTransform( );
    }

    virtual ::osg::PositionAttitudeTransform * asPositionAttitudeTransform(  ) {
        if( bp::override func_asPositionAttitudeTransform = this->get_override( "asPositionAttitudeTransform" ) )
            return func_asPositionAttitudeTransform(  );
        else{
            return this->osg::Transform::asPositionAttitudeTransform(  );
        }
    }
    
    ::osg::PositionAttitudeTransform * default_asPositionAttitudeTransform(  ) {
        return osg::Transform::asPositionAttitudeTransform( );
    }

    virtual ::osg::PositionAttitudeTransform const * asPositionAttitudeTransform(  ) const  {
        if( bp::override func_asPositionAttitudeTransform = this->get_override( "asPositionAttitudeTransform" ) )
            return func_asPositionAttitudeTransform(  );
        else{
            return this->osg::Transform::asPositionAttitudeTransform(  );
        }
    }
    
    ::osg::PositionAttitudeTransform const * default_asPositionAttitudeTransform(  ) const  {
        return osg::Transform::asPositionAttitudeTransform( );
    }

    virtual ::osg::Switch * asSwitch(  ) {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch * default_asSwitch(  ) {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Switch const * asSwitch(  ) const  {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch const * default_asSwitch(  ) const  {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Transform * asTransform(  ) {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Transform::asTransform(  );
        }
    }
    
    ::osg::Transform * default_asTransform(  ) {
        return osg::Transform::asTransform( );
    }

    virtual ::osg::Transform const * asTransform(  ) const  {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Transform::asTransform(  );
        }
    }
    
    ::osg::Transform const * default_asTransform(  ) const  {
        return osg::Transform::asTransform( );
    }

    virtual void ascend( ::osg::NodeVisitor & nv ) {
        if( bp::override func_ascend = this->get_override( "ascend" ) )
            func_ascend( boost::ref(nv) );
        else{
            this->osg::Node::ascend( boost::ref(nv) );
        }
    }
    
    void default_ascend( ::osg::NodeVisitor & nv ) {
        osg::Node::ascend( boost::ref(nv) );
    }

    virtual ::osg::BoundingSphere computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osg::Transform::computeBound(  );
        }
    }
    
    ::osg::BoundingSphere default_computeBound(  ) const  {
        return osg::Transform::computeBound( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual bool computeLocalToWorldMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        if( bp::override func_computeLocalToWorldMatrix = this->get_override( "computeLocalToWorldMatrix" ) )
            return func_computeLocalToWorldMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        else{
            return this->osg::MatrixTransform::computeLocalToWorldMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        }
    }
    
    bool default_computeLocalToWorldMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        return osg::MatrixTransform::computeLocalToWorldMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
    }

    virtual bool computeWorldToLocalMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        if( bp::override func_computeWorldToLocalMatrix = this->get_override( "computeWorldToLocalMatrix" ) )
            return func_computeWorldToLocalMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        else{
            return this->osg::MatrixTransform::computeWorldToLocalMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        }
    }
    
    bool default_computeWorldToLocalMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        return osg::MatrixTransform::computeWorldToLocalMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
    }

    virtual bool focus( ::osgWidget::WindowManager const * arg0 ) {
        if( bp::override func_focus = this->get_override( "focus" ) )
            return func_focus( boost::python::ptr(arg0) );
        else{
            return this->osgWidget::EventInterface::focus( boost::python::ptr(arg0) );
        }
    }
    
    bool default_focus( ::osgWidget::WindowManager const * arg0 ) {
        return osgWidget::EventInterface::focus( boost::python::ptr(arg0) );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool insertChild( unsigned int index, ::osg::Node * child ) {
        if( bp::override func_insertChild = this->get_override( "insertChild" ) )
            return func_insertChild( index, boost::python::ptr(child) );
        else{
            return this->osg::Group::insertChild( index, boost::python::ptr(child) );
        }
    }
    
    bool default_insertChild( unsigned int index, ::osg::Node * child ) {
        return osg::Group::insertChild( index, boost::python::ptr(child) );
    }

    virtual bool insertWidget( ::osgWidget::Widget * arg0, unsigned int arg1 ) {
        if( bp::override func_insertWidget = this->get_override( "insertWidget" ) )
            return func_insertWidget( boost::python::ptr(arg0), arg1 );
        else{
            return this->osgWidget::Window::insertWidget( boost::python::ptr(arg0), arg1 );
        }
    }
    
    bool default_insertWidget( ::osgWidget::Widget * arg0, unsigned int arg1 ) {
        return osgWidget::Window::insertWidget( boost::python::ptr(arg0), arg1 );
    }

    virtual bool keyDown( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_keyDown = this->get_override( "keyDown" ) )
            return func_keyDown( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::keyDown( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_keyDown( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::keyDown( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool keyUp( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_keyUp = this->get_override( "keyUp" ) )
            return func_keyUp( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::keyUp( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_keyUp( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::keyUp( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual void managed( ::osgWidget::WindowManager * arg0 ) {
        if( bp::override func_managed = this->get_override( "managed" ) )
            func_managed( boost::python::ptr(arg0) );
        else{
            this->osgWidget::Window::managed( boost::python::ptr(arg0) );
        }
    }
    
    void default_managed( ::osgWidget::WindowManager * arg0 ) {
        osgWidget::Window::managed( boost::python::ptr(arg0) );
    }

    virtual bool mouseDrag( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseDrag = this->get_override( "mouseDrag" ) )
            return func_mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseDrag( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseEnter( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseEnter = this->get_override( "mouseEnter" ) )
            return func_mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseEnter( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseLeave( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseLeave = this->get_override( "mouseLeave" ) )
            return func_mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseLeave( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseOver( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseOver = this->get_override( "mouseOver" ) )
            return func_mouseOver( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseOver( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseOver( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseOver( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mousePush( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mousePush = this->get_override( "mousePush" ) )
            return func_mousePush( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mousePush( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mousePush( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mousePush( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseRelease( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseRelease = this->get_override( "mouseRelease" ) )
            return func_mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseRelease( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseScroll( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseScroll = this->get_override( "mouseScroll" ) )
            return func_mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseScroll( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        if( bp::override func_removeChildren = this->get_override( "removeChildren" ) )
            return func_removeChildren( pos, numChildrenToRemove );
        else{
            return this->osg::Group::removeChildren( pos, numChildrenToRemove );
        }
    }
    
    bool default_removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        return osg::Group::removeChildren( pos, numChildrenToRemove );
    }

    virtual bool removeWidget( ::osgWidget::Widget * arg0 ) {
        if( bp::override func_removeWidget = this->get_override( "removeWidget" ) )
            return func_removeWidget( boost::python::ptr(arg0) );
        else{
            return this->osgWidget::Window::removeWidget( boost::python::ptr(arg0) );
        }
    }
    
    bool default_removeWidget( ::osgWidget::Widget * arg0 ) {
        return osgWidget::Window::removeWidget( boost::python::ptr(arg0) );
    }

    virtual bool replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        if( bp::override func_replaceChild = this->get_override( "replaceChild" ) )
            return func_replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        else{
            return this->osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        }
    }
    
    bool default_replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        return osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
    }

    virtual bool replaceWidget( ::osgWidget::Widget * arg0, ::osgWidget::Widget * arg1 ) {
        if( bp::override func_replaceWidget = this->get_override( "replaceWidget" ) )
            return func_replaceWidget( boost::python::ptr(arg0), boost::python::ptr(arg1) );
        else{
            return this->osgWidget::Window::replaceWidget( boost::python::ptr(arg0), boost::python::ptr(arg1) );
        }
    }
    
    bool default_replaceWidget( ::osgWidget::Widget * arg0, ::osgWidget::Widget * arg1 ) {
        return osgWidget::Window::replaceWidget( boost::python::ptr(arg0), boost::python::ptr(arg1) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Group::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Group::resizeGLObjectBuffers( maxSize );
    }

    virtual bool setChild( unsigned int i, ::osg::Node * node ) {
        if( bp::override func_setChild = this->get_override( "setChild" ) )
            return func_setChild( i, boost::python::ptr(node) );
        else{
            return this->osg::Group::setChild( i, boost::python::ptr(node) );
        }
    }
    
    bool default_setChild( unsigned int i, ::osg::Node * node ) {
        return osg::Group::setChild( i, boost::python::ptr(node) );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Group::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Group::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual void traverse( ::osg::NodeVisitor & nv ) {
        if( bp::override func_traverse = this->get_override( "traverse" ) )
            func_traverse( boost::ref(nv) );
        else{
            this->osg::Group::traverse( boost::ref(nv) );
        }
    }
    
    void default_traverse( ::osg::NodeVisitor & nv ) {
        osg::Group::traverse( boost::ref(nv) );
    }

    virtual bool unfocus( ::osgWidget::WindowManager const * arg0 ) {
        if( bp::override func_unfocus = this->get_override( "unfocus" ) )
            return func_unfocus( boost::python::ptr(arg0) );
        else{
            return this->osgWidget::EventInterface::unfocus( boost::python::ptr(arg0) );
        }
    }
    
    bool default_unfocus( ::osgWidget::WindowManager const * arg0 ) {
        return osgWidget::EventInterface::unfocus( boost::python::ptr(arg0) );
    }

    virtual void unmanaged( ::osgWidget::WindowManager * arg0 ) {
        if( bp::override func_unmanaged = this->get_override( "unmanaged" ) )
            func_unmanaged( boost::python::ptr(arg0) );
        else{
            this->osgWidget::Window::unmanaged( boost::python::ptr(arg0) );
        }
    }
    
    void default_unmanaged( ::osgWidget::WindowManager * arg0 ) {
        osgWidget::Window::unmanaged( boost::python::ptr(arg0) );
    }

    virtual void update(  ) {
        if( bp::override func_update = this->get_override( "update" ) )
            func_update(  );
        else{
            this->osgWidget::Window::update(  );
        }
    }
    
    void default_update(  ) {
        osgWidget::Window::update( );
    }

};

void register_Canvas_class(){

    { //::osgWidget::Canvas
        typedef bp::class_< Canvas_wrapper, bp::bases< osgWidget::Window >, osg::ref_ptr< Canvas_wrapper >, boost::noncopyable > Canvas_exposer_t;
        Canvas_exposer_t Canvas_exposer = Canvas_exposer_t( "Canvas", bp::init< bp::optional< std::string const & > >(( bp::arg("arg0")="" )) );
        bp::scope Canvas_scope( Canvas_exposer );
        bp::implicitly_convertible< std::string const &, osgWidget::Canvas >();
        { //::osgWidget::Canvas::addWidget
        
            typedef bool ( ::osgWidget::Canvas::*addWidget_function_type )( ::osgWidget::Widget *,::osgWidget::point_type,::osgWidget::point_type ) ;
            typedef bool ( Canvas_wrapper::*default_addWidget_function_type )( ::osgWidget::Widget *,::osgWidget::point_type,::osgWidget::point_type ) ;
            
            Canvas_exposer.def( 
                "addWidget"
                , addWidget_function_type(&::osgWidget::Canvas::addWidget)
                , default_addWidget_function_type(&Canvas_wrapper::default_addWidget)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::Canvas::className
        
            typedef char const * ( ::osgWidget::Canvas::*className_function_type )(  ) const;
            typedef char const * ( Canvas_wrapper::*default_className_function_type )(  ) const;
            
            Canvas_exposer.def( 
                "className"
                , className_function_type(&::osgWidget::Canvas::className)
                , default_className_function_type(&Canvas_wrapper::default_className) );
        
        }
        { //::osgWidget::Canvas::clone
        
            typedef ::osg::Object * ( ::osgWidget::Canvas::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Canvas_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Canvas_exposer.def( 
                "clone"
                , clone_function_type(&::osgWidget::Canvas::clone)
                , default_clone_function_type(&Canvas_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgWidget::Canvas::cloneType
        
            typedef ::osg::Object * ( ::osgWidget::Canvas::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Canvas_wrapper::*default_cloneType_function_type )(  ) const;
            
            Canvas_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgWidget::Canvas::cloneType)
                , default_cloneType_function_type(&Canvas_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgWidget::Canvas::isSameKindAs
        
            typedef bool ( ::osgWidget::Canvas::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Canvas_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Canvas_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgWidget::Canvas::isSameKindAs)
                , default_isSameKindAs_function_type(&Canvas_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgWidget::Canvas::libraryName
        
            typedef char const * ( ::osgWidget::Canvas::*libraryName_function_type )(  ) const;
            typedef char const * ( Canvas_wrapper::*default_libraryName_function_type )(  ) const;
            
            Canvas_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgWidget::Canvas::libraryName)
                , default_libraryName_function_type(&Canvas_wrapper::default_libraryName) );
        
        }
        { //::osgWidget::Window::addWidget
        
            typedef bool ( ::osgWidget::Window::*addWidget_function_type )( ::osgWidget::Widget * ) ;
            typedef bool ( Canvas_wrapper::*default_addWidget_function_type )( ::osgWidget::Widget * ) ;
            
            Canvas_exposer.def( 
                "addWidget"
                , addWidget_function_type(&::osgWidget::Window::addWidget)
                , default_addWidget_function_type(&Canvas_wrapper::default_addWidget)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::EventInterface::focus
        
            typedef bool ( ::osgWidget::EventInterface::*focus_function_type )( ::osgWidget::WindowManager const * ) ;
            typedef bool ( Canvas_wrapper::*default_focus_function_type )( ::osgWidget::WindowManager const * ) ;
            
            Canvas_exposer.def( 
                "focus"
                , focus_function_type(&::osgWidget::EventInterface::focus)
                , default_focus_function_type(&Canvas_wrapper::default_focus)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Window::insertWidget
        
            typedef bool ( ::osgWidget::Window::*insertWidget_function_type )( ::osgWidget::Widget *,unsigned int ) ;
            typedef bool ( Canvas_wrapper::*default_insertWidget_function_type )( ::osgWidget::Widget *,unsigned int ) ;
            
            Canvas_exposer.def( 
                "insertWidget"
                , insertWidget_function_type(&::osgWidget::Window::insertWidget)
                , default_insertWidget_function_type(&Canvas_wrapper::default_insertWidget)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::EventInterface::keyDown
        
            typedef bool ( ::osgWidget::EventInterface::*keyDown_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            typedef bool ( Canvas_wrapper::*default_keyDown_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            
            Canvas_exposer.def( 
                "keyDown"
                , keyDown_function_type(&::osgWidget::EventInterface::keyDown)
                , default_keyDown_function_type(&Canvas_wrapper::default_keyDown)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::keyUp
        
            typedef bool ( ::osgWidget::EventInterface::*keyUp_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            typedef bool ( Canvas_wrapper::*default_keyUp_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            
            Canvas_exposer.def( 
                "keyUp"
                , keyUp_function_type(&::osgWidget::EventInterface::keyUp)
                , default_keyUp_function_type(&Canvas_wrapper::default_keyUp)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::Window::managed
        
            typedef void ( ::osgWidget::Window::*managed_function_type )( ::osgWidget::WindowManager * ) ;
            typedef void ( Canvas_wrapper::*default_managed_function_type )( ::osgWidget::WindowManager * ) ;
            
            Canvas_exposer.def( 
                "managed"
                , managed_function_type(&::osgWidget::Window::managed)
                , default_managed_function_type(&Canvas_wrapper::default_managed)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::EventInterface::mouseDrag
        
            typedef bool ( ::osgWidget::EventInterface::*mouseDrag_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Canvas_wrapper::*default_mouseDrag_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Canvas_exposer.def( 
                "mouseDrag"
                , mouseDrag_function_type(&::osgWidget::EventInterface::mouseDrag)
                , default_mouseDrag_function_type(&Canvas_wrapper::default_mouseDrag)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseEnter
        
            typedef bool ( ::osgWidget::EventInterface::*mouseEnter_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Canvas_wrapper::*default_mouseEnter_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Canvas_exposer.def( 
                "mouseEnter"
                , mouseEnter_function_type(&::osgWidget::EventInterface::mouseEnter)
                , default_mouseEnter_function_type(&Canvas_wrapper::default_mouseEnter)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseLeave
        
            typedef bool ( ::osgWidget::EventInterface::*mouseLeave_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Canvas_wrapper::*default_mouseLeave_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Canvas_exposer.def( 
                "mouseLeave"
                , mouseLeave_function_type(&::osgWidget::EventInterface::mouseLeave)
                , default_mouseLeave_function_type(&Canvas_wrapper::default_mouseLeave)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseOver
        
            typedef bool ( ::osgWidget::EventInterface::*mouseOver_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Canvas_wrapper::*default_mouseOver_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Canvas_exposer.def( 
                "mouseOver"
                , mouseOver_function_type(&::osgWidget::EventInterface::mouseOver)
                , default_mouseOver_function_type(&Canvas_wrapper::default_mouseOver)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mousePush
        
            typedef bool ( ::osgWidget::EventInterface::*mousePush_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Canvas_wrapper::*default_mousePush_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Canvas_exposer.def( 
                "mousePush"
                , mousePush_function_type(&::osgWidget::EventInterface::mousePush)
                , default_mousePush_function_type(&Canvas_wrapper::default_mousePush)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseRelease
        
            typedef bool ( ::osgWidget::EventInterface::*mouseRelease_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Canvas_wrapper::*default_mouseRelease_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Canvas_exposer.def( 
                "mouseRelease"
                , mouseRelease_function_type(&::osgWidget::EventInterface::mouseRelease)
                , default_mouseRelease_function_type(&Canvas_wrapper::default_mouseRelease)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseScroll
        
            typedef bool ( ::osgWidget::EventInterface::*mouseScroll_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Canvas_wrapper::*default_mouseScroll_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Canvas_exposer.def( 
                "mouseScroll"
                , mouseScroll_function_type(&::osgWidget::EventInterface::mouseScroll)
                , default_mouseScroll_function_type(&Canvas_wrapper::default_mouseScroll)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::Window::removeWidget
        
            typedef bool ( ::osgWidget::Window::*removeWidget_function_type )( ::osgWidget::Widget * ) ;
            typedef bool ( Canvas_wrapper::*default_removeWidget_function_type )( ::osgWidget::Widget * ) ;
            
            Canvas_exposer.def( 
                "removeWidget"
                , removeWidget_function_type(&::osgWidget::Window::removeWidget)
                , default_removeWidget_function_type(&Canvas_wrapper::default_removeWidget)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Window::replaceWidget
        
            typedef bool ( ::osgWidget::Window::*replaceWidget_function_type )( ::osgWidget::Widget *,::osgWidget::Widget * ) ;
            typedef bool ( Canvas_wrapper::*default_replaceWidget_function_type )( ::osgWidget::Widget *,::osgWidget::Widget * ) ;
            
            Canvas_exposer.def( 
                "replaceWidget"
                , replaceWidget_function_type(&::osgWidget::Window::replaceWidget)
                , default_replaceWidget_function_type(&Canvas_wrapper::default_replaceWidget)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::EventInterface::unfocus
        
            typedef bool ( ::osgWidget::EventInterface::*unfocus_function_type )( ::osgWidget::WindowManager const * ) ;
            typedef bool ( Canvas_wrapper::*default_unfocus_function_type )( ::osgWidget::WindowManager const * ) ;
            
            Canvas_exposer.def( 
                "unfocus"
                , unfocus_function_type(&::osgWidget::EventInterface::unfocus)
                , default_unfocus_function_type(&Canvas_wrapper::default_unfocus)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Window::unmanaged
        
            typedef void ( ::osgWidget::Window::*unmanaged_function_type )( ::osgWidget::WindowManager * ) ;
            typedef void ( Canvas_wrapper::*default_unmanaged_function_type )( ::osgWidget::WindowManager * ) ;
            
            Canvas_exposer.def( 
                "unmanaged"
                , unmanaged_function_type(&::osgWidget::Window::unmanaged)
                , default_unmanaged_function_type(&Canvas_wrapper::default_unmanaged)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Window::update
        
            typedef void ( ::osgWidget::Window::*update_function_type )(  ) ;
            typedef void ( Canvas_wrapper::*default_update_function_type )(  ) ;
            
            Canvas_exposer.def( 
                "update"
                , update_function_type(&::osgWidget::Window::update)
                , default_update_function_type(&Canvas_wrapper::default_update) );
        
        }
    }

}
