// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgWidget.h"
#include "wrap_referenced.h"
#include "Frame.pypp.hpp"

namespace bp = boost::python;

struct Frame_wrapper : osgWidget::Frame, bp::wrapper< osgWidget::Frame > {

    struct Border_wrapper : osgWidget::Frame::Border, bp::wrapper< osgWidget::Frame::Border > {
    
        Border_wrapper(::osgWidget::Frame::BorderType arg0=::osgWidget::Frame::BORDER_LEFT, ::osgWidget::point_type arg1=0.0f, ::osgWidget::point_type arg2=0.0f )
        : osgWidget::Frame::Border( arg0, arg1, arg2 )
          , bp::wrapper< osgWidget::Frame::Border >(){
            // constructor
        
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osgWidget::Frame::Border::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osgWidget::Frame::Border::className( );
        }
    
        virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
            if( bp::override func_clone = this->get_override( "clone" ) )
                return func_clone( boost::ref(copyop) );
            else{
                return this->osgWidget::Frame::Border::clone( boost::ref(copyop) );
            }
        }
        
        ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
            return osgWidget::Frame::Border::clone( boost::ref(copyop) );
        }
    
        virtual ::osg::Object * cloneType(  ) const  {
            if( bp::override func_cloneType = this->get_override( "cloneType" ) )
                return func_cloneType(  );
            else{
                return this->osgWidget::Frame::Border::cloneType(  );
            }
        }
        
        ::osg::Object * default_cloneType(  ) const  {
            return osgWidget::Frame::Border::cloneType( );
        }
    
        virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
            if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
                return func_isSameKindAs( boost::python::ptr(obj) );
            else{
                return this->osgWidget::Frame::Border::isSameKindAs( boost::python::ptr(obj) );
            }
        }
        
        bool default_isSameKindAs( ::osg::Object const * obj ) const  {
            return osgWidget::Frame::Border::isSameKindAs( boost::python::ptr(obj) );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osgWidget::Frame::Border::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osgWidget::Frame::Border::libraryName( );
        }
    
        virtual bool mouseDrag( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mouseDrag = this->get_override( "mouseDrag" ) )
                return func_mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::Frame::Border::mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mouseDrag( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::Frame::Border::mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual void parented( ::osgWidget::Window * arg0 ) {
            if( bp::override func_parented = this->get_override( "parented" ) )
                func_parented( boost::python::ptr(arg0) );
            else{
                this->osgWidget::Frame::Border::parented( boost::python::ptr(arg0) );
            }
        }
        
        void default_parented( ::osgWidget::Window * arg0 ) {
            osgWidget::Frame::Border::parented( boost::python::ptr(arg0) );
        }
    
        virtual void positioned(  ) {
            if( bp::override func_positioned = this->get_override( "positioned" ) )
                func_positioned(  );
            else{
                this->osgWidget::Frame::Border::positioned(  );
            }
        }
        
        void default_positioned(  ) {
            osgWidget::Frame::Border::positioned( );
        }
    
        virtual void accept( ::osg::Drawable::AttributeFunctor & af ) {
            if( bp::override func_accept = this->get_override( "accept" ) )
                func_accept( boost::ref(af) );
            else{
                this->osg::Geometry::accept( boost::ref(af) );
            }
        }
        
        void default_accept( ::osg::Drawable::AttributeFunctor & af ) {
            osg::Geometry::accept( boost::ref(af) );
        }
    
        virtual void accept( ::osg::Drawable::ConstAttributeFunctor & af ) const  {
            if( bp::override func_accept = this->get_override( "accept" ) )
                func_accept( boost::ref(af) );
            else{
                this->osg::Geometry::accept( boost::ref(af) );
            }
        }
        
        void default_accept( ::osg::Drawable::ConstAttributeFunctor & af ) const  {
            osg::Geometry::accept( boost::ref(af) );
        }
    
        virtual void accept( ::osg::PrimitiveFunctor & pf ) const  {
            if( bp::override func_accept = this->get_override( "accept" ) )
                func_accept( boost::ref(pf) );
            else{
                this->osg::Geometry::accept( boost::ref(pf) );
            }
        }
        
        void default_accept( ::osg::PrimitiveFunctor & pf ) const  {
            osg::Geometry::accept( boost::ref(pf) );
        }
    
        virtual void accept( ::osg::PrimitiveIndexFunctor & pf ) const  {
            if( bp::override func_accept = this->get_override( "accept" ) )
                func_accept( boost::ref(pf) );
            else{
                this->osg::Geometry::accept( boost::ref(pf) );
            }
        }
        
        void default_accept( ::osg::PrimitiveIndexFunctor & pf ) const  {
            osg::Geometry::accept( boost::ref(pf) );
        }
    
        virtual ::osg::Geometry * asGeometry(  ) {
            if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
                return func_asGeometry(  );
            else{
                return this->osg::Geometry::asGeometry(  );
            }
        }
        
        ::osg::Geometry * default_asGeometry(  ) {
            return osg::Geometry::asGeometry( );
        }
    
        virtual ::osg::Geometry const * asGeometry(  ) const  {
            if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
                return func_asGeometry(  );
            else{
                return this->osg::Geometry::asGeometry(  );
            }
        }
        
        ::osg::Geometry const * default_asGeometry(  ) const  {
            return osg::Geometry::asGeometry( );
        }
    
        virtual void compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
            if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
                func_compileGLObjects( boost::ref(renderInfo) );
            else{
                this->osg::Geometry::compileGLObjects( boost::ref(renderInfo) );
            }
        }
        
        void default_compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
            osg::Geometry::compileGLObjects( boost::ref(renderInfo) );
        }
    
        virtual ::osg::BoundingBox computeBound(  ) const  {
            if( bp::override func_computeBound = this->get_override( "computeBound" ) )
                return func_computeBound(  );
            else{
                return this->osg::Drawable::computeBound(  );
            }
        }
        
        ::osg::BoundingBox default_computeBound(  ) const  {
            return osg::Drawable::computeBound( );
        }
    
        virtual void computeDataVariance(  ) {
            if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
                func_computeDataVariance(  );
            else{
                this->osg::Drawable::computeDataVariance(  );
            }
        }
        
        void default_computeDataVariance(  ) {
            osg::Drawable::computeDataVariance( );
        }
    
        virtual void dirtyDisplayList(  ) {
            if( bp::override func_dirtyDisplayList = this->get_override( "dirtyDisplayList" ) )
                func_dirtyDisplayList(  );
            else{
                this->osg::Geometry::dirtyDisplayList(  );
            }
        }
        
        void default_dirtyDisplayList(  ) {
            osg::Geometry::dirtyDisplayList( );
        }
    
        virtual void drawImplementation( ::osg::RenderInfo & renderInfo ) const  {
            if( bp::override func_drawImplementation = this->get_override( "drawImplementation" ) )
                func_drawImplementation( boost::ref(renderInfo) );
            else{
                this->osg::Geometry::drawImplementation( boost::ref(renderInfo) );
            }
        }
        
        void default_drawImplementation( ::osg::RenderInfo & renderInfo ) const  {
            osg::Geometry::drawImplementation( boost::ref(renderInfo) );
        }
    
        virtual bool focus( ::osgWidget::WindowManager const * arg0 ) {
            if( bp::override func_focus = this->get_override( "focus" ) )
                return func_focus( boost::python::ptr(arg0) );
            else{
                return this->osgWidget::EventInterface::focus( boost::python::ptr(arg0) );
            }
        }
        
        bool default_focus( ::osgWidget::WindowManager const * arg0 ) {
            return osgWidget::EventInterface::focus( boost::python::ptr(arg0) );
        }
    
        virtual unsigned int getGLObjectSizeHint(  ) const  {
            if( bp::override func_getGLObjectSizeHint = this->get_override( "getGLObjectSizeHint" ) )
                return func_getGLObjectSizeHint(  );
            else{
                return this->osg::Geometry::getGLObjectSizeHint(  );
            }
        }
        
        unsigned int default_getGLObjectSizeHint(  ) const  {
            return osg::Geometry::getGLObjectSizeHint( );
        }
    
        virtual ::osg::Referenced * getUserData(  ) {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced * default_getUserData(  ) {
            return osg::Object::getUserData( );
        }
    
        virtual ::osg::Referenced const * getUserData(  ) const  {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced const * default_getUserData(  ) const  {
            return osg::Object::getUserData( );
        }
    
        virtual bool keyDown( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_keyDown = this->get_override( "keyDown" ) )
                return func_keyDown( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::keyDown( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_keyDown( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::keyDown( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool keyUp( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_keyUp = this->get_override( "keyUp" ) )
                return func_keyUp( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::keyUp( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_keyUp( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::keyUp( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual void managed( ::osgWidget::WindowManager * arg0 ) {
            if( bp::override func_managed = this->get_override( "managed" ) )
                func_managed( boost::python::ptr(arg0) );
            else{
                this->osgWidget::Widget::managed( boost::python::ptr(arg0) );
            }
        }
        
        void default_managed( ::osgWidget::WindowManager * arg0 ) {
            osgWidget::Widget::managed( boost::python::ptr(arg0) );
        }
    
        virtual bool mouseEnter( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mouseEnter = this->get_override( "mouseEnter" ) )
                return func_mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mouseEnter( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool mouseLeave( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mouseLeave = this->get_override( "mouseLeave" ) )
                return func_mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mouseLeave( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool mouseOver( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mouseOver = this->get_override( "mouseOver" ) )
                return func_mouseOver( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::mouseOver( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mouseOver( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::mouseOver( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool mousePush( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mousePush = this->get_override( "mousePush" ) )
                return func_mousePush( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::mousePush( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mousePush( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::mousePush( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool mouseRelease( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mouseRelease = this->get_override( "mouseRelease" ) )
                return func_mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mouseRelease( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool mouseScroll( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mouseScroll = this->get_override( "mouseScroll" ) )
                return func_mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mouseScroll( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
            if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
                func_resizeGLObjectBuffers( maxSize );
            else{
                this->osg::Geometry::resizeGLObjectBuffers( maxSize );
            }
        }
        
        void default_resizeGLObjectBuffers( unsigned int maxSize ) {
            osg::Geometry::resizeGLObjectBuffers( maxSize );
        }
    
        virtual void setCullCallback( ::osg::Drawable::CullCallback * cc ) {
            if( bp::override func_setCullCallback = this->get_override( "setCullCallback" ) )
                func_setCullCallback( boost::python::ptr(cc) );
            else{
                this->osg::Drawable::setCullCallback( boost::python::ptr(cc) );
            }
        }
        
        void default_setCullCallback( ::osg::Drawable::CullCallback * cc ) {
            osg::Drawable::setCullCallback( boost::python::ptr(cc) );
        }
    
        virtual void setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
            if( bp::override func_setDrawCallback = this->get_override( "setDrawCallback" ) )
                func_setDrawCallback( boost::python::ptr(dc) );
            else{
                this->osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
            }
        }
        
        void default_setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
            osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
        }
    
        virtual void setEventCallback( ::osg::Drawable::EventCallback * ac ) {
            if( bp::override func_setEventCallback = this->get_override( "setEventCallback" ) )
                func_setEventCallback( boost::python::ptr(ac) );
            else{
                this->osg::Drawable::setEventCallback( boost::python::ptr(ac) );
            }
        }
        
        void default_setEventCallback( ::osg::Drawable::EventCallback * ac ) {
            osg::Drawable::setEventCallback( boost::python::ptr(ac) );
        }
    
        virtual void setName( ::std::string const & name ) {
            if( bp::override func_setName = this->get_override( "setName" ) )
                func_setName( name );
            else{
                this->osg::Object::setName( name );
            }
        }
        
        void default_setName( ::std::string const & name ) {
            osg::Object::setName( name );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Drawable::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Drawable::setThreadSafeRefUnref( threadSafe );
        }
    
        virtual void setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
            if( bp::override func_setUpdateCallback = this->get_override( "setUpdateCallback" ) )
                func_setUpdateCallback( boost::python::ptr(ac) );
            else{
                this->osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
            }
        }
        
        void default_setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
            osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
        }
    
        virtual void setUseVertexBufferObjects( bool flag ) {
            if( bp::override func_setUseVertexBufferObjects = this->get_override( "setUseVertexBufferObjects" ) )
                func_setUseVertexBufferObjects( flag );
            else{
                this->osg::Geometry::setUseVertexBufferObjects( flag );
            }
        }
        
        void default_setUseVertexBufferObjects( bool flag ) {
            osg::Geometry::setUseVertexBufferObjects( flag );
        }
    
        virtual void setUserData( ::osg::Referenced * obj ) {
            if( bp::override func_setUserData = this->get_override( "setUserData" ) )
                func_setUserData( boost::python::ptr(obj) );
            else{
                this->osg::Object::setUserData( boost::python::ptr(obj) );
            }
        }
        
        void default_setUserData( ::osg::Referenced * obj ) {
            osg::Object::setUserData( boost::python::ptr(obj) );
        }
    
        virtual bool supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
            if( bp::override func_supports = this->get_override( "supports" ) )
                return func_supports( boost::ref(arg0) );
            else{
                return this->osg::Geometry::supports( boost::ref(arg0) );
            }
        }
        
        bool default_supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
            return osg::Geometry::supports( boost::ref(arg0) );
        }
    
        virtual bool supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
            if( bp::override func_supports = this->get_override( "supports" ) )
                return func_supports( boost::ref(arg0) );
            else{
                return this->osg::Geometry::supports( boost::ref(arg0) );
            }
        }
        
        bool default_supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
            return osg::Geometry::supports( boost::ref(arg0) );
        }
    
        virtual bool supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
            if( bp::override func_supports = this->get_override( "supports" ) )
                return func_supports( boost::ref(arg0) );
            else{
                return this->osg::Geometry::supports( boost::ref(arg0) );
            }
        }
        
        bool default_supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
            return osg::Geometry::supports( boost::ref(arg0) );
        }
    
        virtual bool supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
            if( bp::override func_supports = this->get_override( "supports" ) )
                return func_supports( boost::ref(arg0) );
            else{
                return this->osg::Geometry::supports( boost::ref(arg0) );
            }
        }
        
        bool default_supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
            return osg::Geometry::supports( boost::ref(arg0) );
        }
    
        virtual bool unfocus( ::osgWidget::WindowManager const * arg0 ) {
            if( bp::override func_unfocus = this->get_override( "unfocus" ) )
                return func_unfocus( boost::python::ptr(arg0) );
            else{
                return this->osgWidget::EventInterface::unfocus( boost::python::ptr(arg0) );
            }
        }
        
        bool default_unfocus( ::osgWidget::WindowManager const * arg0 ) {
            return osgWidget::EventInterface::unfocus( boost::python::ptr(arg0) );
        }
    
        virtual void unmanaged( ::osgWidget::WindowManager * arg0 ) {
            if( bp::override func_unmanaged = this->get_override( "unmanaged" ) )
                func_unmanaged( boost::python::ptr(arg0) );
            else{
                this->osgWidget::Widget::unmanaged( boost::python::ptr(arg0) );
            }
        }
        
        void default_unmanaged( ::osgWidget::WindowManager * arg0 ) {
            osgWidget::Widget::unmanaged( boost::python::ptr(arg0) );
        }
    
        virtual void unparented( ::osgWidget::Window * arg0 ) {
            if( bp::override func_unparented = this->get_override( "unparented" ) )
                func_unparented( boost::python::ptr(arg0) );
            else{
                this->osgWidget::Widget::unparented( boost::python::ptr(arg0) );
            }
        }
        
        void default_unparented( ::osgWidget::Window * arg0 ) {
            osgWidget::Widget::unparented( boost::python::ptr(arg0) );
        }
    
    };

    struct Corner_wrapper : osgWidget::Frame::Corner, bp::wrapper< osgWidget::Frame::Corner > {
    
        Corner_wrapper(::osgWidget::Frame::CornerType arg0=::osgWidget::Frame::CORNER_LOWER_LEFT, ::osgWidget::point_type arg1=0.0f, ::osgWidget::point_type arg2=0.0f )
        : osgWidget::Frame::Corner( arg0, arg1, arg2 )
          , bp::wrapper< osgWidget::Frame::Corner >(){
            // constructor
        
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osgWidget::Frame::Corner::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osgWidget::Frame::Corner::className( );
        }
    
        virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
            if( bp::override func_clone = this->get_override( "clone" ) )
                return func_clone( boost::ref(copyop) );
            else{
                return this->osgWidget::Frame::Corner::clone( boost::ref(copyop) );
            }
        }
        
        ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
            return osgWidget::Frame::Corner::clone( boost::ref(copyop) );
        }
    
        virtual ::osg::Object * cloneType(  ) const  {
            if( bp::override func_cloneType = this->get_override( "cloneType" ) )
                return func_cloneType(  );
            else{
                return this->osgWidget::Frame::Corner::cloneType(  );
            }
        }
        
        ::osg::Object * default_cloneType(  ) const  {
            return osgWidget::Frame::Corner::cloneType( );
        }
    
        virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
            if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
                return func_isSameKindAs( boost::python::ptr(obj) );
            else{
                return this->osgWidget::Frame::Corner::isSameKindAs( boost::python::ptr(obj) );
            }
        }
        
        bool default_isSameKindAs( ::osg::Object const * obj ) const  {
            return osgWidget::Frame::Corner::isSameKindAs( boost::python::ptr(obj) );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osgWidget::Frame::Corner::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osgWidget::Frame::Corner::libraryName( );
        }
    
        virtual bool mouseDrag( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mouseDrag = this->get_override( "mouseDrag" ) )
                return func_mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::Frame::Corner::mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mouseDrag( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::Frame::Corner::mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual void parented( ::osgWidget::Window * arg0 ) {
            if( bp::override func_parented = this->get_override( "parented" ) )
                func_parented( boost::python::ptr(arg0) );
            else{
                this->osgWidget::Frame::Corner::parented( boost::python::ptr(arg0) );
            }
        }
        
        void default_parented( ::osgWidget::Window * arg0 ) {
            osgWidget::Frame::Corner::parented( boost::python::ptr(arg0) );
        }
    
        virtual void accept( ::osg::Drawable::AttributeFunctor & af ) {
            if( bp::override func_accept = this->get_override( "accept" ) )
                func_accept( boost::ref(af) );
            else{
                this->osg::Geometry::accept( boost::ref(af) );
            }
        }
        
        void default_accept( ::osg::Drawable::AttributeFunctor & af ) {
            osg::Geometry::accept( boost::ref(af) );
        }
    
        virtual void accept( ::osg::Drawable::ConstAttributeFunctor & af ) const  {
            if( bp::override func_accept = this->get_override( "accept" ) )
                func_accept( boost::ref(af) );
            else{
                this->osg::Geometry::accept( boost::ref(af) );
            }
        }
        
        void default_accept( ::osg::Drawable::ConstAttributeFunctor & af ) const  {
            osg::Geometry::accept( boost::ref(af) );
        }
    
        virtual void accept( ::osg::PrimitiveFunctor & pf ) const  {
            if( bp::override func_accept = this->get_override( "accept" ) )
                func_accept( boost::ref(pf) );
            else{
                this->osg::Geometry::accept( boost::ref(pf) );
            }
        }
        
        void default_accept( ::osg::PrimitiveFunctor & pf ) const  {
            osg::Geometry::accept( boost::ref(pf) );
        }
    
        virtual void accept( ::osg::PrimitiveIndexFunctor & pf ) const  {
            if( bp::override func_accept = this->get_override( "accept" ) )
                func_accept( boost::ref(pf) );
            else{
                this->osg::Geometry::accept( boost::ref(pf) );
            }
        }
        
        void default_accept( ::osg::PrimitiveIndexFunctor & pf ) const  {
            osg::Geometry::accept( boost::ref(pf) );
        }
    
        virtual ::osg::Geometry * asGeometry(  ) {
            if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
                return func_asGeometry(  );
            else{
                return this->osg::Geometry::asGeometry(  );
            }
        }
        
        ::osg::Geometry * default_asGeometry(  ) {
            return osg::Geometry::asGeometry( );
        }
    
        virtual ::osg::Geometry const * asGeometry(  ) const  {
            if( bp::override func_asGeometry = this->get_override( "asGeometry" ) )
                return func_asGeometry(  );
            else{
                return this->osg::Geometry::asGeometry(  );
            }
        }
        
        ::osg::Geometry const * default_asGeometry(  ) const  {
            return osg::Geometry::asGeometry( );
        }
    
        virtual void compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
            if( bp::override func_compileGLObjects = this->get_override( "compileGLObjects" ) )
                func_compileGLObjects( boost::ref(renderInfo) );
            else{
                this->osg::Geometry::compileGLObjects( boost::ref(renderInfo) );
            }
        }
        
        void default_compileGLObjects( ::osg::RenderInfo & renderInfo ) const  {
            osg::Geometry::compileGLObjects( boost::ref(renderInfo) );
        }
    
        virtual ::osg::BoundingBox computeBound(  ) const  {
            if( bp::override func_computeBound = this->get_override( "computeBound" ) )
                return func_computeBound(  );
            else{
                return this->osg::Drawable::computeBound(  );
            }
        }
        
        ::osg::BoundingBox default_computeBound(  ) const  {
            return osg::Drawable::computeBound( );
        }
    
        virtual void computeDataVariance(  ) {
            if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
                func_computeDataVariance(  );
            else{
                this->osg::Drawable::computeDataVariance(  );
            }
        }
        
        void default_computeDataVariance(  ) {
            osg::Drawable::computeDataVariance( );
        }
    
        virtual void dirtyDisplayList(  ) {
            if( bp::override func_dirtyDisplayList = this->get_override( "dirtyDisplayList" ) )
                func_dirtyDisplayList(  );
            else{
                this->osg::Geometry::dirtyDisplayList(  );
            }
        }
        
        void default_dirtyDisplayList(  ) {
            osg::Geometry::dirtyDisplayList( );
        }
    
        virtual void drawImplementation( ::osg::RenderInfo & renderInfo ) const  {
            if( bp::override func_drawImplementation = this->get_override( "drawImplementation" ) )
                func_drawImplementation( boost::ref(renderInfo) );
            else{
                this->osg::Geometry::drawImplementation( boost::ref(renderInfo) );
            }
        }
        
        void default_drawImplementation( ::osg::RenderInfo & renderInfo ) const  {
            osg::Geometry::drawImplementation( boost::ref(renderInfo) );
        }
    
        virtual bool focus( ::osgWidget::WindowManager const * arg0 ) {
            if( bp::override func_focus = this->get_override( "focus" ) )
                return func_focus( boost::python::ptr(arg0) );
            else{
                return this->osgWidget::EventInterface::focus( boost::python::ptr(arg0) );
            }
        }
        
        bool default_focus( ::osgWidget::WindowManager const * arg0 ) {
            return osgWidget::EventInterface::focus( boost::python::ptr(arg0) );
        }
    
        virtual unsigned int getGLObjectSizeHint(  ) const  {
            if( bp::override func_getGLObjectSizeHint = this->get_override( "getGLObjectSizeHint" ) )
                return func_getGLObjectSizeHint(  );
            else{
                return this->osg::Geometry::getGLObjectSizeHint(  );
            }
        }
        
        unsigned int default_getGLObjectSizeHint(  ) const  {
            return osg::Geometry::getGLObjectSizeHint( );
        }
    
        virtual ::osg::Referenced * getUserData(  ) {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced * default_getUserData(  ) {
            return osg::Object::getUserData( );
        }
    
        virtual ::osg::Referenced const * getUserData(  ) const  {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced const * default_getUserData(  ) const  {
            return osg::Object::getUserData( );
        }
    
        virtual bool keyDown( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_keyDown = this->get_override( "keyDown" ) )
                return func_keyDown( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::keyDown( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_keyDown( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::keyDown( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool keyUp( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_keyUp = this->get_override( "keyUp" ) )
                return func_keyUp( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::keyUp( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_keyUp( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::keyUp( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual void managed( ::osgWidget::WindowManager * arg0 ) {
            if( bp::override func_managed = this->get_override( "managed" ) )
                func_managed( boost::python::ptr(arg0) );
            else{
                this->osgWidget::Widget::managed( boost::python::ptr(arg0) );
            }
        }
        
        void default_managed( ::osgWidget::WindowManager * arg0 ) {
            osgWidget::Widget::managed( boost::python::ptr(arg0) );
        }
    
        virtual bool mouseEnter( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mouseEnter = this->get_override( "mouseEnter" ) )
                return func_mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mouseEnter( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool mouseLeave( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mouseLeave = this->get_override( "mouseLeave" ) )
                return func_mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mouseLeave( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool mouseOver( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mouseOver = this->get_override( "mouseOver" ) )
                return func_mouseOver( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::mouseOver( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mouseOver( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::mouseOver( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool mousePush( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mousePush = this->get_override( "mousePush" ) )
                return func_mousePush( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::mousePush( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mousePush( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::mousePush( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool mouseRelease( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mouseRelease = this->get_override( "mouseRelease" ) )
                return func_mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mouseRelease( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual bool mouseScroll( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            if( bp::override func_mouseScroll = this->get_override( "mouseScroll" ) )
                return func_mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
            else{
                return this->osgWidget::EventInterface::mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
            }
        }
        
        bool default_mouseScroll( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
            return osgWidget::EventInterface::mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
        }
    
        virtual void positioned(  ) {
            if( bp::override func_positioned = this->get_override( "positioned" ) )
                func_positioned(  );
            else{
                this->osgWidget::Widget::positioned(  );
            }
        }
        
        void default_positioned(  ) {
            osgWidget::Widget::positioned( );
        }
    
        virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
            if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
                func_resizeGLObjectBuffers( maxSize );
            else{
                this->osg::Geometry::resizeGLObjectBuffers( maxSize );
            }
        }
        
        void default_resizeGLObjectBuffers( unsigned int maxSize ) {
            osg::Geometry::resizeGLObjectBuffers( maxSize );
        }
    
        virtual void setCullCallback( ::osg::Drawable::CullCallback * cc ) {
            if( bp::override func_setCullCallback = this->get_override( "setCullCallback" ) )
                func_setCullCallback( boost::python::ptr(cc) );
            else{
                this->osg::Drawable::setCullCallback( boost::python::ptr(cc) );
            }
        }
        
        void default_setCullCallback( ::osg::Drawable::CullCallback * cc ) {
            osg::Drawable::setCullCallback( boost::python::ptr(cc) );
        }
    
        virtual void setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
            if( bp::override func_setDrawCallback = this->get_override( "setDrawCallback" ) )
                func_setDrawCallback( boost::python::ptr(dc) );
            else{
                this->osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
            }
        }
        
        void default_setDrawCallback( ::osg::Drawable::DrawCallback * dc ) {
            osg::Drawable::setDrawCallback( boost::python::ptr(dc) );
        }
    
        virtual void setEventCallback( ::osg::Drawable::EventCallback * ac ) {
            if( bp::override func_setEventCallback = this->get_override( "setEventCallback" ) )
                func_setEventCallback( boost::python::ptr(ac) );
            else{
                this->osg::Drawable::setEventCallback( boost::python::ptr(ac) );
            }
        }
        
        void default_setEventCallback( ::osg::Drawable::EventCallback * ac ) {
            osg::Drawable::setEventCallback( boost::python::ptr(ac) );
        }
    
        virtual void setName( ::std::string const & name ) {
            if( bp::override func_setName = this->get_override( "setName" ) )
                func_setName( name );
            else{
                this->osg::Object::setName( name );
            }
        }
        
        void default_setName( ::std::string const & name ) {
            osg::Object::setName( name );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Drawable::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Drawable::setThreadSafeRefUnref( threadSafe );
        }
    
        virtual void setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
            if( bp::override func_setUpdateCallback = this->get_override( "setUpdateCallback" ) )
                func_setUpdateCallback( boost::python::ptr(ac) );
            else{
                this->osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
            }
        }
        
        void default_setUpdateCallback( ::osg::Drawable::UpdateCallback * ac ) {
            osg::Drawable::setUpdateCallback( boost::python::ptr(ac) );
        }
    
        virtual void setUseVertexBufferObjects( bool flag ) {
            if( bp::override func_setUseVertexBufferObjects = this->get_override( "setUseVertexBufferObjects" ) )
                func_setUseVertexBufferObjects( flag );
            else{
                this->osg::Geometry::setUseVertexBufferObjects( flag );
            }
        }
        
        void default_setUseVertexBufferObjects( bool flag ) {
            osg::Geometry::setUseVertexBufferObjects( flag );
        }
    
        virtual void setUserData( ::osg::Referenced * obj ) {
            if( bp::override func_setUserData = this->get_override( "setUserData" ) )
                func_setUserData( boost::python::ptr(obj) );
            else{
                this->osg::Object::setUserData( boost::python::ptr(obj) );
            }
        }
        
        void default_setUserData( ::osg::Referenced * obj ) {
            osg::Object::setUserData( boost::python::ptr(obj) );
        }
    
        virtual bool supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
            if( bp::override func_supports = this->get_override( "supports" ) )
                return func_supports( boost::ref(arg0) );
            else{
                return this->osg::Geometry::supports( boost::ref(arg0) );
            }
        }
        
        bool default_supports( ::osg::Drawable::AttributeFunctor const & arg0 ) const  {
            return osg::Geometry::supports( boost::ref(arg0) );
        }
    
        virtual bool supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
            if( bp::override func_supports = this->get_override( "supports" ) )
                return func_supports( boost::ref(arg0) );
            else{
                return this->osg::Geometry::supports( boost::ref(arg0) );
            }
        }
        
        bool default_supports( ::osg::Drawable::ConstAttributeFunctor const & arg0 ) const  {
            return osg::Geometry::supports( boost::ref(arg0) );
        }
    
        virtual bool supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
            if( bp::override func_supports = this->get_override( "supports" ) )
                return func_supports( boost::ref(arg0) );
            else{
                return this->osg::Geometry::supports( boost::ref(arg0) );
            }
        }
        
        bool default_supports( ::osg::PrimitiveFunctor const & arg0 ) const  {
            return osg::Geometry::supports( boost::ref(arg0) );
        }
    
        virtual bool supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
            if( bp::override func_supports = this->get_override( "supports" ) )
                return func_supports( boost::ref(arg0) );
            else{
                return this->osg::Geometry::supports( boost::ref(arg0) );
            }
        }
        
        bool default_supports( ::osg::PrimitiveIndexFunctor const & arg0 ) const  {
            return osg::Geometry::supports( boost::ref(arg0) );
        }
    
        virtual bool unfocus( ::osgWidget::WindowManager const * arg0 ) {
            if( bp::override func_unfocus = this->get_override( "unfocus" ) )
                return func_unfocus( boost::python::ptr(arg0) );
            else{
                return this->osgWidget::EventInterface::unfocus( boost::python::ptr(arg0) );
            }
        }
        
        bool default_unfocus( ::osgWidget::WindowManager const * arg0 ) {
            return osgWidget::EventInterface::unfocus( boost::python::ptr(arg0) );
        }
    
        virtual void unmanaged( ::osgWidget::WindowManager * arg0 ) {
            if( bp::override func_unmanaged = this->get_override( "unmanaged" ) )
                func_unmanaged( boost::python::ptr(arg0) );
            else{
                this->osgWidget::Widget::unmanaged( boost::python::ptr(arg0) );
            }
        }
        
        void default_unmanaged( ::osgWidget::WindowManager * arg0 ) {
            osgWidget::Widget::unmanaged( boost::python::ptr(arg0) );
        }
    
        virtual void unparented( ::osgWidget::Window * arg0 ) {
            if( bp::override func_unparented = this->get_override( "unparented" ) )
                func_unparented( boost::python::ptr(arg0) );
            else{
                this->osgWidget::Widget::unparented( boost::python::ptr(arg0) );
            }
        }
        
        void default_unparented( ::osgWidget::Window * arg0 ) {
            osgWidget::Widget::unparented( boost::python::ptr(arg0) );
        }
    
    };

    Frame_wrapper(::std::string const & arg0="", unsigned int arg1=0 )
    : osgWidget::Frame( arg0, arg1 )
      , bp::wrapper< osgWidget::Frame >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgWidget::Frame::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgWidget::Frame::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgWidget::Frame::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgWidget::Frame::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgWidget::Frame::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgWidget::Frame::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgWidget::Frame::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgWidget::Frame::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgWidget::Frame::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgWidget::Frame::libraryName( );
    }

    virtual void accept( ::osg::NodeVisitor & nv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(nv) );
        else{
            this->osg::MatrixTransform::accept( boost::ref(nv) );
        }
    }
    
    void default_accept( ::osg::NodeVisitor & nv ) {
        osg::MatrixTransform::accept( boost::ref(nv) );
    }

    virtual bool addChild( ::osg::Node * child ) {
        if( bp::override func_addChild = this->get_override( "addChild" ) )
            return func_addChild( boost::python::ptr(child) );
        else{
            return this->osg::Group::addChild( boost::python::ptr(child) );
        }
    }
    
    bool default_addChild( ::osg::Node * child ) {
        return osg::Group::addChild( boost::python::ptr(child) );
    }

    virtual bool addWidget( ::osgWidget::Widget * arg0 ) {
        if( bp::override func_addWidget = this->get_override( "addWidget" ) )
            return func_addWidget( boost::python::ptr(arg0) );
        else{
            return this->osgWidget::Table::addWidget( boost::python::ptr(arg0) );
        }
    }
    
    bool default_addWidget( ::osgWidget::Widget * arg0 ) {
        return osgWidget::Table::addWidget( boost::python::ptr(arg0) );
    }

    virtual bool addWidget( ::osgWidget::Widget * arg0, unsigned int arg1, unsigned int arg2 ) {
        if( bp::override func_addWidget = this->get_override( "addWidget" ) )
            return func_addWidget( boost::python::ptr(arg0), arg1, arg2 );
        else{
            return this->osgWidget::Table::addWidget( boost::python::ptr(arg0), arg1, arg2 );
        }
    }
    
    bool default_addWidget( ::osgWidget::Widget * arg0, unsigned int arg1, unsigned int arg2 ) {
        return osgWidget::Table::addWidget( boost::python::ptr(arg0), arg1, arg2 );
    }

    virtual ::osg::Camera * asCamera(  ) {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera * default_asCamera(  ) {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Camera const * asCamera(  ) const  {
        if( bp::override func_asCamera = this->get_override( "asCamera" ) )
            return func_asCamera(  );
        else{
            return this->osg::Node::asCamera(  );
        }
    }
    
    ::osg::Camera const * default_asCamera(  ) const  {
        return osg::Node::asCamera( );
    }

    virtual ::osg::Geode * asGeode(  ) {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode * default_asGeode(  ) {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Geode const * asGeode(  ) const  {
        if( bp::override func_asGeode = this->get_override( "asGeode" ) )
            return func_asGeode(  );
        else{
            return this->osg::Node::asGeode(  );
        }
    }
    
    ::osg::Geode const * default_asGeode(  ) const  {
        return osg::Node::asGeode( );
    }

    virtual ::osg::Group * asGroup(  ) {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group * default_asGroup(  ) {
        return osg::Group::asGroup( );
    }

    virtual ::osg::Group const * asGroup(  ) const  {
        if( bp::override func_asGroup = this->get_override( "asGroup" ) )
            return func_asGroup(  );
        else{
            return this->osg::Group::asGroup(  );
        }
    }
    
    ::osg::Group const * default_asGroup(  ) const  {
        return osg::Group::asGroup( );
    }

    virtual ::osg::MatrixTransform * asMatrixTransform(  ) {
        if( bp::override func_asMatrixTransform = this->get_override( "asMatrixTransform" ) )
            return func_asMatrixTransform(  );
        else{
            return this->osg::MatrixTransform::asMatrixTransform(  );
        }
    }
    
    ::osg::MatrixTransform * default_asMatrixTransform(  ) {
        return osg::MatrixTransform::asMatrixTransform( );
    }

    virtual ::osg::MatrixTransform const * asMatrixTransform(  ) const  {
        if( bp::override func_asMatrixTransform = this->get_override( "asMatrixTransform" ) )
            return func_asMatrixTransform(  );
        else{
            return this->osg::MatrixTransform::asMatrixTransform(  );
        }
    }
    
    ::osg::MatrixTransform const * default_asMatrixTransform(  ) const  {
        return osg::MatrixTransform::asMatrixTransform( );
    }

    virtual ::osg::PositionAttitudeTransform * asPositionAttitudeTransform(  ) {
        if( bp::override func_asPositionAttitudeTransform = this->get_override( "asPositionAttitudeTransform" ) )
            return func_asPositionAttitudeTransform(  );
        else{
            return this->osg::Transform::asPositionAttitudeTransform(  );
        }
    }
    
    ::osg::PositionAttitudeTransform * default_asPositionAttitudeTransform(  ) {
        return osg::Transform::asPositionAttitudeTransform( );
    }

    virtual ::osg::PositionAttitudeTransform const * asPositionAttitudeTransform(  ) const  {
        if( bp::override func_asPositionAttitudeTransform = this->get_override( "asPositionAttitudeTransform" ) )
            return func_asPositionAttitudeTransform(  );
        else{
            return this->osg::Transform::asPositionAttitudeTransform(  );
        }
    }
    
    ::osg::PositionAttitudeTransform const * default_asPositionAttitudeTransform(  ) const  {
        return osg::Transform::asPositionAttitudeTransform( );
    }

    virtual ::osg::Switch * asSwitch(  ) {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch * default_asSwitch(  ) {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Switch const * asSwitch(  ) const  {
        if( bp::override func_asSwitch = this->get_override( "asSwitch" ) )
            return func_asSwitch(  );
        else{
            return this->osg::Node::asSwitch(  );
        }
    }
    
    ::osg::Switch const * default_asSwitch(  ) const  {
        return osg::Node::asSwitch( );
    }

    virtual ::osg::Transform * asTransform(  ) {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Transform::asTransform(  );
        }
    }
    
    ::osg::Transform * default_asTransform(  ) {
        return osg::Transform::asTransform( );
    }

    virtual ::osg::Transform const * asTransform(  ) const  {
        if( bp::override func_asTransform = this->get_override( "asTransform" ) )
            return func_asTransform(  );
        else{
            return this->osg::Transform::asTransform(  );
        }
    }
    
    ::osg::Transform const * default_asTransform(  ) const  {
        return osg::Transform::asTransform( );
    }

    virtual void ascend( ::osg::NodeVisitor & nv ) {
        if( bp::override func_ascend = this->get_override( "ascend" ) )
            func_ascend( boost::ref(nv) );
        else{
            this->osg::Node::ascend( boost::ref(nv) );
        }
    }
    
    void default_ascend( ::osg::NodeVisitor & nv ) {
        osg::Node::ascend( boost::ref(nv) );
    }

    virtual ::osg::BoundingSphere computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osg::Transform::computeBound(  );
        }
    }
    
    ::osg::BoundingSphere default_computeBound(  ) const  {
        return osg::Transform::computeBound( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual bool computeLocalToWorldMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        if( bp::override func_computeLocalToWorldMatrix = this->get_override( "computeLocalToWorldMatrix" ) )
            return func_computeLocalToWorldMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        else{
            return this->osg::MatrixTransform::computeLocalToWorldMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        }
    }
    
    bool default_computeLocalToWorldMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        return osg::MatrixTransform::computeLocalToWorldMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
    }

    virtual bool computeWorldToLocalMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        if( bp::override func_computeWorldToLocalMatrix = this->get_override( "computeWorldToLocalMatrix" ) )
            return func_computeWorldToLocalMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        else{
            return this->osg::MatrixTransform::computeWorldToLocalMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
        }
    }
    
    bool default_computeWorldToLocalMatrix( ::osg::Matrix & matrix, ::osg::NodeVisitor * arg1 ) const  {
        return osg::MatrixTransform::computeWorldToLocalMatrix( boost::ref(matrix), boost::python::ptr(arg1) );
    }

    virtual bool focus( ::osgWidget::WindowManager const * arg0 ) {
        if( bp::override func_focus = this->get_override( "focus" ) )
            return func_focus( boost::python::ptr(arg0) );
        else{
            return this->osgWidget::EventInterface::focus( boost::python::ptr(arg0) );
        }
    }
    
    bool default_focus( ::osgWidget::WindowManager const * arg0 ) {
        return osgWidget::EventInterface::focus( boost::python::ptr(arg0) );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool insertChild( unsigned int index, ::osg::Node * child ) {
        if( bp::override func_insertChild = this->get_override( "insertChild" ) )
            return func_insertChild( index, boost::python::ptr(child) );
        else{
            return this->osg::Group::insertChild( index, boost::python::ptr(child) );
        }
    }
    
    bool default_insertChild( unsigned int index, ::osg::Node * child ) {
        return osg::Group::insertChild( index, boost::python::ptr(child) );
    }

    virtual bool insertWidget( ::osgWidget::Widget * arg0, unsigned int arg1 ) {
        if( bp::override func_insertWidget = this->get_override( "insertWidget" ) )
            return func_insertWidget( boost::python::ptr(arg0), arg1 );
        else{
            return this->osgWidget::Window::insertWidget( boost::python::ptr(arg0), arg1 );
        }
    }
    
    bool default_insertWidget( ::osgWidget::Widget * arg0, unsigned int arg1 ) {
        return osgWidget::Window::insertWidget( boost::python::ptr(arg0), arg1 );
    }

    virtual bool keyDown( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_keyDown = this->get_override( "keyDown" ) )
            return func_keyDown( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::keyDown( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_keyDown( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::keyDown( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool keyUp( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_keyUp = this->get_override( "keyUp" ) )
            return func_keyUp( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::keyUp( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_keyUp( int arg0, int arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::keyUp( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual void managed( ::osgWidget::WindowManager * arg0 ) {
        if( bp::override func_managed = this->get_override( "managed" ) )
            func_managed( boost::python::ptr(arg0) );
        else{
            this->osgWidget::Window::managed( boost::python::ptr(arg0) );
        }
    }
    
    void default_managed( ::osgWidget::WindowManager * arg0 ) {
        osgWidget::Window::managed( boost::python::ptr(arg0) );
    }

    virtual bool mouseDrag( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseDrag = this->get_override( "mouseDrag" ) )
            return func_mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseDrag( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseDrag( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseEnter( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseEnter = this->get_override( "mouseEnter" ) )
            return func_mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseEnter( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseEnter( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseLeave( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseLeave = this->get_override( "mouseLeave" ) )
            return func_mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseLeave( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseLeave( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseOver( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseOver = this->get_override( "mouseOver" ) )
            return func_mouseOver( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseOver( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseOver( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseOver( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mousePush( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mousePush = this->get_override( "mousePush" ) )
            return func_mousePush( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mousePush( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mousePush( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mousePush( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseRelease( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseRelease = this->get_override( "mouseRelease" ) )
            return func_mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseRelease( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseRelease( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool mouseScroll( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        if( bp::override func_mouseScroll = this->get_override( "mouseScroll" ) )
            return func_mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
        else{
            return this->osgWidget::EventInterface::mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    bool default_mouseScroll( double arg0, double arg1, ::osgWidget::WindowManager const * arg2 ) {
        return osgWidget::EventInterface::mouseScroll( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual bool removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        if( bp::override func_removeChildren = this->get_override( "removeChildren" ) )
            return func_removeChildren( pos, numChildrenToRemove );
        else{
            return this->osg::Group::removeChildren( pos, numChildrenToRemove );
        }
    }
    
    bool default_removeChildren( unsigned int pos, unsigned int numChildrenToRemove ) {
        return osg::Group::removeChildren( pos, numChildrenToRemove );
    }

    virtual bool removeWidget( ::osgWidget::Widget * arg0 ) {
        if( bp::override func_removeWidget = this->get_override( "removeWidget" ) )
            return func_removeWidget( boost::python::ptr(arg0) );
        else{
            return this->osgWidget::Window::removeWidget( boost::python::ptr(arg0) );
        }
    }
    
    bool default_removeWidget( ::osgWidget::Widget * arg0 ) {
        return osgWidget::Window::removeWidget( boost::python::ptr(arg0) );
    }

    virtual bool replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        if( bp::override func_replaceChild = this->get_override( "replaceChild" ) )
            return func_replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        else{
            return this->osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
        }
    }
    
    bool default_replaceChild( ::osg::Node * origChild, ::osg::Node * newChild ) {
        return osg::Group::replaceChild( boost::python::ptr(origChild), boost::python::ptr(newChild) );
    }

    virtual bool replaceWidget( ::osgWidget::Widget * arg0, ::osgWidget::Widget * arg1 ) {
        if( bp::override func_replaceWidget = this->get_override( "replaceWidget" ) )
            return func_replaceWidget( boost::python::ptr(arg0), boost::python::ptr(arg1) );
        else{
            return this->osgWidget::Window::replaceWidget( boost::python::ptr(arg0), boost::python::ptr(arg1) );
        }
    }
    
    bool default_replaceWidget( ::osgWidget::Widget * arg0, ::osgWidget::Widget * arg1 ) {
        return osgWidget::Window::replaceWidget( boost::python::ptr(arg0), boost::python::ptr(arg1) );
    }

    virtual void resizeGLObjectBuffers( unsigned int maxSize ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( maxSize );
        else{
            this->osg::Group::resizeGLObjectBuffers( maxSize );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int maxSize ) {
        osg::Group::resizeGLObjectBuffers( maxSize );
    }

    virtual bool setChild( unsigned int i, ::osg::Node * node ) {
        if( bp::override func_setChild = this->get_override( "setChild" ) )
            return func_setChild( i, boost::python::ptr(node) );
        else{
            return this->osg::Group::setChild( i, boost::python::ptr(node) );
        }
    }
    
    bool default_setChild( unsigned int i, ::osg::Node * node ) {
        return osg::Group::setChild( i, boost::python::ptr(node) );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Group::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Group::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual void traverse( ::osg::NodeVisitor & nv ) {
        if( bp::override func_traverse = this->get_override( "traverse" ) )
            func_traverse( boost::ref(nv) );
        else{
            this->osg::Group::traverse( boost::ref(nv) );
        }
    }
    
    void default_traverse( ::osg::NodeVisitor & nv ) {
        osg::Group::traverse( boost::ref(nv) );
    }

    virtual bool unfocus( ::osgWidget::WindowManager const * arg0 ) {
        if( bp::override func_unfocus = this->get_override( "unfocus" ) )
            return func_unfocus( boost::python::ptr(arg0) );
        else{
            return this->osgWidget::EventInterface::unfocus( boost::python::ptr(arg0) );
        }
    }
    
    bool default_unfocus( ::osgWidget::WindowManager const * arg0 ) {
        return osgWidget::EventInterface::unfocus( boost::python::ptr(arg0) );
    }

    virtual void unmanaged( ::osgWidget::WindowManager * arg0 ) {
        if( bp::override func_unmanaged = this->get_override( "unmanaged" ) )
            func_unmanaged( boost::python::ptr(arg0) );
        else{
            this->osgWidget::Window::unmanaged( boost::python::ptr(arg0) );
        }
    }
    
    void default_unmanaged( ::osgWidget::WindowManager * arg0 ) {
        osgWidget::Window::unmanaged( boost::python::ptr(arg0) );
    }

    virtual void update(  ) {
        if( bp::override func_update = this->get_override( "update" ) )
            func_update(  );
        else{
            this->osgWidget::Window::update(  );
        }
    }
    
    void default_update(  ) {
        osgWidget::Window::update( );
    }

};

void register_Frame_class(){

    { //::osgWidget::Frame
        typedef bp::class_< Frame_wrapper, bp::bases< osgWidget::Table >, osg::ref_ptr< Frame_wrapper >, boost::noncopyable > Frame_exposer_t;
        Frame_exposer_t Frame_exposer = Frame_exposer_t( "Frame", bp::init< bp::optional< std::string const &, unsigned int > >(( bp::arg("arg0")="", bp::arg("arg1")=(unsigned int)(0) )) );
        bp::scope Frame_scope( Frame_exposer );
        bp::enum_< osgWidget::Frame::BorderType>("BorderType")
            .value("BORDER_LEFT", osgWidget::Frame::BORDER_LEFT)
            .value("BORDER_RIGHT", osgWidget::Frame::BORDER_RIGHT)
            .value("BORDER_TOP", osgWidget::Frame::BORDER_TOP)
            .value("BORDER_BOTTOM", osgWidget::Frame::BORDER_BOTTOM)
            .export_values()
            ;
        bp::enum_< osgWidget::Frame::CornerType>("CornerType")
            .value("CORNER_LOWER_LEFT", osgWidget::Frame::CORNER_LOWER_LEFT)
            .value("CORNER_LOWER_RIGHT", osgWidget::Frame::CORNER_LOWER_RIGHT)
            .value("CORNER_UPPER_LEFT", osgWidget::Frame::CORNER_UPPER_LEFT)
            .value("CORNER_UPPER_RIGHT", osgWidget::Frame::CORNER_UPPER_RIGHT)
            .export_values()
            ;
        bp::enum_< osgWidget::Frame::FrameOptions>("FrameOptions")
            .value("FRAME_RESIZE", osgWidget::Frame::FRAME_RESIZE)
            .value("FRAME_MOVE", osgWidget::Frame::FRAME_MOVE)
            .value("FRAME_TEXTURE", osgWidget::Frame::FRAME_TEXTURE)
            .value("FRAME_ALL", osgWidget::Frame::FRAME_ALL)
            .export_values()
            ;
        { //::osgWidget::Frame::Border
            typedef bp::class_< Frame_wrapper::Border_wrapper, bp::bases< osgWidget::Widget >, osg::ref_ptr< Frame_wrapper::Border_wrapper >, boost::noncopyable > Border_exposer_t;
            Border_exposer_t Border_exposer = Border_exposer_t( "Border", bp::init< bp::optional< osgWidget::Frame::BorderType, osgWidget::point_type, osgWidget::point_type > >(( bp::arg("arg0")=::osgWidget::Frame::BORDER_LEFT, bp::arg("arg1")=0.0f, bp::arg("arg2")=0.0f )) );
            bp::scope Border_scope( Border_exposer );
            bp::implicitly_convertible< osgWidget::Frame::BorderType, osgWidget::Frame::Border >();
            { //::osgWidget::Frame::Border::className
            
                typedef char const * ( ::osgWidget::Frame::Border::*className_function_type )(  ) const;
                typedef char const * ( Frame_wrapper::Border_wrapper::*default_className_function_type )(  ) const;
                
                Border_exposer.def( 
                    "className"
                    , className_function_type(&::osgWidget::Frame::Border::className)
                    , default_className_function_type(&Frame_wrapper::Border_wrapper::default_className) );
            
            }
            { //::osgWidget::Frame::Border::clone
            
                typedef ::osg::Object * ( ::osgWidget::Frame::Border::*clone_function_type )( ::osg::CopyOp const & ) const;
                typedef ::osg::Object * ( Frame_wrapper::Border_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
                
                Border_exposer.def( 
                    "clone"
                    , clone_function_type(&::osgWidget::Frame::Border::clone)
                    , default_clone_function_type(&Frame_wrapper::Border_wrapper::default_clone)
                    , ( bp::arg("copyop") )
                    , bp::return_value_policy< bp::reference_existing_object >() );
            
            }
            { //::osgWidget::Frame::Border::cloneType
            
                typedef ::osg::Object * ( ::osgWidget::Frame::Border::*cloneType_function_type )(  ) const;
                typedef ::osg::Object * ( Frame_wrapper::Border_wrapper::*default_cloneType_function_type )(  ) const;
                
                Border_exposer.def( 
                    "cloneType"
                    , cloneType_function_type(&::osgWidget::Frame::Border::cloneType)
                    , default_cloneType_function_type(&Frame_wrapper::Border_wrapper::default_cloneType)
                    , bp::return_value_policy< bp::reference_existing_object >() );
            
            }
            { //::osgWidget::Frame::Border::getBorderType
            
                typedef ::osgWidget::Frame::BorderType ( ::osgWidget::Frame::Border::*getBorderType_function_type )(  ) const;
                
                Border_exposer.def( 
                    "getBorderType"
                    , getBorderType_function_type( &::osgWidget::Frame::Border::getBorderType ) );
            
            }
            { //::osgWidget::Frame::Border::isSameKindAs
            
                typedef bool ( ::osgWidget::Frame::Border::*isSameKindAs_function_type )( ::osg::Object const * ) const;
                typedef bool ( Frame_wrapper::Border_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
                
                Border_exposer.def( 
                    "isSameKindAs"
                    , isSameKindAs_function_type(&::osgWidget::Frame::Border::isSameKindAs)
                    , default_isSameKindAs_function_type(&Frame_wrapper::Border_wrapper::default_isSameKindAs)
                    , ( bp::arg("obj") ) );
            
            }
            { //::osgWidget::Frame::Border::libraryName
            
                typedef char const * ( ::osgWidget::Frame::Border::*libraryName_function_type )(  ) const;
                typedef char const * ( Frame_wrapper::Border_wrapper::*default_libraryName_function_type )(  ) const;
                
                Border_exposer.def( 
                    "libraryName"
                    , libraryName_function_type(&::osgWidget::Frame::Border::libraryName)
                    , default_libraryName_function_type(&Frame_wrapper::Border_wrapper::default_libraryName) );
            
            }
            { //::osgWidget::Frame::Border::mouseDrag
            
                typedef bool ( ::osgWidget::Frame::Border::*mouseDrag_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Border_wrapper::*default_mouseDrag_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                
                Border_exposer.def( 
                    "mouseDrag"
                    , mouseDrag_function_type(&::osgWidget::Frame::Border::mouseDrag)
                    , default_mouseDrag_function_type(&Frame_wrapper::Border_wrapper::default_mouseDrag)
                    , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
            
            }
            { //::osgWidget::Frame::Border::parented
            
                typedef void ( ::osgWidget::Frame::Border::*parented_function_type )( ::osgWidget::Window * ) ;
                typedef void ( Frame_wrapper::Border_wrapper::*default_parented_function_type )( ::osgWidget::Window * ) ;
                
                Border_exposer.def( 
                    "parented"
                    , parented_function_type(&::osgWidget::Frame::Border::parented)
                    , default_parented_function_type(&Frame_wrapper::Border_wrapper::default_parented)
                    , ( bp::arg("arg0") ) );
            
            }
            { //::osgWidget::Frame::Border::positioned
            
                typedef void ( ::osgWidget::Frame::Border::*positioned_function_type )(  ) ;
                typedef void ( Frame_wrapper::Border_wrapper::*default_positioned_function_type )(  ) ;
                
                Border_exposer.def( 
                    "positioned"
                    , positioned_function_type(&::osgWidget::Frame::Border::positioned)
                    , default_positioned_function_type(&Frame_wrapper::Border_wrapper::default_positioned) );
            
            }
            { //::osgWidget::Frame::Border::setBorderType
            
                typedef void ( ::osgWidget::Frame::Border::*setBorderType_function_type )( ::osgWidget::Frame::BorderType ) ;
                
                Border_exposer.def( 
                    "setBorderType"
                    , setBorderType_function_type( &::osgWidget::Frame::Border::setBorderType )
                    , ( bp::arg("border") ) );
            
            }
            { //::osgWidget::Frame::Border::setBorderTypeAndName
            
                typedef void ( ::osgWidget::Frame::Border::*setBorderTypeAndName_function_type )( ::osgWidget::Frame::BorderType ) ;
                
                Border_exposer.def( 
                    "setBorderTypeAndName"
                    , setBorderTypeAndName_function_type( &::osgWidget::Frame::Border::setBorderTypeAndName )
                    , ( bp::arg("border") ) );
            
            }
            { //::osgWidget::EventInterface::focus
            
                typedef bool ( ::osgWidget::EventInterface::*focus_function_type )( ::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Border_wrapper::*default_focus_function_type )( ::osgWidget::WindowManager const * ) ;
                
                Border_exposer.def( 
                    "focus"
                    , focus_function_type(&::osgWidget::EventInterface::focus)
                    , default_focus_function_type(&Frame_wrapper::Border_wrapper::default_focus)
                    , ( bp::arg("arg0") ) );
            
            }
            { //::osgWidget::EventInterface::keyDown
            
                typedef bool ( ::osgWidget::EventInterface::*keyDown_function_type )( int,int,::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Border_wrapper::*default_keyDown_function_type )( int,int,::osgWidget::WindowManager const * ) ;
                
                Border_exposer.def( 
                    "keyDown"
                    , keyDown_function_type(&::osgWidget::EventInterface::keyDown)
                    , default_keyDown_function_type(&Frame_wrapper::Border_wrapper::default_keyDown)
                    , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
            
            }
            { //::osgWidget::EventInterface::keyUp
            
                typedef bool ( ::osgWidget::EventInterface::*keyUp_function_type )( int,int,::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Border_wrapper::*default_keyUp_function_type )( int,int,::osgWidget::WindowManager const * ) ;
                
                Border_exposer.def( 
                    "keyUp"
                    , keyUp_function_type(&::osgWidget::EventInterface::keyUp)
                    , default_keyUp_function_type(&Frame_wrapper::Border_wrapper::default_keyUp)
                    , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
            
            }
            { //::osgWidget::Widget::managed
            
                typedef void ( ::osgWidget::Widget::*managed_function_type )( ::osgWidget::WindowManager * ) ;
                typedef void ( Frame_wrapper::Border_wrapper::*default_managed_function_type )( ::osgWidget::WindowManager * ) ;
                
                Border_exposer.def( 
                    "managed"
                    , managed_function_type(&::osgWidget::Widget::managed)
                    , default_managed_function_type(&Frame_wrapper::Border_wrapper::default_managed)
                    , ( bp::arg("arg0") ) );
            
            }
            { //::osgWidget::EventInterface::mouseEnter
            
                typedef bool ( ::osgWidget::EventInterface::*mouseEnter_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Border_wrapper::*default_mouseEnter_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                
                Border_exposer.def( 
                    "mouseEnter"
                    , mouseEnter_function_type(&::osgWidget::EventInterface::mouseEnter)
                    , default_mouseEnter_function_type(&Frame_wrapper::Border_wrapper::default_mouseEnter)
                    , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
            
            }
            { //::osgWidget::EventInterface::mouseLeave
            
                typedef bool ( ::osgWidget::EventInterface::*mouseLeave_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Border_wrapper::*default_mouseLeave_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                
                Border_exposer.def( 
                    "mouseLeave"
                    , mouseLeave_function_type(&::osgWidget::EventInterface::mouseLeave)
                    , default_mouseLeave_function_type(&Frame_wrapper::Border_wrapper::default_mouseLeave)
                    , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
            
            }
            { //::osgWidget::EventInterface::mouseOver
            
                typedef bool ( ::osgWidget::EventInterface::*mouseOver_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Border_wrapper::*default_mouseOver_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                
                Border_exposer.def( 
                    "mouseOver"
                    , mouseOver_function_type(&::osgWidget::EventInterface::mouseOver)
                    , default_mouseOver_function_type(&Frame_wrapper::Border_wrapper::default_mouseOver)
                    , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
            
            }
            { //::osgWidget::EventInterface::mousePush
            
                typedef bool ( ::osgWidget::EventInterface::*mousePush_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Border_wrapper::*default_mousePush_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                
                Border_exposer.def( 
                    "mousePush"
                    , mousePush_function_type(&::osgWidget::EventInterface::mousePush)
                    , default_mousePush_function_type(&Frame_wrapper::Border_wrapper::default_mousePush)
                    , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
            
            }
            { //::osgWidget::EventInterface::mouseRelease
            
                typedef bool ( ::osgWidget::EventInterface::*mouseRelease_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Border_wrapper::*default_mouseRelease_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                
                Border_exposer.def( 
                    "mouseRelease"
                    , mouseRelease_function_type(&::osgWidget::EventInterface::mouseRelease)
                    , default_mouseRelease_function_type(&Frame_wrapper::Border_wrapper::default_mouseRelease)
                    , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
            
            }
            { //::osgWidget::EventInterface::mouseScroll
            
                typedef bool ( ::osgWidget::EventInterface::*mouseScroll_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Border_wrapper::*default_mouseScroll_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                
                Border_exposer.def( 
                    "mouseScroll"
                    , mouseScroll_function_type(&::osgWidget::EventInterface::mouseScroll)
                    , default_mouseScroll_function_type(&Frame_wrapper::Border_wrapper::default_mouseScroll)
                    , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
            
            }
            { //::osgWidget::EventInterface::unfocus
            
                typedef bool ( ::osgWidget::EventInterface::*unfocus_function_type )( ::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Border_wrapper::*default_unfocus_function_type )( ::osgWidget::WindowManager const * ) ;
                
                Border_exposer.def( 
                    "unfocus"
                    , unfocus_function_type(&::osgWidget::EventInterface::unfocus)
                    , default_unfocus_function_type(&Frame_wrapper::Border_wrapper::default_unfocus)
                    , ( bp::arg("arg0") ) );
            
            }
            { //::osgWidget::Widget::unmanaged
            
                typedef void ( ::osgWidget::Widget::*unmanaged_function_type )( ::osgWidget::WindowManager * ) ;
                typedef void ( Frame_wrapper::Border_wrapper::*default_unmanaged_function_type )( ::osgWidget::WindowManager * ) ;
                
                Border_exposer.def( 
                    "unmanaged"
                    , unmanaged_function_type(&::osgWidget::Widget::unmanaged)
                    , default_unmanaged_function_type(&Frame_wrapper::Border_wrapper::default_unmanaged)
                    , ( bp::arg("arg0") ) );
            
            }
            { //::osgWidget::Widget::unparented
            
                typedef void ( ::osgWidget::Widget::*unparented_function_type )( ::osgWidget::Window * ) ;
                typedef void ( Frame_wrapper::Border_wrapper::*default_unparented_function_type )( ::osgWidget::Window * ) ;
                
                Border_exposer.def( 
                    "unparented"
                    , unparented_function_type(&::osgWidget::Widget::unparented)
                    , default_unparented_function_type(&Frame_wrapper::Border_wrapper::default_unparented)
                    , ( bp::arg("arg0") ) );
            
            }
        }
        { //::osgWidget::Frame::Corner
            typedef bp::class_< Frame_wrapper::Corner_wrapper, bp::bases< osgWidget::Widget >, osg::ref_ptr< Frame_wrapper::Corner_wrapper >, boost::noncopyable > Corner_exposer_t;
            Corner_exposer_t Corner_exposer = Corner_exposer_t( "Corner", bp::init< bp::optional< osgWidget::Frame::CornerType, osgWidget::point_type, osgWidget::point_type > >(( bp::arg("arg0")=::osgWidget::Frame::CORNER_LOWER_LEFT, bp::arg("arg1")=0.0f, bp::arg("arg2")=0.0f )) );
            bp::scope Corner_scope( Corner_exposer );
            bp::implicitly_convertible< osgWidget::Frame::CornerType, osgWidget::Frame::Corner >();
            { //::osgWidget::Frame::Corner::className
            
                typedef char const * ( ::osgWidget::Frame::Corner::*className_function_type )(  ) const;
                typedef char const * ( Frame_wrapper::Corner_wrapper::*default_className_function_type )(  ) const;
                
                Corner_exposer.def( 
                    "className"
                    , className_function_type(&::osgWidget::Frame::Corner::className)
                    , default_className_function_type(&Frame_wrapper::Corner_wrapper::default_className) );
            
            }
            { //::osgWidget::Frame::Corner::clone
            
                typedef ::osg::Object * ( ::osgWidget::Frame::Corner::*clone_function_type )( ::osg::CopyOp const & ) const;
                typedef ::osg::Object * ( Frame_wrapper::Corner_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
                
                Corner_exposer.def( 
                    "clone"
                    , clone_function_type(&::osgWidget::Frame::Corner::clone)
                    , default_clone_function_type(&Frame_wrapper::Corner_wrapper::default_clone)
                    , ( bp::arg("copyop") )
                    , bp::return_value_policy< bp::reference_existing_object >() );
            
            }
            { //::osgWidget::Frame::Corner::cloneType
            
                typedef ::osg::Object * ( ::osgWidget::Frame::Corner::*cloneType_function_type )(  ) const;
                typedef ::osg::Object * ( Frame_wrapper::Corner_wrapper::*default_cloneType_function_type )(  ) const;
                
                Corner_exposer.def( 
                    "cloneType"
                    , cloneType_function_type(&::osgWidget::Frame::Corner::cloneType)
                    , default_cloneType_function_type(&Frame_wrapper::Corner_wrapper::default_cloneType)
                    , bp::return_value_policy< bp::reference_existing_object >() );
            
            }
            { //::osgWidget::Frame::Corner::getCornerType
            
                typedef ::osgWidget::Frame::CornerType ( ::osgWidget::Frame::Corner::*getCornerType_function_type )(  ) const;
                
                Corner_exposer.def( 
                    "getCornerType"
                    , getCornerType_function_type( &::osgWidget::Frame::Corner::getCornerType ) );
            
            }
            { //::osgWidget::Frame::Corner::isSameKindAs
            
                typedef bool ( ::osgWidget::Frame::Corner::*isSameKindAs_function_type )( ::osg::Object const * ) const;
                typedef bool ( Frame_wrapper::Corner_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
                
                Corner_exposer.def( 
                    "isSameKindAs"
                    , isSameKindAs_function_type(&::osgWidget::Frame::Corner::isSameKindAs)
                    , default_isSameKindAs_function_type(&Frame_wrapper::Corner_wrapper::default_isSameKindAs)
                    , ( bp::arg("obj") ) );
            
            }
            { //::osgWidget::Frame::Corner::libraryName
            
                typedef char const * ( ::osgWidget::Frame::Corner::*libraryName_function_type )(  ) const;
                typedef char const * ( Frame_wrapper::Corner_wrapper::*default_libraryName_function_type )(  ) const;
                
                Corner_exposer.def( 
                    "libraryName"
                    , libraryName_function_type(&::osgWidget::Frame::Corner::libraryName)
                    , default_libraryName_function_type(&Frame_wrapper::Corner_wrapper::default_libraryName) );
            
            }
            { //::osgWidget::Frame::Corner::mouseDrag
            
                typedef bool ( ::osgWidget::Frame::Corner::*mouseDrag_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Corner_wrapper::*default_mouseDrag_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                
                Corner_exposer.def( 
                    "mouseDrag"
                    , mouseDrag_function_type(&::osgWidget::Frame::Corner::mouseDrag)
                    , default_mouseDrag_function_type(&Frame_wrapper::Corner_wrapper::default_mouseDrag)
                    , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
            
            }
            { //::osgWidget::Frame::Corner::parented
            
                typedef void ( ::osgWidget::Frame::Corner::*parented_function_type )( ::osgWidget::Window * ) ;
                typedef void ( Frame_wrapper::Corner_wrapper::*default_parented_function_type )( ::osgWidget::Window * ) ;
                
                Corner_exposer.def( 
                    "parented"
                    , parented_function_type(&::osgWidget::Frame::Corner::parented)
                    , default_parented_function_type(&Frame_wrapper::Corner_wrapper::default_parented)
                    , ( bp::arg("arg0") ) );
            
            }
            { //::osgWidget::Frame::Corner::setCornerType
            
                typedef void ( ::osgWidget::Frame::Corner::*setCornerType_function_type )( ::osgWidget::Frame::CornerType ) ;
                
                Corner_exposer.def( 
                    "setCornerType"
                    , setCornerType_function_type( &::osgWidget::Frame::Corner::setCornerType )
                    , ( bp::arg("corner") ) );
            
            }
            { //::osgWidget::Frame::Corner::setCornerTypeAndName
            
                typedef void ( ::osgWidget::Frame::Corner::*setCornerTypeAndName_function_type )( ::osgWidget::Frame::CornerType ) ;
                
                Corner_exposer.def( 
                    "setCornerTypeAndName"
                    , setCornerTypeAndName_function_type( &::osgWidget::Frame::Corner::setCornerTypeAndName )
                    , ( bp::arg("corner") ) );
            
            }
            { //::osgWidget::EventInterface::focus
            
                typedef bool ( ::osgWidget::EventInterface::*focus_function_type )( ::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Corner_wrapper::*default_focus_function_type )( ::osgWidget::WindowManager const * ) ;
                
                Corner_exposer.def( 
                    "focus"
                    , focus_function_type(&::osgWidget::EventInterface::focus)
                    , default_focus_function_type(&Frame_wrapper::Corner_wrapper::default_focus)
                    , ( bp::arg("arg0") ) );
            
            }
            { //::osgWidget::EventInterface::keyDown
            
                typedef bool ( ::osgWidget::EventInterface::*keyDown_function_type )( int,int,::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Corner_wrapper::*default_keyDown_function_type )( int,int,::osgWidget::WindowManager const * ) ;
                
                Corner_exposer.def( 
                    "keyDown"
                    , keyDown_function_type(&::osgWidget::EventInterface::keyDown)
                    , default_keyDown_function_type(&Frame_wrapper::Corner_wrapper::default_keyDown)
                    , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
            
            }
            { //::osgWidget::EventInterface::keyUp
            
                typedef bool ( ::osgWidget::EventInterface::*keyUp_function_type )( int,int,::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Corner_wrapper::*default_keyUp_function_type )( int,int,::osgWidget::WindowManager const * ) ;
                
                Corner_exposer.def( 
                    "keyUp"
                    , keyUp_function_type(&::osgWidget::EventInterface::keyUp)
                    , default_keyUp_function_type(&Frame_wrapper::Corner_wrapper::default_keyUp)
                    , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
            
            }
            { //::osgWidget::Widget::managed
            
                typedef void ( ::osgWidget::Widget::*managed_function_type )( ::osgWidget::WindowManager * ) ;
                typedef void ( Frame_wrapper::Corner_wrapper::*default_managed_function_type )( ::osgWidget::WindowManager * ) ;
                
                Corner_exposer.def( 
                    "managed"
                    , managed_function_type(&::osgWidget::Widget::managed)
                    , default_managed_function_type(&Frame_wrapper::Corner_wrapper::default_managed)
                    , ( bp::arg("arg0") ) );
            
            }
            { //::osgWidget::EventInterface::mouseEnter
            
                typedef bool ( ::osgWidget::EventInterface::*mouseEnter_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Corner_wrapper::*default_mouseEnter_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                
                Corner_exposer.def( 
                    "mouseEnter"
                    , mouseEnter_function_type(&::osgWidget::EventInterface::mouseEnter)
                    , default_mouseEnter_function_type(&Frame_wrapper::Corner_wrapper::default_mouseEnter)
                    , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
            
            }
            { //::osgWidget::EventInterface::mouseLeave
            
                typedef bool ( ::osgWidget::EventInterface::*mouseLeave_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Corner_wrapper::*default_mouseLeave_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                
                Corner_exposer.def( 
                    "mouseLeave"
                    , mouseLeave_function_type(&::osgWidget::EventInterface::mouseLeave)
                    , default_mouseLeave_function_type(&Frame_wrapper::Corner_wrapper::default_mouseLeave)
                    , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
            
            }
            { //::osgWidget::EventInterface::mouseOver
            
                typedef bool ( ::osgWidget::EventInterface::*mouseOver_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Corner_wrapper::*default_mouseOver_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                
                Corner_exposer.def( 
                    "mouseOver"
                    , mouseOver_function_type(&::osgWidget::EventInterface::mouseOver)
                    , default_mouseOver_function_type(&Frame_wrapper::Corner_wrapper::default_mouseOver)
                    , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
            
            }
            { //::osgWidget::EventInterface::mousePush
            
                typedef bool ( ::osgWidget::EventInterface::*mousePush_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Corner_wrapper::*default_mousePush_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                
                Corner_exposer.def( 
                    "mousePush"
                    , mousePush_function_type(&::osgWidget::EventInterface::mousePush)
                    , default_mousePush_function_type(&Frame_wrapper::Corner_wrapper::default_mousePush)
                    , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
            
            }
            { //::osgWidget::EventInterface::mouseRelease
            
                typedef bool ( ::osgWidget::EventInterface::*mouseRelease_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Corner_wrapper::*default_mouseRelease_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                
                Corner_exposer.def( 
                    "mouseRelease"
                    , mouseRelease_function_type(&::osgWidget::EventInterface::mouseRelease)
                    , default_mouseRelease_function_type(&Frame_wrapper::Corner_wrapper::default_mouseRelease)
                    , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
            
            }
            { //::osgWidget::EventInterface::mouseScroll
            
                typedef bool ( ::osgWidget::EventInterface::*mouseScroll_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Corner_wrapper::*default_mouseScroll_function_type )( double,double,::osgWidget::WindowManager const * ) ;
                
                Corner_exposer.def( 
                    "mouseScroll"
                    , mouseScroll_function_type(&::osgWidget::EventInterface::mouseScroll)
                    , default_mouseScroll_function_type(&Frame_wrapper::Corner_wrapper::default_mouseScroll)
                    , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
            
            }
            { //::osgWidget::Widget::positioned
            
                typedef void ( ::osgWidget::Widget::*positioned_function_type )(  ) ;
                typedef void ( Frame_wrapper::Corner_wrapper::*default_positioned_function_type )(  ) ;
                
                Corner_exposer.def( 
                    "positioned"
                    , positioned_function_type(&::osgWidget::Widget::positioned)
                    , default_positioned_function_type(&Frame_wrapper::Corner_wrapper::default_positioned) );
            
            }
            { //::osgWidget::EventInterface::unfocus
            
                typedef bool ( ::osgWidget::EventInterface::*unfocus_function_type )( ::osgWidget::WindowManager const * ) ;
                typedef bool ( Frame_wrapper::Corner_wrapper::*default_unfocus_function_type )( ::osgWidget::WindowManager const * ) ;
                
                Corner_exposer.def( 
                    "unfocus"
                    , unfocus_function_type(&::osgWidget::EventInterface::unfocus)
                    , default_unfocus_function_type(&Frame_wrapper::Corner_wrapper::default_unfocus)
                    , ( bp::arg("arg0") ) );
            
            }
            { //::osgWidget::Widget::unmanaged
            
                typedef void ( ::osgWidget::Widget::*unmanaged_function_type )( ::osgWidget::WindowManager * ) ;
                typedef void ( Frame_wrapper::Corner_wrapper::*default_unmanaged_function_type )( ::osgWidget::WindowManager * ) ;
                
                Corner_exposer.def( 
                    "unmanaged"
                    , unmanaged_function_type(&::osgWidget::Widget::unmanaged)
                    , default_unmanaged_function_type(&Frame_wrapper::Corner_wrapper::default_unmanaged)
                    , ( bp::arg("arg0") ) );
            
            }
            { //::osgWidget::Widget::unparented
            
                typedef void ( ::osgWidget::Widget::*unparented_function_type )( ::osgWidget::Window * ) ;
                typedef void ( Frame_wrapper::Corner_wrapper::*default_unparented_function_type )( ::osgWidget::Window * ) ;
                
                Corner_exposer.def( 
                    "unparented"
                    , unparented_function_type(&::osgWidget::Widget::unparented)
                    , default_unparented_function_type(&Frame_wrapper::Corner_wrapper::default_unparented)
                    , ( bp::arg("arg0") ) );
            
            }
        }
        bp::implicitly_convertible< std::string const &, osgWidget::Frame >();
        { //::osgWidget::Frame::borderTypeToString
        
            typedef ::std::string ( *borderTypeToString_function_type )( ::osgWidget::Frame::BorderType );
            
            Frame_exposer.def( 
                "borderTypeToString"
                , borderTypeToString_function_type( &::osgWidget::Frame::borderTypeToString )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Frame::canMove
        
            typedef bool ( ::osgWidget::Frame::*canMove_function_type )(  ) const;
            
            Frame_exposer.def( 
                "canMove"
                , canMove_function_type( &::osgWidget::Frame::canMove ) );
        
        }
        { //::osgWidget::Frame::canResize
        
            typedef bool ( ::osgWidget::Frame::*canResize_function_type )(  ) const;
            
            Frame_exposer.def( 
                "canResize"
                , canResize_function_type( &::osgWidget::Frame::canResize ) );
        
        }
        { //::osgWidget::Frame::canTexture
        
            typedef bool ( ::osgWidget::Frame::*canTexture_function_type )(  ) const;
            
            Frame_exposer.def( 
                "canTexture"
                , canTexture_function_type( &::osgWidget::Frame::canTexture ) );
        
        }
        { //::osgWidget::Frame::className
        
            typedef char const * ( ::osgWidget::Frame::*className_function_type )(  ) const;
            typedef char const * ( Frame_wrapper::*default_className_function_type )(  ) const;
            
            Frame_exposer.def( 
                "className"
                , className_function_type(&::osgWidget::Frame::className)
                , default_className_function_type(&Frame_wrapper::default_className) );
        
        }
        { //::osgWidget::Frame::clone
        
            typedef ::osg::Object * ( ::osgWidget::Frame::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Frame_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Frame_exposer.def( 
                "clone"
                , clone_function_type(&::osgWidget::Frame::clone)
                , default_clone_function_type(&Frame_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgWidget::Frame::cloneType
        
            typedef ::osg::Object * ( ::osgWidget::Frame::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Frame_wrapper::*default_cloneType_function_type )(  ) const;
            
            Frame_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgWidget::Frame::cloneType)
                , default_cloneType_function_type(&Frame_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgWidget::Frame::cornerTypeToString
        
            typedef ::std::string ( *cornerTypeToString_function_type )( ::osgWidget::Frame::CornerType );
            
            Frame_exposer.def( 
                "cornerTypeToString"
                , cornerTypeToString_function_type( &::osgWidget::Frame::cornerTypeToString )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Frame::createSimpleFrame
        
            typedef ::osgWidget::Frame * ( *createSimpleFrame_function_type )( ::std::string const &,::osgWidget::point_type,::osgWidget::point_type,::osgWidget::point_type,::osgWidget::point_type,unsigned int,::osgWidget::Frame * );
            
            Frame_exposer.def( 
                "createSimpleFrame"
                , createSimpleFrame_function_type( &::osgWidget::Frame::createSimpleFrame )
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2"), bp::arg("arg3"), bp::arg("arg4"), bp::arg("arg5")=(unsigned int)(0), bp::arg("arg6")=bp::object() )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Frame::createSimpleFrame
        
            typedef void ( ::osgWidget::Frame::*createSimpleFrame_function_type )( ::osgWidget::point_type,::osgWidget::point_type,::osgWidget::point_type,::osgWidget::point_type ) ;
            
            Frame_exposer.def( 
                "createSimpleFrame"
                , createSimpleFrame_function_type( &::osgWidget::Frame::createSimpleFrame )
                , ( bp::arg("cw"), bp::arg("ch"), bp::arg("w"), bp::arg("h") ) );
        
        }
        { //::osgWidget::Frame::createSimpleFrameFromTheme
        
            typedef ::osgWidget::Frame * ( *createSimpleFrameFromTheme_function_type )( ::std::string const &,::osg::Image *,::osgWidget::point_type,::osgWidget::point_type,unsigned int,::osgWidget::Frame * );
            
            Frame_exposer.def( 
                "createSimpleFrameFromTheme"
                , createSimpleFrameFromTheme_function_type( &::osgWidget::Frame::createSimpleFrameFromTheme )
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2"), bp::arg("arg3"), bp::arg("arg4")=(unsigned int)(0), bp::arg("arg5")=bp::object() )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Frame::createSimpleFrameWithSingleTexture
        
            typedef ::osgWidget::Frame * ( *createSimpleFrameWithSingleTexture_function_type )( ::std::string const &,::osg::Image *,::osgWidget::point_type,::osgWidget::point_type,unsigned int,::osgWidget::Frame * );
            
            Frame_exposer.def( 
                "createSimpleFrameWithSingleTexture"
                , createSimpleFrameWithSingleTexture_function_type( &::osgWidget::Frame::createSimpleFrameWithSingleTexture )
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2"), bp::arg("arg3"), bp::arg("arg4")=(unsigned int)(0), bp::arg("arg5")=bp::object() )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Frame::createSimpleFrameWithSingleTexture
        
            typedef void ( ::osgWidget::Frame::*createSimpleFrameWithSingleTexture_function_type )( ::osg::Image *,::osgWidget::point_type,::osgWidget::point_type ) ;
            
            Frame_exposer.def( 
                "createSimpleFrameWithSingleTexture"
                , createSimpleFrameWithSingleTexture_function_type( &::osgWidget::Frame::createSimpleFrameWithSingleTexture )
                , ( bp::arg("image"), bp::arg("w"), bp::arg("h") ) );
        
        }
        { //::osgWidget::Frame::getBorder
        
            typedef ::osgWidget::Frame::Border * ( ::osgWidget::Frame::*getBorder_function_type )( ::osgWidget::Frame::BorderType ) ;
            
            Frame_exposer.def( 
                "getBorder"
                , getBorder_function_type( &::osgWidget::Frame::getBorder )
                , ( bp::arg("b") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Frame::getBorder
        
            typedef ::osgWidget::Frame::Border const * ( ::osgWidget::Frame::*getBorder_function_type )( ::osgWidget::Frame::BorderType ) const;
            
            Frame_exposer.def( 
                "getBorder"
                , getBorder_function_type( &::osgWidget::Frame::getBorder )
                , ( bp::arg("b") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Frame::getCorner
        
            typedef ::osgWidget::Frame::Corner * ( ::osgWidget::Frame::*getCorner_function_type )( ::osgWidget::Frame::CornerType ) ;
            
            Frame_exposer.def( 
                "getCorner"
                , getCorner_function_type( &::osgWidget::Frame::getCorner )
                , ( bp::arg("c") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Frame::getCorner
        
            typedef ::osgWidget::Frame::Corner const * ( ::osgWidget::Frame::*getCorner_function_type )( ::osgWidget::Frame::CornerType ) const;
            
            Frame_exposer.def( 
                "getCorner"
                , getCorner_function_type( &::osgWidget::Frame::getCorner )
                , ( bp::arg("c") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Frame::getEmbeddedWindow
        
            typedef ::osgWidget::Window::EmbeddedWindow * ( ::osgWidget::Frame::*getEmbeddedWindow_function_type )(  ) ;
            
            Frame_exposer.def( 
                "getEmbeddedWindow"
                , getEmbeddedWindow_function_type( &::osgWidget::Frame::getEmbeddedWindow )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Frame::getEmbeddedWindow
        
            typedef ::osgWidget::Window::EmbeddedWindow const * ( ::osgWidget::Frame::*getEmbeddedWindow_function_type )(  ) const;
            
            Frame_exposer.def( 
                "getEmbeddedWindow"
                , getEmbeddedWindow_function_type( &::osgWidget::Frame::getEmbeddedWindow )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgWidget::Frame::getFlags
        
            typedef unsigned int ( ::osgWidget::Frame::*getFlags_function_type )(  ) const;
            
            Frame_exposer.def( 
                "getFlags"
                , getFlags_function_type( &::osgWidget::Frame::getFlags ) );
        
        }
        { //::osgWidget::Frame::isSameKindAs
        
            typedef bool ( ::osgWidget::Frame::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Frame_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Frame_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgWidget::Frame::isSameKindAs)
                , default_isSameKindAs_function_type(&Frame_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgWidget::Frame::libraryName
        
            typedef char const * ( ::osgWidget::Frame::*libraryName_function_type )(  ) const;
            typedef char const * ( Frame_wrapper::*default_libraryName_function_type )(  ) const;
            
            Frame_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgWidget::Frame::libraryName)
                , default_libraryName_function_type(&Frame_wrapper::default_libraryName) );
        
        }
        { //::osgWidget::Frame::resizeFrame
        
            typedef bool ( ::osgWidget::Frame::*resizeFrame_function_type )( ::osgWidget::point_type,::osgWidget::point_type ) ;
            
            Frame_exposer.def( 
                "resizeFrame"
                , resizeFrame_function_type( &::osgWidget::Frame::resizeFrame )
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::Frame::setFlags
        
            typedef void ( ::osgWidget::Frame::*setFlags_function_type )( unsigned int ) ;
            
            Frame_exposer.def( 
                "setFlags"
                , setFlags_function_type( &::osgWidget::Frame::setFlags )
                , ( bp::arg("flags") ) );
        
        }
        { //::osgWidget::Frame::setWindow
        
            typedef bool ( ::osgWidget::Frame::*setWindow_function_type )( ::osgWidget::Window * ) ;
            
            Frame_exposer.def( 
                "setWindow"
                , setWindow_function_type( &::osgWidget::Frame::setWindow )
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Table::addWidget
        
            typedef bool ( ::osgWidget::Table::*addWidget_function_type )( ::osgWidget::Widget * ) ;
            typedef bool ( Frame_wrapper::*default_addWidget_function_type )( ::osgWidget::Widget * ) ;
            
            Frame_exposer.def( 
                "addWidget"
                , addWidget_function_type(&::osgWidget::Table::addWidget)
                , default_addWidget_function_type(&Frame_wrapper::default_addWidget)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Table::addWidget
        
            typedef bool ( ::osgWidget::Table::*addWidget_function_type )( ::osgWidget::Widget *,unsigned int,unsigned int ) ;
            typedef bool ( Frame_wrapper::*default_addWidget_function_type )( ::osgWidget::Widget *,unsigned int,unsigned int ) ;
            
            Frame_exposer.def( 
                "addWidget"
                , addWidget_function_type(&::osgWidget::Table::addWidget)
                , default_addWidget_function_type(&Frame_wrapper::default_addWidget)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::focus
        
            typedef bool ( ::osgWidget::EventInterface::*focus_function_type )( ::osgWidget::WindowManager const * ) ;
            typedef bool ( Frame_wrapper::*default_focus_function_type )( ::osgWidget::WindowManager const * ) ;
            
            Frame_exposer.def( 
                "focus"
                , focus_function_type(&::osgWidget::EventInterface::focus)
                , default_focus_function_type(&Frame_wrapper::default_focus)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Window::insertWidget
        
            typedef bool ( ::osgWidget::Window::*insertWidget_function_type )( ::osgWidget::Widget *,unsigned int ) ;
            typedef bool ( Frame_wrapper::*default_insertWidget_function_type )( ::osgWidget::Widget *,unsigned int ) ;
            
            Frame_exposer.def( 
                "insertWidget"
                , insertWidget_function_type(&::osgWidget::Window::insertWidget)
                , default_insertWidget_function_type(&Frame_wrapper::default_insertWidget)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::EventInterface::keyDown
        
            typedef bool ( ::osgWidget::EventInterface::*keyDown_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            typedef bool ( Frame_wrapper::*default_keyDown_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            
            Frame_exposer.def( 
                "keyDown"
                , keyDown_function_type(&::osgWidget::EventInterface::keyDown)
                , default_keyDown_function_type(&Frame_wrapper::default_keyDown)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::keyUp
        
            typedef bool ( ::osgWidget::EventInterface::*keyUp_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            typedef bool ( Frame_wrapper::*default_keyUp_function_type )( int,int,::osgWidget::WindowManager const * ) ;
            
            Frame_exposer.def( 
                "keyUp"
                , keyUp_function_type(&::osgWidget::EventInterface::keyUp)
                , default_keyUp_function_type(&Frame_wrapper::default_keyUp)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::Window::managed
        
            typedef void ( ::osgWidget::Window::*managed_function_type )( ::osgWidget::WindowManager * ) ;
            typedef void ( Frame_wrapper::*default_managed_function_type )( ::osgWidget::WindowManager * ) ;
            
            Frame_exposer.def( 
                "managed"
                , managed_function_type(&::osgWidget::Window::managed)
                , default_managed_function_type(&Frame_wrapper::default_managed)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::EventInterface::mouseDrag
        
            typedef bool ( ::osgWidget::EventInterface::*mouseDrag_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Frame_wrapper::*default_mouseDrag_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Frame_exposer.def( 
                "mouseDrag"
                , mouseDrag_function_type(&::osgWidget::EventInterface::mouseDrag)
                , default_mouseDrag_function_type(&Frame_wrapper::default_mouseDrag)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseEnter
        
            typedef bool ( ::osgWidget::EventInterface::*mouseEnter_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Frame_wrapper::*default_mouseEnter_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Frame_exposer.def( 
                "mouseEnter"
                , mouseEnter_function_type(&::osgWidget::EventInterface::mouseEnter)
                , default_mouseEnter_function_type(&Frame_wrapper::default_mouseEnter)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseLeave
        
            typedef bool ( ::osgWidget::EventInterface::*mouseLeave_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Frame_wrapper::*default_mouseLeave_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Frame_exposer.def( 
                "mouseLeave"
                , mouseLeave_function_type(&::osgWidget::EventInterface::mouseLeave)
                , default_mouseLeave_function_type(&Frame_wrapper::default_mouseLeave)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseOver
        
            typedef bool ( ::osgWidget::EventInterface::*mouseOver_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Frame_wrapper::*default_mouseOver_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Frame_exposer.def( 
                "mouseOver"
                , mouseOver_function_type(&::osgWidget::EventInterface::mouseOver)
                , default_mouseOver_function_type(&Frame_wrapper::default_mouseOver)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mousePush
        
            typedef bool ( ::osgWidget::EventInterface::*mousePush_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Frame_wrapper::*default_mousePush_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Frame_exposer.def( 
                "mousePush"
                , mousePush_function_type(&::osgWidget::EventInterface::mousePush)
                , default_mousePush_function_type(&Frame_wrapper::default_mousePush)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseRelease
        
            typedef bool ( ::osgWidget::EventInterface::*mouseRelease_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Frame_wrapper::*default_mouseRelease_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Frame_exposer.def( 
                "mouseRelease"
                , mouseRelease_function_type(&::osgWidget::EventInterface::mouseRelease)
                , default_mouseRelease_function_type(&Frame_wrapper::default_mouseRelease)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::EventInterface::mouseScroll
        
            typedef bool ( ::osgWidget::EventInterface::*mouseScroll_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            typedef bool ( Frame_wrapper::*default_mouseScroll_function_type )( double,double,::osgWidget::WindowManager const * ) ;
            
            Frame_exposer.def( 
                "mouseScroll"
                , mouseScroll_function_type(&::osgWidget::EventInterface::mouseScroll)
                , default_mouseScroll_function_type(&Frame_wrapper::default_mouseScroll)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgWidget::Window::removeWidget
        
            typedef bool ( ::osgWidget::Window::*removeWidget_function_type )( ::osgWidget::Widget * ) ;
            typedef bool ( Frame_wrapper::*default_removeWidget_function_type )( ::osgWidget::Widget * ) ;
            
            Frame_exposer.def( 
                "removeWidget"
                , removeWidget_function_type(&::osgWidget::Window::removeWidget)
                , default_removeWidget_function_type(&Frame_wrapper::default_removeWidget)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Window::replaceWidget
        
            typedef bool ( ::osgWidget::Window::*replaceWidget_function_type )( ::osgWidget::Widget *,::osgWidget::Widget * ) ;
            typedef bool ( Frame_wrapper::*default_replaceWidget_function_type )( ::osgWidget::Widget *,::osgWidget::Widget * ) ;
            
            Frame_exposer.def( 
                "replaceWidget"
                , replaceWidget_function_type(&::osgWidget::Window::replaceWidget)
                , default_replaceWidget_function_type(&Frame_wrapper::default_replaceWidget)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgWidget::EventInterface::unfocus
        
            typedef bool ( ::osgWidget::EventInterface::*unfocus_function_type )( ::osgWidget::WindowManager const * ) ;
            typedef bool ( Frame_wrapper::*default_unfocus_function_type )( ::osgWidget::WindowManager const * ) ;
            
            Frame_exposer.def( 
                "unfocus"
                , unfocus_function_type(&::osgWidget::EventInterface::unfocus)
                , default_unfocus_function_type(&Frame_wrapper::default_unfocus)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Window::unmanaged
        
            typedef void ( ::osgWidget::Window::*unmanaged_function_type )( ::osgWidget::WindowManager * ) ;
            typedef void ( Frame_wrapper::*default_unmanaged_function_type )( ::osgWidget::WindowManager * ) ;
            
            Frame_exposer.def( 
                "unmanaged"
                , unmanaged_function_type(&::osgWidget::Window::unmanaged)
                , default_unmanaged_function_type(&Frame_wrapper::default_unmanaged)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::Window::update
        
            typedef void ( ::osgWidget::Window::*update_function_type )(  ) ;
            typedef void ( Frame_wrapper::*default_update_function_type )(  ) ;
            
            Frame_exposer.def( 
                "update"
                , update_function_type(&::osgWidget::Window::update)
                , default_update_function_type(&Frame_wrapper::default_update) );
        
        }
        Frame_exposer.staticmethod( "borderTypeToString" );
        Frame_exposer.staticmethod( "cornerTypeToString" );
        Frame_exposer.staticmethod( "createSimpleFrame" );
        Frame_exposer.staticmethod( "createSimpleFrameFromTheme" );
        Frame_exposer.staticmethod( "createSimpleFrameWithSingleTexture" );
    }

}
