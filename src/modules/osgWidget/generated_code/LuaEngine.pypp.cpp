// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgWidget.h"
#include "wrap_referenced.h"
#include "LuaEngine.pypp.hpp"

namespace bp = boost::python;

struct LuaEngine_wrapper : osgWidget::LuaEngine, bp::wrapper< osgWidget::LuaEngine > {

    LuaEngine_wrapper(::osgWidget::WindowManager * arg0=0 )
    : osgWidget::LuaEngine( boost::python::ptr(arg0) )
      , bp::wrapper< osgWidget::LuaEngine >(){
        // constructor
    
    }

    virtual bool close(  ) {
        if( bp::override func_close = this->get_override( "close" ) )
            return func_close(  );
        else{
            return this->osgWidget::LuaEngine::close(  );
        }
    }
    
    bool default_close(  ) {
        return osgWidget::LuaEngine::close( );
    }

    virtual bool eval( ::std::string const & arg0 ) {
        if( bp::override func_eval = this->get_override( "eval" ) )
            return func_eval( arg0 );
        else{
            return this->osgWidget::LuaEngine::eval( arg0 );
        }
    }
    
    bool default_eval( ::std::string const & arg0 ) {
        return osgWidget::LuaEngine::eval( arg0 );
    }

    virtual bool initialize(  ) {
        if( bp::override func_initialize = this->get_override( "initialize" ) )
            return func_initialize(  );
        else{
            return this->osgWidget::LuaEngine::initialize(  );
        }
    }
    
    bool default_initialize(  ) {
        return osgWidget::LuaEngine::initialize( );
    }

    virtual bool runFile( ::std::string const & arg0 ) {
        if( bp::override func_runFile = this->get_override( "runFile" ) )
            return func_runFile( arg0 );
        else{
            return this->osgWidget::LuaEngine::runFile( arg0 );
        }
    }
    
    bool default_runFile( ::std::string const & arg0 ) {
        return osgWidget::LuaEngine::runFile( arg0 );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_LuaEngine_class(){

    { //::osgWidget::LuaEngine
        typedef bp::class_< LuaEngine_wrapper, bp::bases< osgWidget::ScriptEngine >, osg::ref_ptr< LuaEngine_wrapper >, boost::noncopyable > LuaEngine_exposer_t;
        LuaEngine_exposer_t LuaEngine_exposer = LuaEngine_exposer_t( "LuaEngine", bp::init< bp::optional< osgWidget::WindowManager * > >(( bp::arg("arg0")=bp::object() )) );
        bp::scope LuaEngine_scope( LuaEngine_exposer );
        bp::implicitly_convertible< osgWidget::WindowManager *, osgWidget::LuaEngine >();
        { //::osgWidget::LuaEngine::close
        
            typedef bool ( ::osgWidget::LuaEngine::*close_function_type )(  ) ;
            typedef bool ( LuaEngine_wrapper::*default_close_function_type )(  ) ;
            
            LuaEngine_exposer.def( 
                "close"
                , close_function_type(&::osgWidget::LuaEngine::close)
                , default_close_function_type(&LuaEngine_wrapper::default_close) );
        
        }
        { //::osgWidget::LuaEngine::eval
        
            typedef bool ( ::osgWidget::LuaEngine::*eval_function_type )( ::std::string const & ) ;
            typedef bool ( LuaEngine_wrapper::*default_eval_function_type )( ::std::string const & ) ;
            
            LuaEngine_exposer.def( 
                "eval"
                , eval_function_type(&::osgWidget::LuaEngine::eval)
                , default_eval_function_type(&LuaEngine_wrapper::default_eval)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::LuaEngine::initialize
        
            typedef bool ( ::osgWidget::LuaEngine::*initialize_function_type )(  ) ;
            typedef bool ( LuaEngine_wrapper::*default_initialize_function_type )(  ) ;
            
            LuaEngine_exposer.def( 
                "initialize"
                , initialize_function_type(&::osgWidget::LuaEngine::initialize)
                , default_initialize_function_type(&LuaEngine_wrapper::default_initialize) );
        
        }
        { //::osgWidget::LuaEngine::runFile
        
            typedef bool ( ::osgWidget::LuaEngine::*runFile_function_type )( ::std::string const & ) ;
            typedef bool ( LuaEngine_wrapper::*default_runFile_function_type )( ::std::string const & ) ;
            
            LuaEngine_exposer.def( 
                "runFile"
                , runFile_function_type(&::osgWidget::LuaEngine::runFile)
                , default_runFile_function_type(&LuaEngine_wrapper::default_runFile)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgWidget::ScriptEngine::getLastErrorText
        
            typedef ::std::string const & ( ::osgWidget::ScriptEngine::*getLastErrorText_function_type )(  ) const;
            
            LuaEngine_exposer.def( 
                "getLastErrorText"
                , getLastErrorText_function_type(&::osgWidget::ScriptEngine::getLastErrorText)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
    }

}
