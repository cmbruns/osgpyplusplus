// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgViewer.h"
#include "wrap_referenced.h"
#include "Keystone.pypp.hpp"

namespace bp = boost::python;

struct Keystone_wrapper : osgViewer::Keystone, bp::wrapper< osgViewer::Keystone > {

    Keystone_wrapper( )
    : osgViewer::Keystone( )
      , bp::wrapper< osgViewer::Keystone >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgViewer::Keystone::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgViewer::Keystone::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgViewer::Keystone::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgViewer::Keystone::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgViewer::Keystone::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgViewer::Keystone::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgViewer::Keystone::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgViewer::Keystone::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgViewer::Keystone::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgViewer::Keystone::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_Keystone_class(){

    { //::osgViewer::Keystone
        typedef bp::class_< Keystone_wrapper, bp::bases< ::osg::Object >, osg::ref_ptr< Keystone_wrapper >, boost::noncopyable > Keystone_exposer_t;
        Keystone_exposer_t Keystone_exposer = Keystone_exposer_t( "Keystone", bp::no_init );
        bp::scope Keystone_scope( Keystone_exposer );
        Keystone_exposer.def( bp::init< >() );
        { //::osgViewer::Keystone::className
        
            typedef char const * ( ::osgViewer::Keystone::*className_function_type )(  ) const;
            typedef char const * ( Keystone_wrapper::*default_className_function_type )(  ) const;
            
            Keystone_exposer.def( 
                "className"
                , className_function_type(&::osgViewer::Keystone::className)
                , default_className_function_type(&Keystone_wrapper::default_className) );
        
        }
        { //::osgViewer::Keystone::clone
        
            typedef ::osg::Object * ( ::osgViewer::Keystone::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Keystone_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Keystone_exposer.def( 
                "clone"
                , clone_function_type(&::osgViewer::Keystone::clone)
                , default_clone_function_type(&Keystone_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgViewer::Keystone::cloneType
        
            typedef ::osg::Object * ( ::osgViewer::Keystone::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Keystone_wrapper::*default_cloneType_function_type )(  ) const;
            
            Keystone_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgViewer::Keystone::cloneType)
                , default_cloneType_function_type(&Keystone_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgViewer::Keystone::compute3DPositions
        
            typedef void ( ::osgViewer::Keystone::*compute3DPositions_function_type )( ::osg::DisplaySettings *,::osg::Vec3 &,::osg::Vec3 &,::osg::Vec3 &,::osg::Vec3 & ) const;
            
            Keystone_exposer.def( 
                "compute3DPositions"
                , compute3DPositions_function_type( &::osgViewer::Keystone::compute3DPositions )
                , ( bp::arg("ds"), bp::arg("tl"), bp::arg("tr"), bp::arg("br"), bp::arg("bl") ) );
        
        }
        { //::osgViewer::Keystone::createGrid
        
            typedef ::osg::Node * ( ::osgViewer::Keystone::*createGrid_function_type )(  ) ;
            
            Keystone_exposer.def( 
                "createGrid"
                , createGrid_function_type( &::osgViewer::Keystone::createGrid )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::Keystone::createKeystoneDistortionMesh
        
            typedef ::osg::Geode * ( ::osgViewer::Keystone::*createKeystoneDistortionMesh_function_type )(  ) ;
            
            Keystone_exposer.def( 
                "createKeystoneDistortionMesh"
                , createKeystoneDistortionMesh_function_type( &::osgViewer::Keystone::createKeystoneDistortionMesh )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::Keystone::getBottomLeft
        
            typedef ::osg::Vec2d & ( ::osgViewer::Keystone::*getBottomLeft_function_type )(  ) ;
            
            Keystone_exposer.def( 
                "getBottomLeft"
                , getBottomLeft_function_type( &::osgViewer::Keystone::getBottomLeft )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::Keystone::getBottomLeft
        
            typedef ::osg::Vec2d const & ( ::osgViewer::Keystone::*getBottomLeft_function_type )(  ) const;
            
            Keystone_exposer.def( 
                "getBottomLeft"
                , getBottomLeft_function_type( &::osgViewer::Keystone::getBottomLeft )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::Keystone::getBottomRight
        
            typedef ::osg::Vec2d & ( ::osgViewer::Keystone::*getBottomRight_function_type )(  ) ;
            
            Keystone_exposer.def( 
                "getBottomRight"
                , getBottomRight_function_type( &::osgViewer::Keystone::getBottomRight )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::Keystone::getBottomRight
        
            typedef ::osg::Vec2d const & ( ::osgViewer::Keystone::*getBottomRight_function_type )(  ) const;
            
            Keystone_exposer.def( 
                "getBottomRight"
                , getBottomRight_function_type( &::osgViewer::Keystone::getBottomRight )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::Keystone::getGridColor
        
            typedef ::osg::Vec4 & ( ::osgViewer::Keystone::*getGridColor_function_type )(  ) ;
            
            Keystone_exposer.def( 
                "getGridColor"
                , getGridColor_function_type( &::osgViewer::Keystone::getGridColor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::Keystone::getGridColor
        
            typedef ::osg::Vec4 const & ( ::osgViewer::Keystone::*getGridColor_function_type )(  ) const;
            
            Keystone_exposer.def( 
                "getGridColor"
                , getGridColor_function_type( &::osgViewer::Keystone::getGridColor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::Keystone::getKeystoneEditingEnabled
        
            typedef bool ( ::osgViewer::Keystone::*getKeystoneEditingEnabled_function_type )(  ) const;
            
            Keystone_exposer.def( 
                "getKeystoneEditingEnabled"
                , getKeystoneEditingEnabled_function_type( &::osgViewer::Keystone::getKeystoneEditingEnabled ) );
        
        }
        { //::osgViewer::Keystone::getTopLeft
        
            typedef ::osg::Vec2d & ( ::osgViewer::Keystone::*getTopLeft_function_type )(  ) ;
            
            Keystone_exposer.def( 
                "getTopLeft"
                , getTopLeft_function_type( &::osgViewer::Keystone::getTopLeft )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::Keystone::getTopLeft
        
            typedef ::osg::Vec2d const & ( ::osgViewer::Keystone::*getTopLeft_function_type )(  ) const;
            
            Keystone_exposer.def( 
                "getTopLeft"
                , getTopLeft_function_type( &::osgViewer::Keystone::getTopLeft )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::Keystone::getTopRight
        
            typedef ::osg::Vec2d & ( ::osgViewer::Keystone::*getTopRight_function_type )(  ) ;
            
            Keystone_exposer.def( 
                "getTopRight"
                , getTopRight_function_type( &::osgViewer::Keystone::getTopRight )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::Keystone::getTopRight
        
            typedef ::osg::Vec2d const & ( ::osgViewer::Keystone::*getTopRight_function_type )(  ) const;
            
            Keystone_exposer.def( 
                "getTopRight"
                , getTopRight_function_type( &::osgViewer::Keystone::getTopRight )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::Keystone::isSameKindAs
        
            typedef bool ( ::osgViewer::Keystone::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Keystone_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Keystone_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgViewer::Keystone::isSameKindAs)
                , default_isSameKindAs_function_type(&Keystone_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgViewer::Keystone::libraryName
        
            typedef char const * ( ::osgViewer::Keystone::*libraryName_function_type )(  ) const;
            typedef char const * ( Keystone_wrapper::*default_libraryName_function_type )(  ) const;
            
            Keystone_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgViewer::Keystone::libraryName)
                , default_libraryName_function_type(&Keystone_wrapper::default_libraryName) );
        
        }
        { //::osgViewer::Keystone::loadKeystoneFiles
        
            typedef bool ( *loadKeystoneFiles_function_type )( ::osg::DisplaySettings * );
            
            Keystone_exposer.def( 
                "loadKeystoneFiles"
                , loadKeystoneFiles_function_type( &::osgViewer::Keystone::loadKeystoneFiles )
                , ( bp::arg("ds") ) );
        
        }
        { //::osgViewer::Keystone::reset
        
            typedef void ( ::osgViewer::Keystone::*reset_function_type )(  ) ;
            
            Keystone_exposer.def( 
                "reset"
                , reset_function_type( &::osgViewer::Keystone::reset ) );
        
        }
        { //::osgViewer::Keystone::setBottomLeft
        
            typedef void ( ::osgViewer::Keystone::*setBottomLeft_function_type )( ::osg::Vec2d const & ) ;
            
            Keystone_exposer.def( 
                "setBottomLeft"
                , setBottomLeft_function_type( &::osgViewer::Keystone::setBottomLeft )
                , ( bp::arg("v") ) );
        
        }
        { //::osgViewer::Keystone::setBottomRight
        
            typedef void ( ::osgViewer::Keystone::*setBottomRight_function_type )( ::osg::Vec2d const & ) ;
            
            Keystone_exposer.def( 
                "setBottomRight"
                , setBottomRight_function_type( &::osgViewer::Keystone::setBottomRight )
                , ( bp::arg("v") ) );
        
        }
        { //::osgViewer::Keystone::setGridColor
        
            typedef void ( ::osgViewer::Keystone::*setGridColor_function_type )( ::osg::Vec4 const & ) ;
            
            Keystone_exposer.def( 
                "setGridColor"
                , setGridColor_function_type( &::osgViewer::Keystone::setGridColor )
                , ( bp::arg("color") ) );
        
        }
        { //::osgViewer::Keystone::setKeystoneEditingEnabled
        
            typedef void ( ::osgViewer::Keystone::*setKeystoneEditingEnabled_function_type )( bool ) ;
            
            Keystone_exposer.def( 
                "setKeystoneEditingEnabled"
                , setKeystoneEditingEnabled_function_type( &::osgViewer::Keystone::setKeystoneEditingEnabled )
                , ( bp::arg("flag") ) );
        
        }
        { //::osgViewer::Keystone::setTopLeft
        
            typedef void ( ::osgViewer::Keystone::*setTopLeft_function_type )( ::osg::Vec2d const & ) ;
            
            Keystone_exposer.def( 
                "setTopLeft"
                , setTopLeft_function_type( &::osgViewer::Keystone::setTopLeft )
                , ( bp::arg("v") ) );
        
        }
        { //::osgViewer::Keystone::setTopRight
        
            typedef void ( ::osgViewer::Keystone::*setTopRight_function_type )( ::osg::Vec2d const & ) ;
            
            Keystone_exposer.def( 
                "setTopRight"
                , setTopRight_function_type( &::osgViewer::Keystone::setTopRight )
                , ( bp::arg("v") ) );
        
        }
        { //::osgViewer::Keystone::writeToFile
        
            typedef bool ( ::osgViewer::Keystone::*writeToFile_function_type )(  ) ;
            
            Keystone_exposer.def( 
                "writeToFile"
                , writeToFile_function_type( &::osgViewer::Keystone::writeToFile ) );
        
        }
        Keystone_exposer.staticmethod( "loadKeystoneFiles" );
    }

}
