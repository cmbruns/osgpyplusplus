// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "wrap_osgViewer.h"
#include "wrap_referenced.h"
#include "DepthPartitionSettings.pypp.hpp"

namespace bp = boost::python;

struct DepthPartitionSettings_wrapper : osgViewer::DepthPartitionSettings, bp::wrapper< osgViewer::DepthPartitionSettings > {

    DepthPartitionSettings_wrapper(::osgViewer::DepthPartitionSettings::DepthMode mode=::osgViewer::DepthPartitionSettings::BOUNDING_VOLUME )
    : osgViewer::DepthPartitionSettings( mode )
      , bp::wrapper< osgViewer::DepthPartitionSettings >(){
        // constructor
    
    }

    virtual bool getDepthRange( ::osg::View & view, unsigned int partition, double & zNear, double & zFar ) {
        namespace bpl = boost::python;
        if( bpl::override func_getDepthRange = this->get_override( "getDepthRange" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_getDepthRange.ptr(), view, partition );
            zNear = boost::python::extract< double >( pyplus_conv::get_out_argument( py_result, "zNear" ) );
            zFar = boost::python::extract< double >( pyplus_conv::get_out_argument( py_result, "zFar" ) );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return osgViewer::DepthPartitionSettings::getDepthRange( boost::ref(view), partition, zNear, zFar );
        }
    }
    
    static boost::python::tuple default_getDepthRange( ::osgViewer::DepthPartitionSettings & inst, ::osg::View & view, unsigned int partition ){
        double zNear2;
        double zFar2;
        bool result;
        if( dynamic_cast< DepthPartitionSettings_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::osgViewer::DepthPartitionSettings::getDepthRange(view, partition, zNear2, zFar2);
        }
        else{
            result = inst.getDepthRange(view, partition, zNear2, zFar2);
        }
        return bp::make_tuple( result, zNear2, zFar2 );
    }

};

void register_DepthPartitionSettings_class(){

    { //::osgViewer::DepthPartitionSettings
        typedef bp::class_< DepthPartitionSettings_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< DepthPartitionSettings_wrapper >, boost::noncopyable > DepthPartitionSettings_exposer_t;
        DepthPartitionSettings_exposer_t DepthPartitionSettings_exposer = DepthPartitionSettings_exposer_t( "DepthPartitionSettings", bp::init< bp::optional< osgViewer::DepthPartitionSettings::DepthMode > >(( bp::arg("mode")=(long)(::osgViewer::DepthPartitionSettings::BOUNDING_VOLUME) )) );
        bp::scope DepthPartitionSettings_scope( DepthPartitionSettings_exposer );
        bp::enum_< osgViewer::DepthPartitionSettings::DepthMode>("DepthMode")
            .value("FIXED_RANGE", osgViewer::DepthPartitionSettings::FIXED_RANGE)
            .value("BOUNDING_VOLUME", osgViewer::DepthPartitionSettings::BOUNDING_VOLUME)
            .export_values()
            ;
        bp::implicitly_convertible< osgViewer::DepthPartitionSettings::DepthMode, osgViewer::DepthPartitionSettings >();
        { //::osgViewer::DepthPartitionSettings::getDepthRange
        
            typedef boost::python::tuple ( *default_getDepthRange_function_type )( ::osgViewer::DepthPartitionSettings &,::osg::View &,unsigned int );
            
            DepthPartitionSettings_exposer.def( 
                "getDepthRange"
                , default_getDepthRange_function_type( &DepthPartitionSettings_wrapper::default_getDepthRange )
                , ( bp::arg("inst"), bp::arg("view"), bp::arg("partition") ) );
        
        }
        DepthPartitionSettings_exposer.def_readwrite( "_mode", &osgViewer::DepthPartitionSettings::_mode );
        DepthPartitionSettings_exposer.def_readwrite( "_zFar", &osgViewer::DepthPartitionSettings::_zFar );
        DepthPartitionSettings_exposer.def_readwrite( "_zMid", &osgViewer::DepthPartitionSettings::_zMid );
        DepthPartitionSettings_exposer.def_readwrite( "_zNear", &osgViewer::DepthPartitionSettings::_zNear );
    }

}
