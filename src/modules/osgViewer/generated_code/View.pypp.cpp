// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgViewer.h"
#include "wrap_referenced.h"
#include "View.pypp.hpp"

namespace bp = boost::python;

struct View_wrapper : osgViewer::View, bp::wrapper< osgViewer::View > {

    View_wrapper( )
    : osgViewer::View( )
      , bp::wrapper< osgViewer::View >(){
        // null constructor
    
    }

    virtual ::osg::View * asView(  ) {
        if( bp::override func_asView = this->get_override( "asView" ) )
            return func_asView(  );
        else{
            return this->osgViewer::View::asView(  );
        }
    }
    
    ::osg::View * default_asView(  ) {
        return osgViewer::View::asView( );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgViewer::View::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgViewer::View::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgViewer::View::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgViewer::View::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgViewer::View::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgViewer::View::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgViewer::View::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgViewer::View::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgViewer::View::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgViewer::View::libraryName( );
    }

    virtual void requestContinuousUpdate( bool needed=true ) {
        if( bp::override func_requestContinuousUpdate = this->get_override( "requestContinuousUpdate" ) )
            func_requestContinuousUpdate( needed );
        else{
            this->osgViewer::View::requestContinuousUpdate( needed );
        }
    }
    
    void default_requestContinuousUpdate( bool needed=true ) {
        osgViewer::View::requestContinuousUpdate( needed );
    }

    virtual void requestRedraw(  ) {
        if( bp::override func_requestRedraw = this->get_override( "requestRedraw" ) )
            func_requestRedraw(  );
        else{
            this->osgViewer::View::requestRedraw(  );
        }
    }
    
    void default_requestRedraw(  ) {
        osgViewer::View::requestRedraw( );
    }

    virtual void requestWarpPointer( float x, float y ) {
        if( bp::override func_requestWarpPointer = this->get_override( "requestWarpPointer" ) )
            func_requestWarpPointer( x, y );
        else{
            this->osgViewer::View::requestWarpPointer( x, y );
        }
    }
    
    void default_requestWarpPointer( float x, float y ) {
        osgViewer::View::requestWarpPointer( x, y );
    }

    virtual void setSceneData( ::osg::Node * node ) {
        if( bp::override func_setSceneData = this->get_override( "setSceneData" ) )
            func_setSceneData( boost::python::ptr(node) );
        else{
            this->osgViewer::View::setSceneData( boost::python::ptr(node) );
        }
    }
    
    void default_setSceneData( ::osg::Node * node ) {
        osgViewer::View::setSceneData( boost::python::ptr(node) );
    }

    virtual void setStartTick( ::osg::Timer_t tick ) {
        if( bp::override func_setStartTick = this->get_override( "setStartTick" ) )
            func_setStartTick( tick );
        else{
            this->osgViewer::View::setStartTick( tick );
        }
    }
    
    void default_setStartTick( ::osg::Timer_t tick ) {
        osgViewer::View::setStartTick( tick );
    }

    virtual void take( ::osg::View & rhs ) {
        if( bp::override func_take = this->get_override( "take" ) )
            func_take( boost::ref(rhs) );
        else{
            this->osgViewer::View::take( boost::ref(rhs) );
        }
    }
    
    void default_take( ::osg::View & rhs ) {
        osgViewer::View::take( boost::ref(rhs) );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_View_class(){

    { //::osgViewer::View
        typedef bp::class_< View_wrapper, bp::bases< ::osg::View, ::osgGA::GUIActionAdapter >, osg::ref_ptr< ::osgViewer::View >, boost::noncopyable > View_exposer_t;
        View_exposer_t View_exposer = View_exposer_t( "View", "\n View holds a single view on a scene, this view may be composed of one or more slave cameras.\n", bp::no_init );
        bp::scope View_scope( View_exposer );
        bp::class_< osgViewer::View::StereoSlaveCallback, bp::bases< ::osg::View::Slave::UpdateSlaveCallback >, osg::ref_ptr< ::osgViewer::View::StereoSlaveCallback >, boost::noncopyable >( "StereoSlaveCallback", bp::no_init )    
            .def_readwrite( "_ds", &osgViewer::View::StereoSlaveCallback::_ds )    
            .def_readwrite( "_eyeScale", &osgViewer::View::StereoSlaveCallback::_eyeScale );
        View_exposer.def( bp::init< >("\n View holds a single view on a scene, this view may be composed of one or more slave cameras.\n") );
        { //::osgViewer::View::addDevice
        
            typedef void ( ::osgViewer::View::*addDevice_function_type )( ::osgGA::Device * ) ;
            
            View_exposer.def( 
                "addDevice"
                , addDevice_function_type( &::osgViewer::View::addDevice )
                , ( bp::arg("eventSource") )
                , "\n Add a Device.\n The Device is polled on each new frame via its Device::checkEvents() method and any events generated then collected via Device::getEventQueue()\n" );
        
        }
        { //::osgViewer::View::addEventHandler
        
            typedef void ( ::osgViewer::View::*addEventHandler_function_type )( ::osgGA::GUIEventHandler * ) ;
            
            View_exposer.def( 
                "addEventHandler"
                , addEventHandler_function_type( &::osgViewer::View::addEventHandler )
                , ( bp::arg("eventHandler") )
                , "\n Add an EventHandler that adds handling of events to the View.\n" );
        
        }
        { //::osgViewer::View::apply
        
            typedef void ( ::osgViewer::View::*apply_function_type )( ::osgViewer::ViewConfig * ) ;
            
            View_exposer.def( 
                "apply"
                , apply_function_type( &::osgViewer::View::apply )
                , ( bp::arg("config") )
                , "\n Apply a viewer configuration to set up Cameras and Windowing.\n" );
        
        }
        { //::osgViewer::View::asView
        
            typedef ::osg::View * ( ::osgViewer::View::*asView_function_type )(  ) ;
            typedef ::osg::View * ( View_wrapper::*default_asView_function_type )(  ) ;
            
            View_exposer.def( 
                "asView"
                , asView_function_type(&::osgViewer::View::asView)
                , default_asView_function_type(&View_wrapper::default_asView)
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::View::assignKeystoneDistortionCamera
        
            typedef ::osg::Camera * ( ::osgViewer::View::*assignKeystoneDistortionCamera_function_type )( ::osg::DisplaySettings *,::osg::GraphicsContext *,int,int,int,int,::GLenum,::osg::Texture *,::osgViewer::Keystone * ) ;
            
            View_exposer.def( 
                "assignKeystoneDistortionCamera"
                , assignKeystoneDistortionCamera_function_type( &::osgViewer::View::assignKeystoneDistortionCamera )
                , ( bp::arg("ds"), bp::arg("gc"), bp::arg("x"), bp::arg("y"), bp::arg("width"), bp::arg("height"), bp::arg("buffer"), bp::arg("texture"), bp::arg("keystone") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::View::assignRenderToTextureCamera
        
            typedef ::osg::Camera * ( ::osgViewer::View::*assignRenderToTextureCamera_function_type )( ::osg::GraphicsContext *,int,int,::osg::Texture * ) ;
            
            View_exposer.def( 
                "assignRenderToTextureCamera"
                , assignRenderToTextureCamera_function_type( &::osgViewer::View::assignRenderToTextureCamera )
                , ( bp::arg("gc"), bp::arg("width"), bp::arg("height"), bp::arg("texture") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::View::assignSceneDataToCameras
        
            typedef void ( ::osgViewer::View::*assignSceneDataToCameras_function_type )(  ) ;
            
            View_exposer.def( 
                "assignSceneDataToCameras"
                , assignSceneDataToCameras_function_type( &::osgViewer::View::assignSceneDataToCameras ) );
        
        }
        { //::osgViewer::View::assignStereoCamera
        
            typedef ::osg::Camera * ( ::osgViewer::View::*assignStereoCamera_function_type )( ::osg::DisplaySettings *,::osg::GraphicsContext *,int,int,int,int,::GLenum,double ) ;
            
            View_exposer.def( 
                "assignStereoCamera"
                , assignStereoCamera_function_type( &::osgViewer::View::assignStereoCamera )
                , ( bp::arg("ds"), bp::arg("gc"), bp::arg("x"), bp::arg("y"), bp::arg("width"), bp::arg("height"), bp::arg("buffer"), bp::arg("eyeScale") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::View::assignStereoOrKeystoneToCamera
        
            typedef void ( ::osgViewer::View::*assignStereoOrKeystoneToCamera_function_type )( ::osg::Camera *,::osg::DisplaySettings * ) ;
            
            View_exposer.def( 
                "assignStereoOrKeystoneToCamera"
                , assignStereoOrKeystoneToCamera_function_type( &::osgViewer::View::assignStereoOrKeystoneToCamera )
                , ( bp::arg("camera"), bp::arg("ds") ) );
        
        }
        { //::osgViewer::View::className
        
            typedef char const * ( ::osgViewer::View::*className_function_type )(  ) const;
            typedef char const * ( View_wrapper::*default_className_function_type )(  ) const;
            
            View_exposer.def( 
                "className"
                , className_function_type(&::osgViewer::View::className)
                , default_className_function_type(&View_wrapper::default_className) );
        
        }
        { //::osgViewer::View::clone
        
            typedef ::osg::Object * ( ::osgViewer::View::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( View_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            View_exposer.def( 
                "clone"
                , clone_function_type(&::osgViewer::View::clone)
                , default_clone_function_type(&View_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgViewer::View::cloneType
        
            typedef ::osg::Object * ( ::osgViewer::View::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( View_wrapper::*default_cloneType_function_type )(  ) const;
            
            View_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgViewer::View::cloneType)
                , default_cloneType_function_type(&View_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgViewer::View::computeActiveCoordinateSystemNodePath
        
            typedef void ( ::osgViewer::View::*computeActiveCoordinateSystemNodePath_function_type )(  ) ;
            
            View_exposer.def( 
                "computeActiveCoordinateSystemNodePath"
                , computeActiveCoordinateSystemNodePath_function_type( &::osgViewer::View::computeActiveCoordinateSystemNodePath )
                , "\n Compute the NodePath to any active CoordinateSystemNode present in the Scene.\n" );
        
        }
        { //::osgViewer::View::containsCamera
        
            typedef bool ( ::osgViewer::View::*containsCamera_function_type )( ::osg::Camera const * ) const;
            
            View_exposer.def( 
                "containsCamera"
                , containsCamera_function_type( &::osgViewer::View::containsCamera )
                , ( bp::arg("camera") )
                , "\n Return true if this view contains a specified camera.\n" );
        
        }
        { //::osgViewer::View::createDistortionTexture
        
            typedef ::osg::Texture * ( ::osgViewer::View::*createDistortionTexture_function_type )( int,int ) ;
            
            View_exposer.def( 
                "createDistortionTexture"
                , createDistortionTexture_function_type( &::osgViewer::View::createDistortionTexture )
                , ( bp::arg("width"), bp::arg("height") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::View::getCameraManipulator
        
            typedef ::osgGA::CameraManipulator * ( ::osgViewer::View::*getCameraManipulator_function_type )(  ) ;
            
            View_exposer.def( 
                "getCameraManipulator"
                , getCameraManipulator_function_type( &::osgViewer::View::getCameraManipulator )
                , bp::return_internal_reference< >()
                , "\n Get the Views CameraManipulator.\n" );
        
        }
        { //::osgViewer::View::getCameraManipulator
        
            typedef ::osgGA::CameraManipulator const * ( ::osgViewer::View::*getCameraManipulator_function_type )(  ) const;
            
            View_exposer.def( 
                "getCameraManipulator"
                , getCameraManipulator_function_type( &::osgViewer::View::getCameraManipulator )
                , bp::return_internal_reference< >()
                , "\n Get the const Views CameraManipulator.\n" );
        
        }
        { //::osgViewer::View::getCoordinateSystemNodePath
        
            typedef ::osg::NodePath ( ::osgViewer::View::*getCoordinateSystemNodePath_function_type )(  ) const;
            
            View_exposer.def( 
                "getCoordinateSystemNodePath"
                , getCoordinateSystemNodePath_function_type( &::osgViewer::View::getCoordinateSystemNodePath )
                , "\n Get the NodePath to any active CoordinateSystemNode present in the Scene.\n" );
        
        }
        { //::osgViewer::View::getDatabasePager
        
            typedef ::osgDB::DatabasePager * ( ::osgViewer::View::*getDatabasePager_function_type )(  ) ;
            
            View_exposer.def( 
                "getDatabasePager"
                , getDatabasePager_function_type( &::osgViewer::View::getDatabasePager )
                , bp::return_internal_reference< >()
                , "\n Get the Views database pager.\n" );
        
        }
        { //::osgViewer::View::getDatabasePager
        
            typedef ::osgDB::DatabasePager const * ( ::osgViewer::View::*getDatabasePager_function_type )(  ) const;
            
            View_exposer.def( 
                "getDatabasePager"
                , getDatabasePager_function_type( &::osgViewer::View::getDatabasePager )
                , bp::return_internal_reference< >()
                , "\n Get the const Views database pager.\n" );
        
        }
        { //::osgViewer::View::getDevices
        
            typedef ::std::vector< osg::ref_ptr<osgGA::Device> > & ( ::osgViewer::View::*getDevices_function_type )(  ) ;
            
            View_exposer.def( 
                "getDevices"
                , getDevices_function_type( &::osgViewer::View::getDevices )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::View::getDevices
        
            typedef ::std::vector< osg::ref_ptr<osgGA::Device> > const & ( ::osgViewer::View::*getDevices_function_type )(  ) const;
            
            View_exposer.def( 
                "getDevices"
                , getDevices_function_type( &::osgViewer::View::getDevices )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::View::getDisplaySettings
        
            typedef ::osg::DisplaySettings * ( ::osgViewer::View::*getDisplaySettings_function_type )(  ) ;
            
            View_exposer.def( 
                "getDisplaySettings"
                , getDisplaySettings_function_type( &::osgViewer::View::getDisplaySettings )
                , bp::return_internal_reference< >()
                , "\n Set the DisplaySettings object associated with this view.\n" );
        
        }
        { //::osgViewer::View::getDisplaySettings
        
            typedef ::osg::DisplaySettings const * ( ::osgViewer::View::*getDisplaySettings_function_type )(  ) const;
            
            View_exposer.def( 
                "getDisplaySettings"
                , getDisplaySettings_function_type( &::osgViewer::View::getDisplaySettings )
                , bp::return_internal_reference< >()
                , "\n Set the DisplaySettings object associated with this view.\n" );
        
        }
        { //::osgViewer::View::getEventHandlers
        
            typedef ::std::list< osg::ref_ptr<osgGA::GUIEventHandler> > & ( ::osgViewer::View::*getEventHandlers_function_type )(  ) ;
            
            View_exposer.def( 
                "getEventHandlers"
                , getEventHandlers_function_type( &::osgViewer::View::getEventHandlers )
                , bp::return_internal_reference< >()
                , "\n Get the Views list of EventHandlers.\n" );
        
        }
        { //::osgViewer::View::getEventHandlers
        
            typedef ::std::list< osg::ref_ptr<osgGA::GUIEventHandler> > const & ( ::osgViewer::View::*getEventHandlers_function_type )(  ) const;
            
            View_exposer.def( 
                "getEventHandlers"
                , getEventHandlers_function_type( &::osgViewer::View::getEventHandlers )
                , bp::return_internal_reference< >()
                , "\n Get the const Views list of EventHandlers.\n" );
        
        }
        { //::osgViewer::View::getEventQueue
        
            typedef ::osgGA::EventQueue * ( ::osgViewer::View::*getEventQueue_function_type )(  ) ;
            
            View_exposer.def( 
                "getEventQueue"
                , getEventQueue_function_type( &::osgViewer::View::getEventQueue )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::View::getEventQueue
        
            typedef ::osgGA::EventQueue const * ( ::osgViewer::View::*getEventQueue_function_type )(  ) const;
            
            View_exposer.def( 
                "getEventQueue"
                , getEventQueue_function_type( &::osgViewer::View::getEventQueue )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::View::getFusionDistanceMode
        
            typedef ::osgUtil::SceneView::FusionDistanceMode ( ::osgViewer::View::*getFusionDistanceMode_function_type )(  ) const;
            
            View_exposer.def( 
                "getFusionDistanceMode"
                , getFusionDistanceMode_function_type( &::osgViewer::View::getFusionDistanceMode )
                , "\n Get the FusionDistanceMode.\n" );
        
        }
        { //::osgViewer::View::getFusionDistanceValue
        
            typedef float ( ::osgViewer::View::*getFusionDistanceValue_function_type )(  ) const;
            
            View_exposer.def( 
                "getFusionDistanceValue"
                , getFusionDistanceValue_function_type( &::osgViewer::View::getFusionDistanceValue )
                , "\n Get the FusionDistanceValue. Note, only used for USE_FUSION_DISTANCE_VALUE & PROPORTIONAL_TO_SCREEN_DISTANCE modes.\n" );
        
        }
        { //::osgViewer::View::getImagePager
        
            typedef ::osgDB::ImagePager * ( ::osgViewer::View::*getImagePager_function_type )(  ) ;
            
            View_exposer.def( 
                "getImagePager"
                , getImagePager_function_type( &::osgViewer::View::getImagePager )
                , bp::return_internal_reference< >()
                , "\n Get the Views image pager.\n" );
        
        }
        { //::osgViewer::View::getImagePager
        
            typedef ::osgDB::ImagePager const * ( ::osgViewer::View::*getImagePager_function_type )(  ) const;
            
            View_exposer.def( 
                "getImagePager"
                , getImagePager_function_type( &::osgViewer::View::getImagePager )
                , bp::return_internal_reference< >()
                , "\n Get the const Views image pager.\n" );
        
        }
        { //::osgViewer::View::getLastAppliedViewConfig
        
            typedef ::osgViewer::ViewConfig * ( ::osgViewer::View::*getLastAppliedViewConfig_function_type )(  ) ;
            
            View_exposer.def( 
                "getLastAppliedViewConfig"
                , getLastAppliedViewConfig_function_type( &::osgViewer::View::getLastAppliedViewConfig )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::View::getLastAppliedViewConfig
        
            typedef ::osgViewer::ViewConfig const * ( ::osgViewer::View::*getLastAppliedViewConfig_function_type )(  ) const;
            
            View_exposer.def( 
                "getLastAppliedViewConfig"
                , getLastAppliedViewConfig_function_type( &::osgViewer::View::getLastAppliedViewConfig )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::View::getScene
        
            typedef ::osgViewer::Scene * ( ::osgViewer::View::*getScene_function_type )(  ) ;
            
            View_exposer.def( 
                "getScene"
                , getScene_function_type( &::osgViewer::View::getScene )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::View::getScene
        
            typedef ::osgViewer::Scene const * ( ::osgViewer::View::*getScene_function_type )(  ) const;
            
            View_exposer.def( 
                "getScene"
                , getScene_function_type( &::osgViewer::View::getScene )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::View::getSceneData
        
            typedef ::osg::Node * ( ::osgViewer::View::*getSceneData_function_type )(  ) ;
            
            View_exposer.def( 
                "getSceneData"
                , getSceneData_function_type( &::osgViewer::View::getSceneData )
                , bp::return_internal_reference< >()
                , "\n Get the Views scene graph.\n" );
        
        }
        { //::osgViewer::View::getSceneData
        
            typedef ::osg::Node const * ( ::osgViewer::View::*getSceneData_function_type )(  ) const;
            
            View_exposer.def( 
                "getSceneData"
                , getSceneData_function_type( &::osgViewer::View::getSceneData )
                , bp::return_internal_reference< >()
                , "\n Get the const Views scene graph.\n" );
        
        }
        { //::osgViewer::View::getStartTick
        
            typedef ::osg::Timer_t ( ::osgViewer::View::*getStartTick_function_type )(  ) const;
            
            View_exposer.def( 
                "getStartTick"
                , getStartTick_function_type( &::osgViewer::View::getStartTick ) );
        
        }
        { //::osgViewer::View::getViewerBase
        
            typedef ::osgViewer::ViewerBase * ( ::osgViewer::View::*getViewerBase_function_type )(  ) ;
            
            View_exposer.def( 
                "getViewerBase"
                , getViewerBase_function_type( &::osgViewer::View::getViewerBase )
                , bp::return_internal_reference< >()
                , "\n Provide a mechanism for getting the viewer object from this osgViewer::View.\n In the case of a osgViewer::Viewer the ViewerBase will effectively point to this object as Viewer subclasses from View.\n In the case of a osgViewer::CompsoiteViewer the ViewerBase will point to the CompositeViewer that owns this View.\n" );
        
        }
        { //::osgViewer::View::home
        
            typedef void ( ::osgViewer::View::*home_function_type )(  ) ;
            
            View_exposer.def( 
                "home"
                , home_function_type( &::osgViewer::View::home )
                , "\n Set the view to the CameraManipulators home position, if none is attached home() it does nothing.\n Note, to set the home position use getCamaraManipulator()->setHomePosition(...).\n" );
        
        }
        { //::osgViewer::View::init
        
            typedef void ( ::osgViewer::View::*init_function_type )(  ) ;
            
            View_exposer.def( 
                "init"
                , init_function_type( &::osgViewer::View::init ) );
        
        }
        { //::osgViewer::View::isSameKindAs
        
            typedef bool ( ::osgViewer::View::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( View_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            View_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgViewer::View::isSameKindAs)
                , default_isSameKindAs_function_type(&View_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgViewer::View::libraryName
        
            typedef char const * ( ::osgViewer::View::*libraryName_function_type )(  ) const;
            typedef char const * ( View_wrapper::*default_libraryName_function_type )(  ) const;
            
            View_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgViewer::View::libraryName)
                , default_libraryName_function_type(&View_wrapper::default_libraryName) );
        
        }
        { //::osgViewer::View::removeDevice
        
            typedef void ( ::osgViewer::View::*removeDevice_function_type )( ::osgGA::Device * ) ;
            
            View_exposer.def( 
                "removeDevice"
                , removeDevice_function_type( &::osgViewer::View::removeDevice )
                , ( bp::arg("eventSource") )
                , "\n Remove a Device.\n" );
        
        }
        { //::osgViewer::View::removeEventHandler
        
            typedef void ( ::osgViewer::View::*removeEventHandler_function_type )( ::osgGA::GUIEventHandler * ) ;
            
            View_exposer.def( 
                "removeEventHandler"
                , removeEventHandler_function_type( &::osgViewer::View::removeEventHandler )
                , ( bp::arg("eventHandler") )
                , "\n Remove an EventHandler from View.\n" );
        
        }
        { //::osgViewer::View::requestContinuousUpdate
        
            typedef void ( ::osgViewer::View::*requestContinuousUpdate_function_type )( bool ) ;
            typedef void ( View_wrapper::*default_requestContinuousUpdate_function_type )( bool ) ;
            
            View_exposer.def( 
                "requestContinuousUpdate"
                , requestContinuousUpdate_function_type(&::osgViewer::View::requestContinuousUpdate)
                , default_requestContinuousUpdate_function_type(&View_wrapper::default_requestContinuousUpdate)
                , ( bp::arg("needed")=(bool)(true) ) );
        
        }
        { //::osgViewer::View::requestRedraw
        
            typedef void ( ::osgViewer::View::*requestRedraw_function_type )(  ) ;
            typedef void ( View_wrapper::*default_requestRedraw_function_type )(  ) ;
            
            View_exposer.def( 
                "requestRedraw"
                , requestRedraw_function_type(&::osgViewer::View::requestRedraw)
                , default_requestRedraw_function_type(&View_wrapper::default_requestRedraw) );
        
        }
        { //::osgViewer::View::requestWarpPointer
        
            typedef void ( ::osgViewer::View::*requestWarpPointer_function_type )( float,float ) ;
            typedef void ( View_wrapper::*default_requestWarpPointer_function_type )( float,float ) ;
            
            View_exposer.def( 
                "requestWarpPointer"
                , requestWarpPointer_function_type(&::osgViewer::View::requestWarpPointer)
                , default_requestWarpPointer_function_type(&View_wrapper::default_requestWarpPointer)
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::osgViewer::View::setCameraManipulator
        
            typedef void ( ::osgViewer::View::*setCameraManipulator_function_type )( ::osgGA::CameraManipulator *,bool ) ;
            
            View_exposer.def( 
                "setCameraManipulator"
                , setCameraManipulator_function_type( &::osgViewer::View::setCameraManipulator )
                , ( bp::arg("manipulator"), bp::arg("resetPosition")=(bool)(true) )
                , bp::with_custodian_and_ward< 1, 2 >()
                , "\n Set the CameraManipulator that moves the Views master Camera position in response to events.\n The parameter resetPosition determines whether manipulator is set to its home position.\n" );
        
        }
        { //::osgViewer::View::setCoordinateSystemNodePath
        
            typedef void ( ::osgViewer::View::*setCoordinateSystemNodePath_function_type )( ::osg::NodePath const & ) ;
            
            View_exposer.def( 
                "setCoordinateSystemNodePath"
                , setCoordinateSystemNodePath_function_type( &::osgViewer::View::setCoordinateSystemNodePath )
                , ( bp::arg("nodePath") )
                , "\n Set the NodePath to any active CoordinateSystemNode present in the Scene.\n The CoordinateSystemNode path is used to help applications and CamaraManipulators handle geocentric coordinates systems,\n so that the local up direction is known at any position on the whole earth.\n" );
        
        }
        { //::osgViewer::View::setDatabasePager
        
            typedef void ( ::osgViewer::View::*setDatabasePager_function_type )( ::osgDB::DatabasePager * ) ;
            
            View_exposer.def( 
                "setDatabasePager"
                , setDatabasePager_function_type( &::osgViewer::View::setDatabasePager )
                , ( bp::arg("dp") )
                , "\n Set the Views database pager.\n" );
        
        }
        { //::osgViewer::View::setDisplaySettings
        
            typedef void ( ::osgViewer::View::*setDisplaySettings_function_type )( ::osg::DisplaySettings * ) ;
            
            View_exposer.def( 
                "setDisplaySettings"
                , setDisplaySettings_function_type( &::osgViewer::View::setDisplaySettings )
                , ( bp::arg("ds") )
                , "\n Set the DisplaySettings object associated with this view.\n" );
        
        }
        { //::osgViewer::View::setEventQueue
        
            typedef void ( ::osgViewer::View::*setEventQueue_function_type )( ::osgGA::EventQueue * ) ;
            
            View_exposer.def( 
                "setEventQueue"
                , setEventQueue_function_type( &::osgViewer::View::setEventQueue )
                , ( bp::arg("eventQueue") ) );
        
        }
        { //::osgViewer::View::setFusionDistance
        
            typedef void ( ::osgViewer::View::*setFusionDistance_function_type )( ::osgUtil::SceneView::FusionDistanceMode,float ) ;
            
            View_exposer.def( 
                "setFusionDistance"
                , setFusionDistance_function_type( &::osgViewer::View::setFusionDistance )
                , ( bp::arg("mode"), bp::arg("value")=1.0e+0f )
                , "\n Set the FusionDistanceMode and Value. Note, only used when working in stereo.\n" );
        
        }
        { //::osgViewer::View::setImagePager
        
            typedef void ( ::osgViewer::View::*setImagePager_function_type )( ::osgDB::ImagePager * ) ;
            
            View_exposer.def( 
                "setImagePager"
                , setImagePager_function_type( &::osgViewer::View::setImagePager )
                , ( bp::arg("ip") )
                , "\n Set the Views image pager.\n" );
        
        }
        { //::osgViewer::View::setSceneData
        
            typedef void ( ::osgViewer::View::*setSceneData_function_type )( ::osg::Node * ) ;
            typedef void ( View_wrapper::*default_setSceneData_function_type )( ::osg::Node * ) ;
            
            View_exposer.def( 
                "setSceneData"
                , setSceneData_function_type(&::osgViewer::View::setSceneData)
                , default_setSceneData_function_type(&View_wrapper::default_setSceneData)
                , ( bp::arg("node") ) );
        
        }
        { //::osgViewer::View::setStartTick
        
            typedef void ( ::osgViewer::View::*setStartTick_function_type )( ::osg::Timer_t ) ;
            typedef void ( View_wrapper::*default_setStartTick_function_type )( ::osg::Timer_t ) ;
            
            View_exposer.def( 
                "setStartTick"
                , setStartTick_function_type(&::osgViewer::View::setStartTick)
                , default_setStartTick_function_type(&View_wrapper::default_setStartTick)
                , ( bp::arg("tick") ) );
        
        }
        { //::osgViewer::View::setUpDepthPartition
        
            typedef bool ( ::osgViewer::View::*setUpDepthPartition_function_type )( ::osgViewer::DepthPartitionSettings * ) ;
            
            View_exposer.def( 
                "setUpDepthPartition"
                , setUpDepthPartition_function_type( &::osgViewer::View::setUpDepthPartition )
                , ( bp::arg("dsp")=bp::object() )
                , "\n Convenience method for setting up multiple slave cameras with depth partitioning on each of the views active cameras.\n" );
        
        }
        { //::osgViewer::View::setUpDepthPartitionForCamera
        
            typedef bool ( ::osgViewer::View::*setUpDepthPartitionForCamera_function_type )( ::osg::Camera *,::osgViewer::DepthPartitionSettings * ) ;
            
            View_exposer.def( 
                "setUpDepthPartitionForCamera"
                , setUpDepthPartitionForCamera_function_type( &::osgViewer::View::setUpDepthPartitionForCamera )
                , ( bp::arg("cameraToPartition"), bp::arg("dps")=bp::object() )
                , "\n Convenience method for setting up depth partitioning on the specified camera.\n" );
        
        }
        { //::osgViewer::View::setUpViewAcrossAllScreens
        
            typedef void ( ::osgViewer::View::*setUpViewAcrossAllScreens_function_type )(  ) ;
            
            View_exposer.def( 
                "setUpViewAcrossAllScreens"
                , setUpViewAcrossAllScreens_function_type( &::osgViewer::View::setUpViewAcrossAllScreens )
                , "\n deprecated, use view.apply(new osgViewer::AcrossAllWindows()).\n" );
        
        }
        { //::osgViewer::View::setUpViewFor3DSphericalDisplay
        
            typedef void ( ::osgViewer::View::*setUpViewFor3DSphericalDisplay_function_type )( double,double,unsigned int,::osg::Image *,::osg::Matrixd const & ) ;
            
            View_exposer.def( 
                "setUpViewFor3DSphericalDisplay"
                , setUpViewFor3DSphericalDisplay_function_type( &::osgViewer::View::setUpViewFor3DSphericalDisplay )
                , ( bp::arg("radius")=1.0e+0, bp::arg("collar")=4.50000000000000011102230246251565404236316680908203125e-1, bp::arg("screenNum")=(unsigned int)(0), bp::arg("intensityMap")=bp::object(), bp::arg("projectorMatrix")=osg::Matrixd() )
                , "\n deprecated, use view.apply(new osgViewer::SphericalDisplay(radius, collar, screenNum, intensityMap, projectorMatrix)).\n" );
        
        }
        { //::osgViewer::View::setUpViewForPanoramicSphericalDisplay
        
            typedef void ( ::osgViewer::View::*setUpViewForPanoramicSphericalDisplay_function_type )( double,double,unsigned int,::osg::Image *,::osg::Matrixd const & ) ;
            
            View_exposer.def( 
                "setUpViewForPanoramicSphericalDisplay"
                , setUpViewForPanoramicSphericalDisplay_function_type( &::osgViewer::View::setUpViewForPanoramicSphericalDisplay )
                , ( bp::arg("radius")=1.0e+0, bp::arg("collar")=4.50000000000000011102230246251565404236316680908203125e-1, bp::arg("screenNum")=(unsigned int)(0), bp::arg("intensityMap")=bp::object(), bp::arg("projectorMatrix")=osg::Matrixd() )
                , "\n depreacted, use view.apply(new osgViewer::PanoramicSphericalDisplay(radius, collar, screenNum, intensityMap, projectorMatrix)).\n" );
        
        }
        { //::osgViewer::View::setUpViewForWoWVxDisplay
        
            typedef void ( ::osgViewer::View::*setUpViewForWoWVxDisplay_function_type )( unsigned int,unsigned char,unsigned char,unsigned char,float,float,float,float ) ;
            
            View_exposer.def( 
                "setUpViewForWoWVxDisplay"
                , setUpViewForWoWVxDisplay_function_type( &::osgViewer::View::setUpViewForWoWVxDisplay )
                , ( bp::arg("screenNum"), bp::arg("wow_content"), bp::arg("wow_factor"), bp::arg("wow_offset"), bp::arg("wow_disparity_Zd"), bp::arg("wow_disparity_vz"), bp::arg("wow_disparity_M"), bp::arg("wow_disparity_C") )
                , "\n deprecated. use view.apply(new osgViewer::WoWVxDisplay(type (20 to 42), screenNum).\n" );
        
        }
        { //::osgViewer::View::setUpViewInWindow
        
            typedef void ( ::osgViewer::View::*setUpViewInWindow_function_type )( int,int,int,int,unsigned int ) ;
            
            View_exposer.def( 
                "setUpViewInWindow"
                , setUpViewInWindow_function_type( &::osgViewer::View::setUpViewInWindow )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("width"), bp::arg("height"), bp::arg("screenNum")=(unsigned int)(0) )
                , "\n depreacted, use view.apply(new osgViewer::SingleWindow(x,y,width,screenNum)).\n" );
        
        }
        { //::osgViewer::View::setUpViewOnSingleScreen
        
            typedef void ( ::osgViewer::View::*setUpViewOnSingleScreen_function_type )( unsigned int ) ;
            
            View_exposer.def( 
                "setUpViewOnSingleScreen"
                , setUpViewOnSingleScreen_function_type( &::osgViewer::View::setUpViewOnSingleScreen )
                , ( bp::arg("screenNum")=(unsigned int)(0) )
                , "\n deprecated, use view.apply(new osgViewer::SingleScreen(screenNum)).\n" );
        
        }
        { //::osgViewer::View::take
        
            typedef void ( ::osgViewer::View::*take_function_type )( ::osg::View & ) ;
            typedef void ( View_wrapper::*default_take_function_type )( ::osg::View & ) ;
            
            View_exposer.def( 
                "take"
                , take_function_type(&::osgViewer::View::take)
                , default_take_function_type(&View_wrapper::default_take)
                , ( bp::arg("rhs") ) );
        
        }
    }

}
