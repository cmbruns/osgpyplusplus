// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "wrap_osgViewer.h"
#include "wrap_referenced.h"
#include "Viewer.pypp.hpp"

namespace bp = boost::python;

struct Viewer_wrapper : osgViewer::Viewer, bp::wrapper< osgViewer::Viewer > {

    Viewer_wrapper( )
    : osgViewer::Viewer( )
      , bp::wrapper< osgViewer::Viewer >(){
        // null constructor
    
    }

    Viewer_wrapper(::osg::ArgumentParser & arguments )
    : osgViewer::Viewer( boost::ref(arguments) )
      , bp::wrapper< osgViewer::Viewer >(){
        // constructor
    
    }

    virtual void advance( double simulationTime=1.79769313486231570814527423731704356798070567525844996599e+308 ) {
        if( bp::override func_advance = this->get_override( "advance" ) )
            func_advance( simulationTime );
        else{
            this->osgViewer::Viewer::advance( simulationTime );
        }
    }
    
    void default_advance( double simulationTime=1.79769313486231570814527423731704356798070567525844996599e+308 ) {
        osgViewer::Viewer::advance( simulationTime );
    }

    virtual bool checkEvents(  ) {
        if( bp::override func_checkEvents = this->get_override( "checkEvents" ) )
            return func_checkEvents(  );
        else{
            return this->osgViewer::Viewer::checkEvents(  );
        }
    }
    
    bool default_checkEvents(  ) {
        return osgViewer::Viewer::checkEvents( );
    }

    virtual bool checkNeedToDoFrame(  ) {
        if( bp::override func_checkNeedToDoFrame = this->get_override( "checkNeedToDoFrame" ) )
            return func_checkNeedToDoFrame(  );
        else{
            return this->osgViewer::Viewer::checkNeedToDoFrame(  );
        }
    }
    
    bool default_checkNeedToDoFrame(  ) {
        return osgViewer::Viewer::checkNeedToDoFrame( );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgViewer::Viewer::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgViewer::Viewer::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgViewer::Viewer::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgViewer::Viewer::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgViewer::Viewer::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgViewer::Viewer::cloneType( );
    }

    virtual double elapsedTime(  ) {
        if( bp::override func_elapsedTime = this->get_override( "elapsedTime" ) )
            return func_elapsedTime(  );
        else{
            return this->osgViewer::Viewer::elapsedTime(  );
        }
    }
    
    double default_elapsedTime(  ) {
        return osgViewer::Viewer::elapsedTime( );
    }

    virtual void eventTraversal(  ) {
        if( bp::override func_eventTraversal = this->get_override( "eventTraversal" ) )
            func_eventTraversal(  );
        else{
            this->osgViewer::Viewer::eventTraversal(  );
        }
    }
    
    void default_eventTraversal(  ) {
        osgViewer::Viewer::eventTraversal( );
    }

    virtual void getAllThreads( ::std::vector< OpenThreads::Thread* > & threads, bool onlyActive=true ) {
        if( bp::override func_getAllThreads = this->get_override( "getAllThreads" ) )
            func_getAllThreads( boost::ref(threads), onlyActive );
        else{
            this->osgViewer::Viewer::getAllThreads( boost::ref(threads), onlyActive );
        }
    }
    
    void default_getAllThreads( ::std::vector< OpenThreads::Thread* > & threads, bool onlyActive=true ) {
        osgViewer::Viewer::getAllThreads( boost::ref(threads), onlyActive );
    }

    virtual void getCameras( ::std::vector< osg::Camera* > & cameras, bool onlyActive=true ) {
        if( bp::override func_getCameras = this->get_override( "getCameras" ) )
            func_getCameras( boost::ref(cameras), onlyActive );
        else{
            this->osgViewer::Viewer::getCameras( boost::ref(cameras), onlyActive );
        }
    }
    
    void default_getCameras( ::std::vector< osg::Camera* > & cameras, bool onlyActive=true ) {
        osgViewer::Viewer::getCameras( boost::ref(cameras), onlyActive );
    }

    virtual void getContexts( ::std::vector< osg::GraphicsContext* > & contexts, bool onlyValid=true ) {
        if( bp::override func_getContexts = this->get_override( "getContexts" ) )
            func_getContexts( boost::ref(contexts), onlyValid );
        else{
            this->osgViewer::Viewer::getContexts( boost::ref(contexts), onlyValid );
        }
    }
    
    void default_getContexts( ::std::vector< osg::GraphicsContext* > & contexts, bool onlyValid=true ) {
        osgViewer::Viewer::getContexts( boost::ref(contexts), onlyValid );
    }

    virtual void getOperationThreads( ::std::vector< osg::OperationThread* > & threads, bool onlyActive=true ) {
        if( bp::override func_getOperationThreads = this->get_override( "getOperationThreads" ) )
            func_getOperationThreads( boost::ref(threads), onlyActive );
        else{
            this->osgViewer::Viewer::getOperationThreads( boost::ref(threads), onlyActive );
        }
    }
    
    void default_getOperationThreads( ::std::vector< osg::OperationThread* > & threads, bool onlyActive=true ) {
        osgViewer::Viewer::getOperationThreads( boost::ref(threads), onlyActive );
    }

    virtual void getScenes( ::std::vector< osgViewer::Scene* > & scenes, bool onlyValid=true ) {
        if( bp::override func_getScenes = this->get_override( "getScenes" ) )
            func_getScenes( boost::ref(scenes), onlyValid );
        else{
            this->osgViewer::Viewer::getScenes( boost::ref(scenes), onlyValid );
        }
    }
    
    void default_getScenes( ::std::vector< osgViewer::Scene* > & scenes, bool onlyValid=true ) {
        osgViewer::Viewer::getScenes( boost::ref(scenes), onlyValid );
    }

    virtual void getUsage( ::osg::ApplicationUsage & usage ) const  {
        if( bp::override func_getUsage = this->get_override( "getUsage" ) )
            func_getUsage( boost::ref(usage) );
        else{
            this->osgViewer::Viewer::getUsage( boost::ref(usage) );
        }
    }
    
    void default_getUsage( ::osg::ApplicationUsage & usage ) const  {
        osgViewer::Viewer::getUsage( boost::ref(usage) );
    }

    virtual ::osg::FrameStamp * getViewerFrameStamp(  ) {
        if( bp::override func_getViewerFrameStamp = this->get_override( "getViewerFrameStamp" ) )
            return func_getViewerFrameStamp(  );
        else{
            return this->osgViewer::Viewer::getViewerFrameStamp(  );
        }
    }
    
    ::osg::FrameStamp * default_getViewerFrameStamp(  ) {
        return osgViewer::Viewer::getViewerFrameStamp( );
    }

    virtual ::osg::Stats * getViewerStats(  ) {
        if( bp::override func_getViewerStats = this->get_override( "getViewerStats" ) )
            return func_getViewerStats(  );
        else{
            return this->osgViewer::Viewer::getViewerStats(  );
        }
    }
    
    ::osg::Stats * default_getViewerStats(  ) {
        return osgViewer::Viewer::getViewerStats( );
    }

    virtual ::osg::Stats const * getViewerStats(  ) const  {
        if( bp::override func_getViewerStats = this->get_override( "getViewerStats" ) )
            return func_getViewerStats(  );
        else{
            return this->osgViewer::Viewer::getViewerStats(  );
        }
    }
    
    ::osg::Stats const * default_getViewerStats(  ) const  {
        return osgViewer::Viewer::getViewerStats( );
    }

    virtual void getViews( ::std::vector< osgViewer::View* > & views, bool onlyValid=true ) {
        if( bp::override func_getViews = this->get_override( "getViews" ) )
            func_getViews( boost::ref(views), onlyValid );
        else{
            this->osgViewer::Viewer::getViews( boost::ref(views), onlyValid );
        }
    }
    
    void default_getViews( ::std::vector< osgViewer::View* > & views, bool onlyValid=true ) {
        osgViewer::Viewer::getViews( boost::ref(views), onlyValid );
    }

    virtual bool isRealized(  ) const  {
        if( bp::override func_isRealized = this->get_override( "isRealized" ) )
            return func_isRealized(  );
        else{
            return this->osgViewer::Viewer::isRealized(  );
        }
    }
    
    bool default_isRealized(  ) const  {
        return osgViewer::Viewer::isRealized( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgViewer::Viewer::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgViewer::Viewer::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgViewer::Viewer::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgViewer::Viewer::libraryName( );
    }

    virtual bool readConfiguration( ::std::string const & filename ) {
        if( bp::override func_readConfiguration = this->get_override( "readConfiguration" ) )
            return func_readConfiguration( filename );
        else{
            return this->osgViewer::Viewer::readConfiguration( filename );
        }
    }
    
    bool default_readConfiguration( ::std::string const & filename ) {
        return osgViewer::Viewer::readConfiguration( filename );
    }

    virtual void realize(  ) {
        if( bp::override func_realize = this->get_override( "realize" ) )
            func_realize(  );
        else{
            this->osgViewer::Viewer::realize(  );
        }
    }
    
    void default_realize(  ) {
        osgViewer::Viewer::realize( );
    }

    virtual int run(  ) {
        if( bp::override func_run = this->get_override( "run" ) )
            return func_run(  );
        else{
            return this->osgViewer::Viewer::run(  );
        }
    }
    
    int default_run(  ) {
        return osgViewer::Viewer::run( );
    }

    virtual void setSceneData( ::osg::Node * node ) {
        if( bp::override func_setSceneData = this->get_override( "setSceneData" ) )
            func_setSceneData( boost::python::ptr(node) );
        else{
            this->osgViewer::Viewer::setSceneData( boost::python::ptr(node) );
        }
    }
    
    void default_setSceneData( ::osg::Node * node ) {
        osgViewer::Viewer::setSceneData( boost::python::ptr(node) );
    }

    virtual void setStartTick( ::osg::Timer_t tick ) {
        if( bp::override func_setStartTick = this->get_override( "setStartTick" ) )
            func_setStartTick( tick );
        else{
            this->osgViewer::Viewer::setStartTick( tick );
        }
    }
    
    void default_setStartTick( ::osg::Timer_t tick ) {
        osgViewer::Viewer::setStartTick( tick );
    }

    virtual ::osgViewer::GraphicsWindowEmbedded * setUpViewerAsEmbeddedInWindow( int x, int y, int width, int height ) {
        if( bp::override func_setUpViewerAsEmbeddedInWindow = this->get_override( "setUpViewerAsEmbeddedInWindow" ) )
            return func_setUpViewerAsEmbeddedInWindow( x, y, width, height );
        else{
            return this->osgViewer::Viewer::setUpViewerAsEmbeddedInWindow( x, y, width, height );
        }
    }
    
    ::osgViewer::GraphicsWindowEmbedded * default_setUpViewerAsEmbeddedInWindow( int x, int y, int width, int height ) {
        return osgViewer::Viewer::setUpViewerAsEmbeddedInWindow( x, y, width, height );
    }

    virtual void setViewerStats( ::osg::Stats * stats ) {
        if( bp::override func_setViewerStats = this->get_override( "setViewerStats" ) )
            func_setViewerStats( boost::python::ptr(stats) );
        else{
            this->osgViewer::Viewer::setViewerStats( boost::python::ptr(stats) );
        }
    }
    
    void default_setViewerStats( ::osg::Stats * stats ) {
        osgViewer::Viewer::setViewerStats( boost::python::ptr(stats) );
    }

    virtual void take( ::osg::View & rhs ) {
        if( bp::override func_take = this->get_override( "take" ) )
            func_take( boost::ref(rhs) );
        else{
            this->osgViewer::Viewer::take( boost::ref(rhs) );
        }
    }
    
    void default_take( ::osg::View & rhs ) {
        osgViewer::Viewer::take( boost::ref(rhs) );
    }

    virtual void updateTraversal(  ) {
        if( bp::override func_updateTraversal = this->get_override( "updateTraversal" ) )
            func_updateTraversal(  );
        else{
            this->osgViewer::Viewer::updateTraversal(  );
        }
    }
    
    void default_updateTraversal(  ) {
        osgViewer::Viewer::updateTraversal( );
    }

    virtual ::osg::View * asView(  ) {
        if( bp::override func_asView = this->get_override( "asView" ) )
            return func_asView(  );
        else{
            return this->osgViewer::View::asView(  );
        }
    }
    
    ::osg::View * default_asView(  ) {
        return osgViewer::View::asView( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual void frame( double simulationTime=1.79769313486231570814527423731704356798070567525844996599e+308 ) {
        if( bp::override func_frame = this->get_override( "frame" ) )
            func_frame( simulationTime );
        else{
            this->osgViewer::ViewerBase::frame( simulationTime );
        }
    }
    
    void default_frame( double simulationTime=1.79769313486231570814527423731704356798070567525844996599e+308 ) {
        osgViewer::ViewerBase::frame( simulationTime );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void getWindows( ::std::vector< osgViewer::GraphicsWindow* > & windows, bool onlyValid=true ) {
        namespace bpl = boost::python;
        if( bpl::override func_getWindows = this->get_override( "getWindows" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_getWindows.ptr(), onlyValid );
            windows = boost::python::extract< ::std::vector<osgViewer::GraphicsWindow*,std::allocator<osgViewer::GraphicsWindow*> > >( pyplus_conv::get_out_argument( py_result, "windows" ) );
        }
        else{
            osgViewer::ViewerBase::getWindows( boost::ref(windows), onlyValid );
        }
    }
    
    static boost::python::object default_getWindows( ::osgViewer::ViewerBase & inst, bool onlyValid=true ){
        std::vector<osgViewer::GraphicsWindow*,std::allocator<osgViewer::GraphicsWindow*> > windows2;
        if( dynamic_cast< Viewer_wrapper * >( boost::addressof( inst ) ) ){
            inst.::osgViewer::ViewerBase::getWindows(windows2, onlyValid);
        }
        else{
            inst.getWindows(windows2, onlyValid);
        }
        return bp::object( windows2 );
    }

    virtual void renderingTraversals(  ) {
        if( bp::override func_renderingTraversals = this->get_override( "renderingTraversals" ) )
            func_renderingTraversals(  );
        else{
            this->osgViewer::ViewerBase::renderingTraversals(  );
        }
    }
    
    void default_renderingTraversals(  ) {
        osgViewer::ViewerBase::renderingTraversals( );
    }

    virtual void requestContinuousUpdate( bool needed=true ) {
        if( bp::override func_requestContinuousUpdate = this->get_override( "requestContinuousUpdate" ) )
            func_requestContinuousUpdate( needed );
        else{
            this->osgViewer::View::requestContinuousUpdate( needed );
        }
    }
    
    void default_requestContinuousUpdate( bool needed=true ) {
        osgViewer::View::requestContinuousUpdate( needed );
    }

    virtual void requestRedraw(  ) {
        if( bp::override func_requestRedraw = this->get_override( "requestRedraw" ) )
            func_requestRedraw(  );
        else{
            this->osgViewer::View::requestRedraw(  );
        }
    }
    
    void default_requestRedraw(  ) {
        osgViewer::View::requestRedraw( );
    }

    virtual void requestWarpPointer( float x, float y ) {
        if( bp::override func_requestWarpPointer = this->get_override( "requestWarpPointer" ) )
            func_requestWarpPointer( x, y );
        else{
            this->osgViewer::View::requestWarpPointer( x, y );
        }
    }
    
    void default_requestWarpPointer( float x, float y ) {
        osgViewer::View::requestWarpPointer( x, y );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setThreadingModel( ::osgViewer::ViewerBase::ThreadingModel threadingModel ) {
        if( bp::override func_setThreadingModel = this->get_override( "setThreadingModel" ) )
            func_setThreadingModel( threadingModel );
        else{
            this->osgViewer::ViewerBase::setThreadingModel( threadingModel );
        }
    }
    
    void default_setThreadingModel( ::osgViewer::ViewerBase::ThreadingModel threadingModel ) {
        osgViewer::ViewerBase::setThreadingModel( threadingModel );
    }

    virtual void setUpThreading(  ) {
        if( bp::override func_setUpThreading = this->get_override( "setUpThreading" ) )
            func_setUpThreading(  );
        else{
            this->osgViewer::ViewerBase::setUpThreading(  );
        }
    }
    
    void default_setUpThreading(  ) {
        osgViewer::ViewerBase::setUpThreading( );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual void startThreading(  ) {
        if( bp::override func_startThreading = this->get_override( "startThreading" ) )
            func_startThreading(  );
        else{
            this->osgViewer::ViewerBase::startThreading(  );
        }
    }
    
    void default_startThreading(  ) {
        osgViewer::ViewerBase::startThreading( );
    }

    virtual void stopThreading(  ) {
        if( bp::override func_stopThreading = this->get_override( "stopThreading" ) )
            func_stopThreading(  );
        else{
            this->osgViewer::ViewerBase::stopThreading(  );
        }
    }
    
    void default_stopThreading(  ) {
        osgViewer::ViewerBase::stopThreading( );
    }

    virtual ::osgViewer::ViewerBase::ThreadingModel suggestBestThreadingModel(  ) {
        if( bp::override func_suggestBestThreadingModel = this->get_override( "suggestBestThreadingModel" ) )
            return func_suggestBestThreadingModel(  );
        else{
            return this->osgViewer::ViewerBase::suggestBestThreadingModel(  );
        }
    }
    
    ::osgViewer::ViewerBase::ThreadingModel default_suggestBestThreadingModel(  ) {
        return osgViewer::ViewerBase::suggestBestThreadingModel( );
    }

};

void register_Viewer_class(){

    { //::osgViewer::Viewer
        typedef bp::class_< Viewer_wrapper, bp::bases< osgViewer::ViewerBase, osgViewer::View >, osg::ref_ptr< ::osgViewer::Viewer >, boost::noncopyable > Viewer_exposer_t;
        Viewer_exposer_t Viewer_exposer = Viewer_exposer_t( "Viewer", "\n Viewer holds a single view on to a single scene.\n", bp::init< >("\n Viewer holds a single view on to a single scene.\n") );
        bp::scope Viewer_scope( Viewer_exposer );
        Viewer_exposer.def( bp::init< osg::ArgumentParser & >(( bp::arg("arguments") )) );
        bp::implicitly_convertible< osg::ArgumentParser &, osgViewer::Viewer >();
        { //::osgViewer::Viewer::advance
        
            typedef void ( ::osgViewer::Viewer::*advance_function_type )( double ) ;
            typedef void ( Viewer_wrapper::*default_advance_function_type )( double ) ;
            
            Viewer_exposer.def( 
                "advance"
                , advance_function_type(&::osgViewer::Viewer::advance)
                , default_advance_function_type(&Viewer_wrapper::default_advance)
                , ( bp::arg("simulationTime")=1.79769313486231570814527423731704356798070567525844996599e+308 ) );
        
        }
        { //::osgViewer::Viewer::checkEvents
        
            typedef bool ( ::osgViewer::Viewer::*checkEvents_function_type )(  ) ;
            typedef bool ( Viewer_wrapper::*default_checkEvents_function_type )(  ) ;
            
            Viewer_exposer.def( 
                "checkEvents"
                , checkEvents_function_type(&::osgViewer::Viewer::checkEvents)
                , default_checkEvents_function_type(&Viewer_wrapper::default_checkEvents) );
        
        }
        { //::osgViewer::Viewer::checkNeedToDoFrame
        
            typedef bool ( ::osgViewer::Viewer::*checkNeedToDoFrame_function_type )(  ) ;
            typedef bool ( Viewer_wrapper::*default_checkNeedToDoFrame_function_type )(  ) ;
            
            Viewer_exposer.def( 
                "checkNeedToDoFrame"
                , checkNeedToDoFrame_function_type(&::osgViewer::Viewer::checkNeedToDoFrame)
                , default_checkNeedToDoFrame_function_type(&Viewer_wrapper::default_checkNeedToDoFrame) );
        
        }
        { //::osgViewer::Viewer::className
        
            typedef char const * ( ::osgViewer::Viewer::*className_function_type )(  ) const;
            typedef char const * ( Viewer_wrapper::*default_className_function_type )(  ) const;
            
            Viewer_exposer.def( 
                "className"
                , className_function_type(&::osgViewer::Viewer::className)
                , default_className_function_type(&Viewer_wrapper::default_className) );
        
        }
        { //::osgViewer::Viewer::clone
        
            typedef ::osg::Object * ( ::osgViewer::Viewer::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Viewer_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Viewer_exposer.def( 
                "clone"
                , clone_function_type(&::osgViewer::Viewer::clone)
                , default_clone_function_type(&Viewer_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgViewer::Viewer::cloneType
        
            typedef ::osg::Object * ( ::osgViewer::Viewer::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Viewer_wrapper::*default_cloneType_function_type )(  ) const;
            
            Viewer_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgViewer::Viewer::cloneType)
                , default_cloneType_function_type(&Viewer_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgViewer::Viewer::elapsedTime
        
            typedef double ( ::osgViewer::Viewer::*elapsedTime_function_type )(  ) ;
            typedef double ( Viewer_wrapper::*default_elapsedTime_function_type )(  ) ;
            
            Viewer_exposer.def( 
                "elapsedTime"
                , elapsedTime_function_type(&::osgViewer::Viewer::elapsedTime)
                , default_elapsedTime_function_type(&Viewer_wrapper::default_elapsedTime) );
        
        }
        { //::osgViewer::Viewer::eventTraversal
        
            typedef void ( ::osgViewer::Viewer::*eventTraversal_function_type )(  ) ;
            typedef void ( Viewer_wrapper::*default_eventTraversal_function_type )(  ) ;
            
            Viewer_exposer.def( 
                "eventTraversal"
                , eventTraversal_function_type(&::osgViewer::Viewer::eventTraversal)
                , default_eventTraversal_function_type(&Viewer_wrapper::default_eventTraversal) );
        
        }
        { //::osgViewer::Viewer::getAllThreads
        
            typedef void ( ::osgViewer::Viewer::*getAllThreads_function_type )( ::std::vector< OpenThreads::Thread* > &,bool ) ;
            typedef void ( Viewer_wrapper::*default_getAllThreads_function_type )( ::std::vector< OpenThreads::Thread* > &,bool ) ;
            
            Viewer_exposer.def( 
                "getAllThreads"
                , getAllThreads_function_type(&::osgViewer::Viewer::getAllThreads)
                , default_getAllThreads_function_type(&Viewer_wrapper::default_getAllThreads)
                , ( bp::arg("threads"), bp::arg("onlyActive")=(bool)(true) ) );
        
        }
        { //::osgViewer::Viewer::getCameras
        
            typedef void ( ::osgViewer::Viewer::*getCameras_function_type )( ::std::vector< osg::Camera* > &,bool ) ;
            typedef void ( Viewer_wrapper::*default_getCameras_function_type )( ::std::vector< osg::Camera* > &,bool ) ;
            
            Viewer_exposer.def( 
                "getCameras"
                , getCameras_function_type(&::osgViewer::Viewer::getCameras)
                , default_getCameras_function_type(&Viewer_wrapper::default_getCameras)
                , ( bp::arg("cameras"), bp::arg("onlyActive")=(bool)(true) ) );
        
        }
        { //::osgViewer::Viewer::getContexts
        
            typedef void ( ::osgViewer::Viewer::*getContexts_function_type )( ::std::vector< osg::GraphicsContext* > &,bool ) ;
            typedef void ( Viewer_wrapper::*default_getContexts_function_type )( ::std::vector< osg::GraphicsContext* > &,bool ) ;
            
            Viewer_exposer.def( 
                "getContexts"
                , getContexts_function_type(&::osgViewer::Viewer::getContexts)
                , default_getContexts_function_type(&Viewer_wrapper::default_getContexts)
                , ( bp::arg("contexts"), bp::arg("onlyValid")=(bool)(true) ) );
        
        }
        { //::osgViewer::Viewer::getOperationThreads
        
            typedef void ( ::osgViewer::Viewer::*getOperationThreads_function_type )( ::std::vector< osg::OperationThread* > &,bool ) ;
            typedef void ( Viewer_wrapper::*default_getOperationThreads_function_type )( ::std::vector< osg::OperationThread* > &,bool ) ;
            
            Viewer_exposer.def( 
                "getOperationThreads"
                , getOperationThreads_function_type(&::osgViewer::Viewer::getOperationThreads)
                , default_getOperationThreads_function_type(&Viewer_wrapper::default_getOperationThreads)
                , ( bp::arg("threads"), bp::arg("onlyActive")=(bool)(true) ) );
        
        }
        { //::osgViewer::Viewer::getScenes
        
            typedef void ( ::osgViewer::Viewer::*getScenes_function_type )( ::std::vector< osgViewer::Scene* > &,bool ) ;
            typedef void ( Viewer_wrapper::*default_getScenes_function_type )( ::std::vector< osgViewer::Scene* > &,bool ) ;
            
            Viewer_exposer.def( 
                "getScenes"
                , getScenes_function_type(&::osgViewer::Viewer::getScenes)
                , default_getScenes_function_type(&Viewer_wrapper::default_getScenes)
                , ( bp::arg("scenes"), bp::arg("onlyValid")=(bool)(true) ) );
        
        }
        { //::osgViewer::Viewer::getUsage
        
            typedef void ( ::osgViewer::Viewer::*getUsage_function_type )( ::osg::ApplicationUsage & ) const;
            typedef void ( Viewer_wrapper::*default_getUsage_function_type )( ::osg::ApplicationUsage & ) const;
            
            Viewer_exposer.def( 
                "getUsage"
                , getUsage_function_type(&::osgViewer::Viewer::getUsage)
                , default_getUsage_function_type(&Viewer_wrapper::default_getUsage)
                , ( bp::arg("usage") ) );
        
        }
        { //::osgViewer::Viewer::getViewerFrameStamp
        
            typedef ::osg::FrameStamp * ( ::osgViewer::Viewer::*getViewerFrameStamp_function_type )(  ) ;
            typedef ::osg::FrameStamp * ( Viewer_wrapper::*default_getViewerFrameStamp_function_type )(  ) ;
            
            Viewer_exposer.def( 
                "getViewerFrameStamp"
                , getViewerFrameStamp_function_type(&::osgViewer::Viewer::getViewerFrameStamp)
                , default_getViewerFrameStamp_function_type(&Viewer_wrapper::default_getViewerFrameStamp)
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::Viewer::getViewerStats
        
            typedef ::osg::Stats * ( ::osgViewer::Viewer::*getViewerStats_function_type )(  ) ;
            typedef ::osg::Stats * ( Viewer_wrapper::*default_getViewerStats_function_type )(  ) ;
            
            Viewer_exposer.def( 
                "getViewerStats"
                , getViewerStats_function_type(&::osgViewer::Viewer::getViewerStats)
                , default_getViewerStats_function_type(&Viewer_wrapper::default_getViewerStats)
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::Viewer::getViewerStats
        
            typedef ::osg::Stats const * ( ::osgViewer::Viewer::*getViewerStats_function_type )(  ) const;
            typedef ::osg::Stats const * ( Viewer_wrapper::*default_getViewerStats_function_type )(  ) const;
            
            Viewer_exposer.def( 
                "getViewerStats"
                , getViewerStats_function_type(&::osgViewer::Viewer::getViewerStats)
                , default_getViewerStats_function_type(&Viewer_wrapper::default_getViewerStats)
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::Viewer::getViews
        
            typedef void ( ::osgViewer::Viewer::*getViews_function_type )( ::std::vector< osgViewer::View* > &,bool ) ;
            typedef void ( Viewer_wrapper::*default_getViews_function_type )( ::std::vector< osgViewer::View* > &,bool ) ;
            
            Viewer_exposer.def( 
                "getViews"
                , getViews_function_type(&::osgViewer::Viewer::getViews)
                , default_getViews_function_type(&Viewer_wrapper::default_getViews)
                , ( bp::arg("views"), bp::arg("onlyValid")=(bool)(true) ) );
        
        }
        { //::osgViewer::Viewer::isRealized
        
            typedef bool ( ::osgViewer::Viewer::*isRealized_function_type )(  ) const;
            typedef bool ( Viewer_wrapper::*default_isRealized_function_type )(  ) const;
            
            Viewer_exposer.def( 
                "isRealized"
                , isRealized_function_type(&::osgViewer::Viewer::isRealized)
                , default_isRealized_function_type(&Viewer_wrapper::default_isRealized) );
        
        }
        { //::osgViewer::Viewer::isSameKindAs
        
            typedef bool ( ::osgViewer::Viewer::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Viewer_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Viewer_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgViewer::Viewer::isSameKindAs)
                , default_isSameKindAs_function_type(&Viewer_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgViewer::Viewer::libraryName
        
            typedef char const * ( ::osgViewer::Viewer::*libraryName_function_type )(  ) const;
            typedef char const * ( Viewer_wrapper::*default_libraryName_function_type )(  ) const;
            
            Viewer_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgViewer::Viewer::libraryName)
                , default_libraryName_function_type(&Viewer_wrapper::default_libraryName) );
        
        }
        { //::osgViewer::Viewer::readConfiguration
        
            typedef bool ( ::osgViewer::Viewer::*readConfiguration_function_type )( ::std::string const & ) ;
            typedef bool ( Viewer_wrapper::*default_readConfiguration_function_type )( ::std::string const & ) ;
            
            Viewer_exposer.def( 
                "readConfiguration"
                , readConfiguration_function_type(&::osgViewer::Viewer::readConfiguration)
                , default_readConfiguration_function_type(&Viewer_wrapper::default_readConfiguration)
                , ( bp::arg("filename") ) );
        
        }
        { //::osgViewer::Viewer::realize
        
            typedef void ( ::osgViewer::Viewer::*realize_function_type )(  ) ;
            typedef void ( Viewer_wrapper::*default_realize_function_type )(  ) ;
            
            Viewer_exposer.def( 
                "realize"
                , realize_function_type(&::osgViewer::Viewer::realize)
                , default_realize_function_type(&Viewer_wrapper::default_realize) );
        
        }
        { //::osgViewer::Viewer::run
        
            typedef int ( ::osgViewer::Viewer::*run_function_type )(  ) ;
            typedef int ( Viewer_wrapper::*default_run_function_type )(  ) ;
            
            Viewer_exposer.def( 
                "run"
                , run_function_type(&::osgViewer::Viewer::run)
                , default_run_function_type(&Viewer_wrapper::default_run) );
        
        }
        { //::osgViewer::Viewer::setReferenceTime
        
            typedef void ( ::osgViewer::Viewer::*setReferenceTime_function_type )( double ) ;
            
            Viewer_exposer.def( 
                "setReferenceTime"
                , setReferenceTime_function_type( &::osgViewer::Viewer::setReferenceTime )
                , ( bp::arg("time")=0.0 ) );
        
        }
        { //::osgViewer::Viewer::setSceneData
        
            typedef void ( ::osgViewer::Viewer::*setSceneData_function_type )( ::osg::Node * ) ;
            typedef void ( Viewer_wrapper::*default_setSceneData_function_type )( ::osg::Node * ) ;
            
            Viewer_exposer.def( 
                "setSceneData"
                , setSceneData_function_type(&::osgViewer::Viewer::setSceneData)
                , default_setSceneData_function_type(&Viewer_wrapper::default_setSceneData)
                , ( bp::arg("node") ) );
        
        }
        { //::osgViewer::Viewer::setStartTick
        
            typedef void ( ::osgViewer::Viewer::*setStartTick_function_type )( ::osg::Timer_t ) ;
            typedef void ( Viewer_wrapper::*default_setStartTick_function_type )( ::osg::Timer_t ) ;
            
            Viewer_exposer.def( 
                "setStartTick"
                , setStartTick_function_type(&::osgViewer::Viewer::setStartTick)
                , default_setStartTick_function_type(&Viewer_wrapper::default_setStartTick)
                , ( bp::arg("tick") ) );
        
        }
        { //::osgViewer::Viewer::setUpViewerAsEmbeddedInWindow
        
            typedef ::osgViewer::GraphicsWindowEmbedded * ( ::osgViewer::Viewer::*setUpViewerAsEmbeddedInWindow_function_type )( int,int,int,int ) ;
            typedef ::osgViewer::GraphicsWindowEmbedded * ( Viewer_wrapper::*default_setUpViewerAsEmbeddedInWindow_function_type )( int,int,int,int ) ;
            
            Viewer_exposer.def( 
                "setUpViewerAsEmbeddedInWindow"
                , setUpViewerAsEmbeddedInWindow_function_type(&::osgViewer::Viewer::setUpViewerAsEmbeddedInWindow)
                , default_setUpViewerAsEmbeddedInWindow_function_type(&Viewer_wrapper::default_setUpViewerAsEmbeddedInWindow)
                , ( bp::arg("x"), bp::arg("y"), bp::arg("width"), bp::arg("height") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::Viewer::setViewerStats
        
            typedef void ( ::osgViewer::Viewer::*setViewerStats_function_type )( ::osg::Stats * ) ;
            typedef void ( Viewer_wrapper::*default_setViewerStats_function_type )( ::osg::Stats * ) ;
            
            Viewer_exposer.def( 
                "setViewerStats"
                , setViewerStats_function_type(&::osgViewer::Viewer::setViewerStats)
                , default_setViewerStats_function_type(&Viewer_wrapper::default_setViewerStats)
                , ( bp::arg("stats") ) );
        
        }
        { //::osgViewer::Viewer::take
        
            typedef void ( ::osgViewer::Viewer::*take_function_type )( ::osg::View & ) ;
            typedef void ( Viewer_wrapper::*default_take_function_type )( ::osg::View & ) ;
            
            Viewer_exposer.def( 
                "take"
                , take_function_type(&::osgViewer::Viewer::take)
                , default_take_function_type(&Viewer_wrapper::default_take)
                , ( bp::arg("rhs") ) );
        
        }
        { //::osgViewer::Viewer::updateTraversal
        
            typedef void ( ::osgViewer::Viewer::*updateTraversal_function_type )(  ) ;
            typedef void ( Viewer_wrapper::*default_updateTraversal_function_type )(  ) ;
            
            Viewer_exposer.def( 
                "updateTraversal"
                , updateTraversal_function_type(&::osgViewer::Viewer::updateTraversal)
                , default_updateTraversal_function_type(&Viewer_wrapper::default_updateTraversal) );
        
        }
        { //::osgViewer::View::asView
        
            typedef ::osg::View * ( ::osgViewer::View::*asView_function_type )(  ) ;
            typedef ::osg::View * ( Viewer_wrapper::*default_asView_function_type )(  ) ;
            
            Viewer_exposer.def( 
                "asView"
                , asView_function_type(&::osgViewer::View::asView)
                , default_asView_function_type(&Viewer_wrapper::default_asView)
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::ViewerBase::frame
        
            typedef void ( ::osgViewer::ViewerBase::*frame_function_type )( double ) ;
            typedef void ( Viewer_wrapper::*default_frame_function_type )( double ) ;
            
            Viewer_exposer.def( 
                "frame"
                , frame_function_type(&::osgViewer::ViewerBase::frame)
                , default_frame_function_type(&Viewer_wrapper::default_frame)
                , ( bp::arg("simulationTime")=1.79769313486231570814527423731704356798070567525844996599e+308 ) );
        
        }
        { //::osgViewer::ViewerBase::getWindows
        
            typedef boost::python::object ( *default_getWindows_function_type )( ::osgViewer::ViewerBase &,bool );
            
            Viewer_exposer.def( 
                "getWindows"
                , default_getWindows_function_type( &Viewer_wrapper::default_getWindows )
                , ( bp::arg("inst"), bp::arg("onlyValid")=(bool)(true) ) );
        
        }
        { //::osgViewer::ViewerBase::renderingTraversals
        
            typedef void ( ::osgViewer::ViewerBase::*renderingTraversals_function_type )(  ) ;
            typedef void ( Viewer_wrapper::*default_renderingTraversals_function_type )(  ) ;
            
            Viewer_exposer.def( 
                "renderingTraversals"
                , renderingTraversals_function_type(&::osgViewer::ViewerBase::renderingTraversals)
                , default_renderingTraversals_function_type(&Viewer_wrapper::default_renderingTraversals) );
        
        }
        { //::osgViewer::View::requestContinuousUpdate
        
            typedef void ( ::osgViewer::View::*requestContinuousUpdate_function_type )( bool ) ;
            typedef void ( Viewer_wrapper::*default_requestContinuousUpdate_function_type )( bool ) ;
            
            Viewer_exposer.def( 
                "requestContinuousUpdate"
                , requestContinuousUpdate_function_type(&::osgViewer::View::requestContinuousUpdate)
                , default_requestContinuousUpdate_function_type(&Viewer_wrapper::default_requestContinuousUpdate)
                , ( bp::arg("needed")=(bool)(true) ) );
        
        }
        { //::osgViewer::View::requestRedraw
        
            typedef void ( ::osgViewer::View::*requestRedraw_function_type )(  ) ;
            typedef void ( Viewer_wrapper::*default_requestRedraw_function_type )(  ) ;
            
            Viewer_exposer.def( 
                "requestRedraw"
                , requestRedraw_function_type(&::osgViewer::View::requestRedraw)
                , default_requestRedraw_function_type(&Viewer_wrapper::default_requestRedraw) );
        
        }
        { //::osgViewer::View::requestWarpPointer
        
            typedef void ( ::osgViewer::View::*requestWarpPointer_function_type )( float,float ) ;
            typedef void ( Viewer_wrapper::*default_requestWarpPointer_function_type )( float,float ) ;
            
            Viewer_exposer.def( 
                "requestWarpPointer"
                , requestWarpPointer_function_type(&::osgViewer::View::requestWarpPointer)
                , default_requestWarpPointer_function_type(&Viewer_wrapper::default_requestWarpPointer)
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::osgViewer::ViewerBase::setThreadingModel
        
            typedef void ( ::osgViewer::ViewerBase::*setThreadingModel_function_type )( ::osgViewer::ViewerBase::ThreadingModel ) ;
            typedef void ( Viewer_wrapper::*default_setThreadingModel_function_type )( ::osgViewer::ViewerBase::ThreadingModel ) ;
            
            Viewer_exposer.def( 
                "setThreadingModel"
                , setThreadingModel_function_type(&::osgViewer::ViewerBase::setThreadingModel)
                , default_setThreadingModel_function_type(&Viewer_wrapper::default_setThreadingModel)
                , ( bp::arg("threadingModel") ) );
        
        }
        { //::osgViewer::ViewerBase::setUpThreading
        
            typedef void ( ::osgViewer::ViewerBase::*setUpThreading_function_type )(  ) ;
            typedef void ( Viewer_wrapper::*default_setUpThreading_function_type )(  ) ;
            
            Viewer_exposer.def( 
                "setUpThreading"
                , setUpThreading_function_type(&::osgViewer::ViewerBase::setUpThreading)
                , default_setUpThreading_function_type(&Viewer_wrapper::default_setUpThreading) );
        
        }
        { //::osgViewer::ViewerBase::startThreading
        
            typedef void ( ::osgViewer::ViewerBase::*startThreading_function_type )(  ) ;
            typedef void ( Viewer_wrapper::*default_startThreading_function_type )(  ) ;
            
            Viewer_exposer.def( 
                "startThreading"
                , startThreading_function_type(&::osgViewer::ViewerBase::startThreading)
                , default_startThreading_function_type(&Viewer_wrapper::default_startThreading) );
        
        }
        { //::osgViewer::ViewerBase::stopThreading
        
            typedef void ( ::osgViewer::ViewerBase::*stopThreading_function_type )(  ) ;
            typedef void ( Viewer_wrapper::*default_stopThreading_function_type )(  ) ;
            
            Viewer_exposer.def( 
                "stopThreading"
                , stopThreading_function_type(&::osgViewer::ViewerBase::stopThreading)
                , default_stopThreading_function_type(&Viewer_wrapper::default_stopThreading) );
        
        }
        { //::osgViewer::ViewerBase::suggestBestThreadingModel
        
            typedef ::osgViewer::ViewerBase::ThreadingModel ( ::osgViewer::ViewerBase::*suggestBestThreadingModel_function_type )(  ) ;
            typedef ::osgViewer::ViewerBase::ThreadingModel ( Viewer_wrapper::*default_suggestBestThreadingModel_function_type )(  ) ;
            
            Viewer_exposer.def( 
                "suggestBestThreadingModel"
                , suggestBestThreadingModel_function_type(&::osgViewer::ViewerBase::suggestBestThreadingModel)
                , default_suggestBestThreadingModel_function_type(&Viewer_wrapper::default_suggestBestThreadingModel) );
        
        }
    }

}
