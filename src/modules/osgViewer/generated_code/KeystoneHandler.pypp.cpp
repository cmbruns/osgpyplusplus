// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgViewer.h"
#include "wrap_referenced.h"
#include "KeystoneHandler.pypp.hpp"

namespace bp = boost::python;

struct KeystoneHandler_wrapper : osgViewer::KeystoneHandler, bp::wrapper< osgViewer::KeystoneHandler > {

    KeystoneHandler_wrapper(::osgViewer::Keystone * keystone )
    : osgViewer::KeystoneHandler( boost::python::ptr(keystone) )
      , bp::wrapper< osgViewer::KeystoneHandler >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgGA::GUIEventHandler::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgGA::GUIEventHandler::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgGA::GUIEventHandler::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgGA::GUIEventHandler::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgGA::GUIEventHandler::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgGA::GUIEventHandler::cloneType( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual void event( ::osg::NodeVisitor * nv, ::osg::Drawable * drawable ) {
        if( bp::override func_event = this->get_override( "event" ) )
            func_event( boost::python::ptr(nv), boost::python::ptr(drawable) );
        else{
            this->osgGA::GUIEventHandler::event( boost::python::ptr(nv), boost::python::ptr(drawable) );
        }
    }
    
    void default_event( ::osg::NodeVisitor * nv, ::osg::Drawable * drawable ) {
        osgGA::GUIEventHandler::event( boost::python::ptr(nv), boost::python::ptr(drawable) );
    }

    virtual void getUsage( ::osg::ApplicationUsage & arg0 ) const  {
        if( bp::override func_getUsage = this->get_override( "getUsage" ) )
            func_getUsage( boost::ref(arg0) );
        else{
            this->osgGA::GUIEventHandler::getUsage( boost::ref(arg0) );
        }
    }
    
    void default_getUsage( ::osg::ApplicationUsage & arg0 ) const  {
        osgGA::GUIEventHandler::getUsage( boost::ref(arg0) );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgGA::GUIEventHandler::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgGA::GUIEventHandler::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgGA::GUIEventHandler::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgGA::GUIEventHandler::libraryName( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_KeystoneHandler_class(){

    { //::osgViewer::KeystoneHandler
        typedef bp::class_< KeystoneHandler_wrapper, bp::bases< ::osgGA::GUIEventHandler >, osg::ref_ptr< ::osgViewer::KeystoneHandler >, boost::noncopyable > KeystoneHandler_exposer_t;
        KeystoneHandler_exposer_t KeystoneHandler_exposer = KeystoneHandler_exposer_t( "KeystoneHandler", bp::init< osgViewer::Keystone * >(( bp::arg("keystone") )) );
        bp::scope KeystoneHandler_scope( KeystoneHandler_exposer );
        bp::enum_< osgViewer::KeystoneHandler::Region>("Region")
            .value("NONE_SELECTED", osgViewer::KeystoneHandler::NONE_SELECTED)
            .value("TOP_LEFT", osgViewer::KeystoneHandler::TOP_LEFT)
            .value("TOP", osgViewer::KeystoneHandler::TOP)
            .value("TOP_RIGHT", osgViewer::KeystoneHandler::TOP_RIGHT)
            .value("RIGHT", osgViewer::KeystoneHandler::RIGHT)
            .value("BOTTOM_RIGHT", osgViewer::KeystoneHandler::BOTTOM_RIGHT)
            .value("BOTTOM", osgViewer::KeystoneHandler::BOTTOM)
            .value("BOTTOM_LEFT", osgViewer::KeystoneHandler::BOTTOM_LEFT)
            .value("LEFT", osgViewer::KeystoneHandler::LEFT)
            .value("CENTER", osgViewer::KeystoneHandler::CENTER)
            .export_values()
            ;
        bp::implicitly_convertible< osgViewer::Keystone *, osgViewer::KeystoneHandler >();
        { //::osgViewer::KeystoneHandler::getKeystoneEditingEnabled
        
            typedef bool ( ::osgViewer::KeystoneHandler::*getKeystoneEditingEnabled_function_type )(  ) const;
            
            KeystoneHandler_exposer.def( 
                "getKeystoneEditingEnabled"
                , getKeystoneEditingEnabled_function_type( &::osgViewer::KeystoneHandler::getKeystoneEditingEnabled ) );
        
        }
        { //::osgViewer::KeystoneHandler::move
        
            typedef void ( ::osgViewer::KeystoneHandler::*move_function_type )( ::osgViewer::KeystoneHandler::Region,::osg::Vec2d const & ) ;
            
            KeystoneHandler_exposer.def( 
                "move"
                , move_function_type( &::osgViewer::KeystoneHandler::move )
                , ( bp::arg("region"), bp::arg("delta") ) );
        
        }
        { //::osgViewer::KeystoneHandler::setKeystoneEditingEnabled
        
            typedef void ( ::osgViewer::KeystoneHandler::*setKeystoneEditingEnabled_function_type )( bool ) ;
            
            KeystoneHandler_exposer.def( 
                "setKeystoneEditingEnabled"
                , setKeystoneEditingEnabled_function_type( &::osgViewer::KeystoneHandler::setKeystoneEditingEnabled )
                , ( bp::arg("enabled") ) );
        
        }
    }

}
