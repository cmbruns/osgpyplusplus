// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "wrap_osgViewer.h"
#include "wrap_referenced.h"
#include "ViewerBase.pypp.hpp"

namespace bp = boost::python;

struct ViewerBase_wrapper : osgViewer::ViewerBase, bp::wrapper< osgViewer::ViewerBase > {

    virtual void advance( double simulationTime=1.79769313486231570814527423731704356798070567525844996599e+308 ){
        bp::override func_advance = this->get_override( "advance" );
        func_advance( simulationTime );
    }

    virtual bool checkEvents(  ){
        bp::override func_checkEvents = this->get_override( "checkEvents" );
        return func_checkEvents(  );
    }

    virtual bool checkNeedToDoFrame(  ){
        bp::override func_checkNeedToDoFrame = this->get_override( "checkNeedToDoFrame" );
        return func_checkNeedToDoFrame(  );
    }

    virtual double elapsedTime(  ){
        bp::override func_elapsedTime = this->get_override( "elapsedTime" );
        return func_elapsedTime(  );
    }

    virtual void eventTraversal(  ){
        bp::override func_eventTraversal = this->get_override( "eventTraversal" );
        func_eventTraversal(  );
    }

    virtual void frame( double simulationTime=1.79769313486231570814527423731704356798070567525844996599e+308 ) {
        if( bp::override func_frame = this->get_override( "frame" ) )
            func_frame( simulationTime );
        else{
            this->osgViewer::ViewerBase::frame( simulationTime );
        }
    }
    
    void default_frame( double simulationTime=1.79769313486231570814527423731704356798070567525844996599e+308 ) {
        osgViewer::ViewerBase::frame( simulationTime );
    }

    virtual void getAllThreads( ::std::vector< OpenThreads::Thread* > & threads, bool onlyActive=true ){
        bp::override func_getAllThreads = this->get_override( "getAllThreads" );
        func_getAllThreads( boost::ref(threads), onlyActive );
    }

    virtual void getCameras( ::std::vector< osg::Camera* > & cameras, bool onlyActive=true ){
        bp::override func_getCameras = this->get_override( "getCameras" );
        func_getCameras( boost::ref(cameras), onlyActive );
    }

    virtual void getContexts( ::std::vector< osg::GraphicsContext* > & contexts, bool onlyValid=true ){
        bp::override func_getContexts = this->get_override( "getContexts" );
        func_getContexts( boost::ref(contexts), onlyValid );
    }

    virtual void getOperationThreads( ::std::vector< osg::OperationThread* > & threads, bool onlyActive=true ){
        bp::override func_getOperationThreads = this->get_override( "getOperationThreads" );
        func_getOperationThreads( boost::ref(threads), onlyActive );
    }

    virtual void getScenes( ::std::vector< osgViewer::Scene* > & scenes, bool onlyValid=true ){
        bp::override func_getScenes = this->get_override( "getScenes" );
        func_getScenes( boost::ref(scenes), onlyValid );
    }

    virtual void getUsage( ::osg::ApplicationUsage & usage ) const {
        bp::override func_getUsage = this->get_override( "getUsage" );
        func_getUsage( boost::ref(usage) );
    }

    virtual ::osg::FrameStamp * getViewerFrameStamp(  ){
        bp::override func_getViewerFrameStamp = this->get_override( "getViewerFrameStamp" );
        return func_getViewerFrameStamp(  );
    }

    virtual ::osg::Stats * getViewerStats(  ){
        bp::override func_getViewerStats = this->get_override( "getViewerStats" );
        return func_getViewerStats(  );
    }

    virtual ::osg::Stats const * getViewerStats(  ) const {
        bp::override func_getViewerStats = this->get_override( "getViewerStats" );
        return func_getViewerStats(  );
    }

    virtual void getViews( ::std::vector< osgViewer::View* > & views, bool onlyValid=true ) {
        namespace bpl = boost::python;
        if( bpl::override func_getViews = this->get_override( "getViews" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_getViews.ptr(), onlyValid );
            views = boost::python::extract< ::std::vector<osgViewer::View*,std::allocator<osgViewer::View*> > >( pyplus_conv::get_out_argument( py_result, "views" ) );
        }
        else{
              PyErr_SetString(PyExc_NotImplementedError, "Attempted calling Pure Virtual function that is not implemented :getViews");
              boost::python::throw_error_already_set();
        }
    }
    
    static boost::python::object default_getViews( ::osgViewer::ViewerBase & inst, bool onlyValid=true ){
        std::vector<osgViewer::View*,std::allocator<osgViewer::View*> > views2;
        if( dynamic_cast< ViewerBase_wrapper * >( boost::addressof( inst ) ) ){
              PyErr_SetString(PyExc_NotImplementedError, "Attempted calling Pure Virtual function that is not implemented :getViews");
              boost::python::throw_error_already_set();
        }
        else{
            inst.getViews(views2, onlyValid);
        }
        return bp::object( views2 );
    }

    virtual void getWindows( ::std::vector< osgViewer::GraphicsWindow* > & windows, bool onlyValid=true ) {
        namespace bpl = boost::python;
        if( bpl::override func_getWindows = this->get_override( "getWindows" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_getWindows.ptr(), onlyValid );
            windows = boost::python::extract< ::std::vector<osgViewer::GraphicsWindow*,std::allocator<osgViewer::GraphicsWindow*> > >( pyplus_conv::get_out_argument( py_result, "windows" ) );
        }
        else{
            osgViewer::ViewerBase::getWindows( boost::ref(windows), onlyValid );
        }
    }
    
    static boost::python::object default_getWindows( ::osgViewer::ViewerBase & inst, bool onlyValid=true ){
        std::vector<osgViewer::GraphicsWindow*,std::allocator<osgViewer::GraphicsWindow*> > windows2;
        if( dynamic_cast< ViewerBase_wrapper * >( boost::addressof( inst ) ) ){
            inst.::osgViewer::ViewerBase::getWindows(windows2, onlyValid);
        }
        else{
            inst.getWindows(windows2, onlyValid);
        }
        return bp::object( windows2 );
    }

    virtual bool isRealized(  ) const {
        bp::override func_isRealized = this->get_override( "isRealized" );
        return func_isRealized(  );
    }

    virtual bool readConfiguration( ::std::string const & filename ){
        bp::override func_readConfiguration = this->get_override( "readConfiguration" );
        return func_readConfiguration( filename );
    }

    virtual void realize(  ){
        bp::override func_realize = this->get_override( "realize" );
        func_realize(  );
    }

    virtual void renderingTraversals(  ) {
        if( bp::override func_renderingTraversals = this->get_override( "renderingTraversals" ) )
            func_renderingTraversals(  );
        else{
            this->osgViewer::ViewerBase::renderingTraversals(  );
        }
    }
    
    void default_renderingTraversals(  ) {
        osgViewer::ViewerBase::renderingTraversals( );
    }

    virtual int run(  ) {
        if( bp::override func_run = this->get_override( "run" ) )
            return func_run(  );
        else{
            return this->osgViewer::ViewerBase::run(  );
        }
    }
    
    int default_run(  ) {
        return osgViewer::ViewerBase::run( );
    }

    virtual void setThreadingModel( ::osgViewer::ViewerBase::ThreadingModel threadingModel ) {
        if( bp::override func_setThreadingModel = this->get_override( "setThreadingModel" ) )
            func_setThreadingModel( threadingModel );
        else{
            this->osgViewer::ViewerBase::setThreadingModel( threadingModel );
        }
    }
    
    void default_setThreadingModel( ::osgViewer::ViewerBase::ThreadingModel threadingModel ) {
        osgViewer::ViewerBase::setThreadingModel( threadingModel );
    }

    virtual void setUpThreading(  ) {
        if( bp::override func_setUpThreading = this->get_override( "setUpThreading" ) )
            func_setUpThreading(  );
        else{
            this->osgViewer::ViewerBase::setUpThreading(  );
        }
    }
    
    void default_setUpThreading(  ) {
        osgViewer::ViewerBase::setUpThreading( );
    }

    virtual void setViewerStats( ::osg::Stats * stats ){
        bp::override func_setViewerStats = this->get_override( "setViewerStats" );
        func_setViewerStats( boost::python::ptr(stats) );
    }

    virtual void startThreading(  ) {
        if( bp::override func_startThreading = this->get_override( "startThreading" ) )
            func_startThreading(  );
        else{
            this->osgViewer::ViewerBase::startThreading(  );
        }
    }
    
    void default_startThreading(  ) {
        osgViewer::ViewerBase::startThreading( );
    }

    virtual void stopThreading(  ) {
        if( bp::override func_stopThreading = this->get_override( "stopThreading" ) )
            func_stopThreading(  );
        else{
            this->osgViewer::ViewerBase::stopThreading(  );
        }
    }
    
    void default_stopThreading(  ) {
        osgViewer::ViewerBase::stopThreading( );
    }

    virtual ::osgViewer::ViewerBase::ThreadingModel suggestBestThreadingModel(  ) {
        if( bp::override func_suggestBestThreadingModel = this->get_override( "suggestBestThreadingModel" ) )
            return func_suggestBestThreadingModel(  );
        else{
            return this->osgViewer::ViewerBase::suggestBestThreadingModel(  );
        }
    }
    
    ::osgViewer::ViewerBase::ThreadingModel default_suggestBestThreadingModel(  ) {
        return osgViewer::ViewerBase::suggestBestThreadingModel( );
    }

    virtual void updateTraversal(  ){
        bp::override func_updateTraversal = this->get_override( "updateTraversal" );
        func_updateTraversal(  );
    }

    virtual char const * className(  ) const {
        bp::override func_className = this->get_override( "className" );
        return func_className(  );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & arg0 ) const {
        bp::override func_clone = this->get_override( "clone" );
        return func_clone( boost::ref(arg0) );
    }

    virtual ::osg::Object * cloneType(  ) const {
        bp::override func_cloneType = this->get_override( "cloneType" );
        return func_cloneType(  );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual bool isSameKindAs( ::osg::Object const * arg0 ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(arg0) );
        else{
            return this->osg::Object::isSameKindAs( boost::python::ptr(arg0) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * arg0 ) const  {
        return osg::Object::isSameKindAs( boost::python::ptr(arg0) );
    }

    virtual char const * libraryName(  ) const {
        bp::override func_libraryName = this->get_override( "libraryName" );
        return func_libraryName(  );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_ViewerBase_class(){

    { //::osgViewer::ViewerBase
        typedef bp::class_< ViewerBase_wrapper, bp::bases< ::osg::Object >, osg::ref_ptr< ViewerBase_wrapper >, boost::noncopyable > ViewerBase_exposer_t;
        ViewerBase_exposer_t ViewerBase_exposer = ViewerBase_exposer_t( "ViewerBase", bp::no_init );
        bp::scope ViewerBase_scope( ViewerBase_exposer );
        bp::enum_< osgViewer::ViewerBase::BarrierPosition>("BarrierPosition")
            .value("BeforeSwapBuffers", osgViewer::ViewerBase::BeforeSwapBuffers)
            .value("AfterSwapBuffers", osgViewer::ViewerBase::AfterSwapBuffers)
            .export_values()
            ;
        bp::enum_< osgViewer::ViewerBase::FrameScheme>("FrameScheme")
            .value("ON_DEMAND", osgViewer::ViewerBase::ON_DEMAND)
            .value("CONTINUOUS", osgViewer::ViewerBase::CONTINUOUS)
            .export_values()
            ;
        bp::enum_< osgViewer::ViewerBase::ThreadingModel>("ThreadingModel")
            .value("SingleThreaded", osgViewer::ViewerBase::SingleThreaded)
            .value("CullDrawThreadPerContext", osgViewer::ViewerBase::CullDrawThreadPerContext)
            .value("ThreadPerContext", osgViewer::ViewerBase::ThreadPerContext)
            .value("DrawThreadPerContext", osgViewer::ViewerBase::DrawThreadPerContext)
            .value("CullThreadPerCameraDrawThreadPerContext", osgViewer::ViewerBase::CullThreadPerCameraDrawThreadPerContext)
            .value("ThreadPerCamera", osgViewer::ViewerBase::ThreadPerCamera)
            .value("AutomaticSelection", osgViewer::ViewerBase::AutomaticSelection)
            .export_values()
            ;
        { //::osgViewer::ViewerBase::addUpdateOperation
        
            typedef void ( ::osgViewer::ViewerBase::*addUpdateOperation_function_type )( ::osg::Operation * ) ;
            
            ViewerBase_exposer.def( 
                "addUpdateOperation"
                , addUpdateOperation_function_type( &::osgViewer::ViewerBase::addUpdateOperation )
                , ( bp::arg("operation") ) );
        
        }
        { //::osgViewer::ViewerBase::advance
        
            typedef void ( ::osgViewer::ViewerBase::*advance_function_type )( double ) ;
            
            ViewerBase_exposer.def( 
                "advance"
                , bp::pure_virtual( advance_function_type(&::osgViewer::ViewerBase::advance) )
                , ( bp::arg("simulationTime")=1.79769313486231570814527423731704356798070567525844996599e+308 ) );
        
        }
        { //::osgViewer::ViewerBase::areThreadsRunning
        
            typedef bool ( ::osgViewer::ViewerBase::*areThreadsRunning_function_type )(  ) const;
            
            ViewerBase_exposer.def( 
                "areThreadsRunning"
                , areThreadsRunning_function_type( &::osgViewer::ViewerBase::areThreadsRunning ) );
        
        }
        { //::osgViewer::ViewerBase::checkEvents
        
            typedef bool ( ::osgViewer::ViewerBase::*checkEvents_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "checkEvents"
                , bp::pure_virtual( checkEvents_function_type(&::osgViewer::ViewerBase::checkEvents) ) );
        
        }
        { //::osgViewer::ViewerBase::checkNeedToDoFrame
        
            typedef bool ( ::osgViewer::ViewerBase::*checkNeedToDoFrame_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "checkNeedToDoFrame"
                , bp::pure_virtual( checkNeedToDoFrame_function_type(&::osgViewer::ViewerBase::checkNeedToDoFrame) ) );
        
        }
        { //::osgViewer::ViewerBase::checkWindowStatus
        
            typedef void ( ::osgViewer::ViewerBase::*checkWindowStatus_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "checkWindowStatus"
                , checkWindowStatus_function_type( &::osgViewer::ViewerBase::checkWindowStatus ) );
        
        }
        { //::osgViewer::ViewerBase::checkWindowStatus
        
            typedef void ( ::osgViewer::ViewerBase::*checkWindowStatus_function_type )( ::std::vector< osg::GraphicsContext* > const & ) ;
            
            ViewerBase_exposer.def( 
                "checkWindowStatus"
                , checkWindowStatus_function_type( &::osgViewer::ViewerBase::checkWindowStatus )
                , ( bp::arg("contexts") ) );
        
        }
        { //::osgViewer::ViewerBase::done
        
            typedef bool ( ::osgViewer::ViewerBase::*done_function_type )(  ) const;
            
            ViewerBase_exposer.def( 
                "done"
                , done_function_type( &::osgViewer::ViewerBase::done ) );
        
        }
        { //::osgViewer::ViewerBase::elapsedTime
        
            typedef double ( ::osgViewer::ViewerBase::*elapsedTime_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "elapsedTime"
                , bp::pure_virtual( elapsedTime_function_type(&::osgViewer::ViewerBase::elapsedTime) ) );
        
        }
        { //::osgViewer::ViewerBase::eventTraversal
        
            typedef void ( ::osgViewer::ViewerBase::*eventTraversal_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "eventTraversal"
                , bp::pure_virtual( eventTraversal_function_type(&::osgViewer::ViewerBase::eventTraversal) ) );
        
        }
        { //::osgViewer::ViewerBase::frame
        
            typedef void ( ::osgViewer::ViewerBase::*frame_function_type )( double ) ;
            typedef void ( ViewerBase_wrapper::*default_frame_function_type )( double ) ;
            
            ViewerBase_exposer.def( 
                "frame"
                , frame_function_type(&::osgViewer::ViewerBase::frame)
                , default_frame_function_type(&ViewerBase_wrapper::default_frame)
                , ( bp::arg("simulationTime")=1.79769313486231570814527423731704356798070567525844996599e+308 ) );
        
        }
        { //::osgViewer::ViewerBase::getAllThreads
        
            typedef void ( ::osgViewer::ViewerBase::*getAllThreads_function_type )( ::std::vector<OpenThreads::Thread*,std::allocator<OpenThreads::Thread*> > &,bool ) ;
            
            ViewerBase_exposer.def( 
                "getAllThreads"
                , bp::pure_virtual( getAllThreads_function_type(&::osgViewer::ViewerBase::getAllThreads) )
                , ( bp::arg("threads"), bp::arg("onlyActive")=(bool)(true) ) );
        
        }
        { //::osgViewer::ViewerBase::getCameras
        
            typedef void ( ::osgViewer::ViewerBase::*getCameras_function_type )( ::std::vector<osg::Camera*, std::allocator<osg::Camera*> > &,bool ) ;
            
            ViewerBase_exposer.def( 
                "getCameras"
                , bp::pure_virtual( getCameras_function_type(&::osgViewer::ViewerBase::getCameras) )
                , ( bp::arg("cameras"), bp::arg("onlyActive")=(bool)(true) ) );
        
        }
        { //::osgViewer::ViewerBase::getContexts
        
            typedef void ( ::osgViewer::ViewerBase::*getContexts_function_type )( ::std::vector<osg::GraphicsContext*,std::allocator<osg::GraphicsContext*> > &,bool ) ;
            
            ViewerBase_exposer.def( 
                "getContexts"
                , bp::pure_virtual( getContexts_function_type(&::osgViewer::ViewerBase::getContexts) )
                , ( bp::arg("contexts"), bp::arg("onlyValid")=(bool)(true) ) );
        
        }
        { //::osgViewer::ViewerBase::getEndBarrierOperation
        
            typedef ::osg::BarrierOperation::PreBlockOp ( ::osgViewer::ViewerBase::*getEndBarrierOperation_function_type )(  ) const;
            
            ViewerBase_exposer.def( 
                "getEndBarrierOperation"
                , getEndBarrierOperation_function_type( &::osgViewer::ViewerBase::getEndBarrierOperation ) );
        
        }
        { //::osgViewer::ViewerBase::getEndBarrierPosition
        
            typedef ::osgViewer::ViewerBase::BarrierPosition ( ::osgViewer::ViewerBase::*getEndBarrierPosition_function_type )(  ) const;
            
            ViewerBase_exposer.def( 
                "getEndBarrierPosition"
                , getEndBarrierPosition_function_type( &::osgViewer::ViewerBase::getEndBarrierPosition ) );
        
        }
        { //::osgViewer::ViewerBase::getEventVisitor
        
            typedef ::osgGA::EventVisitor * ( ::osgViewer::ViewerBase::*getEventVisitor_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "getEventVisitor"
                , getEventVisitor_function_type( &::osgViewer::ViewerBase::getEventVisitor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::ViewerBase::getEventVisitor
        
            typedef ::osgGA::EventVisitor const * ( ::osgViewer::ViewerBase::*getEventVisitor_function_type )(  ) const;
            
            ViewerBase_exposer.def( 
                "getEventVisitor"
                , getEventVisitor_function_type( &::osgViewer::ViewerBase::getEventVisitor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::ViewerBase::getIncrementalCompileOperation
        
            typedef ::osgUtil::IncrementalCompileOperation * ( ::osgViewer::ViewerBase::*getIncrementalCompileOperation_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "getIncrementalCompileOperation"
                , getIncrementalCompileOperation_function_type( &::osgViewer::ViewerBase::getIncrementalCompileOperation )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::ViewerBase::getKeyEventSetsDone
        
            typedef int ( ::osgViewer::ViewerBase::*getKeyEventSetsDone_function_type )(  ) const;
            
            ViewerBase_exposer.def( 
                "getKeyEventSetsDone"
                , getKeyEventSetsDone_function_type( &::osgViewer::ViewerBase::getKeyEventSetsDone ) );
        
        }
        { //::osgViewer::ViewerBase::getOperationThreads
        
            typedef void ( ::osgViewer::ViewerBase::*getOperationThreads_function_type )( ::std::vector<osg::OperationThread*,std::allocator<osg::OperationThread*> > &,bool ) ;
            
            ViewerBase_exposer.def( 
                "getOperationThreads"
                , bp::pure_virtual( getOperationThreads_function_type(&::osgViewer::ViewerBase::getOperationThreads) )
                , ( bp::arg("threads"), bp::arg("onlyActive")=(bool)(true) ) );
        
        }
        { //::osgViewer::ViewerBase::getQuitEventSetsDone
        
            typedef bool ( ::osgViewer::ViewerBase::*getQuitEventSetsDone_function_type )(  ) const;
            
            ViewerBase_exposer.def( 
                "getQuitEventSetsDone"
                , getQuitEventSetsDone_function_type( &::osgViewer::ViewerBase::getQuitEventSetsDone ) );
        
        }
        { //::osgViewer::ViewerBase::getRealizeOperation
        
            typedef ::osg::Operation * ( ::osgViewer::ViewerBase::*getRealizeOperation_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "getRealizeOperation"
                , getRealizeOperation_function_type( &::osgViewer::ViewerBase::getRealizeOperation )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::ViewerBase::getReleaseContextAtEndOfFrameHint
        
            typedef bool ( ::osgViewer::ViewerBase::*getReleaseContextAtEndOfFrameHint_function_type )(  ) const;
            
            ViewerBase_exposer.def( 
                "getReleaseContextAtEndOfFrameHint"
                , getReleaseContextAtEndOfFrameHint_function_type( &::osgViewer::ViewerBase::getReleaseContextAtEndOfFrameHint ) );
        
        }
        { //::osgViewer::ViewerBase::getRunFrameScheme
        
            typedef ::osgViewer::ViewerBase::FrameScheme ( ::osgViewer::ViewerBase::*getRunFrameScheme_function_type )(  ) const;
            
            ViewerBase_exposer.def( 
                "getRunFrameScheme"
                , getRunFrameScheme_function_type( &::osgViewer::ViewerBase::getRunFrameScheme ) );
        
        }
        { //::osgViewer::ViewerBase::getRunMaxFrameRate
        
            typedef double ( ::osgViewer::ViewerBase::*getRunMaxFrameRate_function_type )(  ) const;
            
            ViewerBase_exposer.def( 
                "getRunMaxFrameRate"
                , getRunMaxFrameRate_function_type( &::osgViewer::ViewerBase::getRunMaxFrameRate ) );
        
        }
        { //::osgViewer::ViewerBase::getScenes
        
            typedef void ( ::osgViewer::ViewerBase::*getScenes_function_type )( ::std::vector<osgViewer::Scene*,std::allocator<osgViewer::Scene*> > &,bool ) ;
            
            ViewerBase_exposer.def( 
                "getScenes"
                , bp::pure_virtual( getScenes_function_type(&::osgViewer::ViewerBase::getScenes) )
                , ( bp::arg("scenes"), bp::arg("onlyValid")=(bool)(true) ) );
        
        }
        { //::osgViewer::ViewerBase::getThreadingModel
        
            typedef ::osgViewer::ViewerBase::ThreadingModel ( ::osgViewer::ViewerBase::*getThreadingModel_function_type )(  ) const;
            
            ViewerBase_exposer.def( 
                "getThreadingModel"
                , getThreadingModel_function_type( &::osgViewer::ViewerBase::getThreadingModel ) );
        
        }
        { //::osgViewer::ViewerBase::getUpdateOperations
        
            typedef ::osg::OperationQueue * ( ::osgViewer::ViewerBase::*getUpdateOperations_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "getUpdateOperations"
                , getUpdateOperations_function_type( &::osgViewer::ViewerBase::getUpdateOperations )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::ViewerBase::getUpdateOperations
        
            typedef ::osg::OperationQueue const * ( ::osgViewer::ViewerBase::*getUpdateOperations_function_type )(  ) const;
            
            ViewerBase_exposer.def( 
                "getUpdateOperations"
                , getUpdateOperations_function_type( &::osgViewer::ViewerBase::getUpdateOperations )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::ViewerBase::getUpdateVisitor
        
            typedef ::osgUtil::UpdateVisitor * ( ::osgViewer::ViewerBase::*getUpdateVisitor_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "getUpdateVisitor"
                , getUpdateVisitor_function_type( &::osgViewer::ViewerBase::getUpdateVisitor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::ViewerBase::getUpdateVisitor
        
            typedef ::osgUtil::UpdateVisitor const * ( ::osgViewer::ViewerBase::*getUpdateVisitor_function_type )(  ) const;
            
            ViewerBase_exposer.def( 
                "getUpdateVisitor"
                , getUpdateVisitor_function_type( &::osgViewer::ViewerBase::getUpdateVisitor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::ViewerBase::getUsage
        
            typedef void ( ::osgViewer::ViewerBase::*getUsage_function_type )( ::osg::ApplicationUsage & ) const;
            
            ViewerBase_exposer.def( 
                "getUsage"
                , bp::pure_virtual( getUsage_function_type(&::osgViewer::ViewerBase::getUsage) )
                , ( bp::arg("usage") ) );
        
        }
        { //::osgViewer::ViewerBase::getViewerFrameStamp
        
            typedef ::osg::FrameStamp * ( ::osgViewer::ViewerBase::*getViewerFrameStamp_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "getViewerFrameStamp"
                , bp::pure_virtual( getViewerFrameStamp_function_type(&::osgViewer::ViewerBase::getViewerFrameStamp) )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::ViewerBase::getViewerStats
        
            typedef ::osg::Stats * ( ::osgViewer::ViewerBase::*getViewerStats_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "getViewerStats"
                , bp::pure_virtual( getViewerStats_function_type(&::osgViewer::ViewerBase::getViewerStats) )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::ViewerBase::getViewerStats
        
            typedef ::osg::Stats const * ( ::osgViewer::ViewerBase::*getViewerStats_function_type )(  ) const;
            
            ViewerBase_exposer.def( 
                "getViewerStats"
                , bp::pure_virtual( getViewerStats_function_type(&::osgViewer::ViewerBase::getViewerStats) )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::ViewerBase::getViews
        
            typedef boost::python::object ( *default_getViews_function_type )( ::osgViewer::ViewerBase &,bool );
            
            ViewerBase_exposer.def( 
                "getViews"
                , default_getViews_function_type( &ViewerBase_wrapper::default_getViews )
                , ( bp::arg("inst"), bp::arg("onlyValid")=(bool)(true) ) );
        
        }
        { //::osgViewer::ViewerBase::getWindows
        
            typedef boost::python::object ( *default_getWindows_function_type )( ::osgViewer::ViewerBase &,bool );
            
            ViewerBase_exposer.def( 
                "getWindows"
                , default_getWindows_function_type( &ViewerBase_wrapper::default_getWindows )
                , ( bp::arg("inst"), bp::arg("onlyValid")=(bool)(true) ) );
        
        }
        { //::osgViewer::ViewerBase::isRealized
        
            typedef bool ( ::osgViewer::ViewerBase::*isRealized_function_type )(  ) const;
            
            ViewerBase_exposer.def( 
                "isRealized"
                , bp::pure_virtual( isRealized_function_type(&::osgViewer::ViewerBase::isRealized) ) );
        
        }
        { //::osgViewer::ViewerBase::readConfiguration
        
            typedef bool ( ::osgViewer::ViewerBase::*readConfiguration_function_type )( ::std::string const & ) ;
            
            ViewerBase_exposer.def( 
                "readConfiguration"
                , bp::pure_virtual( readConfiguration_function_type(&::osgViewer::ViewerBase::readConfiguration) )
                , ( bp::arg("filename") ) );
        
        }
        { //::osgViewer::ViewerBase::realize
        
            typedef void ( ::osgViewer::ViewerBase::*realize_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "realize"
                , bp::pure_virtual( realize_function_type(&::osgViewer::ViewerBase::realize) ) );
        
        }
        { //::osgViewer::ViewerBase::removeUpdateOperation
        
            typedef void ( ::osgViewer::ViewerBase::*removeUpdateOperation_function_type )( ::osg::Operation * ) ;
            
            ViewerBase_exposer.def( 
                "removeUpdateOperation"
                , removeUpdateOperation_function_type( &::osgViewer::ViewerBase::removeUpdateOperation )
                , ( bp::arg("operation") ) );
        
        }
        { //::osgViewer::ViewerBase::renderingTraversals
        
            typedef void ( ::osgViewer::ViewerBase::*renderingTraversals_function_type )(  ) ;
            typedef void ( ViewerBase_wrapper::*default_renderingTraversals_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "renderingTraversals"
                , renderingTraversals_function_type(&::osgViewer::ViewerBase::renderingTraversals)
                , default_renderingTraversals_function_type(&ViewerBase_wrapper::default_renderingTraversals) );
        
        }
        { //::osgViewer::ViewerBase::run
        
            typedef int ( ::osgViewer::ViewerBase::*run_function_type )(  ) ;
            typedef int ( ViewerBase_wrapper::*default_run_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "run"
                , run_function_type(&::osgViewer::ViewerBase::run)
                , default_run_function_type(&ViewerBase_wrapper::default_run) );
        
        }
        { //::osgViewer::ViewerBase::setDone
        
            typedef void ( ::osgViewer::ViewerBase::*setDone_function_type )( bool ) ;
            
            ViewerBase_exposer.def( 
                "setDone"
                , setDone_function_type( &::osgViewer::ViewerBase::setDone )
                , ( bp::arg("done") ) );
        
        }
        { //::osgViewer::ViewerBase::setEndBarrierOperation
        
            typedef void ( ::osgViewer::ViewerBase::*setEndBarrierOperation_function_type )( ::osg::BarrierOperation::PreBlockOp ) ;
            
            ViewerBase_exposer.def( 
                "setEndBarrierOperation"
                , setEndBarrierOperation_function_type( &::osgViewer::ViewerBase::setEndBarrierOperation )
                , ( bp::arg("op") ) );
        
        }
        { //::osgViewer::ViewerBase::setEndBarrierPosition
        
            typedef void ( ::osgViewer::ViewerBase::*setEndBarrierPosition_function_type )( ::osgViewer::ViewerBase::BarrierPosition ) ;
            
            ViewerBase_exposer.def( 
                "setEndBarrierPosition"
                , setEndBarrierPosition_function_type( &::osgViewer::ViewerBase::setEndBarrierPosition )
                , ( bp::arg("bp") ) );
        
        }
        { //::osgViewer::ViewerBase::setEventVisitor
        
            typedef void ( ::osgViewer::ViewerBase::*setEventVisitor_function_type )( ::osgGA::EventVisitor * ) ;
            
            ViewerBase_exposer.def( 
                "setEventVisitor"
                , setEventVisitor_function_type( &::osgViewer::ViewerBase::setEventVisitor )
                , ( bp::arg("eventVisitor") ) );
        
        }
        { //::osgViewer::ViewerBase::setIncrementalCompileOperation
        
            typedef void ( ::osgViewer::ViewerBase::*setIncrementalCompileOperation_function_type )( ::osgUtil::IncrementalCompileOperation * ) ;
            
            ViewerBase_exposer.def( 
                "setIncrementalCompileOperation"
                , setIncrementalCompileOperation_function_type( &::osgViewer::ViewerBase::setIncrementalCompileOperation )
                , ( bp::arg("ico") ) );
        
        }
        { //::osgViewer::ViewerBase::setKeyEventSetsDone
        
            typedef void ( ::osgViewer::ViewerBase::*setKeyEventSetsDone_function_type )( int ) ;
            
            ViewerBase_exposer.def( 
                "setKeyEventSetsDone"
                , setKeyEventSetsDone_function_type( &::osgViewer::ViewerBase::setKeyEventSetsDone )
                , ( bp::arg("key") ) );
        
        }
        { //::osgViewer::ViewerBase::setQuitEventSetsDone
        
            typedef void ( ::osgViewer::ViewerBase::*setQuitEventSetsDone_function_type )( bool ) ;
            
            ViewerBase_exposer.def( 
                "setQuitEventSetsDone"
                , setQuitEventSetsDone_function_type( &::osgViewer::ViewerBase::setQuitEventSetsDone )
                , ( bp::arg("flag") ) );
        
        }
        { //::osgViewer::ViewerBase::setRealizeOperation
        
            typedef void ( ::osgViewer::ViewerBase::*setRealizeOperation_function_type )( ::osg::Operation * ) ;
            
            ViewerBase_exposer.def( 
                "setRealizeOperation"
                , setRealizeOperation_function_type( &::osgViewer::ViewerBase::setRealizeOperation )
                , ( bp::arg("op") ) );
        
        }
        { //::osgViewer::ViewerBase::setReleaseContextAtEndOfFrameHint
        
            typedef void ( ::osgViewer::ViewerBase::*setReleaseContextAtEndOfFrameHint_function_type )( bool ) ;
            
            ViewerBase_exposer.def( 
                "setReleaseContextAtEndOfFrameHint"
                , setReleaseContextAtEndOfFrameHint_function_type( &::osgViewer::ViewerBase::setReleaseContextAtEndOfFrameHint )
                , ( bp::arg("hint") ) );
        
        }
        { //::osgViewer::ViewerBase::setRunFrameScheme
        
            typedef void ( ::osgViewer::ViewerBase::*setRunFrameScheme_function_type )( ::osgViewer::ViewerBase::FrameScheme ) ;
            
            ViewerBase_exposer.def( 
                "setRunFrameScheme"
                , setRunFrameScheme_function_type( &::osgViewer::ViewerBase::setRunFrameScheme )
                , ( bp::arg("fs") ) );
        
        }
        { //::osgViewer::ViewerBase::setRunMaxFrameRate
        
            typedef void ( ::osgViewer::ViewerBase::*setRunMaxFrameRate_function_type )( double ) ;
            
            ViewerBase_exposer.def( 
                "setRunMaxFrameRate"
                , setRunMaxFrameRate_function_type( &::osgViewer::ViewerBase::setRunMaxFrameRate )
                , ( bp::arg("frameRate") ) );
        
        }
        { //::osgViewer::ViewerBase::setThreadingModel
        
            typedef void ( ::osgViewer::ViewerBase::*setThreadingModel_function_type )( ::osgViewer::ViewerBase::ThreadingModel ) ;
            typedef void ( ViewerBase_wrapper::*default_setThreadingModel_function_type )( ::osgViewer::ViewerBase::ThreadingModel ) ;
            
            ViewerBase_exposer.def( 
                "setThreadingModel"
                , setThreadingModel_function_type(&::osgViewer::ViewerBase::setThreadingModel)
                , default_setThreadingModel_function_type(&ViewerBase_wrapper::default_setThreadingModel)
                , ( bp::arg("threadingModel") ) );
        
        }
        { //::osgViewer::ViewerBase::setUpThreading
        
            typedef void ( ::osgViewer::ViewerBase::*setUpThreading_function_type )(  ) ;
            typedef void ( ViewerBase_wrapper::*default_setUpThreading_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "setUpThreading"
                , setUpThreading_function_type(&::osgViewer::ViewerBase::setUpThreading)
                , default_setUpThreading_function_type(&ViewerBase_wrapper::default_setUpThreading) );
        
        }
        { //::osgViewer::ViewerBase::setUpdateOperations
        
            typedef void ( ::osgViewer::ViewerBase::*setUpdateOperations_function_type )( ::osg::OperationQueue * ) ;
            
            ViewerBase_exposer.def( 
                "setUpdateOperations"
                , setUpdateOperations_function_type( &::osgViewer::ViewerBase::setUpdateOperations )
                , ( bp::arg("operations") ) );
        
        }
        { //::osgViewer::ViewerBase::setUpdateVisitor
        
            typedef void ( ::osgViewer::ViewerBase::*setUpdateVisitor_function_type )( ::osgUtil::UpdateVisitor * ) ;
            
            ViewerBase_exposer.def( 
                "setUpdateVisitor"
                , setUpdateVisitor_function_type( &::osgViewer::ViewerBase::setUpdateVisitor )
                , ( bp::arg("updateVisitor") ) );
        
        }
        { //::osgViewer::ViewerBase::setViewerStats
        
            typedef void ( ::osgViewer::ViewerBase::*setViewerStats_function_type )( ::osg::Stats * ) ;
            
            ViewerBase_exposer.def( 
                "setViewerStats"
                , bp::pure_virtual( setViewerStats_function_type(&::osgViewer::ViewerBase::setViewerStats) )
                , ( bp::arg("stats") ) );
        
        }
        { //::osgViewer::ViewerBase::startThreading
        
            typedef void ( ::osgViewer::ViewerBase::*startThreading_function_type )(  ) ;
            typedef void ( ViewerBase_wrapper::*default_startThreading_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "startThreading"
                , startThreading_function_type(&::osgViewer::ViewerBase::startThreading)
                , default_startThreading_function_type(&ViewerBase_wrapper::default_startThreading) );
        
        }
        { //::osgViewer::ViewerBase::stopThreading
        
            typedef void ( ::osgViewer::ViewerBase::*stopThreading_function_type )(  ) ;
            typedef void ( ViewerBase_wrapper::*default_stopThreading_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "stopThreading"
                , stopThreading_function_type(&::osgViewer::ViewerBase::stopThreading)
                , default_stopThreading_function_type(&ViewerBase_wrapper::default_stopThreading) );
        
        }
        { //::osgViewer::ViewerBase::suggestBestThreadingModel
        
            typedef ::osgViewer::ViewerBase::ThreadingModel ( ::osgViewer::ViewerBase::*suggestBestThreadingModel_function_type )(  ) ;
            typedef ::osgViewer::ViewerBase::ThreadingModel ( ViewerBase_wrapper::*default_suggestBestThreadingModel_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "suggestBestThreadingModel"
                , suggestBestThreadingModel_function_type(&::osgViewer::ViewerBase::suggestBestThreadingModel)
                , default_suggestBestThreadingModel_function_type(&ViewerBase_wrapper::default_suggestBestThreadingModel) );
        
        }
        { //::osgViewer::ViewerBase::updateTraversal
        
            typedef void ( ::osgViewer::ViewerBase::*updateTraversal_function_type )(  ) ;
            
            ViewerBase_exposer.def( 
                "updateTraversal"
                , bp::pure_virtual( updateTraversal_function_type(&::osgViewer::ViewerBase::updateTraversal) ) );
        
        }
    }

}
