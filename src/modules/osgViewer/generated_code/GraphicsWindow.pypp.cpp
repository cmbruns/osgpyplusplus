// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "wrap_osgViewer.h"
#include "wrap_referenced.h"
#include "GraphicsWindow.pypp.hpp"

namespace bp = boost::python;

struct GraphicsWindow_wrapper : osgViewer::GraphicsWindow, bp::wrapper< osgViewer::GraphicsWindow > {

    GraphicsWindow_wrapper( )
    : osgViewer::GraphicsWindow( )
      , bp::wrapper< osgViewer::GraphicsWindow >(){
        // null constructor
    
    }

    virtual void bindPBufferToTextureImplementation( ::GLenum arg0 ) {
        if( bp::override func_bindPBufferToTextureImplementation = this->get_override( "bindPBufferToTextureImplementation" ) )
            func_bindPBufferToTextureImplementation( arg0 );
        else{
            this->osgViewer::GraphicsWindow::bindPBufferToTextureImplementation( arg0 );
        }
    }
    
    void default_bindPBufferToTextureImplementation( ::GLenum arg0 ) {
        osgViewer::GraphicsWindow::bindPBufferToTextureImplementation( arg0 );
    }

    virtual bool checkEvents(  ) {
        if( bp::override func_checkEvents = this->get_override( "checkEvents" ) )
            return func_checkEvents(  );
        else{
            return this->osgViewer::GraphicsWindow::checkEvents(  );
        }
    }
    
    bool default_checkEvents(  ) {
        return osgViewer::GraphicsWindow::checkEvents( );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgViewer::GraphicsWindow::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgViewer::GraphicsWindow::className( );
    }

    virtual void closeImplementation(  ) {
        if( bp::override func_closeImplementation = this->get_override( "closeImplementation" ) )
            func_closeImplementation(  );
        else{
            this->osgViewer::GraphicsWindow::closeImplementation(  );
        }
    }
    
    void default_closeImplementation(  ) {
        osgViewer::GraphicsWindow::closeImplementation( );
    }

    static boost::python::tuple getSwapGroup( ::osgViewer::GraphicsWindow const & inst ){
        bool on2;
        unsigned int group2;
        unsigned int barrier2;
        inst.getSwapGroup(on2, group2, barrier2);
        return bp::make_tuple( on2, group2, barrier2 );
    }

    virtual bool getWindowDecoration(  ) const  {
        if( bp::override func_getWindowDecoration = this->get_override( "getWindowDecoration" ) )
            return func_getWindowDecoration(  );
        else{
            return this->osgViewer::GraphicsWindow::getWindowDecoration(  );
        }
    }
    
    bool default_getWindowDecoration(  ) const  {
        return osgViewer::GraphicsWindow::getWindowDecoration( );
    }

    virtual ::std::string getWindowName(  ) {
        if( bp::override func_getWindowName = this->get_override( "getWindowName" ) )
            return func_getWindowName(  );
        else{
            return this->osgViewer::GraphicsWindow::getWindowName(  );
        }
    }
    
    ::std::string default_getWindowName(  ) {
        return osgViewer::GraphicsWindow::getWindowName( );
    }

    virtual void getWindowRectangle( int & x, int & y, int & width, int & height ) {
        namespace bpl = boost::python;
        if( bpl::override func_getWindowRectangle = this->get_override( "getWindowRectangle" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_getWindowRectangle.ptr() );
            x = boost::python::extract< int >( pyplus_conv::get_out_argument( py_result, "x" ) );
            y = boost::python::extract< int >( pyplus_conv::get_out_argument( py_result, "y" ) );
            width = boost::python::extract< int >( pyplus_conv::get_out_argument( py_result, "width" ) );
            height = boost::python::extract< int >( pyplus_conv::get_out_argument( py_result, "height" ) );
        }
        else{
            osgViewer::GraphicsWindow::getWindowRectangle( x, y, width, height );
        }
    }
    
    static boost::python::tuple default_getWindowRectangle( ::osgViewer::GraphicsWindow & inst ){
        int x2;
        int y2;
        int width2;
        int height2;
        if( dynamic_cast< GraphicsWindow_wrapper * >( boost::addressof( inst ) ) ){
            inst.::osgViewer::GraphicsWindow::getWindowRectangle(x2, y2, width2, height2);
        }
        else{
            inst.getWindowRectangle(x2, y2, width2, height2);
        }
        return bp::make_tuple( x2, y2, width2, height2 );
    }

    virtual void grabFocus(  ) {
        if( bp::override func_grabFocus = this->get_override( "grabFocus" ) )
            func_grabFocus(  );
        else{
            this->osgViewer::GraphicsWindow::grabFocus(  );
        }
    }
    
    void default_grabFocus(  ) {
        osgViewer::GraphicsWindow::grabFocus( );
    }

    virtual void grabFocusIfPointerInWindow(  ) {
        if( bp::override func_grabFocusIfPointerInWindow = this->get_override( "grabFocusIfPointerInWindow" ) )
            func_grabFocusIfPointerInWindow(  );
        else{
            this->osgViewer::GraphicsWindow::grabFocusIfPointerInWindow(  );
        }
    }
    
    void default_grabFocusIfPointerInWindow(  ) {
        osgViewer::GraphicsWindow::grabFocusIfPointerInWindow( );
    }

    virtual bool isRealizedImplementation(  ) const  {
        if( bp::override func_isRealizedImplementation = this->get_override( "isRealizedImplementation" ) )
            return func_isRealizedImplementation(  );
        else{
            return this->osgViewer::GraphicsWindow::isRealizedImplementation(  );
        }
    }
    
    bool default_isRealizedImplementation(  ) const  {
        return osgViewer::GraphicsWindow::isRealizedImplementation( );
    }

    virtual bool isSameKindAs( ::osg::Object const * object ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(object) );
        else{
            return this->osgViewer::GraphicsWindow::isSameKindAs( boost::python::ptr(object) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * object ) const  {
        return osgViewer::GraphicsWindow::isSameKindAs( boost::python::ptr(object) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgViewer::GraphicsWindow::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgViewer::GraphicsWindow::libraryName( );
    }

    virtual bool makeContextCurrentImplementation( ::osg::GraphicsContext * arg0 ) {
        if( bp::override func_makeContextCurrentImplementation = this->get_override( "makeContextCurrentImplementation" ) )
            return func_makeContextCurrentImplementation( boost::python::ptr(arg0) );
        else{
            return this->osgViewer::GraphicsWindow::makeContextCurrentImplementation( boost::python::ptr(arg0) );
        }
    }
    
    bool default_makeContextCurrentImplementation( ::osg::GraphicsContext * arg0 ) {
        return osgViewer::GraphicsWindow::makeContextCurrentImplementation( boost::python::ptr(arg0) );
    }

    virtual bool makeCurrentImplementation(  ) {
        if( bp::override func_makeCurrentImplementation = this->get_override( "makeCurrentImplementation" ) )
            return func_makeCurrentImplementation(  );
        else{
            return this->osgViewer::GraphicsWindow::makeCurrentImplementation(  );
        }
    }
    
    bool default_makeCurrentImplementation(  ) {
        return osgViewer::GraphicsWindow::makeCurrentImplementation( );
    }

    virtual void raiseWindow(  ) {
        if( bp::override func_raiseWindow = this->get_override( "raiseWindow" ) )
            func_raiseWindow(  );
        else{
            this->osgViewer::GraphicsWindow::raiseWindow(  );
        }
    }
    
    void default_raiseWindow(  ) {
        osgViewer::GraphicsWindow::raiseWindow( );
    }

    virtual bool realizeImplementation(  ) {
        if( bp::override func_realizeImplementation = this->get_override( "realizeImplementation" ) )
            return func_realizeImplementation(  );
        else{
            return this->osgViewer::GraphicsWindow::realizeImplementation(  );
        }
    }
    
    bool default_realizeImplementation(  ) {
        return osgViewer::GraphicsWindow::realizeImplementation( );
    }

    virtual bool releaseContextImplementation(  ) {
        if( bp::override func_releaseContextImplementation = this->get_override( "releaseContextImplementation" ) )
            return func_releaseContextImplementation(  );
        else{
            return this->osgViewer::GraphicsWindow::releaseContextImplementation(  );
        }
    }
    
    bool default_releaseContextImplementation(  ) {
        return osgViewer::GraphicsWindow::releaseContextImplementation( );
    }

    virtual void requestContinuousUpdate( bool arg0=true ) {
        if( bp::override func_requestContinuousUpdate = this->get_override( "requestContinuousUpdate" ) )
            func_requestContinuousUpdate( arg0 );
        else{
            this->osgViewer::GraphicsWindow::requestContinuousUpdate( arg0 );
        }
    }
    
    void default_requestContinuousUpdate( bool arg0=true ) {
        osgViewer::GraphicsWindow::requestContinuousUpdate( arg0 );
    }

    virtual void requestRedraw(  ) {
        if( bp::override func_requestRedraw = this->get_override( "requestRedraw" ) )
            func_requestRedraw(  );
        else{
            this->osgViewer::GraphicsWindow::requestRedraw(  );
        }
    }
    
    void default_requestRedraw(  ) {
        osgViewer::GraphicsWindow::requestRedraw( );
    }

    virtual void requestWarpPointer( float arg0, float arg1 ) {
        if( bp::override func_requestWarpPointer = this->get_override( "requestWarpPointer" ) )
            func_requestWarpPointer( arg0, arg1 );
        else{
            this->osgViewer::GraphicsWindow::requestWarpPointer( arg0, arg1 );
        }
    }
    
    void default_requestWarpPointer( float arg0, float arg1 ) {
        osgViewer::GraphicsWindow::requestWarpPointer( arg0, arg1 );
    }

    virtual void setCursor( ::osgViewer::GraphicsWindow::MouseCursor arg0 ) {
        if( bp::override func_setCursor = this->get_override( "setCursor" ) )
            func_setCursor( arg0 );
        else{
            this->osgViewer::GraphicsWindow::setCursor( arg0 );
        }
    }
    
    void default_setCursor( ::osgViewer::GraphicsWindow::MouseCursor arg0 ) {
        osgViewer::GraphicsWindow::setCursor( arg0 );
    }

    virtual void setSwapGroup( bool on, ::GLuint group, ::GLuint barrier ) {
        if( bp::override func_setSwapGroup = this->get_override( "setSwapGroup" ) )
            func_setSwapGroup( on, group, barrier );
        else{
            this->osgViewer::GraphicsWindow::setSwapGroup( on, group, barrier );
        }
    }
    
    void default_setSwapGroup( bool on, ::GLuint group, ::GLuint barrier ) {
        osgViewer::GraphicsWindow::setSwapGroup( on, group, barrier );
    }

    virtual void setSyncToVBlank( bool on ) {
        if( bp::override func_setSyncToVBlank = this->get_override( "setSyncToVBlank" ) )
            func_setSyncToVBlank( on );
        else{
            this->osgViewer::GraphicsWindow::setSyncToVBlank( on );
        }
    }
    
    void default_setSyncToVBlank( bool on ) {
        osgViewer::GraphicsWindow::setSyncToVBlank( on );
    }

    virtual bool setWindowDecorationImplementation( bool arg0 ) {
        if( bp::override func_setWindowDecorationImplementation = this->get_override( "setWindowDecorationImplementation" ) )
            return func_setWindowDecorationImplementation( arg0 );
        else{
            return this->osgViewer::GraphicsWindow::setWindowDecorationImplementation( arg0 );
        }
    }
    
    bool default_setWindowDecorationImplementation( bool arg0 ) {
        return osgViewer::GraphicsWindow::setWindowDecorationImplementation( arg0 );
    }

    virtual void setWindowName( ::std::string const & arg0 ) {
        if( bp::override func_setWindowName = this->get_override( "setWindowName" ) )
            func_setWindowName( arg0 );
        else{
            this->osgViewer::GraphicsWindow::setWindowName( arg0 );
        }
    }
    
    void default_setWindowName( ::std::string const & arg0 ) {
        osgViewer::GraphicsWindow::setWindowName( arg0 );
    }

    virtual bool setWindowRectangleImplementation( int arg0, int arg1, int arg2, int arg3 ) {
        if( bp::override func_setWindowRectangleImplementation = this->get_override( "setWindowRectangleImplementation" ) )
            return func_setWindowRectangleImplementation( arg0, arg1, arg2, arg3 );
        else{
            return this->osgViewer::GraphicsWindow::setWindowRectangleImplementation( arg0, arg1, arg2, arg3 );
        }
    }
    
    bool default_setWindowRectangleImplementation( int arg0, int arg1, int arg2, int arg3 ) {
        return osgViewer::GraphicsWindow::setWindowRectangleImplementation( arg0, arg1, arg2, arg3 );
    }

    virtual void swapBuffersImplementation(  ) {
        if( bp::override func_swapBuffersImplementation = this->get_override( "swapBuffersImplementation" ) )
            func_swapBuffersImplementation(  );
        else{
            this->osgViewer::GraphicsWindow::swapBuffersImplementation(  );
        }
    }
    
    void default_swapBuffersImplementation(  ) {
        osgViewer::GraphicsWindow::swapBuffersImplementation( );
    }

    virtual void useCursor( bool cursorOn ) {
        if( bp::override func_useCursor = this->get_override( "useCursor" ) )
            func_useCursor( cursorOn );
        else{
            this->osgViewer::GraphicsWindow::useCursor( cursorOn );
        }
    }
    
    void default_useCursor( bool cursorOn ) {
        osgViewer::GraphicsWindow::useCursor( cursorOn );
    }

    virtual bool valid(  ) const  {
        if( bp::override func_valid = this->get_override( "valid" ) )
            return func_valid(  );
        else{
            return this->osgViewer::GraphicsWindow::valid(  );
        }
    }
    
    bool default_valid(  ) const  {
        return osgViewer::GraphicsWindow::valid( );
    }

    virtual ::osg::View * asView(  ) {
        if( bp::override func_asView = this->get_override( "asView" ) )
            return func_asView(  );
        else{
            return this->osgGA::GUIActionAdapter::asView(  );
        }
    }
    
    ::osg::View * default_asView(  ) {
        return osgGA::GUIActionAdapter::asView( );
    }

    virtual void clear(  ) {
        if( bp::override func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            this->osg::GraphicsContext::clear(  );
        }
    }
    
    void default_clear(  ) {
        osg::GraphicsContext::clear( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizedImplementation( int x, int y, int width, int height ) {
        if( bp::override func_resizedImplementation = this->get_override( "resizedImplementation" ) )
            func_resizedImplementation( x, y, width, height );
        else{
            this->osg::GraphicsContext::resizedImplementation( x, y, width, height );
        }
    }
    
    void default_resizedImplementation( int x, int y, int width, int height ) {
        osg::GraphicsContext::resizedImplementation( x, y, width, height );
    }

    virtual void runOperations(  ) {
        if( bp::override func_runOperations = this->get_override( "runOperations" ) )
            func_runOperations(  );
        else{
            this->osg::GraphicsContext::runOperations(  );
        }
    }
    
    void default_runOperations(  ) {
        osg::GraphicsContext::runOperations( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_GraphicsWindow_class(){

    { //::osgViewer::GraphicsWindow
        typedef bp::class_< GraphicsWindow_wrapper, bp::bases< ::osg::GraphicsContext, ::osgGA::GUIActionAdapter >, osg::ref_ptr< GraphicsWindow_wrapper >, boost::noncopyable > GraphicsWindow_exposer_t;
        GraphicsWindow_exposer_t GraphicsWindow_exposer = GraphicsWindow_exposer_t( "GraphicsWindow", bp::init< >() );
        bp::scope GraphicsWindow_scope( GraphicsWindow_exposer );
        bp::enum_< osgViewer::GraphicsWindow::MouseCursor>("MouseCursor")
            .value("InheritCursor", osgViewer::GraphicsWindow::InheritCursor)
            .value("NoCursor", osgViewer::GraphicsWindow::NoCursor)
            .value("RightArrowCursor", osgViewer::GraphicsWindow::RightArrowCursor)
            .value("LeftArrowCursor", osgViewer::GraphicsWindow::LeftArrowCursor)
            .value("InfoCursor", osgViewer::GraphicsWindow::InfoCursor)
            .value("DestroyCursor", osgViewer::GraphicsWindow::DestroyCursor)
            .value("HelpCursor", osgViewer::GraphicsWindow::HelpCursor)
            .value("CycleCursor", osgViewer::GraphicsWindow::CycleCursor)
            .value("SprayCursor", osgViewer::GraphicsWindow::SprayCursor)
            .value("WaitCursor", osgViewer::GraphicsWindow::WaitCursor)
            .value("TextCursor", osgViewer::GraphicsWindow::TextCursor)
            .value("CrosshairCursor", osgViewer::GraphicsWindow::CrosshairCursor)
            .value("HandCursor", osgViewer::GraphicsWindow::HandCursor)
            .value("UpDownCursor", osgViewer::GraphicsWindow::UpDownCursor)
            .value("LeftRightCursor", osgViewer::GraphicsWindow::LeftRightCursor)
            .value("TopSideCursor", osgViewer::GraphicsWindow::TopSideCursor)
            .value("BottomSideCursor", osgViewer::GraphicsWindow::BottomSideCursor)
            .value("LeftSideCursor", osgViewer::GraphicsWindow::LeftSideCursor)
            .value("RightSideCursor", osgViewer::GraphicsWindow::RightSideCursor)
            .value("TopLeftCorner", osgViewer::GraphicsWindow::TopLeftCorner)
            .value("TopRightCorner", osgViewer::GraphicsWindow::TopRightCorner)
            .value("BottomRightCorner", osgViewer::GraphicsWindow::BottomRightCorner)
            .value("BottomLeftCorner", osgViewer::GraphicsWindow::BottomLeftCorner)
            .export_values()
            ;
        { //::osgViewer::GraphicsWindow::bindPBufferToTextureImplementation
        
            typedef void ( ::osgViewer::GraphicsWindow::*bindPBufferToTextureImplementation_function_type )( ::GLenum ) ;
            typedef void ( GraphicsWindow_wrapper::*default_bindPBufferToTextureImplementation_function_type )( ::GLenum ) ;
            
            GraphicsWindow_exposer.def( 
                "bindPBufferToTextureImplementation"
                , bindPBufferToTextureImplementation_function_type(&::osgViewer::GraphicsWindow::bindPBufferToTextureImplementation)
                , default_bindPBufferToTextureImplementation_function_type(&GraphicsWindow_wrapper::default_bindPBufferToTextureImplementation)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgViewer::GraphicsWindow::checkEvents
        
            typedef bool ( ::osgViewer::GraphicsWindow::*checkEvents_function_type )(  ) ;
            typedef bool ( GraphicsWindow_wrapper::*default_checkEvents_function_type )(  ) ;
            
            GraphicsWindow_exposer.def( 
                "checkEvents"
                , checkEvents_function_type(&::osgViewer::GraphicsWindow::checkEvents)
                , default_checkEvents_function_type(&GraphicsWindow_wrapper::default_checkEvents) );
        
        }
        { //::osgViewer::GraphicsWindow::className
        
            typedef char const * ( ::osgViewer::GraphicsWindow::*className_function_type )(  ) const;
            typedef char const * ( GraphicsWindow_wrapper::*default_className_function_type )(  ) const;
            
            GraphicsWindow_exposer.def( 
                "className"
                , className_function_type(&::osgViewer::GraphicsWindow::className)
                , default_className_function_type(&GraphicsWindow_wrapper::default_className) );
        
        }
        { //::osgViewer::GraphicsWindow::closeImplementation
        
            typedef void ( ::osgViewer::GraphicsWindow::*closeImplementation_function_type )(  ) ;
            typedef void ( GraphicsWindow_wrapper::*default_closeImplementation_function_type )(  ) ;
            
            GraphicsWindow_exposer.def( 
                "closeImplementation"
                , closeImplementation_function_type(&::osgViewer::GraphicsWindow::closeImplementation)
                , default_closeImplementation_function_type(&GraphicsWindow_wrapper::default_closeImplementation) );
        
        }
        { //::osgViewer::GraphicsWindow::getEventQueue
        
            typedef ::osgGA::EventQueue * ( ::osgViewer::GraphicsWindow::*getEventQueue_function_type )(  ) ;
            
            GraphicsWindow_exposer.def( 
                "getEventQueue"
                , getEventQueue_function_type( &::osgViewer::GraphicsWindow::getEventQueue )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::GraphicsWindow::getEventQueue
        
            typedef ::osgGA::EventQueue const * ( ::osgViewer::GraphicsWindow::*getEventQueue_function_type )(  ) const;
            
            GraphicsWindow_exposer.def( 
                "getEventQueue"
                , getEventQueue_function_type( &::osgViewer::GraphicsWindow::getEventQueue )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgViewer::GraphicsWindow::getSwapGroup
        
            typedef boost::python::tuple ( *getSwapGroup_function_type )( ::osgViewer::GraphicsWindow const & );
            
            GraphicsWindow_exposer.def( 
                "getSwapGroup"
                , getSwapGroup_function_type( &GraphicsWindow_wrapper::getSwapGroup )
                , ( bp::arg("inst") ) );
        
        }
        { //::osgViewer::GraphicsWindow::getSyncToVBlank
        
            typedef bool ( ::osgViewer::GraphicsWindow::*getSyncToVBlank_function_type )(  ) const;
            
            GraphicsWindow_exposer.def( 
                "getSyncToVBlank"
                , getSyncToVBlank_function_type( &::osgViewer::GraphicsWindow::getSyncToVBlank ) );
        
        }
        { //::osgViewer::GraphicsWindow::getViews
        
            typedef void ( ::osgViewer::GraphicsWindow::*getViews_function_type )( ::std::list< osgViewer::View* > & ) ;
            
            GraphicsWindow_exposer.def( 
                "getViews"
                , getViews_function_type( &::osgViewer::GraphicsWindow::getViews )
                , ( bp::arg("views") ) );
        
        }
        { //::osgViewer::GraphicsWindow::getWindowDecoration
        
            typedef bool ( ::osgViewer::GraphicsWindow::*getWindowDecoration_function_type )(  ) const;
            typedef bool ( GraphicsWindow_wrapper::*default_getWindowDecoration_function_type )(  ) const;
            
            GraphicsWindow_exposer.def( 
                "getWindowDecoration"
                , getWindowDecoration_function_type(&::osgViewer::GraphicsWindow::getWindowDecoration)
                , default_getWindowDecoration_function_type(&GraphicsWindow_wrapper::default_getWindowDecoration) );
        
        }
        { //::osgViewer::GraphicsWindow::getWindowName
        
            typedef ::std::string ( ::osgViewer::GraphicsWindow::*getWindowName_function_type )(  ) ;
            typedef ::std::string ( GraphicsWindow_wrapper::*default_getWindowName_function_type )(  ) ;
            
            GraphicsWindow_exposer.def( 
                "getWindowName"
                , getWindowName_function_type(&::osgViewer::GraphicsWindow::getWindowName)
                , default_getWindowName_function_type(&GraphicsWindow_wrapper::default_getWindowName) );
        
        }
        { //::osgViewer::GraphicsWindow::getWindowRectangle
        
            typedef boost::python::tuple ( *default_getWindowRectangle_function_type )( ::osgViewer::GraphicsWindow & );
            
            GraphicsWindow_exposer.def( 
                "getWindowRectangle"
                , default_getWindowRectangle_function_type( &GraphicsWindow_wrapper::default_getWindowRectangle )
                , ( bp::arg("inst") ) );
        
        }
        { //::osgViewer::GraphicsWindow::grabFocus
        
            typedef void ( ::osgViewer::GraphicsWindow::*grabFocus_function_type )(  ) ;
            typedef void ( GraphicsWindow_wrapper::*default_grabFocus_function_type )(  ) ;
            
            GraphicsWindow_exposer.def( 
                "grabFocus"
                , grabFocus_function_type(&::osgViewer::GraphicsWindow::grabFocus)
                , default_grabFocus_function_type(&GraphicsWindow_wrapper::default_grabFocus) );
        
        }
        { //::osgViewer::GraphicsWindow::grabFocusIfPointerInWindow
        
            typedef void ( ::osgViewer::GraphicsWindow::*grabFocusIfPointerInWindow_function_type )(  ) ;
            typedef void ( GraphicsWindow_wrapper::*default_grabFocusIfPointerInWindow_function_type )(  ) ;
            
            GraphicsWindow_exposer.def( 
                "grabFocusIfPointerInWindow"
                , grabFocusIfPointerInWindow_function_type(&::osgViewer::GraphicsWindow::grabFocusIfPointerInWindow)
                , default_grabFocusIfPointerInWindow_function_type(&GraphicsWindow_wrapper::default_grabFocusIfPointerInWindow) );
        
        }
        { //::osgViewer::GraphicsWindow::isRealizedImplementation
        
            typedef bool ( ::osgViewer::GraphicsWindow::*isRealizedImplementation_function_type )(  ) const;
            typedef bool ( GraphicsWindow_wrapper::*default_isRealizedImplementation_function_type )(  ) const;
            
            GraphicsWindow_exposer.def( 
                "isRealizedImplementation"
                , isRealizedImplementation_function_type(&::osgViewer::GraphicsWindow::isRealizedImplementation)
                , default_isRealizedImplementation_function_type(&GraphicsWindow_wrapper::default_isRealizedImplementation) );
        
        }
        { //::osgViewer::GraphicsWindow::isSameKindAs
        
            typedef bool ( ::osgViewer::GraphicsWindow::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( GraphicsWindow_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            GraphicsWindow_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgViewer::GraphicsWindow::isSameKindAs)
                , default_isSameKindAs_function_type(&GraphicsWindow_wrapper::default_isSameKindAs)
                , ( bp::arg("object") ) );
        
        }
        { //::osgViewer::GraphicsWindow::libraryName
        
            typedef char const * ( ::osgViewer::GraphicsWindow::*libraryName_function_type )(  ) const;
            typedef char const * ( GraphicsWindow_wrapper::*default_libraryName_function_type )(  ) const;
            
            GraphicsWindow_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgViewer::GraphicsWindow::libraryName)
                , default_libraryName_function_type(&GraphicsWindow_wrapper::default_libraryName) );
        
        }
        { //::osgViewer::GraphicsWindow::makeContextCurrentImplementation
        
            typedef bool ( ::osgViewer::GraphicsWindow::*makeContextCurrentImplementation_function_type )( ::osg::GraphicsContext * ) ;
            typedef bool ( GraphicsWindow_wrapper::*default_makeContextCurrentImplementation_function_type )( ::osg::GraphicsContext * ) ;
            
            GraphicsWindow_exposer.def( 
                "makeContextCurrentImplementation"
                , makeContextCurrentImplementation_function_type(&::osgViewer::GraphicsWindow::makeContextCurrentImplementation)
                , default_makeContextCurrentImplementation_function_type(&GraphicsWindow_wrapper::default_makeContextCurrentImplementation)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgViewer::GraphicsWindow::makeCurrentImplementation
        
            typedef bool ( ::osgViewer::GraphicsWindow::*makeCurrentImplementation_function_type )(  ) ;
            typedef bool ( GraphicsWindow_wrapper::*default_makeCurrentImplementation_function_type )(  ) ;
            
            GraphicsWindow_exposer.def( 
                "makeCurrentImplementation"
                , makeCurrentImplementation_function_type(&::osgViewer::GraphicsWindow::makeCurrentImplementation)
                , default_makeCurrentImplementation_function_type(&GraphicsWindow_wrapper::default_makeCurrentImplementation) );
        
        }
        { //::osgViewer::GraphicsWindow::raiseWindow
        
            typedef void ( ::osgViewer::GraphicsWindow::*raiseWindow_function_type )(  ) ;
            typedef void ( GraphicsWindow_wrapper::*default_raiseWindow_function_type )(  ) ;
            
            GraphicsWindow_exposer.def( 
                "raiseWindow"
                , raiseWindow_function_type(&::osgViewer::GraphicsWindow::raiseWindow)
                , default_raiseWindow_function_type(&GraphicsWindow_wrapper::default_raiseWindow) );
        
        }
        { //::osgViewer::GraphicsWindow::realizeImplementation
        
            typedef bool ( ::osgViewer::GraphicsWindow::*realizeImplementation_function_type )(  ) ;
            typedef bool ( GraphicsWindow_wrapper::*default_realizeImplementation_function_type )(  ) ;
            
            GraphicsWindow_exposer.def( 
                "realizeImplementation"
                , realizeImplementation_function_type(&::osgViewer::GraphicsWindow::realizeImplementation)
                , default_realizeImplementation_function_type(&GraphicsWindow_wrapper::default_realizeImplementation) );
        
        }
        { //::osgViewer::GraphicsWindow::releaseContextImplementation
        
            typedef bool ( ::osgViewer::GraphicsWindow::*releaseContextImplementation_function_type )(  ) ;
            typedef bool ( GraphicsWindow_wrapper::*default_releaseContextImplementation_function_type )(  ) ;
            
            GraphicsWindow_exposer.def( 
                "releaseContextImplementation"
                , releaseContextImplementation_function_type(&::osgViewer::GraphicsWindow::releaseContextImplementation)
                , default_releaseContextImplementation_function_type(&GraphicsWindow_wrapper::default_releaseContextImplementation) );
        
        }
        { //::osgViewer::GraphicsWindow::requestContinuousUpdate
        
            typedef void ( ::osgViewer::GraphicsWindow::*requestContinuousUpdate_function_type )( bool ) ;
            typedef void ( GraphicsWindow_wrapper::*default_requestContinuousUpdate_function_type )( bool ) ;
            
            GraphicsWindow_exposer.def( 
                "requestContinuousUpdate"
                , requestContinuousUpdate_function_type(&::osgViewer::GraphicsWindow::requestContinuousUpdate)
                , default_requestContinuousUpdate_function_type(&GraphicsWindow_wrapper::default_requestContinuousUpdate)
                , ( bp::arg("arg0")=(bool)(true) ) );
        
        }
        { //::osgViewer::GraphicsWindow::requestRedraw
        
            typedef void ( ::osgViewer::GraphicsWindow::*requestRedraw_function_type )(  ) ;
            typedef void ( GraphicsWindow_wrapper::*default_requestRedraw_function_type )(  ) ;
            
            GraphicsWindow_exposer.def( 
                "requestRedraw"
                , requestRedraw_function_type(&::osgViewer::GraphicsWindow::requestRedraw)
                , default_requestRedraw_function_type(&GraphicsWindow_wrapper::default_requestRedraw) );
        
        }
        { //::osgViewer::GraphicsWindow::requestWarpPointer
        
            typedef void ( ::osgViewer::GraphicsWindow::*requestWarpPointer_function_type )( float,float ) ;
            typedef void ( GraphicsWindow_wrapper::*default_requestWarpPointer_function_type )( float,float ) ;
            
            GraphicsWindow_exposer.def( 
                "requestWarpPointer"
                , requestWarpPointer_function_type(&::osgViewer::GraphicsWindow::requestWarpPointer)
                , default_requestWarpPointer_function_type(&GraphicsWindow_wrapper::default_requestWarpPointer)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgViewer::GraphicsWindow::setCursor
        
            typedef void ( ::osgViewer::GraphicsWindow::*setCursor_function_type )( ::osgViewer::GraphicsWindow::MouseCursor ) ;
            typedef void ( GraphicsWindow_wrapper::*default_setCursor_function_type )( ::osgViewer::GraphicsWindow::MouseCursor ) ;
            
            GraphicsWindow_exposer.def( 
                "setCursor"
                , setCursor_function_type(&::osgViewer::GraphicsWindow::setCursor)
                , default_setCursor_function_type(&GraphicsWindow_wrapper::default_setCursor)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgViewer::GraphicsWindow::setEventQueue
        
            typedef void ( ::osgViewer::GraphicsWindow::*setEventQueue_function_type )( ::osgGA::EventQueue * ) ;
            
            GraphicsWindow_exposer.def( 
                "setEventQueue"
                , setEventQueue_function_type( &::osgViewer::GraphicsWindow::setEventQueue )
                , ( bp::arg("eventQueue") ) );
        
        }
        { //::osgViewer::GraphicsWindow::setSwapGroup
        
            typedef void ( ::osgViewer::GraphicsWindow::*setSwapGroup_function_type )( bool,::GLuint,::GLuint ) ;
            typedef void ( GraphicsWindow_wrapper::*default_setSwapGroup_function_type )( bool,::GLuint,::GLuint ) ;
            
            GraphicsWindow_exposer.def( 
                "setSwapGroup"
                , setSwapGroup_function_type(&::osgViewer::GraphicsWindow::setSwapGroup)
                , default_setSwapGroup_function_type(&GraphicsWindow_wrapper::default_setSwapGroup)
                , ( bp::arg("on"), bp::arg("group"), bp::arg("barrier") ) );
        
        }
        { //::osgViewer::GraphicsWindow::setSyncToVBlank
        
            typedef void ( ::osgViewer::GraphicsWindow::*setSyncToVBlank_function_type )( bool ) ;
            typedef void ( GraphicsWindow_wrapper::*default_setSyncToVBlank_function_type )( bool ) ;
            
            GraphicsWindow_exposer.def( 
                "setSyncToVBlank"
                , setSyncToVBlank_function_type(&::osgViewer::GraphicsWindow::setSyncToVBlank)
                , default_setSyncToVBlank_function_type(&GraphicsWindow_wrapper::default_setSyncToVBlank)
                , ( bp::arg("on") ) );
        
        }
        { //::osgViewer::GraphicsWindow::setWindowDecoration
        
            typedef void ( ::osgViewer::GraphicsWindow::*setWindowDecoration_function_type )( bool ) ;
            
            GraphicsWindow_exposer.def( 
                "setWindowDecoration"
                , setWindowDecoration_function_type( &::osgViewer::GraphicsWindow::setWindowDecoration )
                , ( bp::arg("flag") ) );
        
        }
        { //::osgViewer::GraphicsWindow::setWindowDecorationImplementation
        
            typedef bool ( ::osgViewer::GraphicsWindow::*setWindowDecorationImplementation_function_type )( bool ) ;
            typedef bool ( GraphicsWindow_wrapper::*default_setWindowDecorationImplementation_function_type )( bool ) ;
            
            GraphicsWindow_exposer.def( 
                "setWindowDecorationImplementation"
                , setWindowDecorationImplementation_function_type(&::osgViewer::GraphicsWindow::setWindowDecorationImplementation)
                , default_setWindowDecorationImplementation_function_type(&GraphicsWindow_wrapper::default_setWindowDecorationImplementation)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgViewer::GraphicsWindow::setWindowName
        
            typedef void ( ::osgViewer::GraphicsWindow::*setWindowName_function_type )( ::std::string const & ) ;
            typedef void ( GraphicsWindow_wrapper::*default_setWindowName_function_type )( ::std::string const & ) ;
            
            GraphicsWindow_exposer.def( 
                "setWindowName"
                , setWindowName_function_type(&::osgViewer::GraphicsWindow::setWindowName)
                , default_setWindowName_function_type(&GraphicsWindow_wrapper::default_setWindowName)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgViewer::GraphicsWindow::setWindowRectangle
        
            typedef void ( ::osgViewer::GraphicsWindow::*setWindowRectangle_function_type )( int,int,int,int ) ;
            
            GraphicsWindow_exposer.def( 
                "setWindowRectangle"
                , setWindowRectangle_function_type( &::osgViewer::GraphicsWindow::setWindowRectangle )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("width"), bp::arg("height") ) );
        
        }
        { //::osgViewer::GraphicsWindow::setWindowRectangleImplementation
        
            typedef bool ( ::osgViewer::GraphicsWindow::*setWindowRectangleImplementation_function_type )( int,int,int,int ) ;
            typedef bool ( GraphicsWindow_wrapper::*default_setWindowRectangleImplementation_function_type )( int,int,int,int ) ;
            
            GraphicsWindow_exposer.def( 
                "setWindowRectangleImplementation"
                , setWindowRectangleImplementation_function_type(&::osgViewer::GraphicsWindow::setWindowRectangleImplementation)
                , default_setWindowRectangleImplementation_function_type(&GraphicsWindow_wrapper::default_setWindowRectangleImplementation)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2"), bp::arg("arg3") ) );
        
        }
        { //::osgViewer::GraphicsWindow::swapBuffersImplementation
        
            typedef void ( ::osgViewer::GraphicsWindow::*swapBuffersImplementation_function_type )(  ) ;
            typedef void ( GraphicsWindow_wrapper::*default_swapBuffersImplementation_function_type )(  ) ;
            
            GraphicsWindow_exposer.def( 
                "swapBuffersImplementation"
                , swapBuffersImplementation_function_type(&::osgViewer::GraphicsWindow::swapBuffersImplementation)
                , default_swapBuffersImplementation_function_type(&GraphicsWindow_wrapper::default_swapBuffersImplementation) );
        
        }
        { //::osgViewer::GraphicsWindow::useCursor
        
            typedef void ( ::osgViewer::GraphicsWindow::*useCursor_function_type )( bool ) ;
            typedef void ( GraphicsWindow_wrapper::*default_useCursor_function_type )( bool ) ;
            
            GraphicsWindow_exposer.def( 
                "useCursor"
                , useCursor_function_type(&::osgViewer::GraphicsWindow::useCursor)
                , default_useCursor_function_type(&GraphicsWindow_wrapper::default_useCursor)
                , ( bp::arg("cursorOn") ) );
        
        }
        { //::osgViewer::GraphicsWindow::valid
        
            typedef bool ( ::osgViewer::GraphicsWindow::*valid_function_type )(  ) const;
            typedef bool ( GraphicsWindow_wrapper::*default_valid_function_type )(  ) const;
            
            GraphicsWindow_exposer.def( 
                "valid"
                , valid_function_type(&::osgViewer::GraphicsWindow::valid)
                , default_valid_function_type(&GraphicsWindow_wrapper::default_valid) );
        
        }
    }

}
