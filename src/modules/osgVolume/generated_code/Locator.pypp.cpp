// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgVolume.h"
#include "wrap_referenced.h"
#include "Locator.pypp.hpp"

namespace bp = boost::python;

struct Locator_wrapper : osgVolume::Locator, bp::wrapper< osgVolume::Locator > {

    struct LocatorCallback_wrapper : osgVolume::Locator::LocatorCallback, bp::wrapper< osgVolume::Locator::LocatorCallback > {
    
        LocatorCallback_wrapper( )
        : osgVolume::Locator::LocatorCallback( )
          , bp::wrapper< osgVolume::Locator::LocatorCallback >(){
            // null constructor
        
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osgVolume::Locator::LocatorCallback::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osgVolume::Locator::LocatorCallback::className( );
        }
    
        virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
            if( bp::override func_clone = this->get_override( "clone" ) )
                return func_clone( boost::ref(copyop) );
            else{
                return this->osgVolume::Locator::LocatorCallback::clone( boost::ref(copyop) );
            }
        }
        
        ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
            return osgVolume::Locator::LocatorCallback::clone( boost::ref(copyop) );
        }
    
        virtual ::osg::Object * cloneType(  ) const  {
            if( bp::override func_cloneType = this->get_override( "cloneType" ) )
                return func_cloneType(  );
            else{
                return this->osgVolume::Locator::LocatorCallback::cloneType(  );
            }
        }
        
        ::osg::Object * default_cloneType(  ) const  {
            return osgVolume::Locator::LocatorCallback::cloneType( );
        }
    
        virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
            if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
                return func_isSameKindAs( boost::python::ptr(obj) );
            else{
                return this->osgVolume::Locator::LocatorCallback::isSameKindAs( boost::python::ptr(obj) );
            }
        }
        
        bool default_isSameKindAs( ::osg::Object const * obj ) const  {
            return osgVolume::Locator::LocatorCallback::isSameKindAs( boost::python::ptr(obj) );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osgVolume::Locator::LocatorCallback::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osgVolume::Locator::LocatorCallback::libraryName( );
        }
    
        virtual void locatorModified( ::osgVolume::Locator * arg0 ) {
            if( bp::override func_locatorModified = this->get_override( "locatorModified" ) )
                func_locatorModified( boost::python::ptr(arg0) );
            else{
                this->osgVolume::Locator::LocatorCallback::locatorModified( boost::python::ptr(arg0) );
            }
        }
        
        void default_locatorModified( ::osgVolume::Locator * arg0 ) {
            osgVolume::Locator::LocatorCallback::locatorModified( boost::python::ptr(arg0) );
        }
    
        virtual void computeDataVariance(  ) {
            if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
                func_computeDataVariance(  );
            else{
                this->osg::Object::computeDataVariance(  );
            }
        }
        
        void default_computeDataVariance(  ) {
            osg::Object::computeDataVariance( );
        }
    
        virtual ::osg::Referenced * getUserData(  ) {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced * default_getUserData(  ) {
            return osg::Object::getUserData( );
        }
    
        virtual ::osg::Referenced const * getUserData(  ) const  {
            if( bp::override func_getUserData = this->get_override( "getUserData" ) )
                return func_getUserData(  );
            else{
                return this->osg::Object::getUserData(  );
            }
        }
        
        ::osg::Referenced const * default_getUserData(  ) const  {
            return osg::Object::getUserData( );
        }
    
        virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
            if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
                func_resizeGLObjectBuffers( arg0 );
            else{
                this->osg::Object::resizeGLObjectBuffers( arg0 );
            }
        }
        
        void default_resizeGLObjectBuffers( unsigned int arg0 ) {
            osg::Object::resizeGLObjectBuffers( arg0 );
        }
    
        virtual void setName( ::std::string const & name ) {
            if( bp::override func_setName = this->get_override( "setName" ) )
                func_setName( name );
            else{
                this->osg::Object::setName( name );
            }
        }
        
        void default_setName( ::std::string const & name ) {
            osg::Object::setName( name );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Object::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    
        virtual void setUserData( ::osg::Referenced * obj ) {
            if( bp::override func_setUserData = this->get_override( "setUserData" ) )
                func_setUserData( boost::python::ptr(obj) );
            else{
                this->osg::Object::setUserData( boost::python::ptr(obj) );
            }
        }
        
        void default_setUserData( ::osg::Referenced * obj ) {
            osg::Object::setUserData( boost::python::ptr(obj) );
        }
    
    };

    Locator_wrapper( )
    : osgVolume::Locator( )
      , bp::wrapper< osgVolume::Locator >(){
        // null constructor
    
    }

    Locator_wrapper(::osg::Matrixd const & transform )
    : osgVolume::Locator( boost::ref(transform) )
      , bp::wrapper< osgVolume::Locator >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgVolume::Locator::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgVolume::Locator::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgVolume::Locator::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgVolume::Locator::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgVolume::Locator::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgVolume::Locator::cloneType( );
    }

    virtual bool convertLocalToModel( ::osg::Vec3d const & arg0, ::osg::Vec3d & arg1 ) const  {
        if( bp::override func_convertLocalToModel = this->get_override( "convertLocalToModel" ) )
            return func_convertLocalToModel( boost::ref(arg0), boost::ref(arg1) );
        else{
            return this->osgVolume::Locator::convertLocalToModel( boost::ref(arg0), boost::ref(arg1) );
        }
    }
    
    bool default_convertLocalToModel( ::osg::Vec3d const & arg0, ::osg::Vec3d & arg1 ) const  {
        return osgVolume::Locator::convertLocalToModel( boost::ref(arg0), boost::ref(arg1) );
    }

    virtual bool convertModelToLocal( ::osg::Vec3d const & arg0, ::osg::Vec3d & arg1 ) const  {
        if( bp::override func_convertModelToLocal = this->get_override( "convertModelToLocal" ) )
            return func_convertModelToLocal( boost::ref(arg0), boost::ref(arg1) );
        else{
            return this->osgVolume::Locator::convertModelToLocal( boost::ref(arg0), boost::ref(arg1) );
        }
    }
    
    bool default_convertModelToLocal( ::osg::Vec3d const & arg0, ::osg::Vec3d & arg1 ) const  {
        return osgVolume::Locator::convertModelToLocal( boost::ref(arg0), boost::ref(arg1) );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgVolume::Locator::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgVolume::Locator::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgVolume::Locator::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgVolume::Locator::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_Locator_class(){

    { //::osgVolume::Locator
        typedef bp::class_< Locator_wrapper, bp::bases< ::osg::Object >, osg::ref_ptr< Locator_wrapper >, boost::noncopyable > Locator_exposer_t;
        Locator_exposer_t Locator_exposer = Locator_exposer_t( "Locator", bp::init< >() );
        bp::scope Locator_scope( Locator_exposer );
        bp::class_< Locator_wrapper::LocatorCallback_wrapper, bp::bases< ::osg::Object >, osg::ref_ptr< Locator_wrapper::LocatorCallback_wrapper >, boost::noncopyable >( "LocatorCallback", "\n Callback interface for enabling the monitoring of changes to the Locator.\n", bp::no_init )    
            .def( bp::init< >("\n Callback interface for enabling the monitoring of changes to the Locator.\n") )    
            .def( 
                "className"
                , (char const * ( ::osgVolume::Locator::LocatorCallback::* )(  ) const)(&::osgVolume::Locator::LocatorCallback::className)
                , (char const * ( Locator_wrapper::LocatorCallback_wrapper::* )(  ) const)(&Locator_wrapper::LocatorCallback_wrapper::default_className) )    
            .def( 
                "clone"
                , (::osg::Object * ( ::osgVolume::Locator::LocatorCallback::* )( ::osg::CopyOp const & ) const)(&::osgVolume::Locator::LocatorCallback::clone)
                , (::osg::Object * ( Locator_wrapper::LocatorCallback_wrapper::* )( ::osg::CopyOp const & ) const)(&Locator_wrapper::LocatorCallback_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "cloneType"
                , (::osg::Object * ( ::osgVolume::Locator::LocatorCallback::* )(  ) const)(&::osgVolume::Locator::LocatorCallback::cloneType)
                , (::osg::Object * ( Locator_wrapper::LocatorCallback_wrapper::* )(  ) const)(&Locator_wrapper::LocatorCallback_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "isSameKindAs"
                , (bool ( ::osgVolume::Locator::LocatorCallback::* )( ::osg::Object const * ) const)(&::osgVolume::Locator::LocatorCallback::isSameKindAs)
                , (bool ( Locator_wrapper::LocatorCallback_wrapper::* )( ::osg::Object const * ) const)(&Locator_wrapper::LocatorCallback_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) )    
            .def( 
                "libraryName"
                , (char const * ( ::osgVolume::Locator::LocatorCallback::* )(  ) const)(&::osgVolume::Locator::LocatorCallback::libraryName)
                , (char const * ( Locator_wrapper::LocatorCallback_wrapper::* )(  ) const)(&Locator_wrapper::LocatorCallback_wrapper::default_libraryName) )    
            .def( 
                "locatorModified"
                , (void ( ::osgVolume::Locator::LocatorCallback::* )( ::osgVolume::Locator * ) )(&::osgVolume::Locator::LocatorCallback::locatorModified)
                , (void ( Locator_wrapper::LocatorCallback_wrapper::* )( ::osgVolume::Locator * ) )(&Locator_wrapper::LocatorCallback_wrapper::default_locatorModified)
                , ( bp::arg("arg0") ) );
        Locator_exposer.def( bp::init< osg::Matrixd const & >(( bp::arg("transform") )) );
        bp::implicitly_convertible< osg::Matrixd const &, osgVolume::Locator >();
        { //::osgVolume::Locator::addCallback
        
            typedef void ( ::osgVolume::Locator::*addCallback_function_type )( ::osgVolume::Locator::LocatorCallback * ) ;
            
            Locator_exposer.def( 
                "addCallback"
                , addCallback_function_type( &::osgVolume::Locator::addCallback )
                , ( bp::arg("callback") ) );
        
        }
        { //::osgVolume::Locator::className
        
            typedef char const * ( ::osgVolume::Locator::*className_function_type )(  ) const;
            typedef char const * ( Locator_wrapper::*default_className_function_type )(  ) const;
            
            Locator_exposer.def( 
                "className"
                , className_function_type(&::osgVolume::Locator::className)
                , default_className_function_type(&Locator_wrapper::default_className) );
        
        }
        { //::osgVolume::Locator::clone
        
            typedef ::osg::Object * ( ::osgVolume::Locator::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Locator_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Locator_exposer.def( 
                "clone"
                , clone_function_type(&::osgVolume::Locator::clone)
                , default_clone_function_type(&Locator_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgVolume::Locator::cloneType
        
            typedef ::osg::Object * ( ::osgVolume::Locator::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Locator_wrapper::*default_cloneType_function_type )(  ) const;
            
            Locator_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgVolume::Locator::cloneType)
                , default_cloneType_function_type(&Locator_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgVolume::Locator::computeLocalBounds
        
            typedef bool ( ::osgVolume::Locator::*computeLocalBounds_function_type )( ::osg::Vec3d &,::osg::Vec3d & ) const;
            
            Locator_exposer.def( 
                "computeLocalBounds"
                , computeLocalBounds_function_type( &::osgVolume::Locator::computeLocalBounds )
                , ( bp::arg("bottomLeft"), bp::arg("topRight") ) );
        
        }
        { //::osgVolume::Locator::computeLocalBounds
        
            typedef bool ( ::osgVolume::Locator::*computeLocalBounds_function_type )( ::osgVolume::Locator &,::osg::Vec3d &,::osg::Vec3d & ) const;
            
            Locator_exposer.def( 
                "computeLocalBounds"
                , computeLocalBounds_function_type( &::osgVolume::Locator::computeLocalBounds )
                , ( bp::arg("source"), bp::arg("bottomLeft"), bp::arg("topRight") ) );
        
        }
        { //::osgVolume::Locator::convertLocalCoordBetween
        
            typedef bool ( *convertLocalCoordBetween_function_type )( ::osgVolume::Locator const &,::osg::Vec3d const &,::osgVolume::Locator const &,::osg::Vec3d & );
            
            Locator_exposer.def( 
                "convertLocalCoordBetween"
                , convertLocalCoordBetween_function_type( &::osgVolume::Locator::convertLocalCoordBetween )
                , ( bp::arg("source"), bp::arg("sourceNDC"), bp::arg("destination"), bp::arg("destinationNDC") ) );
        
        }
        { //::osgVolume::Locator::convertLocalToModel
        
            typedef bool ( ::osgVolume::Locator::*convertLocalToModel_function_type )( ::osg::Vec3d const &,::osg::Vec3d & ) const;
            typedef bool ( Locator_wrapper::*default_convertLocalToModel_function_type )( ::osg::Vec3d const &,::osg::Vec3d & ) const;
            
            Locator_exposer.def( 
                "convertLocalToModel"
                , convertLocalToModel_function_type(&::osgVolume::Locator::convertLocalToModel)
                , default_convertLocalToModel_function_type(&Locator_wrapper::default_convertLocalToModel)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgVolume::Locator::convertModelToLocal
        
            typedef bool ( ::osgVolume::Locator::*convertModelToLocal_function_type )( ::osg::Vec3d const &,::osg::Vec3d & ) const;
            typedef bool ( Locator_wrapper::*default_convertModelToLocal_function_type )( ::osg::Vec3d const &,::osg::Vec3d & ) const;
            
            Locator_exposer.def( 
                "convertModelToLocal"
                , convertModelToLocal_function_type(&::osgVolume::Locator::convertModelToLocal)
                , default_convertModelToLocal_function_type(&Locator_wrapper::default_convertModelToLocal)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgVolume::Locator::getLocatorCallbacks
        
            typedef ::std::vector< osg::ref_ptr<osgVolume::Locator::LocatorCallback> > & ( ::osgVolume::Locator::*getLocatorCallbacks_function_type )(  ) ;
            
            Locator_exposer.def( 
                "getLocatorCallbacks"
                , getLocatorCallbacks_function_type( &::osgVolume::Locator::getLocatorCallbacks )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgVolume::Locator::getLocatorCallbacks
        
            typedef ::std::vector< osg::ref_ptr<osgVolume::Locator::LocatorCallback> > const & ( ::osgVolume::Locator::*getLocatorCallbacks_function_type )(  ) const;
            
            Locator_exposer.def( 
                "getLocatorCallbacks"
                , getLocatorCallbacks_function_type( &::osgVolume::Locator::getLocatorCallbacks )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgVolume::Locator::getTransform
        
            typedef ::osg::Matrixd const & ( ::osgVolume::Locator::*getTransform_function_type )(  ) const;
            
            Locator_exposer.def( 
                "getTransform"
                , getTransform_function_type( &::osgVolume::Locator::getTransform )
                , bp::return_internal_reference< >()
                , " Set the transformation from local coordinates to model coordinates." );
        
        }
        { //::osgVolume::Locator::isSameKindAs
        
            typedef bool ( ::osgVolume::Locator::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Locator_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Locator_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgVolume::Locator::isSameKindAs)
                , default_isSameKindAs_function_type(&Locator_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgVolume::Locator::libraryName
        
            typedef char const * ( ::osgVolume::Locator::*libraryName_function_type )(  ) const;
            typedef char const * ( Locator_wrapper::*default_libraryName_function_type )(  ) const;
            
            Locator_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgVolume::Locator::libraryName)
                , default_libraryName_function_type(&Locator_wrapper::default_libraryName) );
        
        }
        { //::osgVolume::Locator::removeCallback
        
            typedef void ( ::osgVolume::Locator::*removeCallback_function_type )( ::osgVolume::Locator::LocatorCallback * ) ;
            
            Locator_exposer.def( 
                "removeCallback"
                , removeCallback_function_type( &::osgVolume::Locator::removeCallback )
                , ( bp::arg("callback") ) );
        
        }
        { //::osgVolume::Locator::setTransform
        
            typedef void ( ::osgVolume::Locator::*setTransform_function_type )( ::osg::Matrixd const & ) ;
            
            Locator_exposer.def( 
                "setTransform"
                , setTransform_function_type( &::osgVolume::Locator::setTransform )
                , ( bp::arg("transform") )
                , " Set the transformation from local coordinates to model coordinates." );
        
        }
        { //::osgVolume::Locator::setTransformAsExtents
        
            typedef void ( ::osgVolume::Locator::*setTransformAsExtents_function_type )( double,double,double,double,double,double ) ;
            
            Locator_exposer.def( 
                "setTransformAsExtents"
                , setTransformAsExtents_function_type( &::osgVolume::Locator::setTransformAsExtents )
                , ( bp::arg("minX"), bp::arg("minY"), bp::arg("maxX"), bp::arg("maxY"), bp::arg("minZ"), bp::arg("maxZ") )
                , " Set the extents of the local coords." );
        
        }
        Locator_exposer.staticmethod( "convertLocalCoordBetween" );
    }

}
