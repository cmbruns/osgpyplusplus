// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgVolume.h"
#include "wrap_referenced.h"
#include "SampleDensityProperty.pypp.hpp"

namespace bp = boost::python;

struct SampleDensityProperty_wrapper : osgVolume::SampleDensityProperty, bp::wrapper< osgVolume::SampleDensityProperty > {

    SampleDensityProperty_wrapper(float value=1.0e+0f )
    : osgVolume::SampleDensityProperty( value )
      , bp::wrapper< osgVolume::SampleDensityProperty >(){
        // constructor
    
    }

    virtual void accept( ::osgVolume::PropertyVisitor & pv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(pv) );
        else{
            this->osgVolume::SampleDensityProperty::accept( boost::ref(pv) );
        }
    }
    
    void default_accept( ::osgVolume::PropertyVisitor & pv ) {
        osgVolume::SampleDensityProperty::accept( boost::ref(pv) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgVolume::SampleDensityProperty::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgVolume::SampleDensityProperty::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgVolume::SampleDensityProperty::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgVolume::SampleDensityProperty::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgVolume::SampleDensityProperty::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgVolume::SampleDensityProperty::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgVolume::SampleDensityProperty::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgVolume::SampleDensityProperty::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgVolume::SampleDensityProperty::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgVolume::SampleDensityProperty::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual void setValue( float v ) {
        if( bp::override func_setValue = this->get_override( "setValue" ) )
            func_setValue( v );
        else{
            this->osgVolume::ScalarProperty::setValue( v );
        }
    }
    
    void default_setValue( float v ) {
        osgVolume::ScalarProperty::setValue( v );
    }

};

void register_SampleDensityProperty_class(){

    { //::osgVolume::SampleDensityProperty
        typedef bp::class_< SampleDensityProperty_wrapper, bp::bases< osgVolume::ScalarProperty >, osg::ref_ptr< SampleDensityProperty_wrapper >, boost::noncopyable > SampleDensityProperty_exposer_t;
        SampleDensityProperty_exposer_t SampleDensityProperty_exposer = SampleDensityProperty_exposer_t( "SampleDensityProperty", "\n Sample density to use when the volume is static relative to the eye point or when moving if no SampleDensityWhenMovingProperty is assigned.\n", bp::no_init );
        bp::scope SampleDensityProperty_scope( SampleDensityProperty_exposer );
        SampleDensityProperty_exposer.def( bp::init< bp::optional< float > >(( bp::arg("value")=1.0e+0f ), "\n Sample density to use when the volume is static relative to the eye point or when moving if no SampleDensityWhenMovingProperty is assigned.\n") );
        bp::implicitly_convertible< float, osgVolume::SampleDensityProperty >();
        { //::osgVolume::SampleDensityProperty::accept
        
            typedef void ( ::osgVolume::SampleDensityProperty::*accept_function_type )( ::osgVolume::PropertyVisitor & ) ;
            typedef void ( SampleDensityProperty_wrapper::*default_accept_function_type )( ::osgVolume::PropertyVisitor & ) ;
            
            SampleDensityProperty_exposer.def( 
                "accept"
                , accept_function_type(&::osgVolume::SampleDensityProperty::accept)
                , default_accept_function_type(&SampleDensityProperty_wrapper::default_accept)
                , ( bp::arg("pv") ) );
        
        }
        { //::osgVolume::SampleDensityProperty::className
        
            typedef char const * ( ::osgVolume::SampleDensityProperty::*className_function_type )(  ) const;
            typedef char const * ( SampleDensityProperty_wrapper::*default_className_function_type )(  ) const;
            
            SampleDensityProperty_exposer.def( 
                "className"
                , className_function_type(&::osgVolume::SampleDensityProperty::className)
                , default_className_function_type(&SampleDensityProperty_wrapper::default_className) );
        
        }
        { //::osgVolume::SampleDensityProperty::clone
        
            typedef ::osg::Object * ( ::osgVolume::SampleDensityProperty::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( SampleDensityProperty_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            SampleDensityProperty_exposer.def( 
                "clone"
                , clone_function_type(&::osgVolume::SampleDensityProperty::clone)
                , default_clone_function_type(&SampleDensityProperty_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgVolume::SampleDensityProperty::cloneType
        
            typedef ::osg::Object * ( ::osgVolume::SampleDensityProperty::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( SampleDensityProperty_wrapper::*default_cloneType_function_type )(  ) const;
            
            SampleDensityProperty_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgVolume::SampleDensityProperty::cloneType)
                , default_cloneType_function_type(&SampleDensityProperty_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgVolume::SampleDensityProperty::isSameKindAs
        
            typedef bool ( ::osgVolume::SampleDensityProperty::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( SampleDensityProperty_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            SampleDensityProperty_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgVolume::SampleDensityProperty::isSameKindAs)
                , default_isSameKindAs_function_type(&SampleDensityProperty_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgVolume::SampleDensityProperty::libraryName
        
            typedef char const * ( ::osgVolume::SampleDensityProperty::*libraryName_function_type )(  ) const;
            typedef char const * ( SampleDensityProperty_wrapper::*default_libraryName_function_type )(  ) const;
            
            SampleDensityProperty_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgVolume::SampleDensityProperty::libraryName)
                , default_libraryName_function_type(&SampleDensityProperty_wrapper::default_libraryName) );
        
        }
        { //::osgVolume::ScalarProperty::setValue
        
            typedef void ( ::osgVolume::ScalarProperty::*setValue_function_type )( float ) ;
            typedef void ( SampleDensityProperty_wrapper::*default_setValue_function_type )( float ) ;
            
            SampleDensityProperty_exposer.def( 
                "setValue"
                , setValue_function_type(&::osgVolume::ScalarProperty::setValue)
                , default_setValue_function_type(&SampleDensityProperty_wrapper::default_setValue)
                , ( bp::arg("v") ) );
        
        }
    }

}
