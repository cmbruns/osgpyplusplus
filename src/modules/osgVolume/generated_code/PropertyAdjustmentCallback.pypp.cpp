// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "__convenience.pypp.hpp"
#include "wrap_osgVolume.h"
#include "wrap_referenced.h"
#include "PropertyAdjustmentCallback.pypp.hpp"

namespace bp = boost::python;

struct PropertyAdjustmentCallback_wrapper : osgVolume::PropertyAdjustmentCallback, bp::wrapper< osgVolume::PropertyAdjustmentCallback > {

    PropertyAdjustmentCallback_wrapper( )
    : osgVolume::PropertyAdjustmentCallback( )
      , bp::wrapper< osgVolume::PropertyAdjustmentCallback >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgVolume::PropertyAdjustmentCallback::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgVolume::PropertyAdjustmentCallback::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgVolume::PropertyAdjustmentCallback::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgVolume::PropertyAdjustmentCallback::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgVolume::PropertyAdjustmentCallback::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgVolume::PropertyAdjustmentCallback::cloneType( );
    }

    virtual bool handle( ::osgGA::GUIEventAdapter const & ea, ::osgGA::GUIActionAdapter & arg1, ::osg::Object * object, ::osg::NodeVisitor * arg3 ) {
        namespace bpl = boost::python;
        if( bpl::override func_handle = this->get_override( "handle" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_handle.ptr(), ea, arg1, object, arg3 );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return osgVolume::PropertyAdjustmentCallback::handle( boost::ref(ea), boost::ref(arg1), boost::python::ptr(object), boost::python::ptr(arg3) );
        }
    }
    
    static boost::python::object default_handle( ::osgVolume::PropertyAdjustmentCallback & inst, ::osgGA::GUIEventAdapter & ea, ::osgGA::GUIActionAdapter & arg1, ::osg::Object * object, ::osg::NodeVisitor * arg3 ){
        bool result;
        if( dynamic_cast< PropertyAdjustmentCallback_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::osgVolume::PropertyAdjustmentCallback::handle(ea, arg1, object, arg3);
        }
        else{
            result = inst.handle(ea, arg1, object, arg3);
        }
        return bp::object( result );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgVolume::PropertyAdjustmentCallback::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgVolume::PropertyAdjustmentCallback::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgVolume::PropertyAdjustmentCallback::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgVolume::PropertyAdjustmentCallback::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_PropertyAdjustmentCallback_class(){

    bp::class_< PropertyAdjustmentCallback_wrapper, bp::bases< ::osg::StateSet::Callback >, osg::ref_ptr< PropertyAdjustmentCallback_wrapper >, boost::noncopyable >( "PropertyAdjustmentCallback", bp::init< >() )    
        .def( 
            "className"
            , (char const * ( ::osgVolume::PropertyAdjustmentCallback::* )(  ) const)(&::osgVolume::PropertyAdjustmentCallback::className)
            , (char const * ( PropertyAdjustmentCallback_wrapper::* )(  ) const)(&PropertyAdjustmentCallback_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osgVolume::PropertyAdjustmentCallback::* )( ::osg::CopyOp const & ) const)(&::osgVolume::PropertyAdjustmentCallback::clone)
            , (::osg::Object * ( PropertyAdjustmentCallback_wrapper::* )( ::osg::CopyOp const & ) const)(&PropertyAdjustmentCallback_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osgVolume::PropertyAdjustmentCallback::* )(  ) const)(&::osgVolume::PropertyAdjustmentCallback::cloneType)
            , (::osg::Object * ( PropertyAdjustmentCallback_wrapper::* )(  ) const)(&PropertyAdjustmentCallback_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getKeyEventActivatesAlphaFuncAdjustment"
            , (int ( ::osgVolume::PropertyAdjustmentCallback::* )(  ) const)( &::osgVolume::PropertyAdjustmentCallback::getKeyEventActivatesAlphaFuncAdjustment ) )    
        .def( 
            "getKeyEventActivatesSampleDensityAdjustment"
            , (int ( ::osgVolume::PropertyAdjustmentCallback::* )(  ) const)( &::osgVolume::PropertyAdjustmentCallback::getKeyEventActivatesSampleDensityAdjustment ) )    
        .def( 
            "getKeyEventActivatesTransparencyAdjustment"
            , (int ( ::osgVolume::PropertyAdjustmentCallback::* )(  ) const)( &::osgVolume::PropertyAdjustmentCallback::getKeyEventActivatesTransparencyAdjustment ) )    
        .def( 
            "getKeyEventCycleBackward"
            , (int ( ::osgVolume::PropertyAdjustmentCallback::* )(  ) const)( &::osgVolume::PropertyAdjustmentCallback::getKeyEventCycleBackward ) )    
        .def( 
            "getKeyEventCycleForward"
            , (int ( ::osgVolume::PropertyAdjustmentCallback::* )(  ) const)( &::osgVolume::PropertyAdjustmentCallback::getKeyEventCycleForward ) )    
        .def( 
            "handle"
            , (boost::python::object (*)( ::osgVolume::PropertyAdjustmentCallback &,::osgGA::GUIEventAdapter &,::osgGA::GUIActionAdapter &,::osg::Object *,::osg::NodeVisitor * ))( &PropertyAdjustmentCallback_wrapper::default_handle )
            , ( bp::arg("inst"), bp::arg("ea"), bp::arg("arg1"), bp::arg("object"), bp::arg("arg3") ) )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osgVolume::PropertyAdjustmentCallback::* )( ::osg::Object const * ) const)(&::osgVolume::PropertyAdjustmentCallback::isSameKindAs)
            , (bool ( PropertyAdjustmentCallback_wrapper::* )( ::osg::Object const * ) const)(&PropertyAdjustmentCallback_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osgVolume::PropertyAdjustmentCallback::* )(  ) const)(&::osgVolume::PropertyAdjustmentCallback::libraryName)
            , (char const * ( PropertyAdjustmentCallback_wrapper::* )(  ) const)(&PropertyAdjustmentCallback_wrapper::default_libraryName) )    
        .def( 
            "setKeyEventActivatesAlphaFuncAdjustment"
            , (void ( ::osgVolume::PropertyAdjustmentCallback::* )( int ) )( &::osgVolume::PropertyAdjustmentCallback::setKeyEventActivatesAlphaFuncAdjustment )
            , ( bp::arg("key") ) )    
        .def( 
            "setKeyEventActivatesSampleDensityAdjustment"
            , (void ( ::osgVolume::PropertyAdjustmentCallback::* )( int ) )( &::osgVolume::PropertyAdjustmentCallback::setKeyEventActivatesSampleDensityAdjustment )
            , ( bp::arg("key") ) )    
        .def( 
            "setKeyEventActivatesTransparencyAdjustment"
            , (void ( ::osgVolume::PropertyAdjustmentCallback::* )( int ) )( &::osgVolume::PropertyAdjustmentCallback::setKeyEventActivatesTransparencyAdjustment )
            , ( bp::arg("key") ) )    
        .def( 
            "setKeyEventCycleBackward"
            , (void ( ::osgVolume::PropertyAdjustmentCallback::* )( int ) )( &::osgVolume::PropertyAdjustmentCallback::setKeyEventCycleBackward )
            , ( bp::arg("key") ) )    
        .def( 
            "setKeyEventCycleForward"
            , (void ( ::osgVolume::PropertyAdjustmentCallback::* )( int ) )( &::osgVolume::PropertyAdjustmentCallback::setKeyEventCycleForward )
            , ( bp::arg("key") ) )    
        .def_readwrite( "_alphaFuncKey", &osgVolume::PropertyAdjustmentCallback::_alphaFuncKey )    
        .def_readwrite( "_cyleBackwardKey", &osgVolume::PropertyAdjustmentCallback::_cyleBackwardKey )    
        .def_readwrite( "_cyleForwardKey", &osgVolume::PropertyAdjustmentCallback::_cyleForwardKey )    
        .def_readwrite( "_sampleDensityKey", &osgVolume::PropertyAdjustmentCallback::_sampleDensityKey )    
        .def_readwrite( "_transparencyKey", &osgVolume::PropertyAdjustmentCallback::_transparencyKey )    
        .def_readwrite( "_updateAlphaCutOff", &osgVolume::PropertyAdjustmentCallback::_updateAlphaCutOff )    
        .def_readwrite( "_updateSampleDensity", &osgVolume::PropertyAdjustmentCallback::_updateSampleDensity )    
        .def_readwrite( "_updateTransparency", &osgVolume::PropertyAdjustmentCallback::_updateTransparency );

}
