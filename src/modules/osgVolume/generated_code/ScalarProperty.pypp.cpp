// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgVolume.h"
#include "wrap_referenced.h"
#include "ScalarProperty.pypp.hpp"

namespace bp = boost::python;

struct ScalarProperty_wrapper : osgVolume::ScalarProperty, bp::wrapper< osgVolume::ScalarProperty > {

    ScalarProperty_wrapper(::std::string const & scaleName, float value )
    : osgVolume::ScalarProperty( scaleName, value )
      , bp::wrapper< osgVolume::ScalarProperty >(){
        // constructor
    
    }

    virtual void accept( ::osgVolume::PropertyVisitor & pv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(pv) );
        else{
            this->osgVolume::ScalarProperty::accept( boost::ref(pv) );
        }
    }
    
    void default_accept( ::osgVolume::PropertyVisitor & pv ) {
        osgVolume::ScalarProperty::accept( boost::ref(pv) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgVolume::ScalarProperty::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgVolume::ScalarProperty::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgVolume::ScalarProperty::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgVolume::ScalarProperty::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgVolume::ScalarProperty::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgVolume::ScalarProperty::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgVolume::ScalarProperty::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgVolume::ScalarProperty::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgVolume::ScalarProperty::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgVolume::ScalarProperty::libraryName( );
    }

    virtual void setValue( float v ) {
        if( bp::override func_setValue = this->get_override( "setValue" ) )
            func_setValue( v );
        else{
            this->osgVolume::ScalarProperty::setValue( v );
        }
    }
    
    void default_setValue( float v ) {
        osgVolume::ScalarProperty::setValue( v );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_ScalarProperty_class(){

    bp::class_< ScalarProperty_wrapper, bp::bases< osgVolume::Property >, osg::ref_ptr< ScalarProperty_wrapper >, boost::noncopyable >( "ScalarProperty", bp::no_init )    
        .def( bp::init< std::string const &, float >(( bp::arg("scaleName"), bp::arg("value") )) )    
        .def( 
            "accept"
            , (void ( ::osgVolume::ScalarProperty::* )( ::osgVolume::PropertyVisitor & ) )(&::osgVolume::ScalarProperty::accept)
            , (void ( ScalarProperty_wrapper::* )( ::osgVolume::PropertyVisitor & ) )(&ScalarProperty_wrapper::default_accept)
            , ( bp::arg("pv") ) )    
        .def( 
            "className"
            , (char const * ( ::osgVolume::ScalarProperty::* )(  ) const)(&::osgVolume::ScalarProperty::className)
            , (char const * ( ScalarProperty_wrapper::* )(  ) const)(&ScalarProperty_wrapper::default_className) )    
        .def( 
            "clone"
            , (::osg::Object * ( ::osgVolume::ScalarProperty::* )( ::osg::CopyOp const & ) const)(&::osgVolume::ScalarProperty::clone)
            , (::osg::Object * ( ScalarProperty_wrapper::* )( ::osg::CopyOp const & ) const)(&ScalarProperty_wrapper::default_clone)
            , ( bp::arg("copyop") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "cloneType"
            , (::osg::Object * ( ::osgVolume::ScalarProperty::* )(  ) const)(&::osgVolume::ScalarProperty::cloneType)
            , (::osg::Object * ( ScalarProperty_wrapper::* )(  ) const)(&ScalarProperty_wrapper::default_cloneType)
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "getUniform"
            , (::osg::Uniform * ( ::osgVolume::ScalarProperty::* )(  ) )( &::osgVolume::ScalarProperty::getUniform )
            , bp::return_internal_reference< >()
            , " Get the underlying uniform." )    
        .def( 
            "getUniform"
            , (::osg::Uniform const * ( ::osgVolume::ScalarProperty::* )(  ) const)( &::osgVolume::ScalarProperty::getUniform )
            , bp::return_internal_reference< >()
            , " Get the underlying uniform." )    
        .def( 
            "getValue"
            , (float ( ::osgVolume::ScalarProperty::* )(  ) const)( &::osgVolume::ScalarProperty::getValue )
            , " Get the value." )    
        .def( 
            "isSameKindAs"
            , (bool ( ::osgVolume::ScalarProperty::* )( ::osg::Object const * ) const)(&::osgVolume::ScalarProperty::isSameKindAs)
            , (bool ( ScalarProperty_wrapper::* )( ::osg::Object const * ) const)(&ScalarProperty_wrapper::default_isSameKindAs)
            , ( bp::arg("obj") ) )    
        .def( 
            "libraryName"
            , (char const * ( ::osgVolume::ScalarProperty::* )(  ) const)(&::osgVolume::ScalarProperty::libraryName)
            , (char const * ( ScalarProperty_wrapper::* )(  ) const)(&ScalarProperty_wrapper::default_libraryName) )    
        .def( 
            "setValue"
            , (void ( ::osgVolume::ScalarProperty::* )( float ) )(&::osgVolume::ScalarProperty::setValue)
            , (void ( ScalarProperty_wrapper::* )( float ) )(&ScalarProperty_wrapper::default_setValue)
            , ( bp::arg("v") ) );

}
