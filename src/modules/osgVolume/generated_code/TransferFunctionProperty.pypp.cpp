// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgVolume.h"
#include "wrap_referenced.h"
#include "TransferFunctionProperty.pypp.hpp"

namespace bp = boost::python;

struct TransferFunctionProperty_wrapper : osgVolume::TransferFunctionProperty, bp::wrapper< osgVolume::TransferFunctionProperty > {

    TransferFunctionProperty_wrapper(::osg::TransferFunction * tf=0 )
    : osgVolume::TransferFunctionProperty( boost::python::ptr(tf) )
      , bp::wrapper< osgVolume::TransferFunctionProperty >(){
        // constructor
    
    }

    virtual void accept( ::osgVolume::PropertyVisitor & pv ) {
        if( bp::override func_accept = this->get_override( "accept" ) )
            func_accept( boost::ref(pv) );
        else{
            this->osgVolume::TransferFunctionProperty::accept( boost::ref(pv) );
        }
    }
    
    void default_accept( ::osgVolume::PropertyVisitor & pv ) {
        osgVolume::TransferFunctionProperty::accept( boost::ref(pv) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgVolume::TransferFunctionProperty::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgVolume::TransferFunctionProperty::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgVolume::TransferFunctionProperty::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgVolume::TransferFunctionProperty::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgVolume::TransferFunctionProperty::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgVolume::TransferFunctionProperty::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgVolume::TransferFunctionProperty::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgVolume::TransferFunctionProperty::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgVolume::TransferFunctionProperty::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgVolume::TransferFunctionProperty::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_TransferFunctionProperty_class(){

    { //::osgVolume::TransferFunctionProperty
        typedef bp::class_< TransferFunctionProperty_wrapper, bp::bases< osgVolume::Property >, osg::ref_ptr< TransferFunctionProperty_wrapper >, boost::noncopyable > TransferFunctionProperty_exposer_t;
        TransferFunctionProperty_exposer_t TransferFunctionProperty_exposer = TransferFunctionProperty_exposer_t( "TransferFunctionProperty", bp::no_init );
        bp::scope TransferFunctionProperty_scope( TransferFunctionProperty_exposer );
        TransferFunctionProperty_exposer.def( bp::init< bp::optional< osg::TransferFunction * > >(( bp::arg("tf")=bp::object() )) );
        bp::implicitly_convertible< osg::TransferFunction *, osgVolume::TransferFunctionProperty >();
        { //::osgVolume::TransferFunctionProperty::accept
        
            typedef void ( ::osgVolume::TransferFunctionProperty::*accept_function_type )( ::osgVolume::PropertyVisitor & ) ;
            typedef void ( TransferFunctionProperty_wrapper::*default_accept_function_type )( ::osgVolume::PropertyVisitor & ) ;
            
            TransferFunctionProperty_exposer.def( 
                "accept"
                , accept_function_type(&::osgVolume::TransferFunctionProperty::accept)
                , default_accept_function_type(&TransferFunctionProperty_wrapper::default_accept)
                , ( bp::arg("pv") ) );
        
        }
        { //::osgVolume::TransferFunctionProperty::className
        
            typedef char const * ( ::osgVolume::TransferFunctionProperty::*className_function_type )(  ) const;
            typedef char const * ( TransferFunctionProperty_wrapper::*default_className_function_type )(  ) const;
            
            TransferFunctionProperty_exposer.def( 
                "className"
                , className_function_type(&::osgVolume::TransferFunctionProperty::className)
                , default_className_function_type(&TransferFunctionProperty_wrapper::default_className) );
        
        }
        { //::osgVolume::TransferFunctionProperty::clone
        
            typedef ::osg::Object * ( ::osgVolume::TransferFunctionProperty::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( TransferFunctionProperty_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            TransferFunctionProperty_exposer.def( 
                "clone"
                , clone_function_type(&::osgVolume::TransferFunctionProperty::clone)
                , default_clone_function_type(&TransferFunctionProperty_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgVolume::TransferFunctionProperty::cloneType
        
            typedef ::osg::Object * ( ::osgVolume::TransferFunctionProperty::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( TransferFunctionProperty_wrapper::*default_cloneType_function_type )(  ) const;
            
            TransferFunctionProperty_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgVolume::TransferFunctionProperty::cloneType)
                , default_cloneType_function_type(&TransferFunctionProperty_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgVolume::TransferFunctionProperty::getTransferFunction
        
            typedef ::osg::TransferFunction * ( ::osgVolume::TransferFunctionProperty::*getTransferFunction_function_type )(  ) ;
            
            TransferFunctionProperty_exposer.def( 
                "getTransferFunction"
                , getTransferFunction_function_type( &::osgVolume::TransferFunctionProperty::getTransferFunction )
                , bp::return_internal_reference< >()
                , " Get the transfer function." );
        
        }
        { //::osgVolume::TransferFunctionProperty::getTransferFunction
        
            typedef ::osg::TransferFunction const * ( ::osgVolume::TransferFunctionProperty::*getTransferFunction_function_type )(  ) const;
            
            TransferFunctionProperty_exposer.def( 
                "getTransferFunction"
                , getTransferFunction_function_type( &::osgVolume::TransferFunctionProperty::getTransferFunction )
                , bp::return_internal_reference< >()
                , " Get the const transfer function." );
        
        }
        { //::osgVolume::TransferFunctionProperty::isSameKindAs
        
            typedef bool ( ::osgVolume::TransferFunctionProperty::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( TransferFunctionProperty_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            TransferFunctionProperty_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgVolume::TransferFunctionProperty::isSameKindAs)
                , default_isSameKindAs_function_type(&TransferFunctionProperty_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgVolume::TransferFunctionProperty::libraryName
        
            typedef char const * ( ::osgVolume::TransferFunctionProperty::*libraryName_function_type )(  ) const;
            typedef char const * ( TransferFunctionProperty_wrapper::*default_libraryName_function_type )(  ) const;
            
            TransferFunctionProperty_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgVolume::TransferFunctionProperty::libraryName)
                , default_libraryName_function_type(&TransferFunctionProperty_wrapper::default_libraryName) );
        
        }
        { //::osgVolume::TransferFunctionProperty::setTransferFunction
        
            typedef void ( ::osgVolume::TransferFunctionProperty::*setTransferFunction_function_type )( ::osg::TransferFunction * ) ;
            
            TransferFunctionProperty_exposer.def( 
                "setTransferFunction"
                , setTransferFunction_function_type( &::osgVolume::TransferFunctionProperty::setTransferFunction )
                , ( bp::arg("tf") )
                , " Set the transfer function." );
        
        }
    }

}
