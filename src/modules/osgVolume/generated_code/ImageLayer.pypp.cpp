// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgVolume.h"
#include "wrap_referenced.h"
#include "ImageLayer.pypp.hpp"

namespace bp = boost::python;

struct ImageLayer_wrapper : osgVolume::ImageLayer, bp::wrapper< osgVolume::ImageLayer > {

    ImageLayer_wrapper(::osg::Image * image=0 )
    : osgVolume::ImageLayer( boost::python::ptr(image) )
      , bp::wrapper< osgVolume::ImageLayer >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgVolume::ImageLayer::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgVolume::ImageLayer::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgVolume::ImageLayer::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgVolume::ImageLayer::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgVolume::ImageLayer::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgVolume::ImageLayer::cloneType( );
    }

    virtual void dirty(  ) {
        if( bp::override func_dirty = this->get_override( "dirty" ) )
            func_dirty(  );
        else{
            this->osgVolume::ImageLayer::dirty(  );
        }
    }
    
    void default_dirty(  ) {
        osgVolume::ImageLayer::dirty( );
    }

    virtual ::osg::Image * getImage(  ) {
        if( bp::override func_getImage = this->get_override( "getImage" ) )
            return func_getImage(  );
        else{
            return this->osgVolume::ImageLayer::getImage(  );
        }
    }
    
    ::osg::Image * default_getImage(  ) {
        return osgVolume::ImageLayer::getImage( );
    }

    virtual ::osg::Image const * getImage(  ) const  {
        if( bp::override func_getImage = this->get_override( "getImage" ) )
            return func_getImage(  );
        else{
            return this->osgVolume::ImageLayer::getImage(  );
        }
    }
    
    ::osg::Image const * default_getImage(  ) const  {
        return osgVolume::ImageLayer::getImage( );
    }

    virtual unsigned int getModifiedCount(  ) const  {
        if( bp::override func_getModifiedCount = this->get_override( "getModifiedCount" ) )
            return func_getModifiedCount(  );
        else{
            return this->osgVolume::ImageLayer::getModifiedCount(  );
        }
    }
    
    unsigned int default_getModifiedCount(  ) const  {
        return osgVolume::ImageLayer::getModifiedCount( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgVolume::ImageLayer::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgVolume::ImageLayer::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgVolume::ImageLayer::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgVolume::ImageLayer::libraryName( );
    }

    virtual bool requiresUpdateTraversal(  ) const  {
        if( bp::override func_requiresUpdateTraversal = this->get_override( "requiresUpdateTraversal" ) )
            return func_requiresUpdateTraversal(  );
        else{
            return this->osgVolume::ImageLayer::requiresUpdateTraversal(  );
        }
    }
    
    bool default_requiresUpdateTraversal(  ) const  {
        return osgVolume::ImageLayer::requiresUpdateTraversal( );
    }

    virtual void setFileName( ::std::string const & filename ) {
        if( bp::override func_setFileName = this->get_override( "setFileName" ) )
            func_setFileName( filename );
        else{
            this->osgVolume::ImageLayer::setFileName( filename );
        }
    }
    
    void default_setFileName( ::std::string const & filename ) {
        osgVolume::ImageLayer::setFileName( filename );
    }

    virtual void setModifiedCount( unsigned int value ) {
        if( bp::override func_setModifiedCount = this->get_override( "setModifiedCount" ) )
            func_setModifiedCount( value );
        else{
            this->osgVolume::ImageLayer::setModifiedCount( value );
        }
    }
    
    void default_setModifiedCount( unsigned int value ) {
        osgVolume::ImageLayer::setModifiedCount( value );
    }

    virtual void update( ::osg::NodeVisitor & arg0 ) {
        if( bp::override func_update = this->get_override( "update" ) )
            func_update( boost::ref(arg0) );
        else{
            this->osgVolume::ImageLayer::update( boost::ref(arg0) );
        }
    }
    
    void default_update( ::osg::NodeVisitor & arg0 ) {
        osgVolume::ImageLayer::update( boost::ref(arg0) );
    }

    virtual ::osg::BoundingSphere computeBound(  ) const  {
        if( bp::override func_computeBound = this->get_override( "computeBound" ) )
            return func_computeBound(  );
        else{
            return this->osgVolume::Layer::computeBound(  );
        }
    }
    
    ::osg::BoundingSphere default_computeBound(  ) const  {
        return osgVolume::Layer::computeBound( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_ImageLayer_class(){

    { //::osgVolume::ImageLayer
        typedef bp::class_< ImageLayer_wrapper, bp::bases< osgVolume::Layer >, osg::ref_ptr< ImageLayer_wrapper >, boost::noncopyable > ImageLayer_exposer_t;
        ImageLayer_exposer_t ImageLayer_exposer = ImageLayer_exposer_t( "ImageLayer", bp::no_init );
        bp::scope ImageLayer_scope( ImageLayer_exposer );
        ImageLayer_exposer.def( bp::init< bp::optional< osg::Image * > >(( bp::arg("image")=bp::object() )) );
        bp::implicitly_convertible< osg::Image *, osgVolume::ImageLayer >();
        { //::osgVolume::ImageLayer::className
        
            typedef char const * ( ::osgVolume::ImageLayer::*className_function_type )(  ) const;
            typedef char const * ( ImageLayer_wrapper::*default_className_function_type )(  ) const;
            
            ImageLayer_exposer.def( 
                "className"
                , className_function_type(&::osgVolume::ImageLayer::className)
                , default_className_function_type(&ImageLayer_wrapper::default_className) );
        
        }
        { //::osgVolume::ImageLayer::clone
        
            typedef ::osg::Object * ( ::osgVolume::ImageLayer::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( ImageLayer_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            ImageLayer_exposer.def( 
                "clone"
                , clone_function_type(&::osgVolume::ImageLayer::clone)
                , default_clone_function_type(&ImageLayer_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgVolume::ImageLayer::cloneType
        
            typedef ::osg::Object * ( ::osgVolume::ImageLayer::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( ImageLayer_wrapper::*default_cloneType_function_type )(  ) const;
            
            ImageLayer_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgVolume::ImageLayer::cloneType)
                , default_cloneType_function_type(&ImageLayer_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgVolume::ImageLayer::computeMinMax
        
            typedef bool ( ::osgVolume::ImageLayer::*computeMinMax_function_type )( ::osg::Vec4 &,::osg::Vec4 & ) ;
            
            ImageLayer_exposer.def( 
                "computeMinMax"
                , computeMinMax_function_type( &::osgVolume::ImageLayer::computeMinMax )
                , ( bp::arg("min"), bp::arg("max") )
                , " Compute the min and max pixel colors." );
        
        }
        { //::osgVolume::ImageLayer::dirty
        
            typedef void ( ::osgVolume::ImageLayer::*dirty_function_type )(  ) ;
            typedef void ( ImageLayer_wrapper::*default_dirty_function_type )(  ) ;
            
            ImageLayer_exposer.def( 
                "dirty"
                , dirty_function_type(&::osgVolume::ImageLayer::dirty)
                , default_dirty_function_type(&ImageLayer_wrapper::default_dirty) );
        
        }
        { //::osgVolume::ImageLayer::getFileName
        
            typedef ::std::string const & ( ::osgVolume::ImageLayer::*getFileName_function_type )(  ) const;
            
            ImageLayer_exposer.def( 
                "getFileName"
                , getFileName_function_type(&::osgVolume::ImageLayer::getFileName)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::osgVolume::ImageLayer::getImage
        
            typedef ::osg::Image * ( ::osgVolume::ImageLayer::*getImage_function_type )(  ) ;
            typedef ::osg::Image * ( ImageLayer_wrapper::*default_getImage_function_type )(  ) ;
            
            ImageLayer_exposer.def( 
                "getImage"
                , getImage_function_type(&::osgVolume::ImageLayer::getImage)
                , default_getImage_function_type(&ImageLayer_wrapper::default_getImage)
                , bp::return_internal_reference< >() );
        
        }
        { //::osgVolume::ImageLayer::getImage
        
            typedef ::osg::Image const * ( ::osgVolume::ImageLayer::*getImage_function_type )(  ) const;
            typedef ::osg::Image const * ( ImageLayer_wrapper::*default_getImage_function_type )(  ) const;
            
            ImageLayer_exposer.def( 
                "getImage"
                , getImage_function_type(&::osgVolume::ImageLayer::getImage)
                , default_getImage_function_type(&ImageLayer_wrapper::default_getImage)
                , bp::return_internal_reference< >() );
        
        }
        { //::osgVolume::ImageLayer::getModifiedCount
        
            typedef unsigned int ( ::osgVolume::ImageLayer::*getModifiedCount_function_type )(  ) const;
            typedef unsigned int ( ImageLayer_wrapper::*default_getModifiedCount_function_type )(  ) const;
            
            ImageLayer_exposer.def( 
                "getModifiedCount"
                , getModifiedCount_function_type(&::osgVolume::ImageLayer::getModifiedCount)
                , default_getModifiedCount_function_type(&ImageLayer_wrapper::default_getModifiedCount) );
        
        }
        { //::osgVolume::ImageLayer::getTexelOffset
        
            typedef ::osg::Vec4 const & ( ::osgVolume::ImageLayer::*getTexelOffset_function_type )(  ) const;
            
            ImageLayer_exposer.def( 
                "getTexelOffset"
                , getTexelOffset_function_type( &::osgVolume::ImageLayer::getTexelOffset )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgVolume::ImageLayer::getTexelScale
        
            typedef ::osg::Vec4 const & ( ::osgVolume::ImageLayer::*getTexelScale_function_type )(  ) const;
            
            ImageLayer_exposer.def( 
                "getTexelScale"
                , getTexelScale_function_type( &::osgVolume::ImageLayer::getTexelScale )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgVolume::ImageLayer::isSameKindAs
        
            typedef bool ( ::osgVolume::ImageLayer::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( ImageLayer_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            ImageLayer_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgVolume::ImageLayer::isSameKindAs)
                , default_isSameKindAs_function_type(&ImageLayer_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgVolume::ImageLayer::libraryName
        
            typedef char const * ( ::osgVolume::ImageLayer::*libraryName_function_type )(  ) const;
            typedef char const * ( ImageLayer_wrapper::*default_libraryName_function_type )(  ) const;
            
            ImageLayer_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgVolume::ImageLayer::libraryName)
                , default_libraryName_function_type(&ImageLayer_wrapper::default_libraryName) );
        
        }
        { //::osgVolume::ImageLayer::offsetAndScaleImage
        
            typedef void ( ::osgVolume::ImageLayer::*offsetAndScaleImage_function_type )( ::osg::Vec4 const &,::osg::Vec4 const & ) ;
            
            ImageLayer_exposer.def( 
                "offsetAndScaleImage"
                , offsetAndScaleImage_function_type( &::osgVolume::ImageLayer::offsetAndScaleImage )
                , ( bp::arg("offset"), bp::arg("scale") )
                , " Apply color transformation to pixels using c = offset + c * scale ." );
        
        }
        { //::osgVolume::ImageLayer::requiresUpdateTraversal
        
            typedef bool ( ::osgVolume::ImageLayer::*requiresUpdateTraversal_function_type )(  ) const;
            typedef bool ( ImageLayer_wrapper::*default_requiresUpdateTraversal_function_type )(  ) const;
            
            ImageLayer_exposer.def( 
                "requiresUpdateTraversal"
                , requiresUpdateTraversal_function_type(&::osgVolume::ImageLayer::requiresUpdateTraversal)
                , default_requiresUpdateTraversal_function_type(&ImageLayer_wrapper::default_requiresUpdateTraversal) );
        
        }
        { //::osgVolume::ImageLayer::rescaleToZeroToOneRange
        
            typedef void ( ::osgVolume::ImageLayer::*rescaleToZeroToOneRange_function_type )(  ) ;
            
            ImageLayer_exposer.def( 
                "rescaleToZeroToOneRange"
                , rescaleToZeroToOneRange_function_type( &::osgVolume::ImageLayer::rescaleToZeroToOneRange )
                , " Compute the min max range of the image, and then remap this to a 0 to 1 range." );
        
        }
        { //::osgVolume::ImageLayer::setFileName
        
            typedef void ( ::osgVolume::ImageLayer::*setFileName_function_type )( ::std::string const & ) ;
            typedef void ( ImageLayer_wrapper::*default_setFileName_function_type )( ::std::string const & ) ;
            
            ImageLayer_exposer.def( 
                "setFileName"
                , setFileName_function_type(&::osgVolume::ImageLayer::setFileName)
                , default_setFileName_function_type(&ImageLayer_wrapper::default_setFileName)
                , ( bp::arg("filename") ) );
        
        }
        { //::osgVolume::ImageLayer::setImage
        
            typedef void ( ::osgVolume::ImageLayer::*setImage_function_type )( ::osg::Image * ) ;
            
            ImageLayer_exposer.def( 
                "setImage"
                , setImage_function_type( &::osgVolume::ImageLayer::setImage )
                , ( bp::arg("image") ) );
        
        }
        { //::osgVolume::ImageLayer::setModifiedCount
        
            typedef void ( ::osgVolume::ImageLayer::*setModifiedCount_function_type )( unsigned int ) ;
            typedef void ( ImageLayer_wrapper::*default_setModifiedCount_function_type )( unsigned int ) ;
            
            ImageLayer_exposer.def( 
                "setModifiedCount"
                , setModifiedCount_function_type(&::osgVolume::ImageLayer::setModifiedCount)
                , default_setModifiedCount_function_type(&ImageLayer_wrapper::default_setModifiedCount)
                , ( bp::arg("value") ) );
        
        }
        { //::osgVolume::ImageLayer::setTexelOffset
        
            typedef void ( ::osgVolume::ImageLayer::*setTexelOffset_function_type )( ::osg::Vec4 const & ) ;
            
            ImageLayer_exposer.def( 
                "setTexelOffset"
                , setTexelOffset_function_type( &::osgVolume::ImageLayer::setTexelOffset )
                , ( bp::arg("offset") ) );
        
        }
        { //::osgVolume::ImageLayer::setTexelScale
        
            typedef void ( ::osgVolume::ImageLayer::*setTexelScale_function_type )( ::osg::Vec4 const & ) ;
            
            ImageLayer_exposer.def( 
                "setTexelScale"
                , setTexelScale_function_type( &::osgVolume::ImageLayer::setTexelScale )
                , ( bp::arg("scale") ) );
        
        }
        { //::osgVolume::ImageLayer::translateMinToZero
        
            typedef void ( ::osgVolume::ImageLayer::*translateMinToZero_function_type )(  ) ;
            
            ImageLayer_exposer.def( 
                "translateMinToZero"
                , translateMinToZero_function_type( &::osgVolume::ImageLayer::translateMinToZero )
                , " Compute the min color component of the image and then translate and pixels by this offset to make the new min component 0." );
        
        }
        { //::osgVolume::ImageLayer::update
        
            typedef void ( ::osgVolume::ImageLayer::*update_function_type )( ::osg::NodeVisitor & ) ;
            typedef void ( ImageLayer_wrapper::*default_update_function_type )( ::osg::NodeVisitor & ) ;
            
            ImageLayer_exposer.def( 
                "update"
                , update_function_type(&::osgVolume::ImageLayer::update)
                , default_update_function_type(&ImageLayer_wrapper::default_update)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgVolume::Layer::computeBound
        
            typedef ::osg::BoundingSphere ( ::osgVolume::Layer::*computeBound_function_type )(  ) const;
            typedef ::osg::BoundingSphere ( ImageLayer_wrapper::*default_computeBound_function_type )(  ) const;
            
            ImageLayer_exposer.def( 
                "computeBound"
                , computeBound_function_type(&::osgVolume::Layer::computeBound)
                , default_computeBound_function_type(&ImageLayer_wrapper::default_computeBound) );
        
        }
    }

}
