// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgVolume.h"
#include "PropertyVisitor.pypp.hpp"

namespace bp = boost::python;

struct PropertyVisitor_wrapper : osgVolume::PropertyVisitor, bp::wrapper< osgVolume::PropertyVisitor > {

    PropertyVisitor_wrapper(osgVolume::PropertyVisitor const & arg )
    : osgVolume::PropertyVisitor( arg )
      , bp::wrapper< osgVolume::PropertyVisitor >(){
        // copy constructor
        
    }

    PropertyVisitor_wrapper(bool traverseOnlyActiveChildren=true )
    : osgVolume::PropertyVisitor( traverseOnlyActiveChildren )
      , bp::wrapper< osgVolume::PropertyVisitor >(){
        // constructor
    
    }

    virtual void apply( ::osgVolume::Property & arg0 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(arg0) );
        else{
            this->osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
        }
    }
    
    void default_apply( ::osgVolume::Property & arg0 ) {
        osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
    }

    virtual void apply( ::osgVolume::CompositeProperty & arg0 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(arg0) );
        else{
            this->osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
        }
    }
    
    void default_apply( ::osgVolume::CompositeProperty & arg0 ) {
        osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
    }

    virtual void apply( ::osgVolume::SwitchProperty & arg0 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(arg0) );
        else{
            this->osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
        }
    }
    
    void default_apply( ::osgVolume::SwitchProperty & arg0 ) {
        osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
    }

    virtual void apply( ::osgVolume::TransferFunctionProperty & arg0 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(arg0) );
        else{
            this->osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
        }
    }
    
    void default_apply( ::osgVolume::TransferFunctionProperty & arg0 ) {
        osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
    }

    virtual void apply( ::osgVolume::ScalarProperty & arg0 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(arg0) );
        else{
            this->osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
        }
    }
    
    void default_apply( ::osgVolume::ScalarProperty & arg0 ) {
        osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
    }

    virtual void apply( ::osgVolume::IsoSurfaceProperty & arg0 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(arg0) );
        else{
            this->osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
        }
    }
    
    void default_apply( ::osgVolume::IsoSurfaceProperty & arg0 ) {
        osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
    }

    virtual void apply( ::osgVolume::AlphaFuncProperty & arg0 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(arg0) );
        else{
            this->osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
        }
    }
    
    void default_apply( ::osgVolume::AlphaFuncProperty & arg0 ) {
        osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
    }

    virtual void apply( ::osgVolume::MaximumIntensityProjectionProperty & arg0 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(arg0) );
        else{
            this->osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
        }
    }
    
    void default_apply( ::osgVolume::MaximumIntensityProjectionProperty & arg0 ) {
        osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
    }

    virtual void apply( ::osgVolume::LightingProperty & arg0 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(arg0) );
        else{
            this->osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
        }
    }
    
    void default_apply( ::osgVolume::LightingProperty & arg0 ) {
        osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
    }

    virtual void apply( ::osgVolume::SampleDensityProperty & arg0 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(arg0) );
        else{
            this->osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
        }
    }
    
    void default_apply( ::osgVolume::SampleDensityProperty & arg0 ) {
        osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
    }

    virtual void apply( ::osgVolume::SampleDensityWhenMovingProperty & arg0 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(arg0) );
        else{
            this->osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
        }
    }
    
    void default_apply( ::osgVolume::SampleDensityWhenMovingProperty & arg0 ) {
        osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
    }

    virtual void apply( ::osgVolume::TransparencyProperty & arg0 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(arg0) );
        else{
            this->osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
        }
    }
    
    void default_apply( ::osgVolume::TransparencyProperty & arg0 ) {
        osgVolume::PropertyVisitor::apply( boost::ref(arg0) );
    }

};

void register_PropertyVisitor_class(){

    { //::osgVolume::PropertyVisitor
        typedef bp::class_< PropertyVisitor_wrapper > PropertyVisitor_exposer_t;
        PropertyVisitor_exposer_t PropertyVisitor_exposer = PropertyVisitor_exposer_t( "PropertyVisitor", bp::init< bp::optional< bool > >(( bp::arg("traverseOnlyActiveChildren")=(bool)(true) )) );
        bp::scope PropertyVisitor_scope( PropertyVisitor_exposer );
        bp::implicitly_convertible< bool, osgVolume::PropertyVisitor >();
        { //::osgVolume::PropertyVisitor::apply
        
            typedef void ( ::osgVolume::PropertyVisitor::*apply_function_type )( ::osgVolume::Property & ) ;
            typedef void ( PropertyVisitor_wrapper::*default_apply_function_type )( ::osgVolume::Property & ) ;
            
            PropertyVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgVolume::PropertyVisitor::apply)
                , default_apply_function_type(&PropertyVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgVolume::PropertyVisitor::apply
        
            typedef void ( ::osgVolume::PropertyVisitor::*apply_function_type )( ::osgVolume::CompositeProperty & ) ;
            typedef void ( PropertyVisitor_wrapper::*default_apply_function_type )( ::osgVolume::CompositeProperty & ) ;
            
            PropertyVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgVolume::PropertyVisitor::apply)
                , default_apply_function_type(&PropertyVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgVolume::PropertyVisitor::apply
        
            typedef void ( ::osgVolume::PropertyVisitor::*apply_function_type )( ::osgVolume::SwitchProperty & ) ;
            typedef void ( PropertyVisitor_wrapper::*default_apply_function_type )( ::osgVolume::SwitchProperty & ) ;
            
            PropertyVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgVolume::PropertyVisitor::apply)
                , default_apply_function_type(&PropertyVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgVolume::PropertyVisitor::apply
        
            typedef void ( ::osgVolume::PropertyVisitor::*apply_function_type )( ::osgVolume::TransferFunctionProperty & ) ;
            typedef void ( PropertyVisitor_wrapper::*default_apply_function_type )( ::osgVolume::TransferFunctionProperty & ) ;
            
            PropertyVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgVolume::PropertyVisitor::apply)
                , default_apply_function_type(&PropertyVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgVolume::PropertyVisitor::apply
        
            typedef void ( ::osgVolume::PropertyVisitor::*apply_function_type )( ::osgVolume::ScalarProperty & ) ;
            typedef void ( PropertyVisitor_wrapper::*default_apply_function_type )( ::osgVolume::ScalarProperty & ) ;
            
            PropertyVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgVolume::PropertyVisitor::apply)
                , default_apply_function_type(&PropertyVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgVolume::PropertyVisitor::apply
        
            typedef void ( ::osgVolume::PropertyVisitor::*apply_function_type )( ::osgVolume::IsoSurfaceProperty & ) ;
            typedef void ( PropertyVisitor_wrapper::*default_apply_function_type )( ::osgVolume::IsoSurfaceProperty & ) ;
            
            PropertyVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgVolume::PropertyVisitor::apply)
                , default_apply_function_type(&PropertyVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgVolume::PropertyVisitor::apply
        
            typedef void ( ::osgVolume::PropertyVisitor::*apply_function_type )( ::osgVolume::AlphaFuncProperty & ) ;
            typedef void ( PropertyVisitor_wrapper::*default_apply_function_type )( ::osgVolume::AlphaFuncProperty & ) ;
            
            PropertyVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgVolume::PropertyVisitor::apply)
                , default_apply_function_type(&PropertyVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgVolume::PropertyVisitor::apply
        
            typedef void ( ::osgVolume::PropertyVisitor::*apply_function_type )( ::osgVolume::MaximumIntensityProjectionProperty & ) ;
            typedef void ( PropertyVisitor_wrapper::*default_apply_function_type )( ::osgVolume::MaximumIntensityProjectionProperty & ) ;
            
            PropertyVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgVolume::PropertyVisitor::apply)
                , default_apply_function_type(&PropertyVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgVolume::PropertyVisitor::apply
        
            typedef void ( ::osgVolume::PropertyVisitor::*apply_function_type )( ::osgVolume::LightingProperty & ) ;
            typedef void ( PropertyVisitor_wrapper::*default_apply_function_type )( ::osgVolume::LightingProperty & ) ;
            
            PropertyVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgVolume::PropertyVisitor::apply)
                , default_apply_function_type(&PropertyVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgVolume::PropertyVisitor::apply
        
            typedef void ( ::osgVolume::PropertyVisitor::*apply_function_type )( ::osgVolume::SampleDensityProperty & ) ;
            typedef void ( PropertyVisitor_wrapper::*default_apply_function_type )( ::osgVolume::SampleDensityProperty & ) ;
            
            PropertyVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgVolume::PropertyVisitor::apply)
                , default_apply_function_type(&PropertyVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgVolume::PropertyVisitor::apply
        
            typedef void ( ::osgVolume::PropertyVisitor::*apply_function_type )( ::osgVolume::SampleDensityWhenMovingProperty & ) ;
            typedef void ( PropertyVisitor_wrapper::*default_apply_function_type )( ::osgVolume::SampleDensityWhenMovingProperty & ) ;
            
            PropertyVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgVolume::PropertyVisitor::apply)
                , default_apply_function_type(&PropertyVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgVolume::PropertyVisitor::apply
        
            typedef void ( ::osgVolume::PropertyVisitor::*apply_function_type )( ::osgVolume::TransparencyProperty & ) ;
            typedef void ( PropertyVisitor_wrapper::*default_apply_function_type )( ::osgVolume::TransparencyProperty & ) ;
            
            PropertyVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgVolume::PropertyVisitor::apply)
                , default_apply_function_type(&PropertyVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) );
        
        }
        PropertyVisitor_exposer.def_readwrite( "_traverseOnlyActiveChildren", &osgVolume::PropertyVisitor::_traverseOnlyActiveChildren );
    }

}
