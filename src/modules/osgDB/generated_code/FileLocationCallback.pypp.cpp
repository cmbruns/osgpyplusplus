// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgDB.h"
#include "wrap_referenced.h"
#include "FileLocationCallback.pypp.hpp"

namespace bp = boost::python;

struct FileLocationCallback_wrapper : osgDB::FileLocationCallback, bp::wrapper< osgDB::FileLocationCallback > {

    FileLocationCallback_wrapper()
    : osgDB::FileLocationCallback()
      , bp::wrapper< osgDB::FileLocationCallback >(){
        // null constructor
        
    }

    virtual ::osgDB::FileLocationCallback::Location fileLocation( ::std::string const & filename, ::osgDB::Options const * options ){
        bp::override func_fileLocation = this->get_override( "fileLocation" );
        return func_fileLocation( filename, boost::python::ptr(options) );
    }

    virtual bool useFileCache(  ) const {
        bp::override func_useFileCache = this->get_override( "useFileCache" );
        return func_useFileCache(  );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_FileLocationCallback_class(){

    { //::osgDB::FileLocationCallback
        typedef bp::class_< FileLocationCallback_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< FileLocationCallback_wrapper >, boost::noncopyable > FileLocationCallback_exposer_t;
        FileLocationCallback_exposer_t FileLocationCallback_exposer = FileLocationCallback_exposer_t( "FileLocationCallback", bp::no_init );
        bp::scope FileLocationCallback_scope( FileLocationCallback_exposer );
        bp::enum_< osgDB::FileLocationCallback::Location>("Location")
            .value("LOCAL_FILE", osgDB::FileLocationCallback::LOCAL_FILE)
            .value("REMOTE_FILE", osgDB::FileLocationCallback::REMOTE_FILE)
            .export_values()
            ;
        { //::osgDB::FileLocationCallback::fileLocation
        
            typedef ::osgDB::FileLocationCallback::Location ( ::osgDB::FileLocationCallback::*fileLocation_function_type )( ::std::string const &,::osgDB::Options const * ) ;
            
            FileLocationCallback_exposer.def( 
                "fileLocation"
                , bp::pure_virtual( fileLocation_function_type(&::osgDB::FileLocationCallback::fileLocation) )
                , ( bp::arg("filename"), bp::arg("options") ) );
        
        }
        { //::osgDB::FileLocationCallback::useFileCache
        
            typedef bool ( ::osgDB::FileLocationCallback::*useFileCache_function_type )(  ) const;
            
            FileLocationCallback_exposer.def( 
                "useFileCache"
                , bp::pure_virtual( useFileCache_function_type(&::osgDB::FileLocationCallback::useFileCache) ) );
        
        }
    }

}
