// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgDB.h"
#include "wrap_referenced.h"
#include "XmlNode.pypp.hpp"

namespace bp = boost::python;

struct XmlNode_wrapper : osgDB::XmlNode, bp::wrapper< osgDB::XmlNode > {

    XmlNode_wrapper( )
    : osgDB::XmlNode( )
      , bp::wrapper< osgDB::XmlNode >(){
        // null constructor
    
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_XmlNode_class(){

    { //::osgDB::XmlNode
        typedef bp::class_< XmlNode_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< XmlNode_wrapper >, boost::noncopyable > XmlNode_exposer_t;
        XmlNode_exposer_t XmlNode_exposer = XmlNode_exposer_t( "XmlNode", bp::init< >() );
        bp::scope XmlNode_scope( XmlNode_exposer );
        bp::enum_< osgDB::XmlNode::NodeType>("NodeType")
            .value("UNASSIGNED", osgDB::XmlNode::UNASSIGNED)
            .value("ATOM", osgDB::XmlNode::ATOM)
            .value("NODE", osgDB::XmlNode::NODE)
            .value("GROUP", osgDB::XmlNode::GROUP)
            .value("ROOT", osgDB::XmlNode::ROOT)
            .value("COMMENT", osgDB::XmlNode::COMMENT)
            .value("INFORMATION", osgDB::XmlNode::INFORMATION)
            .export_values()
            ;
        bp::class_< osgDB::XmlNode::ControlMap >( "ControlMap", bp::init< >() )    
            .def( 
                "addControlToCharacter"
                , (void ( ::osgDB::XmlNode::ControlMap::* )( ::std::string const &,int ) )( &::osgDB::XmlNode::ControlMap::addControlToCharacter )
                , ( bp::arg("control"), bp::arg("c") ) )    
            .def_readwrite( "_characterToControlMap", &osgDB::XmlNode::ControlMap::_characterToControlMap )    
            .def_readwrite( "_controlToCharacterMap", &osgDB::XmlNode::ControlMap::_controlToCharacterMap );
        bp::class_< osgDB::XmlNode::Input, bp::bases< osgDB::XmlNode::ControlMap > >( "Input", bp::no_init )    
            .def( bp::init< >() )    
            .def( bp::init< osgDB::XmlNode::Input const & >(( bp::arg("arg0") )) )    
            .def( 
                "attach"
                , (void ( ::osgDB::XmlNode::Input::* )( ::std::istream & ) )( &::osgDB::XmlNode::Input::attach )
                , ( bp::arg("istream") ) )    
            .def( 
                "currentPosition"
                , (::std::size_t ( ::osgDB::XmlNode::Input::* )(  ) const)( &::osgDB::XmlNode::Input::currentPosition ) )    
            .def( 
                "find"
                , (::std::size_t ( ::osgDB::XmlNode::Input::* )( ::std::string const & ) )( &::osgDB::XmlNode::Input::find )
                , ( bp::arg("str") ) )    
            .def( 
                "get"
                , (int ( ::osgDB::XmlNode::Input::* )(  ) )( &::osgDB::XmlNode::Input::get ) )    
            .def( 
                "match"
                , (bool ( ::osgDB::XmlNode::Input::* )( ::std::string const & ) )( &::osgDB::XmlNode::Input::match )
                , ( bp::arg("str") ) )    
            .def( 
                "open"
                , (void ( ::osgDB::XmlNode::Input::* )( ::std::string const & ) )( &::osgDB::XmlNode::Input::open )
                , ( bp::arg("filename") ) )    
            .def( "__int__", &osgDB::XmlNode::Input::operator bool  )    
            .def( bp::self += bp::other< std::size_t >() )    
            .def( 
                "__getitem__"
                , (int ( ::osgDB::XmlNode::Input::* )( ::std::size_t ) const)( &::osgDB::XmlNode::Input::operator[] )
                , ( bp::arg("i") ) )    
            .def( 
                "readAllDataIntoBuffer"
                , (void ( ::osgDB::XmlNode::Input::* )(  ) )( &::osgDB::XmlNode::Input::readAllDataIntoBuffer ) )    
            .def( 
                "skipWhiteSpace"
                , (void ( ::osgDB::XmlNode::Input::* )(  ) )( &::osgDB::XmlNode::Input::skipWhiteSpace ) )    
            .def( 
                "substr"
                , (::std::string ( ::osgDB::XmlNode::Input::* )( ::std::size_t,::std::size_t ) )( &::osgDB::XmlNode::Input::substr )
                , ( bp::arg("pos"), bp::arg("n")=(::std::size_t)(std::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) ) );
        { //::osgDB::XmlNode::getTrimmedContents
        
            typedef ::std::string ( ::osgDB::XmlNode::*getTrimmedContents_function_type )(  ) const;
            
            XmlNode_exposer.def( 
                "getTrimmedContents"
                , getTrimmedContents_function_type( &::osgDB::XmlNode::getTrimmedContents ) );
        
        }
        { //::osgDB::XmlNode::read
        
            typedef bool ( ::osgDB::XmlNode::*read_function_type )( ::osgDB::XmlNode::Input & ) ;
            
            XmlNode_exposer.def( 
                "read"
                , read_function_type( &::osgDB::XmlNode::read )
                , ( bp::arg("input") ) );
        
        }
        { //::osgDB::XmlNode::write
        
            typedef bool ( ::osgDB::XmlNode::*write_function_type )( ::std::ostream &,::std::string const & ) const;
            
            XmlNode_exposer.def( 
                "write"
                , write_function_type( &::osgDB::XmlNode::write )
                , ( bp::arg("fout"), bp::arg("indent")="" ) );
        
        }
        { //::osgDB::XmlNode::write
        
            typedef bool ( ::osgDB::XmlNode::*write_function_type )( ::osgDB::XmlNode::ControlMap const &,::std::ostream &,::std::string const & ) const;
            
            XmlNode_exposer.def( 
                "write"
                , write_function_type( &::osgDB::XmlNode::write )
                , ( bp::arg("controlMap"), bp::arg("fout"), bp::arg("indent")="" ) );
        
        }
        { //::osgDB::XmlNode::writeString
        
            typedef bool ( ::osgDB::XmlNode::*writeString_function_type )( ::osgDB::XmlNode::ControlMap const &,::std::ostream &,::std::string const & ) const;
            
            XmlNode_exposer.def( 
                "writeString"
                , writeString_function_type( &::osgDB::XmlNode::writeString )
                , ( bp::arg("controlMap"), bp::arg("fout"), bp::arg("str") ) );
        
        }
        XmlNode_exposer.def_readwrite( "children", &osgDB::XmlNode::children );
        XmlNode_exposer.def_readwrite( "contents", &osgDB::XmlNode::contents );
        XmlNode_exposer.def_readwrite( "name", &osgDB::XmlNode::name );
        XmlNode_exposer.def_readwrite( "properties", &osgDB::XmlNode::properties );
        XmlNode_exposer.def_readwrite( "type", &osgDB::XmlNode::type );
    }

}
