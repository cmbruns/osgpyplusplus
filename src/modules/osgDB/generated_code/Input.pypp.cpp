// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgDB.h"
#include "Input.pypp.hpp"

namespace bp = boost::python;

struct Input_wrapper : osgDB::Input, bp::wrapper< osgDB::Input > {

    Input_wrapper(osgDB::Input const & arg )
    : osgDB::Input( arg )
      , bp::wrapper< osgDB::Input >(){
        // copy constructor
        
    }

    Input_wrapper( )
    : osgDB::Input( )
      , bp::wrapper< osgDB::Input >(){
        // null constructor
    
    }

    virtual ::osg::Drawable * readDrawable(  ) {
        if( bp::override func_readDrawable = this->get_override( "readDrawable" ) )
            return func_readDrawable(  );
        else{
            return this->osgDB::Input::readDrawable(  );
        }
    }
    
    ::osg::Drawable * default_readDrawable(  ) {
        return osgDB::Input::readDrawable( );
    }

    virtual ::osg::Image * readImage(  ) {
        if( bp::override func_readImage = this->get_override( "readImage" ) )
            return func_readImage(  );
        else{
            return this->osgDB::Input::readImage(  );
        }
    }
    
    ::osg::Image * default_readImage(  ) {
        return osgDB::Input::readImage( );
    }

    virtual ::osg::Image * readImage( ::std::string const & fileName ) {
        if( bp::override func_readImage = this->get_override( "readImage" ) )
            return func_readImage( fileName );
        else{
            return this->osgDB::Input::readImage( fileName );
        }
    }
    
    ::osg::Image * default_readImage( ::std::string const & fileName ) {
        return osgDB::Input::readImage( fileName );
    }

    virtual ::osg::Node * readNode(  ) {
        if( bp::override func_readNode = this->get_override( "readNode" ) )
            return func_readNode(  );
        else{
            return this->osgDB::Input::readNode(  );
        }
    }
    
    ::osg::Node * default_readNode(  ) {
        return osgDB::Input::readNode( );
    }

    virtual ::osg::Node * readNode( ::std::string const & fileName ) {
        if( bp::override func_readNode = this->get_override( "readNode" ) )
            return func_readNode( fileName );
        else{
            return this->osgDB::Input::readNode( fileName );
        }
    }
    
    ::osg::Node * default_readNode( ::std::string const & fileName ) {
        return osgDB::Input::readNode( fileName );
    }

    virtual ::osg::Shader * readShader(  ) {
        if( bp::override func_readShader = this->get_override( "readShader" ) )
            return func_readShader(  );
        else{
            return this->osgDB::Input::readShader(  );
        }
    }
    
    ::osg::Shader * default_readShader(  ) {
        return osgDB::Input::readShader( );
    }

    virtual ::osg::Shader * readShader( ::std::string const & fileName ) {
        if( bp::override func_readShader = this->get_override( "readShader" ) )
            return func_readShader( fileName );
        else{
            return this->osgDB::Input::readShader( fileName );
        }
    }
    
    ::osg::Shader * default_readShader( ::std::string const & fileName ) {
        return osgDB::Input::readShader( fileName );
    }

    virtual ::osg::StateAttribute * readStateAttribute(  ) {
        if( bp::override func_readStateAttribute = this->get_override( "readStateAttribute" ) )
            return func_readStateAttribute(  );
        else{
            return this->osgDB::Input::readStateAttribute(  );
        }
    }
    
    ::osg::StateAttribute * default_readStateAttribute(  ) {
        return osgDB::Input::readStateAttribute( );
    }

    virtual ::osg::Uniform * readUniform(  ) {
        if( bp::override func_readUniform = this->get_override( "readUniform" ) )
            return func_readUniform(  );
        else{
            return this->osgDB::Input::readUniform(  );
        }
    }
    
    ::osg::Uniform * default_readUniform(  ) {
        return osgDB::Input::readUniform( );
    }

    virtual bool eof(  ) const  {
        if( bp::override func_eof = this->get_override( "eof" ) )
            return func_eof(  );
        else{
            return this->osgDB::FieldReaderIterator::eof(  );
        }
    }
    
    bool default_eof(  ) const  {
        return osgDB::FieldReaderIterator::eof( );
    }

};

void register_Input_class(){

    bp::class_< Input_wrapper, bp::bases< osgDB::FieldReaderIterator > >( "Input", "\n deprecated.\n", bp::init< >("\n deprecated.\n") )    
        .def( 
            "getOptions"
            , (::osgDB::Options const * ( ::osgDB::Input::* )(  ) const)( &::osgDB::Input::getOptions )
            , bp::return_internal_reference< >() )    
        .def( 
            "read"
            , (bool ( ::osgDB::Input::* )( ::osg::ArgumentParser::Parameter ) )( &::osgDB::Input::read )
            , ( bp::arg("value1") ) )    
        .def( 
            "read"
            , (bool ( ::osgDB::Input::* )( ::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) )( &::osgDB::Input::read )
            , ( bp::arg("value1"), bp::arg("value2") ) )    
        .def( 
            "read"
            , (bool ( ::osgDB::Input::* )( ::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) )( &::osgDB::Input::read )
            , ( bp::arg("value1"), bp::arg("value2"), bp::arg("value3") ) )    
        .def( 
            "read"
            , (bool ( ::osgDB::Input::* )( ::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) )( &::osgDB::Input::read )
            , ( bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4") ) )    
        .def( 
            "read"
            , (bool ( ::osgDB::Input::* )( ::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) )( &::osgDB::Input::read )
            , ( bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4"), bp::arg("value5") ) )    
        .def( 
            "read"
            , (bool ( ::osgDB::Input::* )( ::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) )( &::osgDB::Input::read )
            , ( bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4"), bp::arg("value5"), bp::arg("value6") ) )    
        .def( 
            "read"
            , (bool ( ::osgDB::Input::* )( ::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) )( &::osgDB::Input::read )
            , ( bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4"), bp::arg("value5"), bp::arg("value6"), bp::arg("value7") ) )    
        .def( 
            "read"
            , (bool ( ::osgDB::Input::* )( ::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) )( &::osgDB::Input::read )
            , ( bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4"), bp::arg("value5"), bp::arg("value6"), bp::arg("value7"), bp::arg("value8") ) )    
        .def( 
            "read"
            , (bool ( ::osgDB::Input::* )( char const * ) )( &::osgDB::Input::read )
            , ( bp::arg("str") ) )    
        .def( 
            "read"
            , (bool ( ::osgDB::Input::* )( char const *,::osg::ArgumentParser::Parameter ) )( &::osgDB::Input::read )
            , ( bp::arg("str"), bp::arg("value1") ) )    
        .def( 
            "read"
            , (bool ( ::osgDB::Input::* )( char const *,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) )( &::osgDB::Input::read )
            , ( bp::arg("str"), bp::arg("value1"), bp::arg("value2") ) )    
        .def( 
            "read"
            , (bool ( ::osgDB::Input::* )( char const *,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) )( &::osgDB::Input::read )
            , ( bp::arg("str"), bp::arg("value1"), bp::arg("value2"), bp::arg("value3") ) )    
        .def( 
            "read"
            , (bool ( ::osgDB::Input::* )( char const *,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) )( &::osgDB::Input::read )
            , ( bp::arg("str"), bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4") ) )    
        .def( 
            "read"
            , (bool ( ::osgDB::Input::* )( char const *,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) )( &::osgDB::Input::read )
            , ( bp::arg("str"), bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4"), bp::arg("value5") ) )    
        .def( 
            "read"
            , (bool ( ::osgDB::Input::* )( char const *,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) )( &::osgDB::Input::read )
            , ( bp::arg("str"), bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4"), bp::arg("value5"), bp::arg("value6") ) )    
        .def( 
            "read"
            , (bool ( ::osgDB::Input::* )( char const *,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) )( &::osgDB::Input::read )
            , ( bp::arg("str"), bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4"), bp::arg("value5"), bp::arg("value6"), bp::arg("value7") ) )    
        .def( 
            "read"
            , (bool ( ::osgDB::Input::* )( char const *,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter,::osg::ArgumentParser::Parameter ) )( &::osgDB::Input::read )
            , ( bp::arg("str"), bp::arg("value1"), bp::arg("value2"), bp::arg("value3"), bp::arg("value4"), bp::arg("value5"), bp::arg("value6"), bp::arg("value7"), bp::arg("value8") ) )    
        .def( 
            "readDrawable"
            , (::osg::Drawable * ( ::osgDB::Input::* )(  ) )(&::osgDB::Input::readDrawable)
            , (::osg::Drawable * ( Input_wrapper::* )(  ) )(&Input_wrapper::default_readDrawable)
            , bp::return_internal_reference< >() )    
        .def( 
            "readImage"
            , (::osg::Image * ( ::osgDB::Input::* )(  ) )(&::osgDB::Input::readImage)
            , (::osg::Image * ( Input_wrapper::* )(  ) )(&Input_wrapper::default_readImage)
            , bp::return_internal_reference< >() )    
        .def( 
            "readImage"
            , (::osg::Image * ( ::osgDB::Input::* )( ::std::string const & ) )(&::osgDB::Input::readImage)
            , (::osg::Image * ( Input_wrapper::* )( ::std::string const & ) )(&Input_wrapper::default_readImage)
            , ( bp::arg("fileName") )
            , bp::return_internal_reference< >() )    
        .def( 
            "readNode"
            , (::osg::Node * ( ::osgDB::Input::* )(  ) )(&::osgDB::Input::readNode)
            , (::osg::Node * ( Input_wrapper::* )(  ) )(&Input_wrapper::default_readNode)
            , bp::return_internal_reference< >() )    
        .def( 
            "readNode"
            , (::osg::Node * ( ::osgDB::Input::* )( ::std::string const & ) )(&::osgDB::Input::readNode)
            , (::osg::Node * ( Input_wrapper::* )( ::std::string const & ) )(&Input_wrapper::default_readNode)
            , ( bp::arg("fileName") )
            , bp::return_internal_reference< >() )    
        .def( 
            "readShader"
            , (::osg::Shader * ( ::osgDB::Input::* )(  ) )(&::osgDB::Input::readShader)
            , (::osg::Shader * ( Input_wrapper::* )(  ) )(&Input_wrapper::default_readShader)
            , bp::return_internal_reference< >() )    
        .def( 
            "readShader"
            , (::osg::Shader * ( ::osgDB::Input::* )( ::std::string const & ) )(&::osgDB::Input::readShader)
            , (::osg::Shader * ( Input_wrapper::* )( ::std::string const & ) )(&Input_wrapper::default_readShader)
            , ( bp::arg("fileName") )
            , bp::return_internal_reference< >() )    
        .def( 
            "readStateAttribute"
            , (::osg::StateAttribute * ( ::osgDB::Input::* )(  ) )(&::osgDB::Input::readStateAttribute)
            , (::osg::StateAttribute * ( Input_wrapper::* )(  ) )(&Input_wrapper::default_readStateAttribute)
            , bp::return_internal_reference< >() )    
        .def( 
            "readUniform"
            , (::osg::Uniform * ( ::osgDB::Input::* )(  ) )(&::osgDB::Input::readUniform)
            , (::osg::Uniform * ( Input_wrapper::* )(  ) )(&Input_wrapper::default_readUniform)
            , bp::return_internal_reference< >() )    
        .def( 
            "setOptions"
            , (void ( ::osgDB::Input::* )( ::osgDB::Options const * ) )( &::osgDB::Input::setOptions )
            , ( bp::arg("options") ) )    
        .def( 
            "eof"
            , (bool ( ::osgDB::FieldReaderIterator::* )(  ) const)(&::osgDB::FieldReaderIterator::eof)
            , (bool ( Input_wrapper::* )(  ) const)(&Input_wrapper::default_eof) );

}
