// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgDB.h"
#include "wrap_referenced.h"
#include "ImageProcessor.pypp.hpp"

namespace bp = boost::python;

struct ImageProcessor_wrapper : osgDB::ImageProcessor, bp::wrapper< osgDB::ImageProcessor > {

    ImageProcessor_wrapper( )
    : osgDB::ImageProcessor( )
      , bp::wrapper< osgDB::ImageProcessor >(){
        // null constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgDB::ImageProcessor::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgDB::ImageProcessor::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgDB::ImageProcessor::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgDB::ImageProcessor::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgDB::ImageProcessor::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgDB::ImageProcessor::cloneType( );
    }

    virtual void compress( ::osg::Image & arg0, ::osg::Texture::InternalFormatMode arg1, bool arg2, bool arg3, ::osgDB::ImageProcessor::CompressionMethod arg4, ::osgDB::ImageProcessor::CompressionQuality arg5 ) {
        if( bp::override func_compress = this->get_override( "compress" ) )
            func_compress( boost::ref(arg0), arg1, arg2, arg3, arg4, arg5 );
        else{
            this->osgDB::ImageProcessor::compress( boost::ref(arg0), arg1, arg2, arg3, arg4, arg5 );
        }
    }
    
    void default_compress( ::osg::Image & arg0, ::osg::Texture::InternalFormatMode arg1, bool arg2, bool arg3, ::osgDB::ImageProcessor::CompressionMethod arg4, ::osgDB::ImageProcessor::CompressionQuality arg5 ) {
        osgDB::ImageProcessor::compress( boost::ref(arg0), arg1, arg2, arg3, arg4, arg5 );
    }

    virtual void generateMipMap( ::osg::Image & arg0, bool arg1, ::osgDB::ImageProcessor::CompressionMethod arg2 ) {
        if( bp::override func_generateMipMap = this->get_override( "generateMipMap" ) )
            func_generateMipMap( boost::ref(arg0), arg1, arg2 );
        else{
            this->osgDB::ImageProcessor::generateMipMap( boost::ref(arg0), arg1, arg2 );
        }
    }
    
    void default_generateMipMap( ::osg::Image & arg0, bool arg1, ::osgDB::ImageProcessor::CompressionMethod arg2 ) {
        osgDB::ImageProcessor::generateMipMap( boost::ref(arg0), arg1, arg2 );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgDB::ImageProcessor::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgDB::ImageProcessor::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgDB::ImageProcessor::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgDB::ImageProcessor::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_ImageProcessor_class(){

    { //::osgDB::ImageProcessor
        typedef bp::class_< ImageProcessor_wrapper, bp::bases< ::osg::Object >, osg::ref_ptr< ImageProcessor_wrapper >, boost::noncopyable > ImageProcessor_exposer_t;
        ImageProcessor_exposer_t ImageProcessor_exposer = ImageProcessor_exposer_t( "ImageProcessor", bp::init< >() );
        bp::scope ImageProcessor_scope( ImageProcessor_exposer );
        bp::enum_< osgDB::ImageProcessor::CompressionMethod>("CompressionMethod")
            .value("USE_CPU", osgDB::ImageProcessor::USE_CPU)
            .value("USE_GPU", osgDB::ImageProcessor::USE_GPU)
            .export_values()
            ;
        bp::enum_< osgDB::ImageProcessor::CompressionQuality>("CompressionQuality")
            .value("FASTEST", osgDB::ImageProcessor::FASTEST)
            .value("NORMAL", osgDB::ImageProcessor::NORMAL)
            .value("PRODUCTION", osgDB::ImageProcessor::PRODUCTION)
            .value("HIGHEST", osgDB::ImageProcessor::HIGHEST)
            .export_values()
            ;
        { //::osgDB::ImageProcessor::className
        
            typedef char const * ( ::osgDB::ImageProcessor::*className_function_type )(  ) const;
            typedef char const * ( ImageProcessor_wrapper::*default_className_function_type )(  ) const;
            
            ImageProcessor_exposer.def( 
                "className"
                , className_function_type(&::osgDB::ImageProcessor::className)
                , default_className_function_type(&ImageProcessor_wrapper::default_className) );
        
        }
        { //::osgDB::ImageProcessor::clone
        
            typedef ::osg::Object * ( ::osgDB::ImageProcessor::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( ImageProcessor_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            ImageProcessor_exposer.def( 
                "clone"
                , clone_function_type(&::osgDB::ImageProcessor::clone)
                , default_clone_function_type(&ImageProcessor_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgDB::ImageProcessor::cloneType
        
            typedef ::osg::Object * ( ::osgDB::ImageProcessor::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( ImageProcessor_wrapper::*default_cloneType_function_type )(  ) const;
            
            ImageProcessor_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgDB::ImageProcessor::cloneType)
                , default_cloneType_function_type(&ImageProcessor_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgDB::ImageProcessor::compress
        
            typedef void ( ::osgDB::ImageProcessor::*compress_function_type )( ::osg::Image &,::osg::Texture::InternalFormatMode,bool,bool,::osgDB::ImageProcessor::CompressionMethod,::osgDB::ImageProcessor::CompressionQuality ) ;
            typedef void ( ImageProcessor_wrapper::*default_compress_function_type )( ::osg::Image &,::osg::Texture::InternalFormatMode,bool,bool,::osgDB::ImageProcessor::CompressionMethod,::osgDB::ImageProcessor::CompressionQuality ) ;
            
            ImageProcessor_exposer.def( 
                "compress"
                , compress_function_type(&::osgDB::ImageProcessor::compress)
                , default_compress_function_type(&ImageProcessor_wrapper::default_compress)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2"), bp::arg("arg3"), bp::arg("arg4"), bp::arg("arg5") ) );
        
        }
        { //::osgDB::ImageProcessor::generateMipMap
        
            typedef void ( ::osgDB::ImageProcessor::*generateMipMap_function_type )( ::osg::Image &,bool,::osgDB::ImageProcessor::CompressionMethod ) ;
            typedef void ( ImageProcessor_wrapper::*default_generateMipMap_function_type )( ::osg::Image &,bool,::osgDB::ImageProcessor::CompressionMethod ) ;
            
            ImageProcessor_exposer.def( 
                "generateMipMap"
                , generateMipMap_function_type(&::osgDB::ImageProcessor::generateMipMap)
                , default_generateMipMap_function_type(&ImageProcessor_wrapper::default_generateMipMap)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgDB::ImageProcessor::isSameKindAs
        
            typedef bool ( ::osgDB::ImageProcessor::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( ImageProcessor_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            ImageProcessor_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgDB::ImageProcessor::isSameKindAs)
                , default_isSameKindAs_function_type(&ImageProcessor_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgDB::ImageProcessor::libraryName
        
            typedef char const * ( ::osgDB::ImageProcessor::*libraryName_function_type )(  ) const;
            typedef char const * ( ImageProcessor_wrapper::*default_libraryName_function_type )(  ) const;
            
            ImageProcessor_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgDB::ImageProcessor::libraryName)
                , default_libraryName_function_type(&ImageProcessor_wrapper::default_libraryName) );
        
        }
    }

}
