// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgDB.h"
#include "wrap_referenced.h"
#include "ImageOptions.pypp.hpp"

namespace bp = boost::python;

struct ImageOptions_wrapper : osgDB::ImageOptions, bp::wrapper< osgDB::ImageOptions > {

    ImageOptions_wrapper( )
    : osgDB::ImageOptions( )
      , bp::wrapper< osgDB::ImageOptions >(){
        // null constructor
    
    }

    ImageOptions_wrapper(::std::string const & str )
    : osgDB::ImageOptions( str )
      , bp::wrapper< osgDB::ImageOptions >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgDB::ImageOptions::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgDB::ImageOptions::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgDB::ImageOptions::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgDB::ImageOptions::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgDB::ImageOptions::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgDB::ImageOptions::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgDB::ImageOptions::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgDB::ImageOptions::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgDB::ImageOptions::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgDB::ImageOptions::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_ImageOptions_class(){

    { //::osgDB::ImageOptions
        typedef bp::class_< ImageOptions_wrapper, bp::bases< osgDB::Options >, osg::ref_ptr< ImageOptions_wrapper >, boost::noncopyable > ImageOptions_exposer_t;
        ImageOptions_exposer_t ImageOptions_exposer = ImageOptions_exposer_t( "ImageOptions", bp::init< >() );
        bp::scope ImageOptions_scope( ImageOptions_exposer );
        bp::enum_< osgDB::ImageOptions::ImageSamplingMode>("ImageSamplingMode")
            .value("NEAREST", osgDB::ImageOptions::NEAREST)
            .value("LINEAR", osgDB::ImageOptions::LINEAR)
            .value("CUBIC", osgDB::ImageOptions::CUBIC)
            .export_values()
            ;
        bp::enum_< osgDB::ImageOptions::ImageWindowMode>("ImageWindowMode")
            .value("ALL_IMAGE", osgDB::ImageOptions::ALL_IMAGE)
            .value("RATIO_WINDOW", osgDB::ImageOptions::RATIO_WINDOW)
            .value("PIXEL_WINDOW", osgDB::ImageOptions::PIXEL_WINDOW)
            .export_values()
            ;
        bp::class_< osgDB::ImageOptions::PixelWindow >( "PixelWindow", " PixelWindow stores the window (in exact pixels) from the overall imagery from which to extract the osg::Image", bp::init< >(" PixelWindow stores the window (in exact pixels) from the overall imagery from which to extract the osg::Image") )    
            .def( 
                "set"
                , (void ( ::osgDB::ImageOptions::PixelWindow::* )( unsigned int,unsigned int,unsigned int,unsigned int ) )( &::osgDB::ImageOptions::PixelWindow::set )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("w"), bp::arg("h") )
                , " PixelWindow stores the window (in exact pixels) from the overall imagery from which to extract the osg::Image" )    
            .def_readwrite( "windowHeight", &osgDB::ImageOptions::PixelWindow::windowHeight )    
            .def_readwrite( "windowWidth", &osgDB::ImageOptions::PixelWindow::windowWidth )    
            .def_readwrite( "windowX", &osgDB::ImageOptions::PixelWindow::windowX )    
            .def_readwrite( "windowY", &osgDB::ImageOptions::PixelWindow::windowY );
        bp::class_< osgDB::ImageOptions::RatioWindow >( "RatioWindow", " RatioWindow stores the window (as ratios of 0.0 to 1.0) from the overall imagery from which to extract the osg::Image", bp::init< >(" RatioWindow stores the window (as ratios of 0.0 to 1.0) from the overall imagery from which to extract the osg::Image") )    
            .def( 
                "set"
                , (void ( ::osgDB::ImageOptions::RatioWindow::* )( double,double,double,double ) )( &::osgDB::ImageOptions::RatioWindow::set )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("w"), bp::arg("h") )
                , " RatioWindow stores the window (as ratios of 0.0 to 1.0) from the overall imagery from which to extract the osg::Image" )    
            .def_readwrite( "windowHeight", &osgDB::ImageOptions::RatioWindow::windowHeight )    
            .def_readwrite( "windowWidth", &osgDB::ImageOptions::RatioWindow::windowWidth )    
            .def_readwrite( "windowX", &osgDB::ImageOptions::RatioWindow::windowX )    
            .def_readwrite( "windowY", &osgDB::ImageOptions::RatioWindow::windowY );
        bp::class_< osgDB::ImageOptions::TexCoordRange, bp::bases< ::osg::Referenced >, osg::ref_ptr< ::osgDB::ImageOptions::TexCoordRange >, boost::noncopyable >( "TexCoordRange", " Used as UserData attached to generated osg::Images", bp::init< >(" Used as UserData attached to generated osg::Images") )    
            .def( 
                "set"
                , (void ( ::osgDB::ImageOptions::TexCoordRange::* )( double,double,double,double ) )( &::osgDB::ImageOptions::TexCoordRange::set )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("w"), bp::arg("h") )
                , " Used as UserData attached to generated osg::Images" )    
            .def_readwrite( "_h", &osgDB::ImageOptions::TexCoordRange::_h )    
            .def_readwrite( "_w", &osgDB::ImageOptions::TexCoordRange::_w )    
            .def_readwrite( "_x", &osgDB::ImageOptions::TexCoordRange::_x )    
            .def_readwrite( "_y", &osgDB::ImageOptions::TexCoordRange::_y );
        ImageOptions_exposer.def( bp::init< std::string const & >(( bp::arg("str") )) );
        bp::implicitly_convertible< std::string const &, osgDB::ImageOptions >();
        { //::osgDB::ImageOptions::className
        
            typedef char const * ( ::osgDB::ImageOptions::*className_function_type )(  ) const;
            typedef char const * ( ImageOptions_wrapper::*default_className_function_type )(  ) const;
            
            ImageOptions_exposer.def( 
                "className"
                , className_function_type(&::osgDB::ImageOptions::className)
                , default_className_function_type(&ImageOptions_wrapper::default_className) );
        
        }
        { //::osgDB::ImageOptions::clone
        
            typedef ::osg::Object * ( ::osgDB::ImageOptions::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( ImageOptions_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            ImageOptions_exposer.def( 
                "clone"
                , clone_function_type(&::osgDB::ImageOptions::clone)
                , default_clone_function_type(&ImageOptions_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgDB::ImageOptions::cloneType
        
            typedef ::osg::Object * ( ::osgDB::ImageOptions::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( ImageOptions_wrapper::*default_cloneType_function_type )(  ) const;
            
            ImageOptions_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgDB::ImageOptions::cloneType)
                , default_cloneType_function_type(&ImageOptions_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgDB::ImageOptions::init
        
            typedef void ( ::osgDB::ImageOptions::*init_function_type )(  ) ;
            
            ImageOptions_exposer.def( 
                "init"
                , init_function_type( &::osgDB::ImageOptions::init ) );
        
        }
        { //::osgDB::ImageOptions::isSameKindAs
        
            typedef bool ( ::osgDB::ImageOptions::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( ImageOptions_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            ImageOptions_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgDB::ImageOptions::isSameKindAs)
                , default_isSameKindAs_function_type(&ImageOptions_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgDB::ImageOptions::libraryName
        
            typedef char const * ( ::osgDB::ImageOptions::*libraryName_function_type )(  ) const;
            typedef char const * ( ImageOptions_wrapper::*default_libraryName_function_type )(  ) const;
            
            ImageOptions_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgDB::ImageOptions::libraryName)
                , default_libraryName_function_type(&ImageOptions_wrapper::default_libraryName) );
        
        }
        ImageOptions_exposer.def_readwrite( "_destinationDataType", &osgDB::ImageOptions::_destinationDataType );
        ImageOptions_exposer.def_readwrite( "_destinationImage", &osgDB::ImageOptions::_destinationImage );
        ImageOptions_exposer.def_readwrite( "_destinationImageWindowMode", &osgDB::ImageOptions::_destinationImageWindowMode );
        ImageOptions_exposer.def_readwrite( "_destinationPixelFormat", &osgDB::ImageOptions::_destinationPixelFormat );
        ImageOptions_exposer.def_readwrite( "_destinationPixelWindow", &osgDB::ImageOptions::_destinationPixelWindow );
        ImageOptions_exposer.def_readwrite( "_destinationRatioWindow", &osgDB::ImageOptions::_destinationRatioWindow );
        ImageOptions_exposer.def_readwrite( "_sourceImageSamplingMode", &osgDB::ImageOptions::_sourceImageSamplingMode );
        ImageOptions_exposer.def_readwrite( "_sourceImageWindowMode", &osgDB::ImageOptions::_sourceImageWindowMode );
        ImageOptions_exposer.def_readwrite( "_sourcePixelWindow", &osgDB::ImageOptions::_sourcePixelWindow );
        ImageOptions_exposer.def_readwrite( "_sourceRatioWindow", &osgDB::ImageOptions::_sourceRatioWindow );
    }

}
