// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgDB.h"
#include "Output.pypp.hpp"

namespace bp = boost::python;

struct Output_wrapper : osgDB::Output, bp::wrapper< osgDB::Output > {

    Output_wrapper( )
    : osgDB::Output( )
      , bp::wrapper< osgDB::Output >(){
        // null constructor
    
    }

    Output_wrapper(char const * name )
    : osgDB::Output( name )
      , bp::wrapper< osgDB::Output >(){
        // constructor
    
    }

    virtual ::std::string getFileNameForOutput( ::std::string const & filename ) const  {
        if( bp::override func_getFileNameForOutput = this->get_override( "getFileNameForOutput" ) )
            return func_getFileNameForOutput( filename );
        else{
            return this->osgDB::Output::getFileNameForOutput( filename );
        }
    }
    
    ::std::string default_getFileNameForOutput( ::std::string const & filename ) const  {
        return osgDB::Output::getFileNameForOutput( filename );
    }

    virtual ::std::string getShaderFileNameForOutput(  ) {
        if( bp::override func_getShaderFileNameForOutput = this->get_override( "getShaderFileNameForOutput" ) )
            return func_getShaderFileNameForOutput(  );
        else{
            return this->osgDB::Output::getShaderFileNameForOutput(  );
        }
    }
    
    ::std::string default_getShaderFileNameForOutput(  ) {
        return osgDB::Output::getShaderFileNameForOutput( );
    }

    virtual ::std::string getTextureFileNameForOutput(  ) {
        if( bp::override func_getTextureFileNameForOutput = this->get_override( "getTextureFileNameForOutput" ) )
            return func_getTextureFileNameForOutput(  );
        else{
            return this->osgDB::Output::getTextureFileNameForOutput(  );
        }
    }
    
    ::std::string default_getTextureFileNameForOutput(  ) {
        return osgDB::Output::getTextureFileNameForOutput( );
    }

    virtual void writeBeginObject( ::std::string const & name ) {
        if( bp::override func_writeBeginObject = this->get_override( "writeBeginObject" ) )
            func_writeBeginObject( name );
        else{
            this->osgDB::Output::writeBeginObject( name );
        }
    }
    
    void default_writeBeginObject( ::std::string const & name ) {
        osgDB::Output::writeBeginObject( name );
    }

    virtual void writeEndObject(  ) {
        if( bp::override func_writeEndObject = this->get_override( "writeEndObject" ) )
            func_writeEndObject(  );
        else{
            this->osgDB::Output::writeEndObject(  );
        }
    }
    
    void default_writeEndObject(  ) {
        osgDB::Output::writeEndObject( );
    }

    virtual void writeUniqueID( ::std::string const & id ) {
        if( bp::override func_writeUniqueID = this->get_override( "writeUniqueID" ) )
            func_writeUniqueID( id );
        else{
            this->osgDB::Output::writeUniqueID( id );
        }
    }
    
    void default_writeUniqueID( ::std::string const & id ) {
        osgDB::Output::writeUniqueID( id );
    }

    virtual void writeUseID( ::std::string const & id ) {
        if( bp::override func_writeUseID = this->get_override( "writeUseID" ) )
            func_writeUseID( id );
        else{
            this->osgDB::Output::writeUseID( id );
        }
    }
    
    void default_writeUseID( ::std::string const & id ) {
        osgDB::Output::writeUseID( id );
    }

};

void register_Output_class(){

    { //::osgDB::Output
        typedef bp::class_< Output_wrapper, boost::noncopyable > Output_exposer_t;
        Output_exposer_t Output_exposer = Output_exposer_t( "Output", bp::init< >() );
        bp::scope Output_scope( Output_exposer );
        bp::enum_< osgDB::Output::PathNameHint>("PathNameHint")
            .value("AS_IS", osgDB::Output::AS_IS)
            .value("FULL_PATH", osgDB::Output::FULL_PATH)
            .value("RELATIVE_PATH", osgDB::Output::RELATIVE_PATH)
            .value("FILENAME_ONLY", osgDB::Output::FILENAME_ONLY)
            .export_values()
            ;
        Output_exposer.def( bp::init< char const * >(( bp::arg("name") )) );
        bp::implicitly_convertible< char const *, osgDB::Output >();
        { //::osgDB::Output::createUniqueIDForObject
        
            typedef bool ( ::osgDB::Output::*createUniqueIDForObject_function_type )( ::osg::Object const *,::std::string & ) ;
            
            Output_exposer.def( 
                "createUniqueIDForObject"
                , createUniqueIDForObject_function_type( &::osgDB::Output::createUniqueIDForObject )
                , ( bp::arg("obj"), bp::arg("uniqueID") ) );
        
        }
        { //::osgDB::Output::getExternalFileWritten
        
            typedef bool ( ::osgDB::Output::*getExternalFileWritten_function_type )( ::std::string const & ) const;
            
            Output_exposer.def( 
                "getExternalFileWritten"
                , getExternalFileWritten_function_type( &::osgDB::Output::getExternalFileWritten )
                , ( bp::arg("filename") ) );
        
        }
        { //::osgDB::Output::getFileName
        
            typedef ::std::string const & ( ::osgDB::Output::*getFileName_function_type )(  ) const;
            
            Output_exposer.def( 
                "getFileName"
                , getFileName_function_type( &::osgDB::Output::getFileName )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::osgDB::Output::getFileNameForOutput
        
            typedef ::std::string ( ::osgDB::Output::*getFileNameForOutput_function_type )( ::std::string const & ) const;
            typedef ::std::string ( Output_wrapper::*default_getFileNameForOutput_function_type )( ::std::string const & ) const;
            
            Output_exposer.def( 
                "getFileNameForOutput"
                , getFileNameForOutput_function_type(&::osgDB::Output::getFileNameForOutput)
                , default_getFileNameForOutput_function_type(&Output_wrapper::default_getFileNameForOutput)
                , ( bp::arg("filename") ) );
        
        }
        { //::osgDB::Output::getIndent
        
            typedef int ( ::osgDB::Output::*getIndent_function_type )(  ) const;
            
            Output_exposer.def( 
                "getIndent"
                , getIndent_function_type( &::osgDB::Output::getIndent ) );
        
        }
        { //::osgDB::Output::getIndentStep
        
            typedef int ( ::osgDB::Output::*getIndentStep_function_type )(  ) const;
            
            Output_exposer.def( 
                "getIndentStep"
                , getIndentStep_function_type( &::osgDB::Output::getIndentStep ) );
        
        }
        { //::osgDB::Output::getNumIndicesPerLine
        
            typedef int ( ::osgDB::Output::*getNumIndicesPerLine_function_type )(  ) const;
            
            Output_exposer.def( 
                "getNumIndicesPerLine"
                , getNumIndicesPerLine_function_type( &::osgDB::Output::getNumIndicesPerLine ) );
        
        }
        { //::osgDB::Output::getOptions
        
            typedef ::osgDB::Options const * ( ::osgDB::Output::*getOptions_function_type )(  ) const;
            
            Output_exposer.def( 
                "getOptions"
                , getOptions_function_type( &::osgDB::Output::getOptions )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Output::getOutputShaderFiles
        
            typedef bool ( ::osgDB::Output::*getOutputShaderFiles_function_type )(  ) const;
            
            Output_exposer.def( 
                "getOutputShaderFiles"
                , getOutputShaderFiles_function_type( &::osgDB::Output::getOutputShaderFiles ) );
        
        }
        { //::osgDB::Output::getOutputTextureFiles
        
            typedef bool ( ::osgDB::Output::*getOutputTextureFiles_function_type )(  ) const;
            
            Output_exposer.def( 
                "getOutputTextureFiles"
                , getOutputTextureFiles_function_type( &::osgDB::Output::getOutputTextureFiles ) );
        
        }
        { //::osgDB::Output::getPathNameHint
        
            typedef ::osgDB::Output::PathNameHint ( ::osgDB::Output::*getPathNameHint_function_type )(  ) const;
            
            Output_exposer.def( 
                "getPathNameHint"
                , getPathNameHint_function_type( &::osgDB::Output::getPathNameHint ) );
        
        }
        { //::osgDB::Output::getShaderFileNameForOutput
        
            typedef ::std::string ( ::osgDB::Output::*getShaderFileNameForOutput_function_type )(  ) ;
            typedef ::std::string ( Output_wrapper::*default_getShaderFileNameForOutput_function_type )(  ) ;
            
            Output_exposer.def( 
                "getShaderFileNameForOutput"
                , getShaderFileNameForOutput_function_type(&::osgDB::Output::getShaderFileNameForOutput)
                , default_getShaderFileNameForOutput_function_type(&Output_wrapper::default_getShaderFileNameForOutput) );
        
        }
        { //::osgDB::Output::getTextureFileNameForOutput
        
            typedef ::std::string ( ::osgDB::Output::*getTextureFileNameForOutput_function_type )(  ) ;
            typedef ::std::string ( Output_wrapper::*default_getTextureFileNameForOutput_function_type )(  ) ;
            
            Output_exposer.def( 
                "getTextureFileNameForOutput"
                , getTextureFileNameForOutput_function_type(&::osgDB::Output::getTextureFileNameForOutput)
                , default_getTextureFileNameForOutput_function_type(&Output_wrapper::default_getTextureFileNameForOutput) );
        
        }
        { //::osgDB::Output::getUniqueIDForObject
        
            typedef bool ( ::osgDB::Output::*getUniqueIDForObject_function_type )( ::osg::Object const *,::std::string & ) ;
            
            Output_exposer.def( 
                "getUniqueIDForObject"
                , getUniqueIDForObject_function_type( &::osgDB::Output::getUniqueIDForObject )
                , ( bp::arg("obj"), bp::arg("uniqueID") ) );
        
        }
        { //::osgDB::Output::getWriteOutDefaultValues
        
            typedef bool ( ::osgDB::Output::*getWriteOutDefaultValues_function_type )(  ) const;
            
            Output_exposer.def( 
                "getWriteOutDefaultValues"
                , getWriteOutDefaultValues_function_type( &::osgDB::Output::getWriteOutDefaultValues ) );
        
        }
        { //::osgDB::Output::indent
        
            typedef ::osgDB::Output & ( ::osgDB::Output::*indent_function_type )(  ) ;
            
            Output_exposer.def( 
                "indent"
                , indent_function_type( &::osgDB::Output::indent )
                , bp::return_self< >() );
        
        }
        { //::osgDB::Output::moveIn
        
            typedef void ( ::osgDB::Output::*moveIn_function_type )(  ) ;
            
            Output_exposer.def( 
                "moveIn"
                , moveIn_function_type( &::osgDB::Output::moveIn ) );
        
        }
        { //::osgDB::Output::moveOut
        
            typedef void ( ::osgDB::Output::*moveOut_function_type )(  ) ;
            
            Output_exposer.def( 
                "moveOut"
                , moveOut_function_type( &::osgDB::Output::moveOut ) );
        
        }
        { //::osgDB::Output::open
        
            typedef void ( ::osgDB::Output::*open_function_type )( char const * ) ;
            
            Output_exposer.def( 
                "open"
                , open_function_type( &::osgDB::Output::open )
                , ( bp::arg("name") ) );
        
        }
        { //::osgDB::Output::registerUniqueIDForObject
        
            typedef bool ( ::osgDB::Output::*registerUniqueIDForObject_function_type )( ::osg::Object const *,::std::string & ) ;
            
            Output_exposer.def( 
                "registerUniqueIDForObject"
                , registerUniqueIDForObject_function_type( &::osgDB::Output::registerUniqueIDForObject )
                , ( bp::arg("obj"), bp::arg("uniqueID") ) );
        
        }
        { //::osgDB::Output::setExternalFileWritten
        
            typedef void ( ::osgDB::Output::*setExternalFileWritten_function_type )( ::std::string const &,bool ) ;
            
            Output_exposer.def( 
                "setExternalFileWritten"
                , setExternalFileWritten_function_type( &::osgDB::Output::setExternalFileWritten )
                , ( bp::arg("filename"), bp::arg("hasBeenWritten")=(bool)(true) ) );
        
        }
        { //::osgDB::Output::setIndent
        
            typedef void ( ::osgDB::Output::*setIndent_function_type )( int ) ;
            
            Output_exposer.def( 
                "setIndent"
                , setIndent_function_type( &::osgDB::Output::setIndent )
                , ( bp::arg("indent") ) );
        
        }
        { //::osgDB::Output::setIndentStep
        
            typedef void ( ::osgDB::Output::*setIndentStep_function_type )( int ) ;
            
            Output_exposer.def( 
                "setIndentStep"
                , setIndentStep_function_type( &::osgDB::Output::setIndentStep )
                , ( bp::arg("step") ) );
        
        }
        { //::osgDB::Output::setNumIndicesPerLine
        
            typedef void ( ::osgDB::Output::*setNumIndicesPerLine_function_type )( int ) ;
            
            Output_exposer.def( 
                "setNumIndicesPerLine"
                , setNumIndicesPerLine_function_type( &::osgDB::Output::setNumIndicesPerLine )
                , ( bp::arg("num") ) );
        
        }
        { //::osgDB::Output::setOptions
        
            typedef void ( ::osgDB::Output::*setOptions_function_type )( ::osgDB::Options const * ) ;
            
            Output_exposer.def( 
                "setOptions"
                , setOptions_function_type( &::osgDB::Output::setOptions )
                , ( bp::arg("options") ) );
        
        }
        { //::osgDB::Output::setOutputShaderFiles
        
            typedef void ( ::osgDB::Output::*setOutputShaderFiles_function_type )( bool ) ;
            
            Output_exposer.def( 
                "setOutputShaderFiles"
                , setOutputShaderFiles_function_type( &::osgDB::Output::setOutputShaderFiles )
                , ( bp::arg("flag") ) );
        
        }
        { //::osgDB::Output::setOutputTextureFiles
        
            typedef void ( ::osgDB::Output::*setOutputTextureFiles_function_type )( bool ) ;
            
            Output_exposer.def( 
                "setOutputTextureFiles"
                , setOutputTextureFiles_function_type( &::osgDB::Output::setOutputTextureFiles )
                , ( bp::arg("flag") ) );
        
        }
        { //::osgDB::Output::setPathNameHint
        
            typedef void ( ::osgDB::Output::*setPathNameHint_function_type )( ::osgDB::Output::PathNameHint const ) ;
            
            Output_exposer.def( 
                "setPathNameHint"
                , setPathNameHint_function_type( &::osgDB::Output::setPathNameHint )
                , ( bp::arg("pnh") ) );
        
        }
        { //::osgDB::Output::setWriteOutDefaultValues
        
            typedef void ( ::osgDB::Output::*setWriteOutDefaultValues_function_type )( bool ) ;
            
            Output_exposer.def( 
                "setWriteOutDefaultValues"
                , setWriteOutDefaultValues_function_type( &::osgDB::Output::setWriteOutDefaultValues )
                , ( bp::arg("flag") ) );
        
        }
        { //::osgDB::Output::wrapString
        
            typedef ::std::string ( ::osgDB::Output::*wrapString_function_type )( char const * ) ;
            
            Output_exposer.def( 
                "wrapString"
                , wrapString_function_type( &::osgDB::Output::wrapString )
                , ( bp::arg("str") ) );
        
        }
        { //::osgDB::Output::wrapString
        
            typedef ::std::string ( ::osgDB::Output::*wrapString_function_type )( ::std::string const & ) ;
            
            Output_exposer.def( 
                "wrapString"
                , wrapString_function_type( &::osgDB::Output::wrapString )
                , ( bp::arg("str") ) );
        
        }
        { //::osgDB::Output::writeBeginObject
        
            typedef void ( ::osgDB::Output::*writeBeginObject_function_type )( ::std::string const & ) ;
            typedef void ( Output_wrapper::*default_writeBeginObject_function_type )( ::std::string const & ) ;
            
            Output_exposer.def( 
                "writeBeginObject"
                , writeBeginObject_function_type(&::osgDB::Output::writeBeginObject)
                , default_writeBeginObject_function_type(&Output_wrapper::default_writeBeginObject)
                , ( bp::arg("name") ) );
        
        }
        { //::osgDB::Output::writeEndObject
        
            typedef void ( ::osgDB::Output::*writeEndObject_function_type )(  ) ;
            typedef void ( Output_wrapper::*default_writeEndObject_function_type )(  ) ;
            
            Output_exposer.def( 
                "writeEndObject"
                , writeEndObject_function_type(&::osgDB::Output::writeEndObject)
                , default_writeEndObject_function_type(&Output_wrapper::default_writeEndObject) );
        
        }
        { //::osgDB::Output::writeUniqueID
        
            typedef void ( ::osgDB::Output::*writeUniqueID_function_type )( ::std::string const & ) ;
            typedef void ( Output_wrapper::*default_writeUniqueID_function_type )( ::std::string const & ) ;
            
            Output_exposer.def( 
                "writeUniqueID"
                , writeUniqueID_function_type(&::osgDB::Output::writeUniqueID)
                , default_writeUniqueID_function_type(&Output_wrapper::default_writeUniqueID)
                , ( bp::arg("id") ) );
        
        }
        { //::osgDB::Output::writeUseID
        
            typedef void ( ::osgDB::Output::*writeUseID_function_type )( ::std::string const & ) ;
            typedef void ( Output_wrapper::*default_writeUseID_function_type )( ::std::string const & ) ;
            
            Output_exposer.def( 
                "writeUseID"
                , writeUseID_function_type(&::osgDB::Output::writeUseID)
                , default_writeUseID_function_type(&Output_wrapper::default_writeUseID)
                , ( bp::arg("id") ) );
        
        }
    }

}
