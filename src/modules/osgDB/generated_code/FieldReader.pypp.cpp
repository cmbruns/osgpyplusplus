// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgDB.h"
#include "FieldReader.pypp.hpp"

namespace bp = boost::python;

struct FieldReader_wrapper : osgDB::FieldReader, bp::wrapper< osgDB::FieldReader > {

    FieldReader_wrapper( )
    : osgDB::FieldReader( )
      , bp::wrapper< osgDB::FieldReader >(){
        // null constructor
    
    }

    FieldReader_wrapper(::osgDB::FieldReader const & ic )
    : osgDB::FieldReader( boost::ref(ic) )
      , bp::wrapper< osgDB::FieldReader >(){
        // copy constructor
    
    }

    virtual bool eof(  ) const  {
        if( bp::override func_eof = this->get_override( "eof" ) )
            return func_eof(  );
        else{
            return this->osgDB::FieldReader::eof(  );
        }
    }
    
    bool default_eof(  ) const  {
        return osgDB::FieldReader::eof( );
    }

};

void register_FieldReader_class(){

    { //::osgDB::FieldReader
        typedef bp::class_< FieldReader_wrapper > FieldReader_exposer_t;
        FieldReader_exposer_t FieldReader_exposer = FieldReader_exposer_t( "FieldReader", "\n deprecated.\n", bp::init< >("\n deprecated.\n") );
        bp::scope FieldReader_scope( FieldReader_exposer );
        FieldReader_exposer.def( bp::init< osgDB::FieldReader const & >(( bp::arg("ic") )) );
        { //::osgDB::FieldReader::attach
        
            typedef void ( ::osgDB::FieldReader::*attach_function_type )( ::std::istream * ) ;
            
            FieldReader_exposer.def( 
                "attach"
                , attach_function_type( &::osgDB::FieldReader::attach )
                , ( bp::arg("input") ) );
        
        }
        { //::osgDB::FieldReader::detach
        
            typedef void ( ::osgDB::FieldReader::*detach_function_type )(  ) ;
            
            FieldReader_exposer.def( 
                "detach"
                , detach_function_type( &::osgDB::FieldReader::detach ) );
        
        }
        { //::osgDB::FieldReader::eof
        
            typedef bool ( ::osgDB::FieldReader::*eof_function_type )(  ) const;
            typedef bool ( FieldReader_wrapper::*default_eof_function_type )(  ) const;
            
            FieldReader_exposer.def( 
                "eof"
                , eof_function_type(&::osgDB::FieldReader::eof)
                , default_eof_function_type(&FieldReader_wrapper::default_eof) );
        
        }
        { //::osgDB::FieldReader::getNoNestedBrackets
        
            typedef int ( ::osgDB::FieldReader::*getNoNestedBrackets_function_type )(  ) const;
            
            FieldReader_exposer.def( 
                "getNoNestedBrackets"
                , getNoNestedBrackets_function_type( &::osgDB::FieldReader::getNoNestedBrackets )
                , " no of unmatched `{ encountered so far in file" );
        
        }
        { //::osgDB::FieldReader::ignoreField
        
            typedef void ( ::osgDB::FieldReader::*ignoreField_function_type )(  ) ;
            
            FieldReader_exposer.def( 
                "ignoreField"
                , ignoreField_function_type( &::osgDB::FieldReader::ignoreField ) );
        
        }
        { //::osgDB::FieldReader::operator=
        
            typedef ::osgDB::FieldReader & ( ::osgDB::FieldReader::*assign_function_type )( ::osgDB::FieldReader const & ) ;
            
            FieldReader_exposer.def( 
                "assign"
                , assign_function_type(&::osgDB::FieldReader::operator=)
                , ( bp::arg("ic") )
                , bp::return_self< >() );
        
        }
        { //::osgDB::FieldReader::readField
        
            typedef bool ( ::osgDB::FieldReader::*readField_function_type )( ::osgDB::Field & ) ;
            
            FieldReader_exposer.def( 
                "readField"
                , readField_function_type( &::osgDB::FieldReader::readField )
                , ( bp::arg("fieldPtr") ) );
        
        }
    }

}
