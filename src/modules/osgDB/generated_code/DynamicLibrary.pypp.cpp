// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgDB.h"
#include "wrap_referenced.h"
#include "DynamicLibrary.pypp.hpp"

namespace bp = boost::python;

struct DynamicLibrary_wrapper : osgDB::DynamicLibrary, bp::wrapper< osgDB::DynamicLibrary > {

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_DynamicLibrary_class(){

    bp::class_< DynamicLibrary_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< DynamicLibrary_wrapper >, boost::noncopyable >( "DynamicLibrary", bp::no_init )    
        .def( 
            "getFullName"
            , (::std::string const & ( ::osgDB::DynamicLibrary::* )(  ) const)( &::osgDB::DynamicLibrary::getFullName )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getHandle"
            , (void * ( ::osgDB::DynamicLibrary::* )(  ) const)( &::osgDB::DynamicLibrary::getHandle )
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "getName"
            , (::std::string const & ( ::osgDB::DynamicLibrary::* )(  ) const)( &::osgDB::DynamicLibrary::getName )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "getProcAddress"
            , (void * ( ::osgDB::DynamicLibrary::* )( ::std::string const & ) )( &::osgDB::DynamicLibrary::getProcAddress )
            , ( bp::arg("procName") )
            , bp::return_value_policy< bp::return_opaque_pointer >() )    
        .def( 
            "loadLibrary"
            , (::osgDB::DynamicLibrary * (*)( ::std::string const & ))( &::osgDB::DynamicLibrary::loadLibrary )
            , ( bp::arg("libraryName") )
            , bp::return_internal_reference< >() )    
        .staticmethod( "loadLibrary" );

}
