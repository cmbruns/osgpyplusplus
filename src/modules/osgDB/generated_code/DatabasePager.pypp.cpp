// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgDB.h"
#include "wrap_referenced.h"
#include "DatabasePager.pypp.hpp"

namespace bp = boost::python;

struct DatabasePager_wrapper : osgDB::DatabasePager, bp::wrapper< osgDB::DatabasePager > {

    struct DatabaseThread_wrapper : osgDB::DatabasePager::DatabaseThread, bp::wrapper< osgDB::DatabasePager::DatabaseThread > {
    
        DatabaseThread_wrapper(::osgDB::DatabasePager * pager, ::osgDB::DatabasePager::DatabaseThread::Mode mode, ::std::string const & name )
        : osgDB::DatabasePager::DatabaseThread( boost::python::ptr(pager), mode, name )
          , bp::wrapper< osgDB::DatabasePager::DatabaseThread >(){
            // constructor
        
        }
    
        virtual int cancel(  ) {
            if( bp::override func_cancel = this->get_override( "cancel" ) )
                return func_cancel(  );
            else{
                return this->osgDB::DatabasePager::DatabaseThread::cancel(  );
            }
        }
        
        int default_cancel(  ) {
            return osgDB::DatabasePager::DatabaseThread::cancel( );
        }
    
        virtual void run(  ) {
            if( bp::override func_run = this->get_override( "run" ) )
                func_run(  );
            else{
                this->osgDB::DatabasePager::DatabaseThread::run(  );
            }
        }
        
        void default_run(  ) {
            osgDB::DatabasePager::DatabaseThread::run( );
        }
    
        virtual void cancelCleanup(  ) {
            if( bp::override func_cancelCleanup = this->get_override( "cancelCleanup" ) )
                func_cancelCleanup(  );
            else{
                this->OpenThreads::Thread::cancelCleanup(  );
            }
        }
        
        void default_cancelCleanup(  ) {
            OpenThreads::Thread::cancelCleanup( );
        }
    
    };

    struct PagedLODList_wrapper : osgDB::DatabasePager::PagedLODList, bp::wrapper< osgDB::DatabasePager::PagedLODList > {
    
        PagedLODList_wrapper()
        : osgDB::DatabasePager::PagedLODList()
          , bp::wrapper< osgDB::DatabasePager::PagedLODList >(){
            // null constructor
            
        }
    
        virtual void clear(  ){
            bp::override func_clear = this->get_override( "clear" );
            func_clear(  );
        }
    
        virtual ::osgDB::DatabasePager::PagedLODList * clone(  ){
            bp::override func_clone = this->get_override( "clone" );
            return func_clone(  );
        }
    
        virtual bool containsPagedLOD( ::osg::observer_ptr< osg::PagedLOD > const & plod ) const {
            bp::override func_containsPagedLOD = this->get_override( "containsPagedLOD" );
            return func_containsPagedLOD( boost::ref(plod) );
        }
    
        virtual void insertPagedLOD( ::osg::observer_ptr< osg::PagedLOD > const & plod ){
            bp::override func_insertPagedLOD = this->get_override( "insertPagedLOD" );
            func_insertPagedLOD( boost::ref(plod) );
        }
    
        virtual void removeNodes( ::osg::NodeList & nodesToRemove ){
            bp::override func_removeNodes = this->get_override( "removeNodes" );
            func_removeNodes( boost::ref(nodesToRemove) );
        }
    
        virtual unsigned int size(  ){
            bp::override func_size = this->get_override( "size" );
            return func_size(  );
        }
    
    };

    DatabasePager_wrapper( )
    : osgDB::DatabasePager( )
      , bp::wrapper< osgDB::DatabasePager >(){
        // null constructor
    
    }

    virtual unsigned int addDatabaseThread( ::osgDB::DatabasePager::DatabaseThread::Mode mode, ::std::string const & name ) {
        if( bp::override func_addDatabaseThread = this->get_override( "addDatabaseThread" ) )
            return func_addDatabaseThread( mode, name );
        else{
            return this->osgDB::DatabasePager::addDatabaseThread( mode, name );
        }
    }
    
    unsigned int default_addDatabaseThread( ::osgDB::DatabasePager::DatabaseThread::Mode mode, ::std::string const & name ) {
        return osgDB::DatabasePager::addDatabaseThread( mode, name );
    }

    virtual int cancel(  ) {
        if( bp::override func_cancel = this->get_override( "cancel" ) )
            return func_cancel(  );
        else{
            return this->osgDB::DatabasePager::cancel(  );
        }
    }
    
    int default_cancel(  ) {
        return osgDB::DatabasePager::cancel( );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgDB::DatabasePager::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgDB::DatabasePager::className( );
    }

    virtual void clear(  ) {
        if( bp::override func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            this->osgDB::DatabasePager::clear(  );
        }
    }
    
    void default_clear(  ) {
        osgDB::DatabasePager::clear( );
    }

    virtual ::osgDB::DatabasePager * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->osgDB::DatabasePager::clone(  );
        }
    }
    
    ::osgDB::DatabasePager * default_clone(  ) const  {
        return osgDB::DatabasePager::clone( );
    }

    virtual bool isRunning(  ) const  {
        if( bp::override func_isRunning = this->get_override( "isRunning" ) )
            return func_isRunning(  );
        else{
            return this->osgDB::DatabasePager::isRunning(  );
        }
    }
    
    bool default_isRunning(  ) const  {
        return osgDB::DatabasePager::isRunning( );
    }

    virtual void registerPagedLODs( ::osg::Node * subgraph, unsigned int frameNumber=0 ) {
        if( bp::override func_registerPagedLODs = this->get_override( "registerPagedLODs" ) )
            func_registerPagedLODs( boost::python::ptr(subgraph), frameNumber );
        else{
            this->osgDB::DatabasePager::registerPagedLODs( boost::python::ptr(subgraph), frameNumber );
        }
    }
    
    void default_registerPagedLODs( ::osg::Node * subgraph, unsigned int frameNumber=0 ) {
        osgDB::DatabasePager::registerPagedLODs( boost::python::ptr(subgraph), frameNumber );
    }

    virtual void requestNodeFile( ::std::string const & fileName, ::osg::NodePath & nodePath, float priority, ::osg::FrameStamp const * framestamp, ::osg::ref_ptr< osg::Referenced > & databaseRequest, ::osg::Referenced const * options ) {
        if( bp::override func_requestNodeFile = this->get_override( "requestNodeFile" ) )
            func_requestNodeFile( fileName, boost::ref(nodePath), priority, boost::python::ptr(framestamp), boost::ref(databaseRequest), boost::python::ptr(options) );
        else{
            this->osgDB::DatabasePager::requestNodeFile( fileName, boost::ref(nodePath), priority, boost::python::ptr(framestamp), boost::ref(databaseRequest), boost::python::ptr(options) );
        }
    }
    
    void default_requestNodeFile( ::std::string const & fileName, ::osg::NodePath & nodePath, float priority, ::osg::FrameStamp const * framestamp, ::osg::ref_ptr< osg::Referenced > & databaseRequest, ::osg::Referenced const * options ) {
        osgDB::DatabasePager::requestNodeFile( fileName, boost::ref(nodePath), priority, boost::python::ptr(framestamp), boost::ref(databaseRequest), boost::python::ptr(options) );
    }

    virtual void signalBeginFrame( ::osg::FrameStamp const * framestamp ) {
        if( bp::override func_signalBeginFrame = this->get_override( "signalBeginFrame" ) )
            func_signalBeginFrame( boost::python::ptr(framestamp) );
        else{
            this->osgDB::DatabasePager::signalBeginFrame( boost::python::ptr(framestamp) );
        }
    }
    
    void default_signalBeginFrame( ::osg::FrameStamp const * framestamp ) {
        osgDB::DatabasePager::signalBeginFrame( boost::python::ptr(framestamp) );
    }

    virtual void signalEndFrame(  ) {
        if( bp::override func_signalEndFrame = this->get_override( "signalEndFrame" ) )
            func_signalEndFrame(  );
        else{
            this->osgDB::DatabasePager::signalEndFrame(  );
        }
    }
    
    void default_signalEndFrame(  ) {
        osgDB::DatabasePager::signalEndFrame( );
    }

    virtual void updateSceneGraph( ::osg::FrameStamp const & frameStamp ) {
        if( bp::override func_updateSceneGraph = this->get_override( "updateSceneGraph" ) )
            func_updateSceneGraph( boost::ref(frameStamp) );
        else{
            this->osgDB::DatabasePager::updateSceneGraph( boost::ref(frameStamp) );
        }
    }
    
    void default_updateSceneGraph( ::osg::FrameStamp const & frameStamp ) {
        osgDB::DatabasePager::updateSceneGraph( boost::ref(frameStamp) );
    }

};

void register_DatabasePager_class(){

    { //::osgDB::DatabasePager
        typedef bp::class_< DatabasePager_wrapper, bp::bases< ::osg::NodeVisitor::DatabaseRequestHandler >, osg::ref_ptr< DatabasePager_wrapper >, boost::noncopyable > DatabasePager_exposer_t;
        DatabasePager_exposer_t DatabasePager_exposer = DatabasePager_exposer_t( "DatabasePager", "\n Database paging class which manages the loading of files in a background thread,\n and synchronizing of loaded models with the main scene graph.\n", bp::no_init );
        bp::scope DatabasePager_scope( DatabasePager_exposer );
        bp::enum_< osgDB::DatabasePager::DrawablePolicy>("DrawablePolicy")
            .value("DO_NOT_MODIFY_DRAWABLE_SETTINGS", osgDB::DatabasePager::DO_NOT_MODIFY_DRAWABLE_SETTINGS)
            .value("USE_DISPLAY_LISTS", osgDB::DatabasePager::USE_DISPLAY_LISTS)
            .value("USE_VERTEX_BUFFER_OBJECTS", osgDB::DatabasePager::USE_VERTEX_BUFFER_OBJECTS)
            .value("USE_VERTEX_ARRAYS", osgDB::DatabasePager::USE_VERTEX_ARRAYS)
            .export_values()
            ;
        { //::osgDB::DatabasePager::DatabaseThread
            typedef bp::class_< DatabasePager_wrapper::DatabaseThread_wrapper, bp::bases< ::osg::Referenced, ::OpenThreads::Thread >, osg::ref_ptr< DatabasePager_wrapper::DatabaseThread_wrapper >, boost::noncopyable > DatabaseThread_exposer_t;
            DatabaseThread_exposer_t DatabaseThread_exposer = DatabaseThread_exposer_t( "DatabaseThread", bp::no_init );
            bp::scope DatabaseThread_scope( DatabaseThread_exposer );
            bp::enum_< osgDB::DatabasePager::DatabaseThread::Mode>("Mode")
                .value("HANDLE_ALL_REQUESTS", osgDB::DatabasePager::DatabaseThread::HANDLE_ALL_REQUESTS)
                .value("HANDLE_NON_HTTP", osgDB::DatabasePager::DatabaseThread::HANDLE_NON_HTTP)
                .value("HANDLE_ONLY_HTTP", osgDB::DatabasePager::DatabaseThread::HANDLE_ONLY_HTTP)
                .export_values()
                ;
            DatabaseThread_exposer.def( bp::init< osgDB::DatabasePager *, osgDB::DatabasePager::DatabaseThread::Mode, std::string const & >(( bp::arg("pager"), bp::arg("mode"), bp::arg("name") )) );
            { //::osgDB::DatabasePager::DatabaseThread::cancel
            
                typedef int ( ::osgDB::DatabasePager::DatabaseThread::*cancel_function_type )(  ) ;
                typedef int ( DatabasePager_wrapper::DatabaseThread_wrapper::*default_cancel_function_type )(  ) ;
                
                DatabaseThread_exposer.def( 
                    "cancel"
                    , cancel_function_type(&::osgDB::DatabasePager::DatabaseThread::cancel)
                    , default_cancel_function_type(&DatabasePager_wrapper::DatabaseThread_wrapper::default_cancel) );
            
            }
            { //::osgDB::DatabasePager::DatabaseThread::getActive
            
                typedef bool ( ::osgDB::DatabasePager::DatabaseThread::*getActive_function_type )(  ) const;
                
                DatabaseThread_exposer.def( 
                    "getActive"
                    , getActive_function_type( &::osgDB::DatabasePager::DatabaseThread::getActive ) );
            
            }
            { //::osgDB::DatabasePager::DatabaseThread::getDone
            
                typedef bool ( ::osgDB::DatabasePager::DatabaseThread::*getDone_function_type )(  ) const;
                
                DatabaseThread_exposer.def( 
                    "getDone"
                    , getDone_function_type( &::osgDB::DatabasePager::DatabaseThread::getDone ) );
            
            }
            { //::osgDB::DatabasePager::DatabaseThread::getName
            
                typedef ::std::string const & ( ::osgDB::DatabasePager::DatabaseThread::*getName_function_type )(  ) const;
                
                DatabaseThread_exposer.def( 
                    "getName"
                    , getName_function_type( &::osgDB::DatabasePager::DatabaseThread::getName )
                    , bp::return_value_policy< bp::copy_const_reference >() );
            
            }
            { //::osgDB::DatabasePager::DatabaseThread::run
            
                typedef void ( ::osgDB::DatabasePager::DatabaseThread::*run_function_type )(  ) ;
                typedef void ( DatabasePager_wrapper::DatabaseThread_wrapper::*default_run_function_type )(  ) ;
                
                DatabaseThread_exposer.def( 
                    "run"
                    , run_function_type(&::osgDB::DatabasePager::DatabaseThread::run)
                    , default_run_function_type(&DatabasePager_wrapper::DatabaseThread_wrapper::default_run) );
            
            }
            { //::osgDB::DatabasePager::DatabaseThread::setActive
            
                typedef void ( ::osgDB::DatabasePager::DatabaseThread::*setActive_function_type )( bool ) ;
                
                DatabaseThread_exposer.def( 
                    "setActive"
                    , setActive_function_type( &::osgDB::DatabasePager::DatabaseThread::setActive )
                    , ( bp::arg("active") ) );
            
            }
            { //::osgDB::DatabasePager::DatabaseThread::setDone
            
                typedef void ( ::osgDB::DatabasePager::DatabaseThread::*setDone_function_type )( bool ) ;
                
                DatabaseThread_exposer.def( 
                    "setDone"
                    , setDone_function_type( &::osgDB::DatabasePager::DatabaseThread::setDone )
                    , ( bp::arg("done") ) );
            
            }
            { //::osgDB::DatabasePager::DatabaseThread::setName
            
                typedef void ( ::osgDB::DatabasePager::DatabaseThread::*setName_function_type )( ::std::string const & ) ;
                
                DatabaseThread_exposer.def( 
                    "setName"
                    , setName_function_type( &::osgDB::DatabasePager::DatabaseThread::setName )
                    , ( bp::arg("name") ) );
            
            }
        }
        bp::class_< DatabasePager_wrapper::PagedLODList_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< DatabasePager_wrapper::PagedLODList_wrapper >, boost::noncopyable >( "PagedLODList", bp::no_init )    
            .def( 
                "clear"
                , bp::pure_virtual( (void ( ::osgDB::DatabasePager::PagedLODList::* )(  ) )(&::osgDB::DatabasePager::PagedLODList::clear) ) )    
            .def( 
                "clone"
                , bp::pure_virtual( (::osgDB::DatabasePager::PagedLODList * ( ::osgDB::DatabasePager::PagedLODList::* )(  ) )(&::osgDB::DatabasePager::PagedLODList::clone) )
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "containsPagedLOD"
                , bp::pure_virtual( (bool ( ::osgDB::DatabasePager::PagedLODList::* )( ::osg::observer_ptr< osg::PagedLOD > const & ) const)(&::osgDB::DatabasePager::PagedLODList::containsPagedLOD) )
                , ( bp::arg("plod") ) )    
            .def( 
                "insertPagedLOD"
                , bp::pure_virtual( (void ( ::osgDB::DatabasePager::PagedLODList::* )( ::osg::observer_ptr< osg::PagedLOD > const & ) )(&::osgDB::DatabasePager::PagedLODList::insertPagedLOD) )
                , ( bp::arg("plod") ) )    
            .def( 
                "removeNodes"
                , bp::pure_virtual( (void ( ::osgDB::DatabasePager::PagedLODList::* )( ::osg::NodeList & ) )(&::osgDB::DatabasePager::PagedLODList::removeNodes) )
                , ( bp::arg("nodesToRemove") ) )    
            .def( 
                "size"
                , bp::pure_virtual( (unsigned int ( ::osgDB::DatabasePager::PagedLODList::* )(  ) )(&::osgDB::DatabasePager::PagedLODList::size) ) );
        DatabasePager_exposer.def( bp::init< >() );
        { //::osgDB::DatabasePager::addDatabaseThread
        
            typedef unsigned int ( ::osgDB::DatabasePager::*addDatabaseThread_function_type )( ::osgDB::DatabasePager::DatabaseThread::Mode,::std::string const & ) ;
            typedef unsigned int ( DatabasePager_wrapper::*default_addDatabaseThread_function_type )( ::osgDB::DatabasePager::DatabaseThread::Mode,::std::string const & ) ;
            
            DatabasePager_exposer.def( 
                "addDatabaseThread"
                , addDatabaseThread_function_type(&::osgDB::DatabasePager::addDatabaseThread)
                , default_addDatabaseThread_function_type(&DatabasePager_wrapper::default_addDatabaseThread)
                , ( bp::arg("mode"), bp::arg("name") ) );
        
        }
        { //::osgDB::DatabasePager::cancel
        
            typedef int ( ::osgDB::DatabasePager::*cancel_function_type )(  ) ;
            typedef int ( DatabasePager_wrapper::*default_cancel_function_type )(  ) ;
            
            DatabasePager_exposer.def( 
                "cancel"
                , cancel_function_type(&::osgDB::DatabasePager::cancel)
                , default_cancel_function_type(&DatabasePager_wrapper::default_cancel) );
        
        }
        { //::osgDB::DatabasePager::className
        
            typedef char const * ( ::osgDB::DatabasePager::*className_function_type )(  ) const;
            typedef char const * ( DatabasePager_wrapper::*default_className_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "className"
                , className_function_type(&::osgDB::DatabasePager::className)
                , default_className_function_type(&DatabasePager_wrapper::default_className) );
        
        }
        { //::osgDB::DatabasePager::clear
        
            typedef void ( ::osgDB::DatabasePager::*clear_function_type )(  ) ;
            typedef void ( DatabasePager_wrapper::*default_clear_function_type )(  ) ;
            
            DatabasePager_exposer.def( 
                "clear"
                , clear_function_type(&::osgDB::DatabasePager::clear)
                , default_clear_function_type(&DatabasePager_wrapper::default_clear) );
        
        }
        { //::osgDB::DatabasePager::clone
        
            typedef ::osgDB::DatabasePager * ( ::osgDB::DatabasePager::*clone_function_type )(  ) const;
            typedef ::osgDB::DatabasePager * ( DatabasePager_wrapper::*default_clone_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "clone"
                , clone_function_type(&::osgDB::DatabasePager::clone)
                , default_clone_function_type(&DatabasePager_wrapper::default_clone)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgDB::DatabasePager::create
        
            typedef ::osgDB::DatabasePager * ( *create_function_type )(  );
            
            DatabasePager_exposer.def( 
                "create"
                , create_function_type( &::osgDB::DatabasePager::create )
                , bp::return_internal_reference< >()
                , " create a DatabasePager by cloning DatabasePager::prototype()." );
        
        }
        { //::osgDB::DatabasePager::getAcceptNewDatabaseRequests
        
            typedef bool ( ::osgDB::DatabasePager::*getAcceptNewDatabaseRequests_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "getAcceptNewDatabaseRequests"
                , getAcceptNewDatabaseRequests_function_type( &::osgDB::DatabasePager::getAcceptNewDatabaseRequests )
                , " Get whether new database request calls are accepted or ignored." );
        
        }
        { //::osgDB::DatabasePager::getApplyPBOToImages
        
            typedef bool ( ::osgDB::DatabasePager::*getApplyPBOToImages_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "getApplyPBOToImages"
                , getApplyPBOToImages_function_type( &::osgDB::DatabasePager::getApplyPBOToImages )
                , " Get whether newly loaded textures should have a PixelBufferObject assigned to them.." );
        
        }
        { //::osgDB::DatabasePager::getAverageTimeToMergeTiles
        
            typedef double ( ::osgDB::DatabasePager::*getAverageTimeToMergeTiles_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "getAverageTimeToMergeTiles"
                , getAverageTimeToMergeTiles_function_type( &::osgDB::DatabasePager::getAverageTimeToMergeTiles )
                , " Get the average time between the first request for a tile to be loaded and the time of its merge into the main scene graph." );
        
        }
        { //::osgDB::DatabasePager::getDataToCompileListSize
        
            typedef unsigned int ( ::osgDB::DatabasePager::*getDataToCompileListSize_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "getDataToCompileListSize"
                , getDataToCompileListSize_function_type( &::osgDB::DatabasePager::getDataToCompileListSize )
                , " Report how many items are in the _dataToCompileList queue" );
        
        }
        { //::osgDB::DatabasePager::getDataToMergeListSize
        
            typedef unsigned int ( ::osgDB::DatabasePager::*getDataToMergeListSize_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "getDataToMergeListSize"
                , getDataToMergeListSize_function_type( &::osgDB::DatabasePager::getDataToMergeListSize )
                , " Report how many items are in the _dataToMergeList queue" );
        
        }
        { //::osgDB::DatabasePager::getDatabasePagerThreadPause
        
            typedef bool ( ::osgDB::DatabasePager::*getDatabasePagerThreadPause_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "getDatabasePagerThreadPause"
                , getDatabasePagerThreadPause_function_type( &::osgDB::DatabasePager::getDatabasePagerThreadPause )
                , " Get whether the database pager thread should is paused or not." );
        
        }
        { //::osgDB::DatabasePager::getDatabaseThread
        
            typedef ::osgDB::DatabasePager::DatabaseThread * ( ::osgDB::DatabasePager::*getDatabaseThread_function_type )( unsigned int ) ;
            
            DatabasePager_exposer.def( 
                "getDatabaseThread"
                , getDatabaseThread_function_type( &::osgDB::DatabasePager::getDatabaseThread )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::DatabasePager::getDatabaseThread
        
            typedef ::osgDB::DatabasePager::DatabaseThread const * ( ::osgDB::DatabasePager::*getDatabaseThread_function_type )( unsigned int ) const;
            
            DatabasePager_exposer.def( 
                "getDatabaseThread"
                , getDatabaseThread_function_type( &::osgDB::DatabasePager::getDatabaseThread )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::DatabasePager::getDeleteRemovedSubgraphsInDatabaseThread
        
            typedef bool ( ::osgDB::DatabasePager::*getDeleteRemovedSubgraphsInDatabaseThread_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "getDeleteRemovedSubgraphsInDatabaseThread"
                , getDeleteRemovedSubgraphsInDatabaseThread_function_type( &::osgDB::DatabasePager::getDeleteRemovedSubgraphsInDatabaseThread )
                , " Get whether the removed subgraphs should be deleted in the database thread or not." );
        
        }
        { //::osgDB::DatabasePager::getDoPreCompile
        
            typedef bool ( ::osgDB::DatabasePager::*getDoPreCompile_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "getDoPreCompile"
                , getDoPreCompile_function_type( &::osgDB::DatabasePager::getDoPreCompile )
                , " Get whether the database pager should pre compile OpenGL objects before allowing\n them to be merged into the scene graph." );
        
        }
        { //::osgDB::DatabasePager::getDrawablePolicy
        
            typedef ::osgDB::DatabasePager::DrawablePolicy ( ::osgDB::DatabasePager::*getDrawablePolicy_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "getDrawablePolicy"
                , getDrawablePolicy_function_type( &::osgDB::DatabasePager::getDrawablePolicy )
                , " Get how loaded drawables should be handled w.r.t their display list/vertex buffer object/vertex array settings." );
        
        }
        { //::osgDB::DatabasePager::getFileRequestListSize
        
            typedef unsigned int ( ::osgDB::DatabasePager::*getFileRequestListSize_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "getFileRequestListSize"
                , getFileRequestListSize_function_type( &::osgDB::DatabasePager::getFileRequestListSize )
                , " Report how many items are in the _fileRequestList queue" );
        
        }
        { //::osgDB::DatabasePager::getIncrementalCompileOperation
        
            typedef ::osgUtil::IncrementalCompileOperation * ( ::osgDB::DatabasePager::*getIncrementalCompileOperation_function_type )(  ) ;
            
            DatabasePager_exposer.def( 
                "getIncrementalCompileOperation"
                , getIncrementalCompileOperation_function_type( &::osgDB::DatabasePager::getIncrementalCompileOperation )
                , bp::return_internal_reference< >()
                , " Get the incremental compile operation." );
        
        }
        { //::osgDB::DatabasePager::getMaxAnisotropyPolicy
        
            typedef void ( ::osgDB::DatabasePager::*getMaxAnisotropyPolicy_function_type )( bool &,float & ) const;
            
            DatabasePager_exposer.def( 
                "getMaxAnisotropyPolicy"
                , getMaxAnisotropyPolicy_function_type( &::osgDB::DatabasePager::getMaxAnisotropyPolicy )
                , ( bp::arg("changeAnisotropy"), bp::arg("valueAnisotropy") )
                , " Set whether newly loaded textures should have their MaxAnisotopy set to a specified value." );
        
        }
        { //::osgDB::DatabasePager::getMaximumTimeToMergeTile
        
            typedef double ( ::osgDB::DatabasePager::*getMaximumTimeToMergeTile_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "getMaximumTimeToMergeTile"
                , getMaximumTimeToMergeTile_function_type( &::osgDB::DatabasePager::getMaximumTimeToMergeTile )
                , " Get the maximum time between the first request for a tile to be loaded and the time of its merge into the main scene graph." );
        
        }
        { //::osgDB::DatabasePager::getMinimumTimeToMergeTile
        
            typedef double ( ::osgDB::DatabasePager::*getMinimumTimeToMergeTile_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "getMinimumTimeToMergeTile"
                , getMinimumTimeToMergeTile_function_type( &::osgDB::DatabasePager::getMinimumTimeToMergeTile )
                , " Get the minimum time between the first request for a tile to be loaded and the time of its merge into the main scene graph." );
        
        }
        { //::osgDB::DatabasePager::getNumDatabaseThreads
        
            typedef unsigned int ( ::osgDB::DatabasePager::*getNumDatabaseThreads_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "getNumDatabaseThreads"
                , getNumDatabaseThreads_function_type( &::osgDB::DatabasePager::getNumDatabaseThreads ) );
        
        }
        { //::osgDB::DatabasePager::getNumFramesActive
        
            typedef int ( ::osgDB::DatabasePager::*getNumFramesActive_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "getNumFramesActive"
                , getNumFramesActive_function_type( &::osgDB::DatabasePager::getNumFramesActive )
                , " Get the number of frames that are currently active." );
        
        }
        { //::osgDB::DatabasePager::getRequestsInProgress
        
            typedef bool ( ::osgDB::DatabasePager::*getRequestsInProgress_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "getRequestsInProgress"
                , getRequestsInProgress_function_type( &::osgDB::DatabasePager::getRequestsInProgress )
                , " Report whether any requests are in the pager." );
        
        }
        { //::osgDB::DatabasePager::getTargetMaximumNumberOfPageLOD
        
            typedef unsigned int ( ::osgDB::DatabasePager::*getTargetMaximumNumberOfPageLOD_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "getTargetMaximumNumberOfPageLOD"
                , getTargetMaximumNumberOfPageLOD_function_type( &::osgDB::DatabasePager::getTargetMaximumNumberOfPageLOD )
                , " Get the target maximum number of PagedLOD to maintain in memory." );
        
        }
        { //::osgDB::DatabasePager::getUnrefImageDataAfterApplyPolicy
        
            typedef void ( ::osgDB::DatabasePager::*getUnrefImageDataAfterApplyPolicy_function_type )( bool &,bool & ) const;
            
            DatabasePager_exposer.def( 
                "getUnrefImageDataAfterApplyPolicy"
                , getUnrefImageDataAfterApplyPolicy_function_type( &::osgDB::DatabasePager::getUnrefImageDataAfterApplyPolicy )
                , ( bp::arg("changeAutoUnRef"), bp::arg("valueAutoUnRef") )
                , " Get whether newly loaded textures should have their UnrefImageDataAfterApply set to a specified value." );
        
        }
        { //::osgDB::DatabasePager::isRunning
        
            typedef bool ( ::osgDB::DatabasePager::*isRunning_function_type )(  ) const;
            typedef bool ( DatabasePager_wrapper::*default_isRunning_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "isRunning"
                , isRunning_function_type(&::osgDB::DatabasePager::isRunning)
                , default_isRunning_function_type(&DatabasePager_wrapper::default_isRunning) );
        
        }
        { //::osgDB::DatabasePager::prototype
        
            typedef ::osg::ref_ptr< osgDB::DatabasePager > & ( *prototype_function_type )(  );
            
            DatabasePager_exposer.def( 
                "prototype"
                , prototype_function_type( &::osgDB::DatabasePager::prototype )
                , bp::return_internal_reference< >()
                , " get the prototype singleton used by DatabasePager::create()." );
        
        }
        { //::osgDB::DatabasePager::registerPagedLODs
        
            typedef void ( ::osgDB::DatabasePager::*registerPagedLODs_function_type )( ::osg::Node *,unsigned int ) ;
            typedef void ( DatabasePager_wrapper::*default_registerPagedLODs_function_type )( ::osg::Node *,unsigned int ) ;
            
            DatabasePager_exposer.def( 
                "registerPagedLODs"
                , registerPagedLODs_function_type(&::osgDB::DatabasePager::registerPagedLODs)
                , default_registerPagedLODs_function_type(&DatabasePager_wrapper::default_registerPagedLODs)
                , ( bp::arg("subgraph"), bp::arg("frameNumber")=(unsigned int)(0) ) );
        
        }
        { //::osgDB::DatabasePager::requestNodeFile
        
            typedef void ( ::osgDB::DatabasePager::*requestNodeFile_function_type )( ::std::string const &,::osg::NodePath &,float,::osg::FrameStamp const *,::osg::ref_ptr< osg::Referenced > &,::osg::Referenced const * ) ;
            typedef void ( DatabasePager_wrapper::*default_requestNodeFile_function_type )( ::std::string const &,::osg::NodePath &,float,::osg::FrameStamp const *,::osg::ref_ptr< osg::Referenced > &,::osg::Referenced const * ) ;
            
            DatabasePager_exposer.def( 
                "requestNodeFile"
                , requestNodeFile_function_type(&::osgDB::DatabasePager::requestNodeFile)
                , default_requestNodeFile_function_type(&DatabasePager_wrapper::default_requestNodeFile)
                , ( bp::arg("fileName"), bp::arg("nodePath"), bp::arg("priority"), bp::arg("framestamp"), bp::arg("databaseRequest"), bp::arg("options") ) );
        
        }
        { //::osgDB::DatabasePager::requiresUpdateSceneGraph
        
            typedef bool ( ::osgDB::DatabasePager::*requiresUpdateSceneGraph_function_type )(  ) const;
            
            DatabasePager_exposer.def( 
                "requiresUpdateSceneGraph"
                , requiresUpdateSceneGraph_function_type( &::osgDB::DatabasePager::requiresUpdateSceneGraph )
                , " Return true if there are pending updates to the scene graph that require a call to updateSceneGraph(double)." );
        
        }
        { //::osgDB::DatabasePager::resetStats
        
            typedef void ( ::osgDB::DatabasePager::*resetStats_function_type )(  ) ;
            
            DatabasePager_exposer.def( 
                "resetStats"
                , resetStats_function_type( &::osgDB::DatabasePager::resetStats )
                , " Reset the Stats variables." );
        
        }
        { //::osgDB::DatabasePager::setAcceptNewDatabaseRequests
        
            typedef void ( ::osgDB::DatabasePager::*setAcceptNewDatabaseRequests_function_type )( bool ) ;
            
            DatabasePager_exposer.def( 
                "setAcceptNewDatabaseRequests"
                , setAcceptNewDatabaseRequests_function_type( &::osgDB::DatabasePager::setAcceptNewDatabaseRequests )
                , ( bp::arg("acceptNewRequests") )
                , " Set whether new database request calls are accepted or ignored." );
        
        }
        { //::osgDB::DatabasePager::setApplyPBOToImages
        
            typedef void ( ::osgDB::DatabasePager::*setApplyPBOToImages_function_type )( bool ) ;
            
            DatabasePager_exposer.def( 
                "setApplyPBOToImages"
                , setApplyPBOToImages_function_type( &::osgDB::DatabasePager::setApplyPBOToImages )
                , ( bp::arg("assignPBOToImages") )
                , " Set whether newly loaded textures should have a PixelBufferObject assigned to them to aid download to the GPU." );
        
        }
        { //::osgDB::DatabasePager::setDatabasePagerThreadPause
        
            typedef void ( ::osgDB::DatabasePager::*setDatabasePagerThreadPause_function_type )( bool ) ;
            
            DatabasePager_exposer.def( 
                "setDatabasePagerThreadPause"
                , setDatabasePagerThreadPause_function_type( &::osgDB::DatabasePager::setDatabasePagerThreadPause )
                , ( bp::arg("pause") )
                , " Set whether the database pager thread should be paused or not." );
        
        }
        { //::osgDB::DatabasePager::setDeleteRemovedSubgraphsInDatabaseThread
        
            typedef void ( ::osgDB::DatabasePager::*setDeleteRemovedSubgraphsInDatabaseThread_function_type )( bool ) ;
            
            DatabasePager_exposer.def( 
                "setDeleteRemovedSubgraphsInDatabaseThread"
                , setDeleteRemovedSubgraphsInDatabaseThread_function_type( &::osgDB::DatabasePager::setDeleteRemovedSubgraphsInDatabaseThread )
                , ( bp::arg("flag") )
                , " Set whether the removed subgraphs should be deleted in the database thread or not." );
        
        }
        { //::osgDB::DatabasePager::setDoPreCompile
        
            typedef void ( ::osgDB::DatabasePager::*setDoPreCompile_function_type )( bool ) ;
            
            DatabasePager_exposer.def( 
                "setDoPreCompile"
                , setDoPreCompile_function_type( &::osgDB::DatabasePager::setDoPreCompile )
                , ( bp::arg("flag") )
                , " Set whether the database pager should pre compile OpenGL objects before allowing\n them to be merged into the scene graph.\n Pre compilation helps reduce the chances of frame drops, but also slows the\n speed at which tiles are merged as they have to be compiled first." );
        
        }
        { //::osgDB::DatabasePager::setDrawablePolicy
        
            typedef void ( ::osgDB::DatabasePager::*setDrawablePolicy_function_type )( ::osgDB::DatabasePager::DrawablePolicy ) ;
            
            DatabasePager_exposer.def( 
                "setDrawablePolicy"
                , setDrawablePolicy_function_type( &::osgDB::DatabasePager::setDrawablePolicy )
                , ( bp::arg("policy") )
                , " Set how loaded drawables should be handled w.r.t their display list/vertex buffer object/vertex array settings." );
        
        }
        { //::osgDB::DatabasePager::setIncrementalCompileOperation
        
            typedef void ( ::osgDB::DatabasePager::*setIncrementalCompileOperation_function_type )( ::osgUtil::IncrementalCompileOperation * ) ;
            
            DatabasePager_exposer.def( 
                "setIncrementalCompileOperation"
                , setIncrementalCompileOperation_function_type( &::osgDB::DatabasePager::setIncrementalCompileOperation )
                , ( bp::arg("ico") )
                , " Set the incremental compile operation.\n Used to manage the OpenGL object compilation and merging of subgraphs in a way that avoids overloading\n the rendering of frame with too many new objects in one frame." );
        
        }
        { //::osgDB::DatabasePager::setMaxAnisotropyPolicy
        
            typedef void ( ::osgDB::DatabasePager::*setMaxAnisotropyPolicy_function_type )( bool,float ) ;
            
            DatabasePager_exposer.def( 
                "setMaxAnisotropyPolicy"
                , setMaxAnisotropyPolicy_function_type( &::osgDB::DatabasePager::setMaxAnisotropyPolicy )
                , ( bp::arg("changeAnisotropy"), bp::arg("valueAnisotropy") )
                , " Set whether newly loaded textures should have their MaxAnisotopy set to a specified value." );
        
        }
        { //::osgDB::DatabasePager::setSchedulePriority
        
            typedef int ( ::osgDB::DatabasePager::*setSchedulePriority_function_type )( ::OpenThreads::Thread::ThreadPriority ) ;
            
            DatabasePager_exposer.def( 
                "setSchedulePriority"
                , setSchedulePriority_function_type( &::osgDB::DatabasePager::setSchedulePriority )
                , ( bp::arg("priority") )
                , " Set the priority of the database pager thread(s)." );
        
        }
        { //::osgDB::DatabasePager::setTargetMaximumNumberOfPageLOD
        
            typedef void ( ::osgDB::DatabasePager::*setTargetMaximumNumberOfPageLOD_function_type )( unsigned int ) ;
            
            DatabasePager_exposer.def( 
                "setTargetMaximumNumberOfPageLOD"
                , setTargetMaximumNumberOfPageLOD_function_type( &::osgDB::DatabasePager::setTargetMaximumNumberOfPageLOD )
                , ( bp::arg("target") )
                , " Set the target maximum number of PagedLOD to maintain in memory.\n Note, if more than the target number are required for rendering of a frame then these active PagedLOD are excempt from being expiried.\n But once the number of active drops back below the target the inactive PagedLOD will be trimmed back to the target number." );
        
        }
        { //::osgDB::DatabasePager::setUnrefImageDataAfterApplyPolicy
        
            typedef void ( ::osgDB::DatabasePager::*setUnrefImageDataAfterApplyPolicy_function_type )( bool,bool ) ;
            
            DatabasePager_exposer.def( 
                "setUnrefImageDataAfterApplyPolicy"
                , setUnrefImageDataAfterApplyPolicy_function_type( &::osgDB::DatabasePager::setUnrefImageDataAfterApplyPolicy )
                , ( bp::arg("changeAutoUnRef"), bp::arg("valueAutoUnRef") )
                , " Set whether newly loaded textures should have their UnrefImageDataAfterApply set to a specified value." );
        
        }
        { //::osgDB::DatabasePager::setUpThreads
        
            typedef void ( ::osgDB::DatabasePager::*setUpThreads_function_type )( unsigned int,unsigned int ) ;
            
            DatabasePager_exposer.def( 
                "setUpThreads"
                , setUpThreads_function_type( &::osgDB::DatabasePager::setUpThreads )
                , ( bp::arg("totalNumThreads")=(unsigned int)(2), bp::arg("numHttpThreads")=(unsigned int)(1) ) );
        
        }
        { //::osgDB::DatabasePager::signalBeginFrame
        
            typedef void ( ::osgDB::DatabasePager::*signalBeginFrame_function_type )( ::osg::FrameStamp const * ) ;
            typedef void ( DatabasePager_wrapper::*default_signalBeginFrame_function_type )( ::osg::FrameStamp const * ) ;
            
            DatabasePager_exposer.def( 
                "signalBeginFrame"
                , signalBeginFrame_function_type(&::osgDB::DatabasePager::signalBeginFrame)
                , default_signalBeginFrame_function_type(&DatabasePager_wrapper::default_signalBeginFrame)
                , ( bp::arg("framestamp") ) );
        
        }
        { //::osgDB::DatabasePager::signalEndFrame
        
            typedef void ( ::osgDB::DatabasePager::*signalEndFrame_function_type )(  ) ;
            typedef void ( DatabasePager_wrapper::*default_signalEndFrame_function_type )(  ) ;
            
            DatabasePager_exposer.def( 
                "signalEndFrame"
                , signalEndFrame_function_type(&::osgDB::DatabasePager::signalEndFrame)
                , default_signalEndFrame_function_type(&DatabasePager_wrapper::default_signalEndFrame) );
        
        }
        { //::osgDB::DatabasePager::updateSceneGraph
        
            typedef void ( ::osgDB::DatabasePager::*updateSceneGraph_function_type )( ::osg::FrameStamp const & ) ;
            typedef void ( DatabasePager_wrapper::*default_updateSceneGraph_function_type )( ::osg::FrameStamp const & ) ;
            
            DatabasePager_exposer.def( 
                "updateSceneGraph"
                , updateSceneGraph_function_type(&::osgDB::DatabasePager::updateSceneGraph)
                , default_updateSceneGraph_function_type(&DatabasePager_wrapper::default_updateSceneGraph)
                , ( bp::arg("frameStamp") ) );
        
        }
        DatabasePager_exposer.staticmethod( "create" );
        DatabasePager_exposer.staticmethod( "prototype" );
    }

}
