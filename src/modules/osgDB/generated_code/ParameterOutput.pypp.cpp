// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgDB.h"
#include "ParameterOutput.pypp.hpp"

namespace bp = boost::python;

void register_ParameterOutput_class(){

    { //::osgDB::ParameterOutput
        typedef bp::class_< osgDB::ParameterOutput, boost::noncopyable > ParameterOutput_exposer_t;
        ParameterOutput_exposer_t ParameterOutput_exposer = ParameterOutput_exposer_t( "ParameterOutput", bp::init< osgDB::Output & >(( bp::arg("fw") )) );
        bp::scope ParameterOutput_scope( ParameterOutput_exposer );
        bp::implicitly_convertible< osgDB::Output &, osgDB::ParameterOutput >();
        ParameterOutput_exposer.def( bp::init< osgDB::Output &, int >(( bp::arg("fw"), bp::arg("numItemsPerLine") )) );
        { //::osgDB::ParameterOutput::begin
        
            typedef void ( ::osgDB::ParameterOutput::*begin_function_type )(  ) ;
            
            ParameterOutput_exposer.def( 
                "begin"
                , begin_function_type( &::osgDB::ParameterOutput::begin ) );
        
        }
        { //::osgDB::ParameterOutput::end
        
            typedef void ( ::osgDB::ParameterOutput::*end_function_type )(  ) ;
            
            ParameterOutput_exposer.def( 
                "end"
                , end_function_type( &::osgDB::ParameterOutput::end ) );
        
        }
        { //::osgDB::ParameterOutput::newLine
        
            typedef void ( ::osgDB::ParameterOutput::*newLine_function_type )(  ) ;
            
            ParameterOutput_exposer.def( 
                "newLine"
                , newLine_function_type( &::osgDB::ParameterOutput::newLine ) );
        
        }
        { //::osgDB::ParameterOutput::write
        
            typedef void ( ::osgDB::ParameterOutput::*write_function_type )( int const & ) ;
            
            ParameterOutput_exposer.def( 
                "write"
                , write_function_type( &::osgDB::ParameterOutput::write )
                , ( bp::arg("t") ) );
        
        }
    }

}
