// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgDB.h"
#include "wrap_referenced.h"
#include "ImagePager.pypp.hpp"

namespace bp = boost::python;

struct ImagePager_wrapper : osgDB::ImagePager, bp::wrapper< osgDB::ImagePager > {

    struct ImageThread_wrapper : osgDB::ImagePager::ImageThread, bp::wrapper< osgDB::ImagePager::ImageThread > {
    
        ImageThread_wrapper(::osgDB::ImagePager * pager, ::osgDB::ImagePager::ImageThread::Mode mode, ::std::string const & name )
        : osgDB::ImagePager::ImageThread( boost::python::ptr(pager), mode, name )
          , bp::wrapper< osgDB::ImagePager::ImageThread >(){
            // constructor
        
        }
    
        virtual int cancel(  ) {
            if( bp::override func_cancel = this->get_override( "cancel" ) )
                return func_cancel(  );
            else{
                return this->osgDB::ImagePager::ImageThread::cancel(  );
            }
        }
        
        int default_cancel(  ) {
            return osgDB::ImagePager::ImageThread::cancel( );
        }
    
        virtual void run(  ) {
            if( bp::override func_run = this->get_override( "run" ) )
                func_run(  );
            else{
                this->osgDB::ImagePager::ImageThread::run(  );
            }
        }
        
        void default_run(  ) {
            osgDB::ImagePager::ImageThread::run( );
        }
    
        virtual void cancelCleanup(  ) {
            if( bp::override func_cancelCleanup = this->get_override( "cancelCleanup" ) )
                func_cancelCleanup(  );
            else{
                this->OpenThreads::Thread::cancelCleanup(  );
            }
        }
        
        void default_cancelCleanup(  ) {
            OpenThreads::Thread::cancelCleanup( );
        }
    
    };

    ImagePager_wrapper( )
    : osgDB::ImagePager( )
      , bp::wrapper< osgDB::ImagePager >(){
        // null constructor
    
    }

    virtual double getPreLoadTime(  ) const  {
        if( bp::override func_getPreLoadTime = this->get_override( "getPreLoadTime" ) )
            return func_getPreLoadTime(  );
        else{
            return this->osgDB::ImagePager::getPreLoadTime(  );
        }
    }
    
    double default_getPreLoadTime(  ) const  {
        return osgDB::ImagePager::getPreLoadTime( );
    }

    virtual ::osg::Image * readImageFile( ::std::string const & fileName, ::osg::Referenced const * options=0 ) {
        if( bp::override func_readImageFile = this->get_override( "readImageFile" ) )
            return func_readImageFile( fileName, boost::python::ptr(options) );
        else{
            return this->osgDB::ImagePager::readImageFile( fileName, boost::python::ptr(options) );
        }
    }
    
    ::osg::Image * default_readImageFile( ::std::string const & fileName, ::osg::Referenced const * options=0 ) {
        return osgDB::ImagePager::readImageFile( fileName, boost::python::ptr(options) );
    }

    virtual void requestImageFile( ::std::string const & fileName, ::osg::Object * attachmentPoint, int attachmentIndex, double timeToMergeBy, ::osg::FrameStamp const * framestamp, ::osg::ref_ptr< osg::Referenced > & imageRequest, ::osg::Referenced const * options ) {
        if( bp::override func_requestImageFile = this->get_override( "requestImageFile" ) )
            func_requestImageFile( fileName, boost::python::ptr(attachmentPoint), attachmentIndex, timeToMergeBy, boost::python::ptr(framestamp), boost::ref(imageRequest), boost::python::ptr(options) );
        else{
            this->osgDB::ImagePager::requestImageFile( fileName, boost::python::ptr(attachmentPoint), attachmentIndex, timeToMergeBy, boost::python::ptr(framestamp), boost::ref(imageRequest), boost::python::ptr(options) );
        }
    }
    
    void default_requestImageFile( ::std::string const & fileName, ::osg::Object * attachmentPoint, int attachmentIndex, double timeToMergeBy, ::osg::FrameStamp const * framestamp, ::osg::ref_ptr< osg::Referenced > & imageRequest, ::osg::Referenced const * options ) {
        osgDB::ImagePager::requestImageFile( fileName, boost::python::ptr(attachmentPoint), attachmentIndex, timeToMergeBy, boost::python::ptr(framestamp), boost::ref(imageRequest), boost::python::ptr(options) );
    }

    virtual bool requiresUpdateSceneGraph(  ) const  {
        if( bp::override func_requiresUpdateSceneGraph = this->get_override( "requiresUpdateSceneGraph" ) )
            return func_requiresUpdateSceneGraph(  );
        else{
            return this->osgDB::ImagePager::requiresUpdateSceneGraph(  );
        }
    }
    
    bool default_requiresUpdateSceneGraph(  ) const  {
        return osgDB::ImagePager::requiresUpdateSceneGraph( );
    }

    virtual void signalBeginFrame( ::osg::FrameStamp const * framestamp ) {
        if( bp::override func_signalBeginFrame = this->get_override( "signalBeginFrame" ) )
            func_signalBeginFrame( boost::python::ptr(framestamp) );
        else{
            this->osgDB::ImagePager::signalBeginFrame( boost::python::ptr(framestamp) );
        }
    }
    
    void default_signalBeginFrame( ::osg::FrameStamp const * framestamp ) {
        osgDB::ImagePager::signalBeginFrame( boost::python::ptr(framestamp) );
    }

    virtual void signalEndFrame(  ) {
        if( bp::override func_signalEndFrame = this->get_override( "signalEndFrame" ) )
            func_signalEndFrame(  );
        else{
            this->osgDB::ImagePager::signalEndFrame(  );
        }
    }
    
    void default_signalEndFrame(  ) {
        osgDB::ImagePager::signalEndFrame( );
    }

    virtual void updateSceneGraph( ::osg::FrameStamp const & frameStamp ) {
        if( bp::override func_updateSceneGraph = this->get_override( "updateSceneGraph" ) )
            func_updateSceneGraph( boost::ref(frameStamp) );
        else{
            this->osgDB::ImagePager::updateSceneGraph( boost::ref(frameStamp) );
        }
    }
    
    void default_updateSceneGraph( ::osg::FrameStamp const & frameStamp ) {
        osgDB::ImagePager::updateSceneGraph( boost::ref(frameStamp) );
    }

};

void register_ImagePager_class(){

    { //::osgDB::ImagePager
        typedef bp::class_< ImagePager_wrapper, bp::bases< ::osg::NodeVisitor::ImageRequestHandler >, osg::ref_ptr< ImagePager_wrapper >, boost::noncopyable > ImagePager_exposer_t;
        ImagePager_exposer_t ImagePager_exposer = ImagePager_exposer_t( "ImagePager", bp::no_init );
        bp::scope ImagePager_scope( ImagePager_exposer );
        { //::osgDB::ImagePager::ImageThread
            typedef bp::class_< ImagePager_wrapper::ImageThread_wrapper, bp::bases< ::osg::Referenced, ::OpenThreads::Thread >, osg::ref_ptr< ImagePager_wrapper::ImageThread_wrapper >, boost::noncopyable > ImageThread_exposer_t;
            ImageThread_exposer_t ImageThread_exposer = ImageThread_exposer_t( "ImageThread", bp::no_init );
            bp::scope ImageThread_scope( ImageThread_exposer );
            bp::enum_< osgDB::ImagePager::ImageThread::Mode>("Mode")
                .value("HANDLE_ALL_REQUESTS", osgDB::ImagePager::ImageThread::HANDLE_ALL_REQUESTS)
                .value("HANDLE_NON_HTTP", osgDB::ImagePager::ImageThread::HANDLE_NON_HTTP)
                .value("HANDLE_ONLY_HTTP", osgDB::ImagePager::ImageThread::HANDLE_ONLY_HTTP)
                .export_values()
                ;
            ImageThread_exposer.def( bp::init< osgDB::ImagePager *, osgDB::ImagePager::ImageThread::Mode, std::string const & >(( bp::arg("pager"), bp::arg("mode"), bp::arg("name") )) );
            { //::osgDB::ImagePager::ImageThread::cancel
            
                typedef int ( ::osgDB::ImagePager::ImageThread::*cancel_function_type )(  ) ;
                typedef int ( ImagePager_wrapper::ImageThread_wrapper::*default_cancel_function_type )(  ) ;
                
                ImageThread_exposer.def( 
                    "cancel"
                    , cancel_function_type(&::osgDB::ImagePager::ImageThread::cancel)
                    , default_cancel_function_type(&ImagePager_wrapper::ImageThread_wrapper::default_cancel) );
            
            }
            { //::osgDB::ImagePager::ImageThread::getDone
            
                typedef bool ( ::osgDB::ImagePager::ImageThread::*getDone_function_type )(  ) const;
                
                ImageThread_exposer.def( 
                    "getDone"
                    , getDone_function_type( &::osgDB::ImagePager::ImageThread::getDone ) );
            
            }
            { //::osgDB::ImagePager::ImageThread::run
            
                typedef void ( ::osgDB::ImagePager::ImageThread::*run_function_type )(  ) ;
                typedef void ( ImagePager_wrapper::ImageThread_wrapper::*default_run_function_type )(  ) ;
                
                ImageThread_exposer.def( 
                    "run"
                    , run_function_type(&::osgDB::ImagePager::ImageThread::run)
                    , default_run_function_type(&ImagePager_wrapper::ImageThread_wrapper::default_run) );
            
            }
            { //::osgDB::ImagePager::ImageThread::setDone
            
                typedef void ( ::osgDB::ImagePager::ImageThread::*setDone_function_type )( bool ) ;
                
                ImageThread_exposer.def( 
                    "setDone"
                    , setDone_function_type( &::osgDB::ImagePager::ImageThread::setDone )
                    , ( bp::arg("done") ) );
            
            }
        }
        ImagePager_exposer.def( bp::init< >() );
        { //::osgDB::ImagePager::cancel
        
            typedef int ( ::osgDB::ImagePager::*cancel_function_type )(  ) ;
            
            ImagePager_exposer.def( 
                "cancel"
                , cancel_function_type( &::osgDB::ImagePager::cancel ) );
        
        }
        { //::osgDB::ImagePager::getImageThread
        
            typedef ::osgDB::ImagePager::ImageThread * ( ::osgDB::ImagePager::*getImageThread_function_type )( unsigned int ) ;
            
            ImagePager_exposer.def( 
                "getImageThread"
                , getImageThread_function_type( &::osgDB::ImagePager::getImageThread )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::ImagePager::getImageThread
        
            typedef ::osgDB::ImagePager::ImageThread const * ( ::osgDB::ImagePager::*getImageThread_function_type )( unsigned int ) const;
            
            ImagePager_exposer.def( 
                "getImageThread"
                , getImageThread_function_type( &::osgDB::ImagePager::getImageThread )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::ImagePager::getNumImageThreads
        
            typedef unsigned int ( ::osgDB::ImagePager::*getNumImageThreads_function_type )(  ) const;
            
            ImagePager_exposer.def( 
                "getNumImageThreads"
                , getNumImageThreads_function_type( &::osgDB::ImagePager::getNumImageThreads ) );
        
        }
        { //::osgDB::ImagePager::getPreLoadTime
        
            typedef double ( ::osgDB::ImagePager::*getPreLoadTime_function_type )(  ) const;
            typedef double ( ImagePager_wrapper::*default_getPreLoadTime_function_type )(  ) const;
            
            ImagePager_exposer.def( 
                "getPreLoadTime"
                , getPreLoadTime_function_type(&::osgDB::ImagePager::getPreLoadTime)
                , default_getPreLoadTime_function_type(&ImagePager_wrapper::default_getPreLoadTime) );
        
        }
        { //::osgDB::ImagePager::readImageFile
        
            typedef ::osg::Image * ( ::osgDB::ImagePager::*readImageFile_function_type )( ::std::string const &,::osg::Referenced const * ) ;
            typedef ::osg::Image * ( ImagePager_wrapper::*default_readImageFile_function_type )( ::std::string const &,::osg::Referenced const * ) ;
            
            ImagePager_exposer.def( 
                "readImageFile"
                , readImageFile_function_type(&::osgDB::ImagePager::readImageFile)
                , default_readImageFile_function_type(&ImagePager_wrapper::default_readImageFile)
                , ( bp::arg("fileName"), bp::arg("options")=bp::object() )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::ImagePager::requestImageFile
        
            typedef void ( ::osgDB::ImagePager::*requestImageFile_function_type )( ::std::string const &,::osg::Object *,int,double,::osg::FrameStamp const *,::osg::ref_ptr< osg::Referenced > &,::osg::Referenced const * ) ;
            typedef void ( ImagePager_wrapper::*default_requestImageFile_function_type )( ::std::string const &,::osg::Object *,int,double,::osg::FrameStamp const *,::osg::ref_ptr< osg::Referenced > &,::osg::Referenced const * ) ;
            
            ImagePager_exposer.def( 
                "requestImageFile"
                , requestImageFile_function_type(&::osgDB::ImagePager::requestImageFile)
                , default_requestImageFile_function_type(&ImagePager_wrapper::default_requestImageFile)
                , ( bp::arg("fileName"), bp::arg("attachmentPoint"), bp::arg("attachmentIndex"), bp::arg("timeToMergeBy"), bp::arg("framestamp"), bp::arg("imageRequest"), bp::arg("options") ) );
        
        }
        { //::osgDB::ImagePager::requiresUpdateSceneGraph
        
            typedef bool ( ::osgDB::ImagePager::*requiresUpdateSceneGraph_function_type )(  ) const;
            typedef bool ( ImagePager_wrapper::*default_requiresUpdateSceneGraph_function_type )(  ) const;
            
            ImagePager_exposer.def( 
                "requiresUpdateSceneGraph"
                , requiresUpdateSceneGraph_function_type(&::osgDB::ImagePager::requiresUpdateSceneGraph)
                , default_requiresUpdateSceneGraph_function_type(&ImagePager_wrapper::default_requiresUpdateSceneGraph) );
        
        }
        { //::osgDB::ImagePager::setPreLoadTime
        
            typedef void ( ::osgDB::ImagePager::*setPreLoadTime_function_type )( double ) ;
            
            ImagePager_exposer.def( 
                "setPreLoadTime"
                , setPreLoadTime_function_type( &::osgDB::ImagePager::setPreLoadTime )
                , ( bp::arg("preLoadTime") ) );
        
        }
        { //::osgDB::ImagePager::signalBeginFrame
        
            typedef void ( ::osgDB::ImagePager::*signalBeginFrame_function_type )( ::osg::FrameStamp const * ) ;
            typedef void ( ImagePager_wrapper::*default_signalBeginFrame_function_type )( ::osg::FrameStamp const * ) ;
            
            ImagePager_exposer.def( 
                "signalBeginFrame"
                , signalBeginFrame_function_type(&::osgDB::ImagePager::signalBeginFrame)
                , default_signalBeginFrame_function_type(&ImagePager_wrapper::default_signalBeginFrame)
                , ( bp::arg("framestamp") ) );
        
        }
        { //::osgDB::ImagePager::signalEndFrame
        
            typedef void ( ::osgDB::ImagePager::*signalEndFrame_function_type )(  ) ;
            typedef void ( ImagePager_wrapper::*default_signalEndFrame_function_type )(  ) ;
            
            ImagePager_exposer.def( 
                "signalEndFrame"
                , signalEndFrame_function_type(&::osgDB::ImagePager::signalEndFrame)
                , default_signalEndFrame_function_type(&ImagePager_wrapper::default_signalEndFrame) );
        
        }
        { //::osgDB::ImagePager::updateSceneGraph
        
            typedef void ( ::osgDB::ImagePager::*updateSceneGraph_function_type )( ::osg::FrameStamp const & ) ;
            typedef void ( ImagePager_wrapper::*default_updateSceneGraph_function_type )( ::osg::FrameStamp const & ) ;
            
            ImagePager_exposer.def( 
                "updateSceneGraph"
                , updateSceneGraph_function_type(&::osgDB::ImagePager::updateSceneGraph)
                , default_updateSceneGraph_function_type(&ImagePager_wrapper::default_updateSceneGraph)
                , ( bp::arg("frameStamp") ) );
        
        }
    }

}
