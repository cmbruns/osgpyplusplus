// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "wrap_osgDB.h"
#include "wrap_referenced.h"
#include "Registry.pypp.hpp"

namespace bp = boost::python;

struct Registry_wrapper : osgDB::Registry, bp::wrapper< osgDB::Registry > {

    struct ReadFunctor_wrapper : osgDB::Registry::ReadFunctor, bp::wrapper< osgDB::Registry::ReadFunctor > {
    
        ReadFunctor_wrapper(::std::string const & filename, ::osgDB::Options const * options )
        : osgDB::Registry::ReadFunctor( filename, boost::python::ptr(options) )
          , bp::wrapper< osgDB::Registry::ReadFunctor >(){
            // constructor
        
        }
    
        virtual ::osgDB::Registry::ReadFunctor * cloneType( ::std::string const & filename, ::osgDB::Options const * options ) const {
            bp::override func_cloneType = this->get_override( "cloneType" );
            return func_cloneType( filename, boost::python::ptr(options) );
        }
    
        virtual ::osgDB::ReaderWriter::ReadResult doRead( ::osgDB::ReaderWriter & rw ) const {
            bp::override func_doRead = this->get_override( "doRead" );
            return func_doRead( boost::ref(rw) );
        }
    
        virtual bool isValid( ::osgDB::ReaderWriter::ReadResult & readResult ) const {
            bp::override func_isValid = this->get_override( "isValid" );
            return func_isValid( boost::ref(readResult) );
        }
    
        virtual bool isValid( ::osg::Object * object ) const {
            bp::override func_isValid = this->get_override( "isValid" );
            return func_isValid( boost::python::ptr(object) );
        }
    
        static ::osgDB::Options const * get__options(osgDB::Registry::ReadFunctor const & inst ){
            return inst._options;
        }
        
        static void set__options( osgDB::Registry::ReadFunctor & inst, ::osgDB::Options const * new_value ){ 
            inst._options = new_value;
        }
    
    };

    static boost::python::object writeHeightField( ::osgDB::Registry & inst, ::osg::HeightField & obj, ::std::string const & fileName, ::osgDB::Options const * options ){
        ::osgDB::ReaderWriter::WriteResult result = inst.writeHeightField(obj, fileName, options);
        return bp::object( result );
    }

    static boost::python::object writeHeightFieldImplementation( ::osgDB::Registry & inst, ::osg::HeightField & obj, ::std::string const & fileName, ::osgDB::Options const * options ){
        ::osgDB::ReaderWriter::WriteResult result = inst.writeHeightFieldImplementation(obj, fileName, options);
        return bp::object( result );
    }

    static boost::python::object writeImage( ::osgDB::Registry & inst, ::osg::Image & obj, ::std::string const & fileName, ::osgDB::Options const * options ){
        ::osgDB::ReaderWriter::WriteResult result = inst.writeImage(obj, fileName, options);
        return bp::object( result );
    }

    static boost::python::object writeImageImplementation( ::osgDB::Registry & inst, ::osg::Image & obj, ::std::string const & fileName, ::osgDB::Options const * options ){
        ::osgDB::ReaderWriter::WriteResult result = inst.writeImageImplementation(obj, fileName, options);
        return bp::object( result );
    }

    static boost::python::object writeNode( ::osgDB::Registry & inst, ::osg::Node & node, ::std::string const & fileName, ::osgDB::Options const * options ){
        ::osgDB::ReaderWriter::WriteResult result = inst.writeNode(node, fileName, options);
        return bp::object( result );
    }

    static boost::python::object writeNodeImplementation( ::osgDB::Registry & inst, ::osg::Node & node, ::std::string const & fileName, ::osgDB::Options const * options ){
        ::osgDB::ReaderWriter::WriteResult result = inst.writeNodeImplementation(node, fileName, options);
        return bp::object( result );
    }

    static boost::python::object writeObject( ::osgDB::Registry & inst, ::osg::Object & obj, ::std::string const & fileName, ::osgDB::Options const * options ){
        ::osgDB::ReaderWriter::WriteResult result = inst.writeObject(obj, fileName, options);
        return bp::object( result );
    }

    static boost::python::object writeObjectImplementation( ::osgDB::Registry & inst, ::osg::Object & obj, ::std::string const & fileName, ::osgDB::Options const * options ){
        ::osgDB::ReaderWriter::WriteResult result = inst.writeObjectImplementation(obj, fileName, options);
        return bp::object( result );
    }

    static boost::python::object writeShader( ::osgDB::Registry & inst, ::osg::Shader & obj, ::std::string const & fileName, ::osgDB::Options const * options ){
        ::osgDB::ReaderWriter::WriteResult result = inst.writeShader(obj, fileName, options);
        return bp::object( result );
    }

    static boost::python::object writeShaderImplementation( ::osgDB::Registry & inst, ::osg::Shader & obj, ::std::string const & fileName, ::osgDB::Options const * options ){
        ::osgDB::ReaderWriter::WriteResult result = inst.writeShaderImplementation(obj, fileName, options);
        return bp::object( result );
    }

};

void register_Registry_class(){

    { //::osgDB::Registry
        typedef bp::class_< Registry_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< Registry_wrapper >, boost::noncopyable > Registry_exposer_t;
        Registry_exposer_t Registry_exposer = Registry_exposer_t( "Registry", bp::no_init );
        bp::scope Registry_scope( Registry_exposer );
        bp::enum_< osgDB::Registry::LoadStatus>("LoadStatus")
            .value("NOT_LOADED", osgDB::Registry::NOT_LOADED)
            .value("PREVIOUSLY_LOADED", osgDB::Registry::PREVIOUSLY_LOADED)
            .value("LOADED", osgDB::Registry::LOADED)
            .export_values()
            ;
        bp::class_< Registry_wrapper::ReadFunctor_wrapper, boost::noncopyable >( "ReadFunctor", bp::init< std::string const &, osgDB::Options const * >(( bp::arg("filename"), bp::arg("options") )) )    
            .def( 
                "cloneType"
                , bp::pure_virtual( (::osgDB::Registry::ReadFunctor * ( ::osgDB::Registry::ReadFunctor::* )( ::std::string const &,::osgDB::Options const * ) const)(&::osgDB::Registry::ReadFunctor::cloneType) )
                , ( bp::arg("filename"), bp::arg("options") )
                , bp::return_value_policy< bp::reference_existing_object >() )    
            .def( 
                "doRead"
                , bp::pure_virtual( (::osgDB::ReaderWriter::ReadResult ( ::osgDB::Registry::ReadFunctor::* )( ::osgDB::ReaderWriter & ) const)(&::osgDB::Registry::ReadFunctor::doRead) )
                , ( bp::arg("rw") ) )    
            .def( 
                "isValid"
                , bp::pure_virtual( (bool ( ::osgDB::Registry::ReadFunctor::* )( ::osgDB::ReaderWriter::ReadResult & ) const)(&::osgDB::Registry::ReadFunctor::isValid) )
                , ( bp::arg("readResult") ) )    
            .def( 
                "isValid"
                , bp::pure_virtual( (bool ( ::osgDB::Registry::ReadFunctor::* )( ::osg::Object * ) const)(&::osgDB::Registry::ReadFunctor::isValid) )
                , ( bp::arg("object") ) )    
            .def_readwrite( "_filename", &osgDB::Registry::ReadFunctor::_filename )    
            .add_property( "_options"
                        , bp::make_function( (::osgDB::Options const * (*)( ::osgDB::Registry::ReadFunctor const & ))(&Registry_wrapper::ReadFunctor_wrapper::get__options), bp::return_internal_reference< >() )
                        , bp::make_function( (void (*)( ::osgDB::Registry::ReadFunctor &,::osgDB::Options const * ))(&Registry_wrapper::ReadFunctor_wrapper::set__options), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
        { //::osgDB::Registry::_buildKdTreeIfRequired
        
            typedef void ( ::osgDB::Registry::*_buildKdTreeIfRequired_function_type )( ::osgDB::ReaderWriter::ReadResult &,::osgDB::Options const * ) ;
            
            Registry_exposer.def( 
                "_buildKdTreeIfRequired"
                , _buildKdTreeIfRequired_function_type( &::osgDB::Registry::_buildKdTreeIfRequired )
                , ( bp::arg("result"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::addArchiveExtension
        
            typedef void ( ::osgDB::Registry::*addArchiveExtension_function_type )( ::std::string const ) ;
            
            Registry_exposer.def( 
                "addArchiveExtension"
                , addArchiveExtension_function_type( &::osgDB::Registry::addArchiveExtension )
                , ( bp::arg("ext") ) );
        
        }
        { //::osgDB::Registry::addEntryToObjectCache
        
            typedef void ( ::osgDB::Registry::*addEntryToObjectCache_function_type )( ::std::string const &,::osg::Object *,double ) ;
            
            Registry_exposer.def( 
                "addEntryToObjectCache"
                , addEntryToObjectCache_function_type( &::osgDB::Registry::addEntryToObjectCache )
                , ( bp::arg("filename"), bp::arg("object"), bp::arg("timestamp")=0.0 ) );
        
        }
        { //::osgDB::Registry::addFileExtensionAlias
        
            typedef void ( ::osgDB::Registry::*addFileExtensionAlias_function_type )( ::std::string const,::std::string const ) ;
            
            Registry_exposer.def( 
                "addFileExtensionAlias"
                , addFileExtensionAlias_function_type( &::osgDB::Registry::addFileExtensionAlias )
                , ( bp::arg("mapExt"), bp::arg("toExt") ) );
        
        }
        { //::osgDB::Registry::addImageProcessor
        
            typedef void ( ::osgDB::Registry::*addImageProcessor_function_type )( ::osgDB::ImageProcessor * ) ;
            
            Registry_exposer.def( 
                "addImageProcessor"
                , addImageProcessor_function_type( &::osgDB::Registry::addImageProcessor )
                , ( bp::arg("ip") ) );
        
        }
        { //::osgDB::Registry::addMimeTypeExtensionMapping
        
            typedef void ( ::osgDB::Registry::*addMimeTypeExtensionMapping_function_type )( ::std::string const,::std::string const ) ;
            
            Registry_exposer.def( 
                "addMimeTypeExtensionMapping"
                , addMimeTypeExtensionMapping_function_type( &::osgDB::Registry::addMimeTypeExtensionMapping )
                , ( bp::arg("fromMimeType"), bp::arg("toExt") ) );
        
        }
        { //::osgDB::Registry::addReaderWriter
        
            typedef void ( ::osgDB::Registry::*addReaderWriter_function_type )( ::osgDB::ReaderWriter * ) ;
            
            Registry_exposer.def( 
                "addReaderWriter"
                , addReaderWriter_function_type( &::osgDB::Registry::addReaderWriter )
                , ( bp::arg("rw") ) );
        
        }
        { //::osgDB::Registry::addToArchiveCache
        
            typedef void ( ::osgDB::Registry::*addToArchiveCache_function_type )( ::std::string const &,::osgDB::Archive * ) ;
            
            Registry_exposer.def( 
                "addToArchiveCache"
                , addToArchiveCache_function_type( &::osgDB::Registry::addToArchiveCache )
                , ( bp::arg("fileName"), bp::arg("archive") ) );
        
        }
        { //::osgDB::Registry::clearArchiveCache
        
            typedef void ( ::osgDB::Registry::*clearArchiveCache_function_type )(  ) ;
            
            Registry_exposer.def( 
                "clearArchiveCache"
                , clearArchiveCache_function_type( &::osgDB::Registry::clearArchiveCache ) );
        
        }
        { //::osgDB::Registry::clearObjectCache
        
            typedef void ( ::osgDB::Registry::*clearObjectCache_function_type )(  ) ;
            
            Registry_exposer.def( 
                "clearObjectCache"
                , clearObjectCache_function_type( &::osgDB::Registry::clearObjectCache ) );
        
        }
        { //::osgDB::Registry::closeAllLibraries
        
            typedef void ( ::osgDB::Registry::*closeAllLibraries_function_type )(  ) ;
            
            Registry_exposer.def( 
                "closeAllLibraries"
                , closeAllLibraries_function_type( &::osgDB::Registry::closeAllLibraries ) );
        
        }
        { //::osgDB::Registry::closeLibrary
        
            typedef bool ( ::osgDB::Registry::*closeLibrary_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "closeLibrary"
                , closeLibrary_function_type( &::osgDB::Registry::closeLibrary )
                , ( bp::arg("fileName") ) );
        
        }
        { //::osgDB::Registry::createLibraryNameForExtension
        
            typedef ::std::string ( ::osgDB::Registry::*createLibraryNameForExtension_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "createLibraryNameForExtension"
                , createLibraryNameForExtension_function_type( &::osgDB::Registry::createLibraryNameForExtension )
                , ( bp::arg("ext") ) );
        
        }
        { //::osgDB::Registry::createLibraryNameForFile
        
            typedef ::std::string ( ::osgDB::Registry::*createLibraryNameForFile_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "createLibraryNameForFile"
                , createLibraryNameForFile_function_type( &::osgDB::Registry::createLibraryNameForFile )
                , ( bp::arg("fileName") ) );
        
        }
        { //::osgDB::Registry::createLibraryNameForNodeKit
        
            typedef ::std::string ( ::osgDB::Registry::*createLibraryNameForNodeKit_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "createLibraryNameForNodeKit"
                , createLibraryNameForNodeKit_function_type( &::osgDB::Registry::createLibraryNameForNodeKit )
                , ( bp::arg("name") ) );
        
        }
        { //::osgDB::Registry::findDataFile
        
            typedef ::std::string ( ::osgDB::Registry::*findDataFile_function_type )( ::std::string const &,::osgDB::Options const *,::osgDB::CaseSensitivity ) ;
            
            Registry_exposer.def( 
                "findDataFile"
                , findDataFile_function_type( &::osgDB::Registry::findDataFile )
                , ( bp::arg("fileName"), bp::arg("options"), bp::arg("caseSensitivity") ) );
        
        }
        { //::osgDB::Registry::findDataFileImplementation
        
            typedef ::std::string ( ::osgDB::Registry::*findDataFileImplementation_function_type )( ::std::string const &,::osgDB::Options const *,::osgDB::CaseSensitivity ) ;
            
            Registry_exposer.def( 
                "findDataFileImplementation"
                , findDataFileImplementation_function_type( &::osgDB::Registry::findDataFileImplementation )
                , ( bp::arg("fileName"), bp::arg("options"), bp::arg("caseSensitivity") ) );
        
        }
        { //::osgDB::Registry::findLibraryFile
        
            typedef ::std::string ( ::osgDB::Registry::*findLibraryFile_function_type )( ::std::string const &,::osgDB::Options const *,::osgDB::CaseSensitivity ) ;
            
            Registry_exposer.def( 
                "findLibraryFile"
                , findLibraryFile_function_type( &::osgDB::Registry::findLibraryFile )
                , ( bp::arg("fileName"), bp::arg("options"), bp::arg("caseSensitivity") ) );
        
        }
        { //::osgDB::Registry::findLibraryFileImplementation
        
            typedef ::std::string ( ::osgDB::Registry::*findLibraryFileImplementation_function_type )( ::std::string const &,::osgDB::Options const *,::osgDB::CaseSensitivity ) ;
            
            Registry_exposer.def( 
                "findLibraryFileImplementation"
                , findLibraryFileImplementation_function_type( &::osgDB::Registry::findLibraryFileImplementation )
                , ( bp::arg("fileName"), bp::arg("options"), bp::arg("caseSensitivity") ) );
        
        }
        { //::osgDB::Registry::getArchiveExtensions
        
            typedef ::std::vector< std::string > const & ( ::osgDB::Registry::*getArchiveExtensions_function_type )(  ) const;
            
            Registry_exposer.def( 
                "getArchiveExtensions"
                , getArchiveExtensions_function_type( &::osgDB::Registry::getArchiveExtensions )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getAuthenticationMap
        
            typedef ::osgDB::AuthenticationMap * ( ::osgDB::Registry::*getAuthenticationMap_function_type )(  ) ;
            
            Registry_exposer.def( 
                "getAuthenticationMap"
                , getAuthenticationMap_function_type( &::osgDB::Registry::getAuthenticationMap )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getAuthenticationMap
        
            typedef ::osgDB::AuthenticationMap const * ( ::osgDB::Registry::*getAuthenticationMap_function_type )(  ) const;
            
            Registry_exposer.def( 
                "getAuthenticationMap"
                , getAuthenticationMap_function_type( &::osgDB::Registry::getAuthenticationMap )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getBuildKdTreesHint
        
            typedef ::osgDB::Options::BuildKdTreesHint ( ::osgDB::Registry::*getBuildKdTreesHint_function_type )(  ) const;
            
            Registry_exposer.def( 
                "getBuildKdTreesHint"
                , getBuildKdTreesHint_function_type( &::osgDB::Registry::getBuildKdTreesHint ) );
        
        }
        { //::osgDB::Registry::getCreateNodeFromImage
        
            typedef bool ( ::osgDB::Registry::*getCreateNodeFromImage_function_type )(  ) const;
            
            Registry_exposer.def( 
                "getCreateNodeFromImage"
                , getCreateNodeFromImage_function_type( &::osgDB::Registry::getCreateNodeFromImage ) );
        
        }
        { //::osgDB::Registry::getDataFilePathList
        
            typedef ::osgDB::FilePathList & ( ::osgDB::Registry::*getDataFilePathList_function_type )(  ) ;
            
            Registry_exposer.def( 
                "getDataFilePathList"
                , getDataFilePathList_function_type( &::osgDB::Registry::getDataFilePathList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getDataFilePathList
        
            typedef ::osgDB::FilePathList const & ( ::osgDB::Registry::*getDataFilePathList_function_type )(  ) const;
            
            Registry_exposer.def( 
                "getDataFilePathList"
                , getDataFilePathList_function_type( &::osgDB::Registry::getDataFilePathList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getDeprecatedDotOsgObjectWrapperManager
        
            typedef ::osgDB::DeprecatedDotOsgWrapperManager * ( ::osgDB::Registry::*getDeprecatedDotOsgObjectWrapperManager_function_type )(  ) ;
            
            Registry_exposer.def( 
                "getDeprecatedDotOsgObjectWrapperManager"
                , getDeprecatedDotOsgObjectWrapperManager_function_type( &::osgDB::Registry::getDeprecatedDotOsgObjectWrapperManager )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getExpiryDelay
        
            typedef double ( ::osgDB::Registry::*getExpiryDelay_function_type )(  ) const;
            
            Registry_exposer.def( 
                "getExpiryDelay"
                , getExpiryDelay_function_type( &::osgDB::Registry::getExpiryDelay ) );
        
        }
        { //::osgDB::Registry::getFileCache
        
            typedef ::osgDB::FileCache * ( ::osgDB::Registry::*getFileCache_function_type )(  ) ;
            
            Registry_exposer.def( 
                "getFileCache"
                , getFileCache_function_type( &::osgDB::Registry::getFileCache )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getFileCache
        
            typedef ::osgDB::FileCache const * ( ::osgDB::Registry::*getFileCache_function_type )(  ) const;
            
            Registry_exposer.def( 
                "getFileCache"
                , getFileCache_function_type( &::osgDB::Registry::getFileCache )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getFileLocationCallback
        
            typedef ::osgDB::FileLocationCallback * ( ::osgDB::Registry::*getFileLocationCallback_function_type )(  ) const;
            
            Registry_exposer.def( 
                "getFileLocationCallback"
                , getFileLocationCallback_function_type( &::osgDB::Registry::getFileLocationCallback )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getFindFileCallback
        
            typedef ::osgDB::FindFileCallback * ( ::osgDB::Registry::*getFindFileCallback_function_type )(  ) ;
            
            Registry_exposer.def( 
                "getFindFileCallback"
                , getFindFileCallback_function_type( &::osgDB::Registry::getFindFileCallback )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getFindFileCallback
        
            typedef ::osgDB::FindFileCallback const * ( ::osgDB::Registry::*getFindFileCallback_function_type )(  ) const;
            
            Registry_exposer.def( 
                "getFindFileCallback"
                , getFindFileCallback_function_type( &::osgDB::Registry::getFindFileCallback )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getFromArchiveCache
        
            typedef ::osgDB::Archive * ( ::osgDB::Registry::*getFromArchiveCache_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "getFromArchiveCache"
                , getFromArchiveCache_function_type( &::osgDB::Registry::getFromArchiveCache )
                , ( bp::arg("fileName") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getFromObjectCache
        
            typedef ::osg::Object * ( ::osgDB::Registry::*getFromObjectCache_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "getFromObjectCache"
                , getFromObjectCache_function_type( &::osgDB::Registry::getFromObjectCache )
                , ( bp::arg("fileName") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getImageProcessor
        
            typedef ::osgDB::ImageProcessor * ( ::osgDB::Registry::*getImageProcessor_function_type )(  ) ;
            
            Registry_exposer.def( 
                "getImageProcessor"
                , getImageProcessor_function_type( &::osgDB::Registry::getImageProcessor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getImageProcessorForExtension
        
            typedef ::osgDB::ImageProcessor * ( ::osgDB::Registry::*getImageProcessorForExtension_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "getImageProcessorForExtension"
                , getImageProcessorForExtension_function_type( &::osgDB::Registry::getImageProcessorForExtension )
                , ( bp::arg("ext") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getImageProcessorList
        
            typedef ::std::vector< osg::ref_ptr<osgDB::ImageProcessor> > & ( ::osgDB::Registry::*getImageProcessorList_function_type )(  ) ;
            
            Registry_exposer.def( 
                "getImageProcessorList"
                , getImageProcessorList_function_type( &::osgDB::Registry::getImageProcessorList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getImageProcessorList
        
            typedef ::std::vector< osg::ref_ptr<osgDB::ImageProcessor> > const & ( ::osgDB::Registry::*getImageProcessorList_function_type )(  ) const;
            
            Registry_exposer.def( 
                "getImageProcessorList"
                , getImageProcessorList_function_type( &::osgDB::Registry::getImageProcessorList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getKdTreeBuilder
        
            typedef ::osg::KdTreeBuilder * ( ::osgDB::Registry::*getKdTreeBuilder_function_type )(  ) ;
            
            Registry_exposer.def( 
                "getKdTreeBuilder"
                , getKdTreeBuilder_function_type( &::osgDB::Registry::getKdTreeBuilder )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getLibrary
        
            typedef ::osgDB::DynamicLibrary * ( ::osgDB::Registry::*getLibrary_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "getLibrary"
                , getLibrary_function_type( &::osgDB::Registry::getLibrary )
                , ( bp::arg("fileName") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getLibraryFilePathList
        
            typedef ::osgDB::FilePathList & ( ::osgDB::Registry::*getLibraryFilePathList_function_type )(  ) ;
            
            Registry_exposer.def( 
                "getLibraryFilePathList"
                , getLibraryFilePathList_function_type( &::osgDB::Registry::getLibraryFilePathList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getLibraryFilePathList
        
            typedef ::osgDB::FilePathList const & ( ::osgDB::Registry::*getLibraryFilePathList_function_type )(  ) const;
            
            Registry_exposer.def( 
                "getLibraryFilePathList"
                , getLibraryFilePathList_function_type( &::osgDB::Registry::getLibraryFilePathList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getMimeTypeExtensionMap
        
            typedef ::std::map< std::string, std::string > & ( ::osgDB::Registry::*getMimeTypeExtensionMap_function_type )(  ) ;
            
            Registry_exposer.def( 
                "getMimeTypeExtensionMap"
                , getMimeTypeExtensionMap_function_type( &::osgDB::Registry::getMimeTypeExtensionMap )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getMimeTypeExtensionMap
        
            typedef ::std::map< std::string, std::string > const & ( ::osgDB::Registry::*getMimeTypeExtensionMap_function_type )(  ) const;
            
            Registry_exposer.def( 
                "getMimeTypeExtensionMap"
                , getMimeTypeExtensionMap_function_type( &::osgDB::Registry::getMimeTypeExtensionMap )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getObjectWrapperManager
        
            typedef ::osgDB::ObjectWrapperManager * ( ::osgDB::Registry::*getObjectWrapperManager_function_type )(  ) ;
            
            Registry_exposer.def( 
                "getObjectWrapperManager"
                , getObjectWrapperManager_function_type( &::osgDB::Registry::getObjectWrapperManager )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getOptions
        
            typedef ::osgDB::Options * ( ::osgDB::Registry::*getOptions_function_type )(  ) ;
            
            Registry_exposer.def( 
                "getOptions"
                , getOptions_function_type( &::osgDB::Registry::getOptions )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getOptions
        
            typedef ::osgDB::Options const * ( ::osgDB::Registry::*getOptions_function_type )(  ) const;
            
            Registry_exposer.def( 
                "getOptions"
                , getOptions_function_type( &::osgDB::Registry::getOptions )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getOrCreateSharedStateManager
        
            typedef ::osgDB::SharedStateManager * ( ::osgDB::Registry::*getOrCreateSharedStateManager_function_type )(  ) ;
            
            Registry_exposer.def( 
                "getOrCreateSharedStateManager"
                , getOrCreateSharedStateManager_function_type( &::osgDB::Registry::getOrCreateSharedStateManager )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getReadFileCallback
        
            typedef ::osgDB::ReadFileCallback * ( ::osgDB::Registry::*getReadFileCallback_function_type )(  ) ;
            
            Registry_exposer.def( 
                "getReadFileCallback"
                , getReadFileCallback_function_type( &::osgDB::Registry::getReadFileCallback )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getReadFileCallback
        
            typedef ::osgDB::ReadFileCallback const * ( ::osgDB::Registry::*getReadFileCallback_function_type )(  ) const;
            
            Registry_exposer.def( 
                "getReadFileCallback"
                , getReadFileCallback_function_type( &::osgDB::Registry::getReadFileCallback )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getReaderWriterForExtension
        
            typedef ::osgDB::ReaderWriter * ( ::osgDB::Registry::*getReaderWriterForExtension_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "getReaderWriterForExtension"
                , getReaderWriterForExtension_function_type( &::osgDB::Registry::getReaderWriterForExtension )
                , ( bp::arg("ext") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getReaderWriterForMimeType
        
            typedef ::osgDB::ReaderWriter * ( ::osgDB::Registry::*getReaderWriterForMimeType_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "getReaderWriterForMimeType"
                , getReaderWriterForMimeType_function_type( &::osgDB::Registry::getReaderWriterForMimeType )
                , ( bp::arg("mimeType") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getReaderWriterForProtocolAndExtension
        
            typedef ::osgDB::ReaderWriter * ( ::osgDB::Registry::*getReaderWriterForProtocolAndExtension_function_type )( ::std::string const &,::std::string const & ) ;
            
            Registry_exposer.def( 
                "getReaderWriterForProtocolAndExtension"
                , getReaderWriterForProtocolAndExtension_function_type( &::osgDB::Registry::getReaderWriterForProtocolAndExtension )
                , ( bp::arg("protocol"), bp::arg("extension") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getReaderWriterList
        
            typedef ::std::vector< osg::ref_ptr<osgDB::ReaderWriter> > & ( ::osgDB::Registry::*getReaderWriterList_function_type )(  ) ;
            
            Registry_exposer.def( 
                "getReaderWriterList"
                , getReaderWriterList_function_type( &::osgDB::Registry::getReaderWriterList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getReaderWriterList
        
            typedef ::std::vector< osg::ref_ptr<osgDB::ReaderWriter> > const & ( ::osgDB::Registry::*getReaderWriterList_function_type )(  ) const;
            
            Registry_exposer.def( 
                "getReaderWriterList"
                , getReaderWriterList_function_type( &::osgDB::Registry::getReaderWriterList )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getReaderWriterListForProtocol
        
            typedef void ( ::osgDB::Registry::*getReaderWriterListForProtocol_function_type )( ::std::string const &,::std::vector< osg::ref_ptr<osgDB::ReaderWriter> > & ) const;
            
            Registry_exposer.def( 
                "getReaderWriterListForProtocol"
                , getReaderWriterListForProtocol_function_type( &::osgDB::Registry::getReaderWriterListForProtocol )
                , ( bp::arg("protocol"), bp::arg("results") ) );
        
        }
        { //::osgDB::Registry::getRefFromArchiveCache
        
            typedef ::osg::ref_ptr< osgDB::Archive > ( ::osgDB::Registry::*getRefFromArchiveCache_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "getRefFromArchiveCache"
                , getRefFromArchiveCache_function_type( &::osgDB::Registry::getRefFromArchiveCache )
                , ( bp::arg("fileName") ) );
        
        }
        { //::osgDB::Registry::getRefFromObjectCache
        
            typedef ::osg::ref_ptr< osg::Object > ( ::osgDB::Registry::*getRefFromObjectCache_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "getRefFromObjectCache"
                , getRefFromObjectCache_function_type( &::osgDB::Registry::getRefFromObjectCache )
                , ( bp::arg("fileName") ) );
        
        }
        { //::osgDB::Registry::getSharedStateManager
        
            typedef ::osgDB::SharedStateManager * ( ::osgDB::Registry::*getSharedStateManager_function_type )(  ) ;
            
            Registry_exposer.def( 
                "getSharedStateManager"
                , getSharedStateManager_function_type( &::osgDB::Registry::getSharedStateManager )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getWriteFileCallback
        
            typedef ::osgDB::WriteFileCallback * ( ::osgDB::Registry::*getWriteFileCallback_function_type )(  ) ;
            
            Registry_exposer.def( 
                "getWriteFileCallback"
                , getWriteFileCallback_function_type( &::osgDB::Registry::getWriteFileCallback )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::getWriteFileCallback
        
            typedef ::osgDB::WriteFileCallback const * ( ::osgDB::Registry::*getWriteFileCallback_function_type )(  ) const;
            
            Registry_exposer.def( 
                "getWriteFileCallback"
                , getWriteFileCallback_function_type( &::osgDB::Registry::getWriteFileCallback )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::initDataFilePathList
        
            typedef void ( ::osgDB::Registry::*initDataFilePathList_function_type )(  ) ;
            
            Registry_exposer.def( 
                "initDataFilePathList"
                , initDataFilePathList_function_type( &::osgDB::Registry::initDataFilePathList ) );
        
        }
        { //::osgDB::Registry::initFilePathLists
        
            typedef void ( ::osgDB::Registry::*initFilePathLists_function_type )(  ) ;
            
            Registry_exposer.def( 
                "initFilePathLists"
                , initFilePathLists_function_type( &::osgDB::Registry::initFilePathLists ) );
        
        }
        { //::osgDB::Registry::initLibraryFilePathList
        
            typedef void ( ::osgDB::Registry::*initLibraryFilePathList_function_type )(  ) ;
            
            Registry_exposer.def( 
                "initLibraryFilePathList"
                , initLibraryFilePathList_function_type( &::osgDB::Registry::initLibraryFilePathList ) );
        
        }
        { //::osgDB::Registry::instance
        
            typedef ::osgDB::Registry * ( *instance_function_type )( bool );
            
            Registry_exposer.def( 
                "instance"
                , instance_function_type( &::osgDB::Registry::instance )
                , ( bp::arg("erase")=(bool)(false) )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgDB::Registry::isProtocolRegistered
        
            typedef bool ( ::osgDB::Registry::*isProtocolRegistered_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "isProtocolRegistered"
                , isProtocolRegistered_function_type( &::osgDB::Registry::isProtocolRegistered )
                , ( bp::arg("protocol") ) );
        
        }
        { //::osgDB::Registry::loadLibrary
        
            typedef ::osgDB::Registry::LoadStatus ( ::osgDB::Registry::*loadLibrary_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "loadLibrary"
                , loadLibrary_function_type( &::osgDB::Registry::loadLibrary )
                , ( bp::arg("fileName") ) );
        
        }
        { //::osgDB::Registry::openArchive
        
            typedef ::osgDB::ReaderWriter::ReadResult ( ::osgDB::Registry::*openArchive_function_type )( ::std::string const &,::osgDB::ReaderWriter::ArchiveStatus,unsigned int,::osgDB::Options const * ) ;
            
            Registry_exposer.def( 
                "openArchive"
                , openArchive_function_type( &::osgDB::Registry::openArchive )
                , ( bp::arg("fileName"), bp::arg("status"), bp::arg("indexBlockSizeHint"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::openArchiveImplementation
        
            typedef ::osgDB::ReaderWriter::ReadResult ( ::osgDB::Registry::*openArchiveImplementation_function_type )( ::std::string const &,::osgDB::ReaderWriter::ArchiveStatus,unsigned int,::osgDB::Options const * ) ;
            
            Registry_exposer.def( 
                "openArchiveImplementation"
                , openArchiveImplementation_function_type( &::osgDB::Registry::openArchiveImplementation )
                , ( bp::arg("fileName"), bp::arg("status"), bp::arg("indexBlockSizeHint"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::readCommandLine
        
            typedef void ( ::osgDB::Registry::*readCommandLine_function_type )( ::osg::ArgumentParser & ) ;
            
            Registry_exposer.def( 
                "readCommandLine"
                , readCommandLine_function_type( &::osgDB::Registry::readCommandLine )
                , ( bp::arg("commandLine") ) );
        
        }
        { //::osgDB::Registry::readHeightField
        
            typedef ::osgDB::ReaderWriter::ReadResult ( ::osgDB::Registry::*readHeightField_function_type )( ::std::string const &,::osgDB::Options const * ) ;
            
            Registry_exposer.def( 
                "readHeightField"
                , readHeightField_function_type( &::osgDB::Registry::readHeightField )
                , ( bp::arg("fileName"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::readHeightFieldImplementation
        
            typedef ::osgDB::ReaderWriter::ReadResult ( ::osgDB::Registry::*readHeightFieldImplementation_function_type )( ::std::string const &,::osgDB::Options const * ) ;
            
            Registry_exposer.def( 
                "readHeightFieldImplementation"
                , readHeightFieldImplementation_function_type( &::osgDB::Registry::readHeightFieldImplementation )
                , ( bp::arg("fileName"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::readImage
        
            typedef ::osgDB::ReaderWriter::ReadResult ( ::osgDB::Registry::*readImage_function_type )( ::std::string const &,::osgDB::Options const * ) ;
            
            Registry_exposer.def( 
                "readImage"
                , readImage_function_type( &::osgDB::Registry::readImage )
                , ( bp::arg("fileName"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::readImageImplementation
        
            typedef ::osgDB::ReaderWriter::ReadResult ( ::osgDB::Registry::*readImageImplementation_function_type )( ::std::string const &,::osgDB::Options const * ) ;
            
            Registry_exposer.def( 
                "readImageImplementation"
                , readImageImplementation_function_type( &::osgDB::Registry::readImageImplementation )
                , ( bp::arg("fileName"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::readNode
        
            typedef ::osgDB::ReaderWriter::ReadResult ( ::osgDB::Registry::*readNode_function_type )( ::std::string const &,::osgDB::Options const *,bool ) ;
            
            Registry_exposer.def( 
                "readNode"
                , readNode_function_type( &::osgDB::Registry::readNode )
                , ( bp::arg("fileName"), bp::arg("options"), bp::arg("buildKdTreeIfRequired")=(bool)(true) ) );
        
        }
        { //::osgDB::Registry::readNodeImplementation
        
            typedef ::osgDB::ReaderWriter::ReadResult ( ::osgDB::Registry::*readNodeImplementation_function_type )( ::std::string const &,::osgDB::Options const * ) ;
            
            Registry_exposer.def( 
                "readNodeImplementation"
                , readNodeImplementation_function_type( &::osgDB::Registry::readNodeImplementation )
                , ( bp::arg("fileName"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::readObject
        
            typedef ::osgDB::ReaderWriter::ReadResult ( ::osgDB::Registry::*readObject_function_type )( ::std::string const &,::osgDB::Options const *,bool ) ;
            
            Registry_exposer.def( 
                "readObject"
                , readObject_function_type( &::osgDB::Registry::readObject )
                , ( bp::arg("fileName"), bp::arg("options"), bp::arg("buildKdTreeIfRequired")=(bool)(true) ) );
        
        }
        { //::osgDB::Registry::readObjectImplementation
        
            typedef ::osgDB::ReaderWriter::ReadResult ( ::osgDB::Registry::*readObjectImplementation_function_type )( ::std::string const &,::osgDB::Options const * ) ;
            
            Registry_exposer.def( 
                "readObjectImplementation"
                , readObjectImplementation_function_type( &::osgDB::Registry::readObjectImplementation )
                , ( bp::arg("fileName"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::readPluginAliasConfigurationFile
        
            typedef bool ( ::osgDB::Registry::*readPluginAliasConfigurationFile_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "readPluginAliasConfigurationFile"
                , readPluginAliasConfigurationFile_function_type( &::osgDB::Registry::readPluginAliasConfigurationFile )
                , ( bp::arg("file") ) );
        
        }
        { //::osgDB::Registry::readShader
        
            typedef ::osgDB::ReaderWriter::ReadResult ( ::osgDB::Registry::*readShader_function_type )( ::std::string const &,::osgDB::Options const * ) ;
            
            Registry_exposer.def( 
                "readShader"
                , readShader_function_type( &::osgDB::Registry::readShader )
                , ( bp::arg("fileName"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::readShaderImplementation
        
            typedef ::osgDB::ReaderWriter::ReadResult ( ::osgDB::Registry::*readShaderImplementation_function_type )( ::std::string const &,::osgDB::Options const * ) ;
            
            Registry_exposer.def( 
                "readShaderImplementation"
                , readShaderImplementation_function_type( &::osgDB::Registry::readShaderImplementation )
                , ( bp::arg("fileName"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::registerProtocol
        
            typedef void ( ::osgDB::Registry::*registerProtocol_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "registerProtocol"
                , registerProtocol_function_type( &::osgDB::Registry::registerProtocol )
                , ( bp::arg("protocol") ) );
        
        }
        { //::osgDB::Registry::releaseGLObjects
        
            typedef void ( ::osgDB::Registry::*releaseGLObjects_function_type )( ::osg::State * ) ;
            
            Registry_exposer.def( 
                "releaseGLObjects"
                , releaseGLObjects_function_type( &::osgDB::Registry::releaseGLObjects )
                , ( bp::arg("state")=bp::object() ) );
        
        }
        { //::osgDB::Registry::removeExpiredObjectsInCache
        
            typedef void ( ::osgDB::Registry::*removeExpiredObjectsInCache_function_type )( ::osg::FrameStamp const & ) ;
            
            Registry_exposer.def( 
                "removeExpiredObjectsInCache"
                , removeExpiredObjectsInCache_function_type( &::osgDB::Registry::removeExpiredObjectsInCache )
                , ( bp::arg("frameStamp") ) );
        
        }
        { //::osgDB::Registry::removeFromArchiveCache
        
            typedef void ( ::osgDB::Registry::*removeFromArchiveCache_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "removeFromArchiveCache"
                , removeFromArchiveCache_function_type( &::osgDB::Registry::removeFromArchiveCache )
                , ( bp::arg("fileName") ) );
        
        }
        { //::osgDB::Registry::removeFromObjectCache
        
            typedef void ( ::osgDB::Registry::*removeFromObjectCache_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "removeFromObjectCache"
                , removeFromObjectCache_function_type( &::osgDB::Registry::removeFromObjectCache )
                , ( bp::arg("fileName") ) );
        
        }
        { //::osgDB::Registry::removeImageProcessor
        
            typedef void ( ::osgDB::Registry::*removeImageProcessor_function_type )( ::osgDB::ImageProcessor * ) ;
            
            Registry_exposer.def( 
                "removeImageProcessor"
                , removeImageProcessor_function_type( &::osgDB::Registry::removeImageProcessor )
                , ( bp::arg("ip") ) );
        
        }
        { //::osgDB::Registry::removeReaderWriter
        
            typedef void ( ::osgDB::Registry::*removeReaderWriter_function_type )( ::osgDB::ReaderWriter * ) ;
            
            Registry_exposer.def( 
                "removeReaderWriter"
                , removeReaderWriter_function_type( &::osgDB::Registry::removeReaderWriter )
                , ( bp::arg("rw") ) );
        
        }
        { //::osgDB::Registry::setAuthenticationMap
        
            typedef void ( ::osgDB::Registry::*setAuthenticationMap_function_type )( ::osgDB::AuthenticationMap * ) ;
            
            Registry_exposer.def( 
                "setAuthenticationMap"
                , setAuthenticationMap_function_type( &::osgDB::Registry::setAuthenticationMap )
                , ( bp::arg("authenticationMap") ) );
        
        }
        { //::osgDB::Registry::setBuildKdTreesHint
        
            typedef void ( ::osgDB::Registry::*setBuildKdTreesHint_function_type )( ::osgDB::Options::BuildKdTreesHint ) ;
            
            Registry_exposer.def( 
                "setBuildKdTreesHint"
                , setBuildKdTreesHint_function_type( &::osgDB::Registry::setBuildKdTreesHint )
                , ( bp::arg("hint") ) );
        
        }
        { //::osgDB::Registry::setCreateNodeFromImage
        
            typedef void ( ::osgDB::Registry::*setCreateNodeFromImage_function_type )( bool ) ;
            
            Registry_exposer.def( 
                "setCreateNodeFromImage"
                , setCreateNodeFromImage_function_type( &::osgDB::Registry::setCreateNodeFromImage )
                , ( bp::arg("flag") ) );
        
        }
        { //::osgDB::Registry::setDataFilePathList
        
            typedef void ( ::osgDB::Registry::*setDataFilePathList_function_type )( ::osgDB::FilePathList const & ) ;
            
            Registry_exposer.def( 
                "setDataFilePathList"
                , setDataFilePathList_function_type( &::osgDB::Registry::setDataFilePathList )
                , ( bp::arg("filepath") ) );
        
        }
        { //::osgDB::Registry::setDataFilePathList
        
            typedef void ( ::osgDB::Registry::*setDataFilePathList_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "setDataFilePathList"
                , setDataFilePathList_function_type( &::osgDB::Registry::setDataFilePathList )
                , ( bp::arg("paths") ) );
        
        }
        { //::osgDB::Registry::setExpiryDelay
        
            typedef void ( ::osgDB::Registry::*setExpiryDelay_function_type )( double ) ;
            
            Registry_exposer.def( 
                "setExpiryDelay"
                , setExpiryDelay_function_type( &::osgDB::Registry::setExpiryDelay )
                , ( bp::arg("expiryDelay") ) );
        
        }
        { //::osgDB::Registry::setFileCache
        
            typedef void ( ::osgDB::Registry::*setFileCache_function_type )( ::osgDB::FileCache * ) ;
            
            Registry_exposer.def( 
                "setFileCache"
                , setFileCache_function_type( &::osgDB::Registry::setFileCache )
                , ( bp::arg("fileCache") ) );
        
        }
        { //::osgDB::Registry::setFileLocationCallback
        
            typedef void ( ::osgDB::Registry::*setFileLocationCallback_function_type )( ::osgDB::FileLocationCallback * ) ;
            
            Registry_exposer.def( 
                "setFileLocationCallback"
                , setFileLocationCallback_function_type( &::osgDB::Registry::setFileLocationCallback )
                , ( bp::arg("cb") ) );
        
        }
        { //::osgDB::Registry::setFindFileCallback
        
            typedef void ( ::osgDB::Registry::*setFindFileCallback_function_type )( ::osgDB::FindFileCallback * ) ;
            
            Registry_exposer.def( 
                "setFindFileCallback"
                , setFindFileCallback_function_type( &::osgDB::Registry::setFindFileCallback )
                , ( bp::arg("cb") ) );
        
        }
        { //::osgDB::Registry::setKdTreeBuilder
        
            typedef void ( ::osgDB::Registry::*setKdTreeBuilder_function_type )( ::osg::KdTreeBuilder * ) ;
            
            Registry_exposer.def( 
                "setKdTreeBuilder"
                , setKdTreeBuilder_function_type( &::osgDB::Registry::setKdTreeBuilder )
                , ( bp::arg("builder") ) );
        
        }
        { //::osgDB::Registry::setLibraryFilePathList
        
            typedef void ( ::osgDB::Registry::*setLibraryFilePathList_function_type )( ::osgDB::FilePathList const & ) ;
            
            Registry_exposer.def( 
                "setLibraryFilePathList"
                , setLibraryFilePathList_function_type( &::osgDB::Registry::setLibraryFilePathList )
                , ( bp::arg("filepath") ) );
        
        }
        { //::osgDB::Registry::setLibraryFilePathList
        
            typedef void ( ::osgDB::Registry::*setLibraryFilePathList_function_type )( ::std::string const & ) ;
            
            Registry_exposer.def( 
                "setLibraryFilePathList"
                , setLibraryFilePathList_function_type( &::osgDB::Registry::setLibraryFilePathList )
                , ( bp::arg("paths") ) );
        
        }
        { //::osgDB::Registry::setOptions
        
            typedef void ( ::osgDB::Registry::*setOptions_function_type )( ::osgDB::Options * ) ;
            
            Registry_exposer.def( 
                "setOptions"
                , setOptions_function_type( &::osgDB::Registry::setOptions )
                , ( bp::arg("opt") ) );
        
        }
        { //::osgDB::Registry::setReadFileCallback
        
            typedef void ( ::osgDB::Registry::*setReadFileCallback_function_type )( ::osgDB::ReadFileCallback * ) ;
            
            Registry_exposer.def( 
                "setReadFileCallback"
                , setReadFileCallback_function_type( &::osgDB::Registry::setReadFileCallback )
                , ( bp::arg("cb") ) );
        
        }
        { //::osgDB::Registry::setSharedStateManager
        
            typedef void ( ::osgDB::Registry::*setSharedStateManager_function_type )( ::osgDB::SharedStateManager * ) ;
            
            Registry_exposer.def( 
                "setSharedStateManager"
                , setSharedStateManager_function_type( &::osgDB::Registry::setSharedStateManager )
                , ( bp::arg("SharedStateManager") ) );
        
        }
        { //::osgDB::Registry::setWriteFileCallback
        
            typedef void ( ::osgDB::Registry::*setWriteFileCallback_function_type )( ::osgDB::WriteFileCallback * ) ;
            
            Registry_exposer.def( 
                "setWriteFileCallback"
                , setWriteFileCallback_function_type( &::osgDB::Registry::setWriteFileCallback )
                , ( bp::arg("cb") ) );
        
        }
        { //::osgDB::Registry::updateTimeStampOfObjectsInCacheWithExternalReferences
        
            typedef void ( ::osgDB::Registry::*updateTimeStampOfObjectsInCacheWithExternalReferences_function_type )( ::osg::FrameStamp const & ) ;
            
            Registry_exposer.def( 
                "updateTimeStampOfObjectsInCacheWithExternalReferences"
                , updateTimeStampOfObjectsInCacheWithExternalReferences_function_type( &::osgDB::Registry::updateTimeStampOfObjectsInCacheWithExternalReferences )
                , ( bp::arg("frameStamp") ) );
        
        }
        { //::osgDB::Registry::writeHeightField
        
            typedef boost::python::object ( *writeHeightField_function_type )( ::osgDB::Registry &,::osg::HeightField &,::std::string const &,::osgDB::Options const * );
            
            Registry_exposer.def( 
                "writeHeightField"
                , writeHeightField_function_type( &Registry_wrapper::writeHeightField )
                , ( bp::arg("inst"), bp::arg("obj"), bp::arg("fileName"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::writeHeightFieldImplementation
        
            typedef boost::python::object ( *writeHeightFieldImplementation_function_type )( ::osgDB::Registry &,::osg::HeightField &,::std::string const &,::osgDB::Options const * );
            
            Registry_exposer.def( 
                "writeHeightFieldImplementation"
                , writeHeightFieldImplementation_function_type( &Registry_wrapper::writeHeightFieldImplementation )
                , ( bp::arg("inst"), bp::arg("obj"), bp::arg("fileName"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::writeImage
        
            typedef boost::python::object ( *writeImage_function_type )( ::osgDB::Registry &,::osg::Image &,::std::string const &,::osgDB::Options const * );
            
            Registry_exposer.def( 
                "writeImage"
                , writeImage_function_type( &Registry_wrapper::writeImage )
                , ( bp::arg("inst"), bp::arg("obj"), bp::arg("fileName"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::writeImageImplementation
        
            typedef boost::python::object ( *writeImageImplementation_function_type )( ::osgDB::Registry &,::osg::Image &,::std::string const &,::osgDB::Options const * );
            
            Registry_exposer.def( 
                "writeImageImplementation"
                , writeImageImplementation_function_type( &Registry_wrapper::writeImageImplementation )
                , ( bp::arg("inst"), bp::arg("obj"), bp::arg("fileName"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::writeNode
        
            typedef boost::python::object ( *writeNode_function_type )( ::osgDB::Registry &,::osg::Node &,::std::string const &,::osgDB::Options const * );
            
            Registry_exposer.def( 
                "writeNode"
                , writeNode_function_type( &Registry_wrapper::writeNode )
                , ( bp::arg("inst"), bp::arg("node"), bp::arg("fileName"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::writeNodeImplementation
        
            typedef boost::python::object ( *writeNodeImplementation_function_type )( ::osgDB::Registry &,::osg::Node &,::std::string const &,::osgDB::Options const * );
            
            Registry_exposer.def( 
                "writeNodeImplementation"
                , writeNodeImplementation_function_type( &Registry_wrapper::writeNodeImplementation )
                , ( bp::arg("inst"), bp::arg("node"), bp::arg("fileName"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::writeObject
        
            typedef boost::python::object ( *writeObject_function_type )( ::osgDB::Registry &,::osg::Object &,::std::string const &,::osgDB::Options const * );
            
            Registry_exposer.def( 
                "writeObject"
                , writeObject_function_type( &Registry_wrapper::writeObject )
                , ( bp::arg("inst"), bp::arg("obj"), bp::arg("fileName"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::writeObjectImplementation
        
            typedef boost::python::object ( *writeObjectImplementation_function_type )( ::osgDB::Registry &,::osg::Object &,::std::string const &,::osgDB::Options const * );
            
            Registry_exposer.def( 
                "writeObjectImplementation"
                , writeObjectImplementation_function_type( &Registry_wrapper::writeObjectImplementation )
                , ( bp::arg("inst"), bp::arg("obj"), bp::arg("fileName"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::writeShader
        
            typedef boost::python::object ( *writeShader_function_type )( ::osgDB::Registry &,::osg::Shader &,::std::string const &,::osgDB::Options const * );
            
            Registry_exposer.def( 
                "writeShader"
                , writeShader_function_type( &Registry_wrapper::writeShader )
                , ( bp::arg("inst"), bp::arg("obj"), bp::arg("fileName"), bp::arg("options") ) );
        
        }
        { //::osgDB::Registry::writeShaderImplementation
        
            typedef boost::python::object ( *writeShaderImplementation_function_type )( ::osgDB::Registry &,::osg::Shader &,::std::string const &,::osgDB::Options const * );
            
            Registry_exposer.def( 
                "writeShaderImplementation"
                , writeShaderImplementation_function_type( &Registry_wrapper::writeShaderImplementation )
                , ( bp::arg("inst"), bp::arg("obj"), bp::arg("fileName"), bp::arg("options") ) );
        
        }
        Registry_exposer.staticmethod( "instance" );
    }

}
