// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgDB.h"
#include "wrap_referenced.h"
#include "Options.pypp.hpp"

namespace bp = boost::python;

struct Options_wrapper : osgDB::Options, bp::wrapper< osgDB::Options > {

    Options_wrapper( )
    : osgDB::Options( )
      , bp::wrapper< osgDB::Options >(){
        // null constructor
    
    }

    Options_wrapper(::std::string const & str )
    : osgDB::Options( str )
      , bp::wrapper< osgDB::Options >(){
        // constructor
    
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgDB::Options::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgDB::Options::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgDB::Options::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgDB::Options::cloneType( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgDB::Options::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgDB::Options::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgDB::Options::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgDB::Options::libraryName( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_Options_class(){

    { //::osgDB::Options
        typedef bp::class_< Options_wrapper, bp::bases< ::osg::Object >, osg::ref_ptr< Options_wrapper >, boost::noncopyable > Options_exposer_t;
        Options_exposer_t Options_exposer = Options_exposer_t( "Options", "\n Options base class used for passing options into plugins to control their operation.\n", bp::no_init );
        bp::scope Options_scope( Options_exposer );
        bp::enum_< osgDB::Options::BuildKdTreesHint>("BuildKdTreesHint")
            .value("NO_PREFERENCE", osgDB::Options::NO_PREFERENCE)
            .value("DO_NOT_BUILD_KDTREES", osgDB::Options::DO_NOT_BUILD_KDTREES)
            .value("BUILD_KDTREES", osgDB::Options::BUILD_KDTREES)
            .export_values()
            ;
        bp::enum_< osgDB::Options::CacheHintOptions>("CacheHintOptions")
            .value("CACHE_NONE", osgDB::Options::CACHE_NONE)
            .value("CACHE_NODES", osgDB::Options::CACHE_NODES)
            .value("CACHE_IMAGES", osgDB::Options::CACHE_IMAGES)
            .value("CACHE_HEIGHTFIELDS", osgDB::Options::CACHE_HEIGHTFIELDS)
            .value("CACHE_ARCHIVES", osgDB::Options::CACHE_ARCHIVES)
            .value("CACHE_OBJECTS", osgDB::Options::CACHE_OBJECTS)
            .value("CACHE_SHADERS", osgDB::Options::CACHE_SHADERS)
            .value("CACHE_ALL", osgDB::Options::CACHE_ALL)
            .export_values()
            ;
        bp::enum_< osgDB::Options::PrecisionHint>("PrecisionHint")
            .value("FLOAT_PRECISION_ALL", osgDB::Options::FLOAT_PRECISION_ALL)
            .value("DOUBLE_PRECISION_VERTEX", osgDB::Options::DOUBLE_PRECISION_VERTEX)
            .value("DOUBLE_PRECISION_NORMAL", osgDB::Options::DOUBLE_PRECISION_NORMAL)
            .value("DOUBLE_PRECISION_COLOR", osgDB::Options::DOUBLE_PRECISION_COLOR)
            .value("DOUBLE_PRECISION_SECONDARY_COLOR", osgDB::Options::DOUBLE_PRECISION_SECONDARY_COLOR)
            .value("DOUBLE_PRECISION_FOG_COORD", osgDB::Options::DOUBLE_PRECISION_FOG_COORD)
            .value("DOUBLE_PRECISION_TEX_COORD", osgDB::Options::DOUBLE_PRECISION_TEX_COORD)
            .value("DOUBLE_PRECISION_VERTEX_ATTRIB", osgDB::Options::DOUBLE_PRECISION_VERTEX_ATTRIB)
            .value("DOUBLE_PRECISION_ALL", osgDB::Options::DOUBLE_PRECISION_ALL)
            .export_values()
            ;
        Options_exposer.def( bp::init< >() );
        Options_exposer.def( bp::init< std::string const & >(( bp::arg("str") )) );
        { //::osgDB::Options::clone
        
            typedef ::osg::Object * ( ::osgDB::Options::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( Options_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            Options_exposer.def( 
                "clone"
                , clone_function_type(&::osgDB::Options::clone)
                , default_clone_function_type(&Options_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgDB::Options::cloneOptions
        
            typedef ::osgDB::Options * ( ::osgDB::Options::*cloneOptions_function_type )( ::osg::CopyOp const & ) const;
            
            Options_exposer.def( 
                "cloneOptions"
                , cloneOptions_function_type( &::osgDB::Options::cloneOptions )
                , ( bp::arg("copyop")=SHALLOW_COPY )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgDB::Options::cloneType
        
            typedef ::osg::Object * ( ::osgDB::Options::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( Options_wrapper::*default_cloneType_function_type )(  ) const;
            
            Options_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgDB::Options::cloneType)
                , default_cloneType_function_type(&Options_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgDB::Options::getAuthenticationMap
        
            typedef ::osgDB::AuthenticationMap const * ( ::osgDB::Options::*getAuthenticationMap_function_type )(  ) const;
            
            Options_exposer.def( 
                "getAuthenticationMap"
                , getAuthenticationMap_function_type( &::osgDB::Options::getAuthenticationMap )
                , bp::return_internal_reference< >()
                , " Get the password map to be used by plugins when access files from secure locations." );
        
        }
        { //::osgDB::Options::getBuildKdTreesHint
        
            typedef ::osgDB::Options::BuildKdTreesHint ( ::osgDB::Options::*getBuildKdTreesHint_function_type )(  ) const;
            
            Options_exposer.def( 
                "getBuildKdTreesHint"
                , getBuildKdTreesHint_function_type( &::osgDB::Options::getBuildKdTreesHint )
                , " Get whether the KdTrees should be built for geometry in the loader model." );
        
        }
        { //::osgDB::Options::getDatabasePathList
        
            typedef ::osgDB::FilePathList & ( ::osgDB::Options::*getDatabasePathList_function_type )(  ) ;
            
            Options_exposer.def( 
                "getDatabasePathList"
                , getDatabasePathList_function_type( &::osgDB::Options::getDatabasePathList )
                , bp::return_internal_reference< >()
                , " Get the database path which is used a hint of where to look when loading models." );
        
        }
        { //::osgDB::Options::getDatabasePathList
        
            typedef ::osgDB::FilePathList const & ( ::osgDB::Options::*getDatabasePathList_function_type )(  ) const;
            
            Options_exposer.def( 
                "getDatabasePathList"
                , getDatabasePathList_function_type( &::osgDB::Options::getDatabasePathList )
                , bp::return_internal_reference< >()
                , " Get the const database path which is used a hint of where to look when loading models." );
        
        }
        { //::osgDB::Options::getFileCache
        
            typedef ::osgDB::FileCache * ( ::osgDB::Options::*getFileCache_function_type )(  ) const;
            
            Options_exposer.def( 
                "getFileCache"
                , getFileCache_function_type( &::osgDB::Options::getFileCache )
                , bp::return_internal_reference< >()
                , " Get the FileCache that is used to manage local storage of files downloaded from the internet." );
        
        }
        { //::osgDB::Options::getFileLocationCallback
        
            typedef ::osgDB::FileLocationCallback * ( ::osgDB::Options::*getFileLocationCallback_function_type )(  ) const;
            
            Options_exposer.def( 
                "getFileLocationCallback"
                , getFileLocationCallback_function_type( &::osgDB::Options::getFileLocationCallback )
                , bp::return_internal_reference< >()
                , " Get the callback to use inform the DatabasePager whether a file is located on local or remote file system." );
        
        }
        { //::osgDB::Options::getFindFileCallback
        
            typedef ::osgDB::FindFileCallback * ( ::osgDB::Options::*getFindFileCallback_function_type )(  ) const;
            
            Options_exposer.def( 
                "getFindFileCallback"
                , getFindFileCallback_function_type( &::osgDB::Options::getFindFileCallback )
                , bp::return_internal_reference< >()
                , " Get the const findFile callback." );
        
        }
        { //::osgDB::Options::getNumPluginData
        
            typedef unsigned int ( ::osgDB::Options::*getNumPluginData_function_type )(  ) const;
            
            Options_exposer.def( 
                "getNumPluginData"
                , getNumPluginData_function_type( &::osgDB::Options::getNumPluginData )
                , " Get number of PluginData values" );
        
        }
        { //::osgDB::Options::getNumPluginStringData
        
            typedef unsigned int ( ::osgDB::Options::*getNumPluginStringData_function_type )(  ) const;
            
            Options_exposer.def( 
                "getNumPluginStringData"
                , getNumPluginStringData_function_type( &::osgDB::Options::getNumPluginStringData )
                , " Get number of PluginStrData values" );
        
        }
        { //::osgDB::Options::getObjectCacheHint
        
            typedef ::osgDB::Options::CacheHintOptions ( ::osgDB::Options::*getObjectCacheHint_function_type )(  ) const;
            
            Options_exposer.def( 
                "getObjectCacheHint"
                , getObjectCacheHint_function_type( &::osgDB::Options::getObjectCacheHint )
                , " Get whether the Registry::ObjectCache should be used by default." );
        
        }
        { //::osgDB::Options::getOptionString
        
            typedef ::std::string const & ( ::osgDB::Options::*getOptionString_function_type )(  ) const;
            
            Options_exposer.def( 
                "getOptionString"
                , getOptionString_function_type( &::osgDB::Options::getOptionString )
                , bp::return_value_policy< bp::copy_const_reference >()
                , " Get the general Options string." );
        
        }
        { //::osgDB::Options::getPluginStringData
        
            typedef ::std::string & ( ::osgDB::Options::*getPluginStringData_function_type )( ::std::string const & ) ;
            
            Options_exposer.def( 
                "getPluginStringData"
                , getPluginStringData_function_type( &::osgDB::Options::getPluginStringData )
                , ( bp::arg("s") )
                , bp::return_internal_reference< >()
                , " Get a string from the PluginStrData" );
        
        }
        { //::osgDB::Options::getPluginStringData
        
            typedef ::std::string const ( ::osgDB::Options::*getPluginStringData_function_type )( ::std::string const & ) const;
            
            Options_exposer.def( 
                "getPluginStringData"
                , getPluginStringData_function_type( &::osgDB::Options::getPluginStringData )
                , ( bp::arg("s") )
                , " Get a value from the PluginData" );
        
        }
        { //::osgDB::Options::getPrecisionHint
        
            typedef ::osgDB::Options::PrecisionHint ( ::osgDB::Options::*getPrecisionHint_function_type )(  ) const;
            
            Options_exposer.def( 
                "getPrecisionHint"
                , getPrecisionHint_function_type( &::osgDB::Options::getPrecisionHint )
                , " Get which geometry attributes plugins should import at double precision." );
        
        }
        { //::osgDB::Options::getReadFileCallback
        
            typedef ::osgDB::ReadFileCallback * ( ::osgDB::Options::*getReadFileCallback_function_type )(  ) const;
            
            Options_exposer.def( 
                "getReadFileCallback"
                , getReadFileCallback_function_type( &::osgDB::Options::getReadFileCallback )
                , bp::return_internal_reference< >()
                , " Get the const readFile callback." );
        
        }
        { //::osgDB::Options::getTerrain
        
            typedef ::osg::observer_ptr< osg::Node > const & ( ::osgDB::Options::*getTerrain_function_type )(  ) const;
            
            Options_exposer.def( 
                "getTerrain"
                , getTerrain_function_type( &::osgDB::Options::getTerrain )
                , bp::return_internal_reference< >()
                , " Get the terrain observer_ptr, use to decorate any osgTerrain subgraphs." );
        
        }
        { //::osgDB::Options::getWriteFileCallback
        
            typedef ::osgDB::WriteFileCallback * ( ::osgDB::Options::*getWriteFileCallback_function_type )(  ) const;
            
            Options_exposer.def( 
                "getWriteFileCallback"
                , getWriteFileCallback_function_type( &::osgDB::Options::getWriteFileCallback )
                , bp::return_internal_reference< >()
                , " Get the const writeFile callback." );
        
        }
        { //::osgDB::Options::isSameKindAs
        
            typedef bool ( ::osgDB::Options::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( Options_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            Options_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgDB::Options::isSameKindAs)
                , default_isSameKindAs_function_type(&Options_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgDB::Options::libraryName
        
            typedef char const * ( ::osgDB::Options::*libraryName_function_type )(  ) const;
            typedef char const * ( Options_wrapper::*default_libraryName_function_type )(  ) const;
            
            Options_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgDB::Options::libraryName)
                , default_libraryName_function_type(&Options_wrapper::default_libraryName) );
        
        }
        { //::osgDB::Options::parsePluginStringData
        
            typedef void ( ::osgDB::Options::*parsePluginStringData_function_type )( ::std::string const &,char,char ) ;
            
            Options_exposer.def( 
                "parsePluginStringData"
                , parsePluginStringData_function_type( &::osgDB::Options::parsePluginStringData )
                , ( bp::arg("str"), bp::arg("separator1")=(char)(' '), bp::arg("separator2")=(char)('=') )
                , " Parse string into plugin string data. This will be automatically done in Options(const std::string&)" );
        
        }
        { //::osgDB::Options::removePluginData
        
            typedef void ( ::osgDB::Options::*removePluginData_function_type )( ::std::string const & ) const;
            
            Options_exposer.def( 
                "removePluginData"
                , removePluginData_function_type( &::osgDB::Options::removePluginData )
                , ( bp::arg("s") )
                , " Remove a value from the PluginData" );
        
        }
        { //::osgDB::Options::removePluginStringData
        
            typedef void ( ::osgDB::Options::*removePluginStringData_function_type )( ::std::string const & ) const;
            
            Options_exposer.def( 
                "removePluginStringData"
                , removePluginStringData_function_type( &::osgDB::Options::removePluginStringData )
                , ( bp::arg("s") )
                , " Remove a value from the PluginData" );
        
        }
        { //::osgDB::Options::setAuthenticationMap
        
            typedef void ( ::osgDB::Options::*setAuthenticationMap_function_type )( ::osgDB::AuthenticationMap * ) ;
            
            Options_exposer.def( 
                "setAuthenticationMap"
                , setAuthenticationMap_function_type( &::osgDB::Options::setAuthenticationMap )
                , ( bp::arg("authenticationMap") )
                , " Set the password map to be used by plugins when access files from secure locations." );
        
        }
        { //::osgDB::Options::setBuildKdTreesHint
        
            typedef void ( ::osgDB::Options::*setBuildKdTreesHint_function_type )( ::osgDB::Options::BuildKdTreesHint ) ;
            
            Options_exposer.def( 
                "setBuildKdTreesHint"
                , setBuildKdTreesHint_function_type( &::osgDB::Options::setBuildKdTreesHint )
                , ( bp::arg("hint") )
                , " Set whether the KdTrees should be built for geometry in the loader model." );
        
        }
        { //::osgDB::Options::setDatabasePath
        
            typedef void ( ::osgDB::Options::*setDatabasePath_function_type )( ::std::string const & ) ;
            
            Options_exposer.def( 
                "setDatabasePath"
                , setDatabasePath_function_type( &::osgDB::Options::setDatabasePath )
                , ( bp::arg("str") )
                , " Set the database path to use a hint of where to look when loading models." );
        
        }
        { //::osgDB::Options::setFileCache
        
            typedef void ( ::osgDB::Options::*setFileCache_function_type )( ::osgDB::FileCache * ) ;
            
            Options_exposer.def( 
                "setFileCache"
                , setFileCache_function_type( &::osgDB::Options::setFileCache )
                , ( bp::arg("fileCache") )
                , " Set the FileCache that is used to manage local storage of files downloaded from the internet." );
        
        }
        { //::osgDB::Options::setFileLocationCallback
        
            typedef void ( ::osgDB::Options::*setFileLocationCallback_function_type )( ::osgDB::FileLocationCallback * ) ;
            
            Options_exposer.def( 
                "setFileLocationCallback"
                , setFileLocationCallback_function_type( &::osgDB::Options::setFileLocationCallback )
                , ( bp::arg("cb") )
                , " Set the callback to use inform the DatabasePager whether a file is located on local or remote file system." );
        
        }
        { //::osgDB::Options::setFindFileCallback
        
            typedef void ( ::osgDB::Options::*setFindFileCallback_function_type )( ::osgDB::FindFileCallback * ) ;
            
            Options_exposer.def( 
                "setFindFileCallback"
                , setFindFileCallback_function_type( &::osgDB::Options::setFindFileCallback )
                , ( bp::arg("cb") )
                , " Set the find callback to use in place of the default findFile calls." );
        
        }
        { //::osgDB::Options::setObjectCacheHint
        
            typedef void ( ::osgDB::Options::*setObjectCacheHint_function_type )( ::osgDB::Options::CacheHintOptions ) ;
            
            Options_exposer.def( 
                "setObjectCacheHint"
                , setObjectCacheHint_function_type( &::osgDB::Options::setObjectCacheHint )
                , ( bp::arg("useObjectCache") )
                , " Set whether the Registry::ObjectCache should be used by default." );
        
        }
        { //::osgDB::Options::setOptionString
        
            typedef void ( ::osgDB::Options::*setOptionString_function_type )( ::std::string const & ) ;
            
            Options_exposer.def( 
                "setOptionString"
                , setOptionString_function_type( &::osgDB::Options::setOptionString )
                , ( bp::arg("str") )
                , " Set the general Options string." );
        
        }
        { //::osgDB::Options::setPluginData
        
            typedef void ( ::osgDB::Options::*setPluginData_function_type )( ::std::string const &,void * ) const;
            
            Options_exposer.def( 
                "setPluginData"
                , setPluginData_function_type( &::osgDB::Options::setPluginData )
                , ( bp::arg("s"), bp::arg("v") )
                , " Sets a plugindata value PluginData with a string" );
        
        }
        { //::osgDB::Options::setPluginStringData
        
            typedef void ( ::osgDB::Options::*setPluginStringData_function_type )( ::std::string const &,::std::string const & ) const;
            
            Options_exposer.def( 
                "setPluginStringData"
                , setPluginStringData_function_type( &::osgDB::Options::setPluginStringData )
                , ( bp::arg("s"), bp::arg("v") )
                , " Sets a plugindata value PluginData with a string" );
        
        }
        { //::osgDB::Options::setPrecisionHint
        
            typedef void ( ::osgDB::Options::*setPrecisionHint_function_type )( ::osgDB::Options::PrecisionHint ) ;
            
            Options_exposer.def( 
                "setPrecisionHint"
                , setPrecisionHint_function_type( &::osgDB::Options::setPrecisionHint )
                , ( bp::arg("hint") )
                , " Set which geometry attributes plugins should import at double precision." );
        
        }
        { //::osgDB::Options::setReadFileCallback
        
            typedef void ( ::osgDB::Options::*setReadFileCallback_function_type )( ::osgDB::ReadFileCallback * ) ;
            
            Options_exposer.def( 
                "setReadFileCallback"
                , setReadFileCallback_function_type( &::osgDB::Options::setReadFileCallback )
                , ( bp::arg("cb") )
                , " Set the read callback to use in place of the default readFile calls." );
        
        }
        { //::osgDB::Options::setTerrain
        
            typedef void ( ::osgDB::Options::*setTerrain_function_type )( ::osg::observer_ptr< osg::Node > & ) ;
            
            Options_exposer.def( 
                "setTerrain"
                , setTerrain_function_type( &::osgDB::Options::setTerrain )
                , ( bp::arg("terrain") )
                , " Set the terrain observer_ptr, use to decorate any osgTerrain subgraphs." );
        
        }
        { //::osgDB::Options::setWriteFileCallback
        
            typedef void ( ::osgDB::Options::*setWriteFileCallback_function_type )( ::osgDB::WriteFileCallback * ) ;
            
            Options_exposer.def( 
                "setWriteFileCallback"
                , setWriteFileCallback_function_type( &::osgDB::Options::setWriteFileCallback )
                , ( bp::arg("cb") )
                , " Set the callback to use in place of the default writeFile calls." );
        
        }
    }

}
