// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "__convenience.pypp.hpp"
#include "wrap_osgUtil.h"
#include "wrap_referenced.h"
#include "Intersector.pypp.hpp"

namespace bp = boost::python;

struct Intersector_wrapper : osgUtil::Intersector, bp::wrapper< osgUtil::Intersector > {

    virtual ::osgUtil::Intersector * clone( ::osgUtil::IntersectionVisitor & iv ){
        bp::override func_clone = this->get_override( "clone" );
        return func_clone( boost::ref(iv) );
    }

    virtual bool containsIntersections(  ){
        bp::override func_containsIntersections = this->get_override( "containsIntersections" );
        return func_containsIntersections(  );
    }

    virtual bool enter( ::osg::Node const & node ) {
        namespace bpl = boost::python;
        if( bpl::override func_enter = this->get_override( "enter" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_enter.ptr(), node );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
              PyErr_SetString(PyExc_NotImplementedError, "Attempted calling Pure Virtual function that is not implemented :enter");
              boost::python::throw_error_already_set();
        }
    }
    
    static boost::python::object default_enter( ::osgUtil::Intersector & inst, ::osg::Node & node ){
        bool result;
        if( dynamic_cast< Intersector_wrapper * >( boost::addressof( inst ) ) ){
              PyErr_SetString(PyExc_NotImplementedError, "Attempted calling Pure Virtual function that is not implemented :enter");
              boost::python::throw_error_already_set();
        }
        else{
            result = inst.enter(node);
        }
        return bp::object( result );
    }

    virtual void intersect( ::osgUtil::IntersectionVisitor & iv, ::osg::Drawable * drawable ){
        bp::override func_intersect = this->get_override( "intersect" );
        func_intersect( boost::ref(iv), boost::python::ptr(drawable) );
    }

    virtual void leave(  ){
        bp::override func_leave = this->get_override( "leave" );
        func_leave(  );
    }

    virtual void reset(  ) {
        if( bp::override func_reset = this->get_override( "reset" ) )
            func_reset(  );
        else{
            this->osgUtil::Intersector::reset(  );
        }
    }
    
    void default_reset(  ) {
        osgUtil::Intersector::reset( );
    }

};

void register_Intersector_class(){

    { //::osgUtil::Intersector
        typedef bp::class_< Intersector_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< Intersector_wrapper >, boost::noncopyable > Intersector_exposer_t;
        Intersector_exposer_t Intersector_exposer = Intersector_exposer_t( "Intersector", bp::no_init );
        bp::scope Intersector_scope( Intersector_exposer );
        bp::enum_< osgUtil::Intersector::CoordinateFrame>("CoordinateFrame")
            .value("WINDOW", osgUtil::Intersector::WINDOW)
            .value("PROJECTION", osgUtil::Intersector::PROJECTION)
            .value("VIEW", osgUtil::Intersector::VIEW)
            .value("MODEL", osgUtil::Intersector::MODEL)
            .export_values()
            ;
        bp::enum_< osgUtil::Intersector::IntersectionLimit>("IntersectionLimit")
            .value("NO_LIMIT", osgUtil::Intersector::NO_LIMIT)
            .value("LIMIT_ONE_PER_DRAWABLE", osgUtil::Intersector::LIMIT_ONE_PER_DRAWABLE)
            .value("LIMIT_ONE", osgUtil::Intersector::LIMIT_ONE)
            .value("LIMIT_NEAREST", osgUtil::Intersector::LIMIT_NEAREST)
            .export_values()
            ;
        { //::osgUtil::Intersector::clone
        
            typedef ::osgUtil::Intersector * ( ::osgUtil::Intersector::*clone_function_type )( ::osgUtil::IntersectionVisitor & ) ;
            
            Intersector_exposer.def( 
                "clone"
                , bp::pure_virtual( clone_function_type(&::osgUtil::Intersector::clone) )
                , ( bp::arg("iv") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgUtil::Intersector::containsIntersections
        
            typedef bool ( ::osgUtil::Intersector::*containsIntersections_function_type )(  ) ;
            
            Intersector_exposer.def( 
                "containsIntersections"
                , bp::pure_virtual( containsIntersections_function_type(&::osgUtil::Intersector::containsIntersections) ) );
        
        }
        { //::osgUtil::Intersector::decrementDisabledCount
        
            typedef void ( ::osgUtil::Intersector::*decrementDisabledCount_function_type )(  ) ;
            
            Intersector_exposer.def( 
                "decrementDisabledCount"
                , decrementDisabledCount_function_type( &::osgUtil::Intersector::decrementDisabledCount ) );
        
        }
        { //::osgUtil::Intersector::disabled
        
            typedef bool ( ::osgUtil::Intersector::*disabled_function_type )(  ) const;
            
            Intersector_exposer.def( 
                "disabled"
                , disabled_function_type( &::osgUtil::Intersector::disabled ) );
        
        }
        { //::osgUtil::Intersector::enter
        
            typedef boost::python::object ( *default_enter_function_type )( ::osgUtil::Intersector &,::osg::Node & );
            
            Intersector_exposer.def( 
                "enter"
                , default_enter_function_type( &Intersector_wrapper::default_enter )
                , ( bp::arg("inst"), bp::arg("node") ) );
        
        }
        { //::osgUtil::Intersector::getCoordinateFrame
        
            typedef ::osgUtil::Intersector::CoordinateFrame ( ::osgUtil::Intersector::*getCoordinateFrame_function_type )(  ) const;
            
            Intersector_exposer.def( 
                "getCoordinateFrame"
                , getCoordinateFrame_function_type( &::osgUtil::Intersector::getCoordinateFrame ) );
        
        }
        { //::osgUtil::Intersector::getIntersectionLimit
        
            typedef ::osgUtil::Intersector::IntersectionLimit ( ::osgUtil::Intersector::*getIntersectionLimit_function_type )(  ) const;
            
            Intersector_exposer.def( 
                "getIntersectionLimit"
                , getIntersectionLimit_function_type( &::osgUtil::Intersector::getIntersectionLimit ) );
        
        }
        { //::osgUtil::Intersector::incrementDisabledCount
        
            typedef void ( ::osgUtil::Intersector::*incrementDisabledCount_function_type )(  ) ;
            
            Intersector_exposer.def( 
                "incrementDisabledCount"
                , incrementDisabledCount_function_type( &::osgUtil::Intersector::incrementDisabledCount ) );
        
        }
        { //::osgUtil::Intersector::intersect
        
            typedef void ( ::osgUtil::Intersector::*intersect_function_type )( ::osgUtil::IntersectionVisitor &,::osg::Drawable * ) ;
            
            Intersector_exposer.def( 
                "intersect"
                , bp::pure_virtual( intersect_function_type(&::osgUtil::Intersector::intersect) )
                , ( bp::arg("iv"), bp::arg("drawable") ) );
        
        }
        { //::osgUtil::Intersector::leave
        
            typedef void ( ::osgUtil::Intersector::*leave_function_type )(  ) ;
            
            Intersector_exposer.def( 
                "leave"
                , bp::pure_virtual( leave_function_type(&::osgUtil::Intersector::leave) ) );
        
        }
        { //::osgUtil::Intersector::reachedLimit
        
            typedef bool ( ::osgUtil::Intersector::*reachedLimit_function_type )(  ) ;
            
            Intersector_exposer.def( 
                "reachedLimit"
                , reachedLimit_function_type( &::osgUtil::Intersector::reachedLimit ) );
        
        }
        { //::osgUtil::Intersector::reset
        
            typedef void ( ::osgUtil::Intersector::*reset_function_type )(  ) ;
            typedef void ( Intersector_wrapper::*default_reset_function_type )(  ) ;
            
            Intersector_exposer.def( 
                "reset"
                , reset_function_type(&::osgUtil::Intersector::reset)
                , default_reset_function_type(&Intersector_wrapper::default_reset) );
        
        }
        { //::osgUtil::Intersector::setCoordinateFrame
        
            typedef void ( ::osgUtil::Intersector::*setCoordinateFrame_function_type )( ::osgUtil::Intersector::CoordinateFrame ) ;
            
            Intersector_exposer.def( 
                "setCoordinateFrame"
                , setCoordinateFrame_function_type( &::osgUtil::Intersector::setCoordinateFrame )
                , ( bp::arg("cf") ) );
        
        }
        { //::osgUtil::Intersector::setIntersectionLimit
        
            typedef void ( ::osgUtil::Intersector::*setIntersectionLimit_function_type )( ::osgUtil::Intersector::IntersectionLimit ) ;
            
            Intersector_exposer.def( 
                "setIntersectionLimit"
                , setIntersectionLimit_function_type( &::osgUtil::Intersector::setIntersectionLimit )
                , ( bp::arg("limit") ) );
        
        }
    }

}
