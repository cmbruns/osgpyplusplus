// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgUtil.h"
#include "wrap_referenced.h"
#include "StateToCompile.pypp.hpp"

namespace bp = boost::python;

struct StateToCompile_wrapper : osgUtil::StateToCompile, bp::wrapper< osgUtil::StateToCompile > {

    StateToCompile_wrapper(unsigned int mode )
    : osgUtil::StateToCompile( mode )
      , bp::wrapper< osgUtil::StateToCompile >(){
        // constructor
    
    }

    virtual void apply( ::osg::Node & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osgUtil::StateToCompile::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Node & node ) {
        osgUtil::StateToCompile::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Geode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osgUtil::StateToCompile::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Geode & node ) {
        osgUtil::StateToCompile::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Drawable & drawable ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(drawable) );
        else{
            this->osgUtil::StateToCompile::apply( boost::ref(drawable) );
        }
    }
    
    void default_apply( ::osg::Drawable & drawable ) {
        osgUtil::StateToCompile::apply( boost::ref(drawable) );
    }

    virtual void apply( ::osg::StateSet & stateset ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(stateset) );
        else{
            this->osgUtil::StateToCompile::apply( boost::ref(stateset) );
        }
    }
    
    void default_apply( ::osg::StateSet & stateset ) {
        osgUtil::StateToCompile::apply( boost::ref(stateset) );
    }

    virtual void apply( ::osg::Texture & texture ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(texture) );
        else{
            this->osgUtil::StateToCompile::apply( boost::ref(texture) );
        }
    }
    
    void default_apply( ::osg::Texture & texture ) {
        osgUtil::StateToCompile::apply( boost::ref(texture) );
    }

    virtual void apply( ::osg::Billboard & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Billboard & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Group & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Group & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::ProxyNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::ProxyNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Projection & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Projection & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::CoordinateSystemNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::CoordinateSystemNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::ClipNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::ClipNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::TexGenNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::TexGenNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::LightSource & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::LightSource & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Transform & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Transform & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Camera & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Camera & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::CameraView & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::CameraView & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::MatrixTransform & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::MatrixTransform & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::PositionAttitudeTransform & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::PositionAttitudeTransform & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Switch & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Switch & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Sequence & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Sequence & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::LOD & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::LOD & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::PagedLOD & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::PagedLOD & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::ClearNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::ClearNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::OccluderNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::OccluderNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::OcclusionQueryNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::OcclusionQueryNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osg::NodeVisitor::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osg::NodeVisitor::className( );
    }

    virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
            return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        else{
            return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    }
    
    float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
    }

    virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
            return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
        else{
            return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    }
    
    float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
    }

    virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
            return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
        else{
            return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    }
    
    float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
    }

    virtual ::osg::Vec3 getEyePoint(  ) const  {
        if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
            return func_getEyePoint(  );
        else{
            return this->osg::NodeVisitor::getEyePoint(  );
        }
    }
    
    ::osg::Vec3 default_getEyePoint(  ) const  {
        return osg::NodeVisitor::getEyePoint( );
    }

    virtual ::osg::Vec3 getViewPoint(  ) const  {
        if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
            return func_getViewPoint(  );
        else{
            return this->osg::NodeVisitor::getViewPoint(  );
        }
    }
    
    ::osg::Vec3 default_getViewPoint(  ) const  {
        return osg::NodeVisitor::getViewPoint( );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osg::NodeVisitor::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osg::NodeVisitor::libraryName( );
    }

    virtual void reset(  ) {
        if( bp::override func_reset = this->get_override( "reset" ) )
            func_reset(  );
        else{
            this->osg::NodeVisitor::reset(  );
        }
    }
    
    void default_reset(  ) {
        osg::NodeVisitor::reset( );
    }

};

void register_StateToCompile_class(){

    { //::osgUtil::StateToCompile
        typedef bp::class_< StateToCompile_wrapper, bp::bases< ::osg::NodeVisitor >, osg::ref_ptr< StateToCompile_wrapper >, boost::noncopyable > StateToCompile_exposer_t;
        StateToCompile_exposer_t StateToCompile_exposer = StateToCompile_exposer_t( "StateToCompile", bp::init< unsigned int >(( bp::arg("mode") )) );
        bp::scope StateToCompile_scope( StateToCompile_exposer );
        bp::implicitly_convertible< unsigned int, osgUtil::StateToCompile >();
        { //::osgUtil::StateToCompile::apply
        
            typedef void ( ::osgUtil::StateToCompile::*apply_function_type )( ::osg::Node & ) ;
            typedef void ( StateToCompile_wrapper::*default_apply_function_type )( ::osg::Node & ) ;
            
            StateToCompile_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::StateToCompile::apply)
                , default_apply_function_type(&StateToCompile_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osgUtil::StateToCompile::apply
        
            typedef void ( ::osgUtil::StateToCompile::*apply_function_type )( ::osg::Geode & ) ;
            typedef void ( StateToCompile_wrapper::*default_apply_function_type )( ::osg::Geode & ) ;
            
            StateToCompile_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::StateToCompile::apply)
                , default_apply_function_type(&StateToCompile_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osgUtil::StateToCompile::apply
        
            typedef void ( ::osgUtil::StateToCompile::*apply_function_type )( ::osg::Drawable & ) ;
            typedef void ( StateToCompile_wrapper::*default_apply_function_type )( ::osg::Drawable & ) ;
            
            StateToCompile_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::StateToCompile::apply)
                , default_apply_function_type(&StateToCompile_wrapper::default_apply)
                , ( bp::arg("drawable") ) );
        
        }
        { //::osgUtil::StateToCompile::apply
        
            typedef void ( ::osgUtil::StateToCompile::*apply_function_type )( ::osg::StateSet & ) ;
            typedef void ( StateToCompile_wrapper::*default_apply_function_type )( ::osg::StateSet & ) ;
            
            StateToCompile_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::StateToCompile::apply)
                , default_apply_function_type(&StateToCompile_wrapper::default_apply)
                , ( bp::arg("stateset") ) );
        
        }
        { //::osgUtil::StateToCompile::apply
        
            typedef void ( ::osgUtil::StateToCompile::*apply_function_type )( ::osg::Texture & ) ;
            typedef void ( StateToCompile_wrapper::*default_apply_function_type )( ::osg::Texture & ) ;
            
            StateToCompile_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::StateToCompile::apply)
                , default_apply_function_type(&StateToCompile_wrapper::default_apply)
                , ( bp::arg("texture") ) );
        
        }
        { //::osgUtil::StateToCompile::empty
        
            typedef bool ( ::osgUtil::StateToCompile::*empty_function_type )(  ) const;
            
            StateToCompile_exposer.def( 
                "empty"
                , empty_function_type( &::osgUtil::StateToCompile::empty ) );
        
        }
        StateToCompile_exposer.def_readwrite( "_assignPBOToImages", &osgUtil::StateToCompile::_assignPBOToImages );
        StateToCompile_exposer.def_readwrite( "_drawables", &osgUtil::StateToCompile::_drawables );
        StateToCompile_exposer.def_readwrite( "_drawablesHandled", &osgUtil::StateToCompile::_drawablesHandled );
        StateToCompile_exposer.def_readwrite( "_mode", &osgUtil::StateToCompile::_mode );
        StateToCompile_exposer.def_readwrite( "_pbo", &osgUtil::StateToCompile::_pbo );
        StateToCompile_exposer.def_readwrite( "_programs", &osgUtil::StateToCompile::_programs );
        StateToCompile_exposer.def_readwrite( "_statesetsHandled", &osgUtil::StateToCompile::_statesetsHandled );
        StateToCompile_exposer.def_readwrite( "_textures", &osgUtil::StateToCompile::_textures );
    }

}
