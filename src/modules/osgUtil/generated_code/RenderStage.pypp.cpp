// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgUtil.h"
#include "wrap_referenced.h"
#include "RenderStage.pypp.hpp"

namespace bp = boost::python;

struct RenderStage_wrapper : osgUtil::RenderStage, bp::wrapper< osgUtil::RenderStage > {

    RenderStage_wrapper( )
    : osgUtil::RenderStage( )
      , bp::wrapper< osgUtil::RenderStage >(){
        // null constructor
    
    }

    RenderStage_wrapper(::osgUtil::RenderBin::SortMode mode )
    : osgUtil::RenderStage( mode )
      , bp::wrapper< osgUtil::RenderStage >(){
        // constructor
    
    }

    virtual void addPositionedAttribute( ::osg::RefMatrix * matrix, ::osg::StateAttribute const * attr ) {
        if( bp::override func_addPositionedAttribute = this->get_override( "addPositionedAttribute" ) )
            func_addPositionedAttribute( boost::python::ptr(matrix), boost::python::ptr(attr) );
        else{
            this->osgUtil::RenderStage::addPositionedAttribute( boost::python::ptr(matrix), boost::python::ptr(attr) );
        }
    }
    
    void default_addPositionedAttribute( ::osg::RefMatrix * matrix, ::osg::StateAttribute const * attr ) {
        osgUtil::RenderStage::addPositionedAttribute( boost::python::ptr(matrix), boost::python::ptr(attr) );
    }

    virtual void addPositionedTextureAttribute( unsigned int textureUnit, ::osg::RefMatrix * matrix, ::osg::StateAttribute const * attr ) {
        if( bp::override func_addPositionedTextureAttribute = this->get_override( "addPositionedTextureAttribute" ) )
            func_addPositionedTextureAttribute( textureUnit, boost::python::ptr(matrix), boost::python::ptr(attr) );
        else{
            this->osgUtil::RenderStage::addPositionedTextureAttribute( textureUnit, boost::python::ptr(matrix), boost::python::ptr(attr) );
        }
    }
    
    void default_addPositionedTextureAttribute( unsigned int textureUnit, ::osg::RefMatrix * matrix, ::osg::StateAttribute const * attr ) {
        osgUtil::RenderStage::addPositionedTextureAttribute( textureUnit, boost::python::ptr(matrix), boost::python::ptr(attr) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgUtil::RenderStage::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgUtil::RenderStage::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgUtil::RenderStage::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgUtil::RenderStage::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgUtil::RenderStage::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgUtil::RenderStage::cloneType( );
    }

    virtual unsigned int computeNumberOfDynamicRenderLeaves(  ) const  {
        if( bp::override func_computeNumberOfDynamicRenderLeaves = this->get_override( "computeNumberOfDynamicRenderLeaves" ) )
            return func_computeNumberOfDynamicRenderLeaves(  );
        else{
            return this->osgUtil::RenderStage::computeNumberOfDynamicRenderLeaves(  );
        }
    }
    
    unsigned int default_computeNumberOfDynamicRenderLeaves(  ) const  {
        return osgUtil::RenderStage::computeNumberOfDynamicRenderLeaves( );
    }

    virtual void draw( ::osg::RenderInfo & renderInfo, ::osgUtil::RenderLeaf * & previous ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw( boost::ref(renderInfo), boost::ref(previous) );
        else{
            this->osgUtil::RenderStage::draw( boost::ref(renderInfo), boost::ref(previous) );
        }
    }
    
    void default_draw( ::osg::RenderInfo & renderInfo, ::osgUtil::RenderLeaf * & previous ) {
        osgUtil::RenderStage::draw( boost::ref(renderInfo), boost::ref(previous) );
    }

    virtual void drawImplementation( ::osg::RenderInfo & renderInfo, ::osgUtil::RenderLeaf * & previous ) {
        if( bp::override func_drawImplementation = this->get_override( "drawImplementation" ) )
            func_drawImplementation( boost::ref(renderInfo), boost::ref(previous) );
        else{
            this->osgUtil::RenderStage::drawImplementation( boost::ref(renderInfo), boost::ref(previous) );
        }
    }
    
    void default_drawImplementation( ::osg::RenderInfo & renderInfo, ::osgUtil::RenderLeaf * & previous ) {
        osgUtil::RenderStage::drawImplementation( boost::ref(renderInfo), boost::ref(previous) );
    }

    virtual void drawInner( ::osg::RenderInfo & renderInfo, ::osgUtil::RenderLeaf * & previous, bool & doCopyTexture ) {
        if( bp::override func_drawInner = this->get_override( "drawInner" ) )
            func_drawInner( boost::ref(renderInfo), boost::ref(previous), doCopyTexture );
        else{
            this->osgUtil::RenderStage::drawInner( boost::ref(renderInfo), boost::ref(previous), doCopyTexture );
        }
    }
    
    void default_drawInner( ::osg::RenderInfo & renderInfo, ::osgUtil::RenderLeaf * & previous, bool & doCopyTexture ) {
        osgUtil::RenderStage::drawInner( boost::ref(renderInfo), boost::ref(previous), doCopyTexture );
    }

    virtual void drawPostRenderStages( ::osg::RenderInfo & renderInfo, ::osgUtil::RenderLeaf * & previous ) {
        if( bp::override func_drawPostRenderStages = this->get_override( "drawPostRenderStages" ) )
            func_drawPostRenderStages( boost::ref(renderInfo), boost::ref(previous) );
        else{
            this->osgUtil::RenderStage::drawPostRenderStages( boost::ref(renderInfo), boost::ref(previous) );
        }
    }
    
    void default_drawPostRenderStages( ::osg::RenderInfo & renderInfo, ::osgUtil::RenderLeaf * & previous ) {
        osgUtil::RenderStage::drawPostRenderStages( boost::ref(renderInfo), boost::ref(previous) );
    }

    virtual void drawPreRenderStages( ::osg::RenderInfo & renderInfo, ::osgUtil::RenderLeaf * & previous ) {
        if( bp::override func_drawPreRenderStages = this->get_override( "drawPreRenderStages" ) )
            func_drawPreRenderStages( boost::ref(renderInfo), boost::ref(previous) );
        else{
            this->osgUtil::RenderStage::drawPreRenderStages( boost::ref(renderInfo), boost::ref(previous) );
        }
    }
    
    void default_drawPreRenderStages( ::osg::RenderInfo & renderInfo, ::osgUtil::RenderLeaf * & previous ) {
        osgUtil::RenderStage::drawPreRenderStages( boost::ref(renderInfo), boost::ref(previous) );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgUtil::RenderStage::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgUtil::RenderStage::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual void releaseGLObjects( ::osg::State * state=0 ) const  {
        if( bp::override func_releaseGLObjects = this->get_override( "releaseGLObjects" ) )
            func_releaseGLObjects( boost::python::ptr(state) );
        else{
            this->osgUtil::RenderStage::releaseGLObjects( boost::python::ptr(state) );
        }
    }
    
    void default_releaseGLObjects( ::osg::State * state=0 ) const  {
        osgUtil::RenderStage::releaseGLObjects( boost::python::ptr(state) );
    }

    virtual void reset(  ) {
        if( bp::override func_reset = this->get_override( "reset" ) )
            func_reset(  );
        else{
            this->osgUtil::RenderStage::reset(  );
        }
    }
    
    void default_reset(  ) {
        osgUtil::RenderStage::reset( );
    }

    virtual void sort(  ) {
        if( bp::override func_sort = this->get_override( "sort" ) )
            func_sort(  );
        else{
            this->osgUtil::RenderStage::sort(  );
        }
    }
    
    void default_sort(  ) {
        osgUtil::RenderStage::sort( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgUtil::RenderBin::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgUtil::RenderBin::libraryName( );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

    virtual void sortBackToFront(  ) {
        if( bp::override func_sortBackToFront = this->get_override( "sortBackToFront" ) )
            func_sortBackToFront(  );
        else{
            this->osgUtil::RenderBin::sortBackToFront(  );
        }
    }
    
    void default_sortBackToFront(  ) {
        osgUtil::RenderBin::sortBackToFront( );
    }

    virtual void sortByState(  ) {
        if( bp::override func_sortByState = this->get_override( "sortByState" ) )
            func_sortByState(  );
        else{
            this->osgUtil::RenderBin::sortByState(  );
        }
    }
    
    void default_sortByState(  ) {
        osgUtil::RenderBin::sortByState( );
    }

    virtual void sortByStateThenFrontToBack(  ) {
        if( bp::override func_sortByStateThenFrontToBack = this->get_override( "sortByStateThenFrontToBack" ) )
            func_sortByStateThenFrontToBack(  );
        else{
            this->osgUtil::RenderBin::sortByStateThenFrontToBack(  );
        }
    }
    
    void default_sortByStateThenFrontToBack(  ) {
        osgUtil::RenderBin::sortByStateThenFrontToBack( );
    }

    virtual void sortFrontToBack(  ) {
        if( bp::override func_sortFrontToBack = this->get_override( "sortFrontToBack" ) )
            func_sortFrontToBack(  );
        else{
            this->osgUtil::RenderBin::sortFrontToBack(  );
        }
    }
    
    void default_sortFrontToBack(  ) {
        osgUtil::RenderBin::sortFrontToBack( );
    }

    virtual void sortImplementation(  ) {
        if( bp::override func_sortImplementation = this->get_override( "sortImplementation" ) )
            func_sortImplementation(  );
        else{
            this->osgUtil::RenderBin::sortImplementation(  );
        }
    }
    
    void default_sortImplementation(  ) {
        osgUtil::RenderBin::sortImplementation( );
    }

    virtual void sortTraversalOrder(  ) {
        if( bp::override func_sortTraversalOrder = this->get_override( "sortTraversalOrder" ) )
            func_sortTraversalOrder(  );
        else{
            this->osgUtil::RenderBin::sortTraversalOrder(  );
        }
    }
    
    void default_sortTraversalOrder(  ) {
        osgUtil::RenderBin::sortTraversalOrder( );
    }

};

void register_RenderStage_class(){

    { //::osgUtil::RenderStage
        typedef bp::class_< RenderStage_wrapper, bp::bases< osgUtil::RenderBin >, osg::ref_ptr< RenderStage_wrapper >, boost::noncopyable > RenderStage_exposer_t;
        RenderStage_exposer_t RenderStage_exposer = RenderStage_exposer_t( "RenderStage", "\n RenderStage base class. Used for encapsulate a complete stage in\n rendering - setting up of viewport, the projection and model\n matrices and rendering the RenderBins enclosed with this RenderStage.\n RenderStage also has a dependency list of other RenderStages, each\n of which must be called before the rendering of this stage.  These\n pre rendering stages are used for advanced rendering techniques\n like multistage pixel shading or impostors.\n", bp::no_init );
        bp::scope RenderStage_scope( RenderStage_exposer );
        bp::class_< osgUtil::RenderStage::Attachment >( "Attachment" )    
            .def_readwrite( "_image", &osgUtil::RenderStage::Attachment::_image )    
            .def_readwrite( "_imageReadPixelDataType", &osgUtil::RenderStage::Attachment::_imageReadPixelDataType )    
            .def_readwrite( "_imageReadPixelFormat", &osgUtil::RenderStage::Attachment::_imageReadPixelFormat );
        RenderStage_exposer.def( bp::init< >("\n RenderStage base class. Used for encapsulate a complete stage in\n rendering - setting up of viewport, the projection and model\n matrices and rendering the RenderBins enclosed with this RenderStage.\n RenderStage also has a dependency list of other RenderStages, each\n of which must be called before the rendering of this stage.  These\n pre rendering stages are used for advanced rendering techniques\n like multistage pixel shading or impostors.\n") );
        RenderStage_exposer.def( bp::init< osgUtil::RenderBin::SortMode >(( bp::arg("mode") )) );
        bp::implicitly_convertible< osgUtil::RenderBin::SortMode, osgUtil::RenderStage >();
        { //::osgUtil::RenderStage::addPositionedAttribute
        
            typedef void ( ::osgUtil::RenderStage::*addPositionedAttribute_function_type )( ::osg::RefMatrix *,::osg::StateAttribute const * ) ;
            typedef void ( RenderStage_wrapper::*default_addPositionedAttribute_function_type )( ::osg::RefMatrix *,::osg::StateAttribute const * ) ;
            
            RenderStage_exposer.def( 
                "addPositionedAttribute"
                , addPositionedAttribute_function_type(&::osgUtil::RenderStage::addPositionedAttribute)
                , default_addPositionedAttribute_function_type(&RenderStage_wrapper::default_addPositionedAttribute)
                , ( bp::arg("matrix"), bp::arg("attr") ) );
        
        }
        { //::osgUtil::RenderStage::addPositionedTextureAttribute
        
            typedef void ( ::osgUtil::RenderStage::*addPositionedTextureAttribute_function_type )( unsigned int,::osg::RefMatrix *,::osg::StateAttribute const * ) ;
            typedef void ( RenderStage_wrapper::*default_addPositionedTextureAttribute_function_type )( unsigned int,::osg::RefMatrix *,::osg::StateAttribute const * ) ;
            
            RenderStage_exposer.def( 
                "addPositionedTextureAttribute"
                , addPositionedTextureAttribute_function_type(&::osgUtil::RenderStage::addPositionedTextureAttribute)
                , default_addPositionedTextureAttribute_function_type(&RenderStage_wrapper::default_addPositionedTextureAttribute)
                , ( bp::arg("textureUnit"), bp::arg("matrix"), bp::arg("attr") ) );
        
        }
        { //::osgUtil::RenderStage::addPostRenderStage
        
            typedef void ( ::osgUtil::RenderStage::*addPostRenderStage_function_type )( ::osgUtil::RenderStage *,int ) ;
            
            RenderStage_exposer.def( 
                "addPostRenderStage"
                , addPostRenderStage_function_type( &::osgUtil::RenderStage::addPostRenderStage )
                , ( bp::arg("rs"), bp::arg("order")=(int)(0) ) );
        
        }
        { //::osgUtil::RenderStage::addPreRenderStage
        
            typedef void ( ::osgUtil::RenderStage::*addPreRenderStage_function_type )( ::osgUtil::RenderStage *,int ) ;
            
            RenderStage_exposer.def( 
                "addPreRenderStage"
                , addPreRenderStage_function_type( &::osgUtil::RenderStage::addPreRenderStage )
                , ( bp::arg("rs"), bp::arg("order")=(int)(0) ) );
        
        }
        { //::osgUtil::RenderStage::addToDependencyList
        
            typedef void ( ::osgUtil::RenderStage::*addToDependencyList_function_type )( ::osgUtil::RenderStage * ) ;
            
            RenderStage_exposer.def( 
                "addToDependencyList"
                , addToDependencyList_function_type( &::osgUtil::RenderStage::addToDependencyList )
                , ( bp::arg("rs") ) );
        
        }
        { //::osgUtil::RenderStage::attach
        
            typedef void ( ::osgUtil::RenderStage::*attach_function_type )( ::osg::Camera::BufferComponent,::osg::Image * ) ;
            
            RenderStage_exposer.def( 
                "attach"
                , attach_function_type( &::osgUtil::RenderStage::attach )
                , ( bp::arg("buffer"), bp::arg("image") ) );
        
        }
        { //::osgUtil::RenderStage::className
        
            typedef char const * ( ::osgUtil::RenderStage::*className_function_type )(  ) const;
            typedef char const * ( RenderStage_wrapper::*default_className_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "className"
                , className_function_type(&::osgUtil::RenderStage::className)
                , default_className_function_type(&RenderStage_wrapper::default_className) );
        
        }
        { //::osgUtil::RenderStage::clearReferencesToDependentCameras
        
            typedef void ( ::osgUtil::RenderStage::*clearReferencesToDependentCameras_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "clearReferencesToDependentCameras"
                , clearReferencesToDependentCameras_function_type( &::osgUtil::RenderStage::clearReferencesToDependentCameras )
                , "\n clear the references to any dependent cameras.\n" );
        
        }
        { //::osgUtil::RenderStage::clone
        
            typedef ::osg::Object * ( ::osgUtil::RenderStage::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( RenderStage_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            RenderStage_exposer.def( 
                "clone"
                , clone_function_type(&::osgUtil::RenderStage::clone)
                , default_clone_function_type(&RenderStage_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgUtil::RenderStage::cloneType
        
            typedef ::osg::Object * ( ::osgUtil::RenderStage::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( RenderStage_wrapper::*default_cloneType_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgUtil::RenderStage::cloneType)
                , default_cloneType_function_type(&RenderStage_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgUtil::RenderStage::collateReferencesToDependentCameras
        
            typedef void ( ::osgUtil::RenderStage::*collateReferencesToDependentCameras_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "collateReferencesToDependentCameras"
                , collateReferencesToDependentCameras_function_type( &::osgUtil::RenderStage::collateReferencesToDependentCameras )
                , "\n search through any pre and post RenderStage that reference a Camera, and take a reference to each of these cameras to prevent them being deleted while they are still be used by the drawing thread.\n" );
        
        }
        { //::osgUtil::RenderStage::computeNumberOfDynamicRenderLeaves
        
            typedef unsigned int ( ::osgUtil::RenderStage::*computeNumberOfDynamicRenderLeaves_function_type )(  ) const;
            typedef unsigned int ( RenderStage_wrapper::*default_computeNumberOfDynamicRenderLeaves_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "computeNumberOfDynamicRenderLeaves"
                , computeNumberOfDynamicRenderLeaves_function_type(&::osgUtil::RenderStage::computeNumberOfDynamicRenderLeaves)
                , default_computeNumberOfDynamicRenderLeaves_function_type(&RenderStage_wrapper::default_computeNumberOfDynamicRenderLeaves) );
        
        }
        { //::osgUtil::RenderStage::copyTexture
        
            typedef void ( ::osgUtil::RenderStage::*copyTexture_function_type )( ::osg::RenderInfo & ) ;
            
            RenderStage_exposer.def( 
                "copyTexture"
                , copyTexture_function_type( &::osgUtil::RenderStage::copyTexture )
                , ( bp::arg("renderInfo") ) );
        
        }
        { //::osgUtil::RenderStage::draw
        
            typedef void ( ::osgUtil::RenderStage::*draw_function_type )( ::osg::RenderInfo &,::osgUtil::RenderLeaf * & ) ;
            typedef void ( RenderStage_wrapper::*default_draw_function_type )( ::osg::RenderInfo &,::osgUtil::RenderLeaf * & ) ;
            
            RenderStage_exposer.def( 
                "draw"
                , draw_function_type(&::osgUtil::RenderStage::draw)
                , default_draw_function_type(&RenderStage_wrapper::default_draw)
                , ( bp::arg("renderInfo"), bp::arg("previous") ) );
        
        }
        { //::osgUtil::RenderStage::drawImplementation
        
            typedef void ( ::osgUtil::RenderStage::*drawImplementation_function_type )( ::osg::RenderInfo &,::osgUtil::RenderLeaf * & ) ;
            typedef void ( RenderStage_wrapper::*default_drawImplementation_function_type )( ::osg::RenderInfo &,::osgUtil::RenderLeaf * & ) ;
            
            RenderStage_exposer.def( 
                "drawImplementation"
                , drawImplementation_function_type(&::osgUtil::RenderStage::drawImplementation)
                , default_drawImplementation_function_type(&RenderStage_wrapper::default_drawImplementation)
                , ( bp::arg("renderInfo"), bp::arg("previous") ) );
        
        }
        { //::osgUtil::RenderStage::drawInner
        
            typedef void ( ::osgUtil::RenderStage::*drawInner_function_type )( ::osg::RenderInfo &,::osgUtil::RenderLeaf * &,bool & ) ;
            typedef void ( RenderStage_wrapper::*default_drawInner_function_type )( ::osg::RenderInfo &,::osgUtil::RenderLeaf * &,bool & ) ;
            
            RenderStage_exposer.def( 
                "drawInner"
                , drawInner_function_type(&::osgUtil::RenderStage::drawInner)
                , default_drawInner_function_type(&RenderStage_wrapper::default_drawInner)
                , ( bp::arg("renderInfo"), bp::arg("previous"), bp::arg("doCopyTexture") ) );
        
        }
        { //::osgUtil::RenderStage::drawPostRenderStages
        
            typedef void ( ::osgUtil::RenderStage::*drawPostRenderStages_function_type )( ::osg::RenderInfo &,::osgUtil::RenderLeaf * & ) ;
            typedef void ( RenderStage_wrapper::*default_drawPostRenderStages_function_type )( ::osg::RenderInfo &,::osgUtil::RenderLeaf * & ) ;
            
            RenderStage_exposer.def( 
                "drawPostRenderStages"
                , drawPostRenderStages_function_type(&::osgUtil::RenderStage::drawPostRenderStages)
                , default_drawPostRenderStages_function_type(&RenderStage_wrapper::default_drawPostRenderStages)
                , ( bp::arg("renderInfo"), bp::arg("previous") ) );
        
        }
        { //::osgUtil::RenderStage::drawPreRenderStages
        
            typedef void ( ::osgUtil::RenderStage::*drawPreRenderStages_function_type )( ::osg::RenderInfo &,::osgUtil::RenderLeaf * & ) ;
            typedef void ( RenderStage_wrapper::*default_drawPreRenderStages_function_type )( ::osg::RenderInfo &,::osgUtil::RenderLeaf * & ) ;
            
            RenderStage_exposer.def( 
                "drawPreRenderStages"
                , drawPreRenderStages_function_type(&::osgUtil::RenderStage::drawPreRenderStages)
                , default_drawPreRenderStages_function_type(&RenderStage_wrapper::default_drawPreRenderStages)
                , ( bp::arg("renderInfo"), bp::arg("previous") ) );
        
        }
        { //::osgUtil::RenderStage::getCamera
        
            typedef ::osg::Camera * ( ::osgUtil::RenderStage::*getCamera_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "getCamera"
                , getCamera_function_type( &::osgUtil::RenderStage::getCamera )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::RenderStage::getCamera
        
            typedef ::osg::Camera const * ( ::osgUtil::RenderStage::*getCamera_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getCamera"
                , getCamera_function_type( &::osgUtil::RenderStage::getCamera )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::RenderStage::getCameraRequiresSetUp
        
            typedef bool ( ::osgUtil::RenderStage::*getCameraRequiresSetUp_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getCameraRequiresSetUp"
                , getCameraRequiresSetUp_function_type( &::osgUtil::RenderStage::getCameraRequiresSetUp ) );
        
        }
        { //::osgUtil::RenderStage::getClearAccum
        
            typedef ::osg::Vec4 const & ( ::osgUtil::RenderStage::*getClearAccum_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getClearAccum"
                , getClearAccum_function_type( &::osgUtil::RenderStage::getClearAccum )
                , bp::return_internal_reference< >()
                , "\n Get the clear accum.\n" );
        
        }
        { //::osgUtil::RenderStage::getClearColor
        
            typedef ::osg::Vec4 const & ( ::osgUtil::RenderStage::*getClearColor_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getClearColor"
                , getClearColor_function_type( &::osgUtil::RenderStage::getClearColor )
                , bp::return_internal_reference< >()
                , "\n Get the clear color.\n" );
        
        }
        { //::osgUtil::RenderStage::getClearDepth
        
            typedef double ( ::osgUtil::RenderStage::*getClearDepth_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getClearDepth"
                , getClearDepth_function_type( &::osgUtil::RenderStage::getClearDepth )
                , "\n Get the clear depth.\n" );
        
        }
        { //::osgUtil::RenderStage::getClearMask
        
            typedef ::GLbitfield ( ::osgUtil::RenderStage::*getClearMask_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getClearMask"
                , getClearMask_function_type( &::osgUtil::RenderStage::getClearMask )
                , "\n Get the clear mask.\n" );
        
        }
        { //::osgUtil::RenderStage::getClearStencil
        
            typedef int ( ::osgUtil::RenderStage::*getClearStencil_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getClearStencil"
                , getClearStencil_function_type( &::osgUtil::RenderStage::getClearStencil )
                , "\n Get the clear color.\n" );
        
        }
        { //::osgUtil::RenderStage::getColorMask
        
            typedef ::osg::ColorMask * ( ::osgUtil::RenderStage::*getColorMask_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "getColorMask"
                , getColorMask_function_type( &::osgUtil::RenderStage::getColorMask )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::RenderStage::getColorMask
        
            typedef ::osg::ColorMask const * ( ::osgUtil::RenderStage::*getColorMask_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getColorMask"
                , getColorMask_function_type( &::osgUtil::RenderStage::getColorMask )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::RenderStage::getDisableFboAfterRender
        
            typedef bool ( ::osgUtil::RenderStage::*getDisableFboAfterRender_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getDisableFboAfterRender"
                , getDisableFboAfterRender_function_type( &::osgUtil::RenderStage::getDisableFboAfterRender ) );
        
        }
        { //::osgUtil::RenderStage::getDrawBuffer
        
            typedef ::GLenum ( ::osgUtil::RenderStage::*getDrawBuffer_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getDrawBuffer"
                , getDrawBuffer_function_type( &::osgUtil::RenderStage::getDrawBuffer )
                , "\n Get the draw buffer used at the start of each frame draw.\n" );
        
        }
        { //::osgUtil::RenderStage::getDrawBufferApplyMask
        
            typedef bool ( ::osgUtil::RenderStage::*getDrawBufferApplyMask_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getDrawBufferApplyMask"
                , getDrawBufferApplyMask_function_type( &::osgUtil::RenderStage::getDrawBufferApplyMask )
                , "\n Get the apply mask defining whether glDrawBuffer is called at each frame draw.\n" );
        
        }
        { //::osgUtil::RenderStage::getFrameBufferObject
        
            typedef ::osg::FrameBufferObject * ( ::osgUtil::RenderStage::*getFrameBufferObject_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "getFrameBufferObject"
                , getFrameBufferObject_function_type( &::osgUtil::RenderStage::getFrameBufferObject )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::RenderStage::getFrameBufferObject
        
            typedef ::osg::FrameBufferObject const * ( ::osgUtil::RenderStage::*getFrameBufferObject_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getFrameBufferObject"
                , getFrameBufferObject_function_type( &::osgUtil::RenderStage::getFrameBufferObject )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::RenderStage::getGraphicsContext
        
            typedef ::osg::GraphicsContext * ( ::osgUtil::RenderStage::*getGraphicsContext_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "getGraphicsContext"
                , getGraphicsContext_function_type( &::osgUtil::RenderStage::getGraphicsContext )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::RenderStage::getGraphicsContext
        
            typedef ::osg::GraphicsContext const * ( ::osgUtil::RenderStage::*getGraphicsContext_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getGraphicsContext"
                , getGraphicsContext_function_type( &::osgUtil::RenderStage::getGraphicsContext )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::RenderStage::getImage
        
            typedef ::osg::Image * ( ::osgUtil::RenderStage::*getImage_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "getImage"
                , getImage_function_type( &::osgUtil::RenderStage::getImage )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::RenderStage::getImageReadPixelDataType
        
            typedef ::GLenum ( ::osgUtil::RenderStage::*getImageReadPixelDataType_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getImageReadPixelDataType"
                , getImageReadPixelDataType_function_type( &::osgUtil::RenderStage::getImageReadPixelDataType ) );
        
        }
        { //::osgUtil::RenderStage::getImageReadPixelFormat
        
            typedef ::GLenum ( ::osgUtil::RenderStage::*getImageReadPixelFormat_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getImageReadPixelFormat"
                , getImageReadPixelFormat_function_type( &::osgUtil::RenderStage::getImageReadPixelFormat ) );
        
        }
        { //::osgUtil::RenderStage::getInheritedPositionalStateContainer
        
            typedef ::osgUtil::PositionalStateContainer * ( ::osgUtil::RenderStage::*getInheritedPositionalStateContainer_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "getInheritedPositionalStateContainer"
                , getInheritedPositionalStateContainer_function_type( &::osgUtil::RenderStage::getInheritedPositionalStateContainer )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::RenderStage::getInheritedPositionalStateContainerMatrix
        
            typedef ::osg::Matrix const & ( ::osgUtil::RenderStage::*getInheritedPositionalStateContainerMatrix_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getInheritedPositionalStateContainerMatrix"
                , getInheritedPositionalStateContainerMatrix_function_type( &::osgUtil::RenderStage::getInheritedPositionalStateContainerMatrix )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::RenderStage::getInitialViewMatrix
        
            typedef ::osg::RefMatrix const * ( ::osgUtil::RenderStage::*getInitialViewMatrix_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "getInitialViewMatrix"
                , getInitialViewMatrix_function_type( &::osgUtil::RenderStage::getInitialViewMatrix )
                , bp::return_internal_reference< >()
                , "\n Get the initial view matrix.\n" );
        
        }
        { //::osgUtil::RenderStage::getMultisampleResolveFramebufferObject
        
            typedef ::osg::FrameBufferObject * ( ::osgUtil::RenderStage::*getMultisampleResolveFramebufferObject_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "getMultisampleResolveFramebufferObject"
                , getMultisampleResolveFramebufferObject_function_type( &::osgUtil::RenderStage::getMultisampleResolveFramebufferObject )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::RenderStage::getMultisampleResolveFramebufferObject
        
            typedef ::osg::FrameBufferObject const * ( ::osgUtil::RenderStage::*getMultisampleResolveFramebufferObject_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getMultisampleResolveFramebufferObject"
                , getMultisampleResolveFramebufferObject_function_type( &::osgUtil::RenderStage::getMultisampleResolveFramebufferObject )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::RenderStage::getPositionalStateContainer
        
            typedef ::osgUtil::PositionalStateContainer * ( ::osgUtil::RenderStage::*getPositionalStateContainer_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getPositionalStateContainer"
                , getPositionalStateContainer_function_type( &::osgUtil::RenderStage::getPositionalStateContainer )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::RenderStage::getReadBuffer
        
            typedef ::GLenum ( ::osgUtil::RenderStage::*getReadBuffer_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getReadBuffer"
                , getReadBuffer_function_type( &::osgUtil::RenderStage::getReadBuffer )
                , "\n Get the read buffer for any required copy operations to use.\n" );
        
        }
        { //::osgUtil::RenderStage::getReadBufferApplyMask
        
            typedef bool ( ::osgUtil::RenderStage::*getReadBufferApplyMask_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getReadBufferApplyMask"
                , getReadBufferApplyMask_function_type( &::osgUtil::RenderStage::getReadBufferApplyMask )
                , "\n Get the apply mask defining whether glReadBuffer is called at each frame draw.\n" );
        
        }
        { //::osgUtil::RenderStage::getStats
        
            typedef bool ( ::osgUtil::RenderStage::*getStats_function_type )( ::osgUtil::Statistics & ) const;
            
            RenderStage_exposer.def( 
                "getStats"
                , getStats_function_type( &::osgUtil::RenderStage::getStats )
                , ( bp::arg("stats") )
                , "\n Extract stats for current draw list.\n" );
        
        }
        { //::osgUtil::RenderStage::getTexture
        
            typedef ::osg::Texture * ( ::osgUtil::RenderStage::*getTexture_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "getTexture"
                , getTexture_function_type( &::osgUtil::RenderStage::getTexture )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::RenderStage::getViewport
        
            typedef ::osg::Viewport const * ( ::osgUtil::RenderStage::*getViewport_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "getViewport"
                , getViewport_function_type( &::osgUtil::RenderStage::getViewport )
                , bp::return_internal_reference< >()
                , "\n Get the const viewport.\n" );
        
        }
        { //::osgUtil::RenderStage::getViewport
        
            typedef ::osg::Viewport * ( ::osgUtil::RenderStage::*getViewport_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "getViewport"
                , getViewport_function_type( &::osgUtil::RenderStage::getViewport )
                , bp::return_internal_reference< >()
                , "\n Get the viewport.\n" );
        
        }
        { //::osgUtil::RenderStage::isSameKindAs
        
            typedef bool ( ::osgUtil::RenderStage::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( RenderStage_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            RenderStage_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgUtil::RenderStage::isSameKindAs)
                , default_isSameKindAs_function_type(&RenderStage_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgUtil::RenderStage::releaseGLObjects
        
            typedef void ( ::osgUtil::RenderStage::*releaseGLObjects_function_type )( ::osg::State * ) const;
            typedef void ( RenderStage_wrapper::*default_releaseGLObjects_function_type )( ::osg::State * ) const;
            
            RenderStage_exposer.def( 
                "releaseGLObjects"
                , releaseGLObjects_function_type(&::osgUtil::RenderStage::releaseGLObjects)
                , default_releaseGLObjects_function_type(&RenderStage_wrapper::default_releaseGLObjects)
                , ( bp::arg("state")=bp::object() ) );
        
        }
        { //::osgUtil::RenderStage::reset
        
            typedef void ( ::osgUtil::RenderStage::*reset_function_type )(  ) ;
            typedef void ( RenderStage_wrapper::*default_reset_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "reset"
                , reset_function_type(&::osgUtil::RenderStage::reset)
                , default_reset_function_type(&RenderStage_wrapper::default_reset) );
        
        }
        { //::osgUtil::RenderStage::runCameraSetUp
        
            typedef void ( ::osgUtil::RenderStage::*runCameraSetUp_function_type )( ::osg::RenderInfo & ) ;
            
            RenderStage_exposer.def( 
                "runCameraSetUp"
                , runCameraSetUp_function_type( &::osgUtil::RenderStage::runCameraSetUp )
                , ( bp::arg("renderInfo") )
                , "\n Attempt the set the RenderStage from the Camera settings.\n" );
        
        }
        { //::osgUtil::RenderStage::setCamera
        
            typedef void ( ::osgUtil::RenderStage::*setCamera_function_type )( ::osg::Camera * ) ;
            
            RenderStage_exposer.def( 
                "setCamera"
                , setCamera_function_type( &::osgUtil::RenderStage::setCamera )
                , ( bp::arg("camera") ) );
        
        }
        { //::osgUtil::RenderStage::setCameraRequiresSetUp
        
            typedef void ( ::osgUtil::RenderStage::*setCameraRequiresSetUp_function_type )( bool ) ;
            
            RenderStage_exposer.def( 
                "setCameraRequiresSetUp"
                , setCameraRequiresSetUp_function_type( &::osgUtil::RenderStage::setCameraRequiresSetUp )
                , ( bp::arg("flag") ) );
        
        }
        { //::osgUtil::RenderStage::setClearAccum
        
            typedef void ( ::osgUtil::RenderStage::*setClearAccum_function_type )( ::osg::Vec4 const & ) ;
            
            RenderStage_exposer.def( 
                "setClearAccum"
                , setClearAccum_function_type( &::osgUtil::RenderStage::setClearAccum )
                , ( bp::arg("color") )
                , "\n Set the clear accum used in glClearAccum(..).\n glClearAcumm is only called if mask & GL_ACCUM_BUFFER_BIT is true.\n" );
        
        }
        { //::osgUtil::RenderStage::setClearColor
        
            typedef void ( ::osgUtil::RenderStage::*setClearColor_function_type )( ::osg::Vec4 const & ) ;
            
            RenderStage_exposer.def( 
                "setClearColor"
                , setClearColor_function_type( &::osgUtil::RenderStage::setClearColor )
                , ( bp::arg("color") )
                , "\n Set the clear color used in glClearColor(..).\n glClearColor is only called if mask & GL_COLOR_BUFFER_BIT is true\n" );
        
        }
        { //::osgUtil::RenderStage::setClearDepth
        
            typedef void ( ::osgUtil::RenderStage::*setClearDepth_function_type )( double ) ;
            
            RenderStage_exposer.def( 
                "setClearDepth"
                , setClearDepth_function_type( &::osgUtil::RenderStage::setClearDepth )
                , ( bp::arg("depth") )
                , "\n Set the clear depth used in glClearDepth(..). Defaults to 1.0\n glClearDepth is only called if mask & GL_DEPTH_BUFFER_BIT is true.\n" );
        
        }
        { //::osgUtil::RenderStage::setClearMask
        
            typedef void ( ::osgUtil::RenderStage::*setClearMask_function_type )( ::GLbitfield ) ;
            
            RenderStage_exposer.def( 
                "setClearMask"
                , setClearMask_function_type( &::osgUtil::RenderStage::setClearMask )
                , ( bp::arg("mask") )
                , "\n Set the clear mask used in glClear(..).\n Defaults to GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT.\n" );
        
        }
        { //::osgUtil::RenderStage::setClearStencil
        
            typedef void ( ::osgUtil::RenderStage::*setClearStencil_function_type )( int ) ;
            
            RenderStage_exposer.def( 
                "setClearStencil"
                , setClearStencil_function_type( &::osgUtil::RenderStage::setClearStencil )
                , ( bp::arg("stencil") )
                , "\n Set the clear stencil value used in glClearStencil(). Defaults to 0;\n glClearStencil is only called if mask & GL_STENCIL_BUFFER_BIT is true\n" );
        
        }
        { //::osgUtil::RenderStage::setColorMask
        
            typedef void ( ::osgUtil::RenderStage::*setColorMask_function_type )( ::osg::ColorMask * ) ;
            
            RenderStage_exposer.def( 
                "setColorMask"
                , setColorMask_function_type( &::osgUtil::RenderStage::setColorMask )
                , ( bp::arg("cm") ) );
        
        }
        { //::osgUtil::RenderStage::setDisableFboAfterRender
        
            typedef void ( ::osgUtil::RenderStage::*setDisableFboAfterRender_function_type )( bool ) ;
            
            RenderStage_exposer.def( 
                "setDisableFboAfterRender"
                , setDisableFboAfterRender_function_type( &::osgUtil::RenderStage::setDisableFboAfterRender )
                , ( bp::arg("disable") )
                , "\n Set whether the framebuffer object should be unbound after\n rendering. By default this is set to true. Set it to false if the\n unbinding is not required.\n" );
        
        }
        { //::osgUtil::RenderStage::setDrawBuffer
        
            typedef void ( ::osgUtil::RenderStage::*setDrawBuffer_function_type )( ::GLenum,bool ) ;
            
            RenderStage_exposer.def( 
                "setDrawBuffer"
                , setDrawBuffer_function_type( &::osgUtil::RenderStage::setDrawBuffer )
                , ( bp::arg("buffer"), bp::arg("applyMask")=(bool)(true) )
                , "\n Set the draw buffer used at the start of each frame draw.\n" );
        
        }
        { //::osgUtil::RenderStage::setDrawBufferApplyMask
        
            typedef void ( ::osgUtil::RenderStage::*setDrawBufferApplyMask_function_type )( bool ) ;
            
            RenderStage_exposer.def( 
                "setDrawBufferApplyMask"
                , setDrawBufferApplyMask_function_type( &::osgUtil::RenderStage::setDrawBufferApplyMask )
                , ( bp::arg("applyMask") )
                , "\n Set the apply mask defining whether glDrawBuffer is called at each frame draw.\n" );
        
        }
        { //::osgUtil::RenderStage::setFrameBufferObject
        
            typedef void ( ::osgUtil::RenderStage::*setFrameBufferObject_function_type )( ::osg::FrameBufferObject * ) ;
            
            RenderStage_exposer.def( 
                "setFrameBufferObject"
                , setFrameBufferObject_function_type( &::osgUtil::RenderStage::setFrameBufferObject )
                , ( bp::arg("fbo") )
                , "\n Set a framebuffer object to render into. It is permissible for the\n framebuffer object to be multisampled, in which case you should also\n set a resolve framebuffer object - see setMultisampleResolveFramebufferObject().\n" );
        
        }
        { //::osgUtil::RenderStage::setGraphicsContext
        
            typedef void ( ::osgUtil::RenderStage::*setGraphicsContext_function_type )( ::osg::GraphicsContext * ) ;
            
            RenderStage_exposer.def( 
                "setGraphicsContext"
                , setGraphicsContext_function_type( &::osgUtil::RenderStage::setGraphicsContext )
                , ( bp::arg("context") ) );
        
        }
        { //::osgUtil::RenderStage::setImage
        
            typedef void ( ::osgUtil::RenderStage::*setImage_function_type )( ::osg::Image * ) ;
            
            RenderStage_exposer.def( 
                "setImage"
                , setImage_function_type( &::osgUtil::RenderStage::setImage )
                , ( bp::arg("image") ) );
        
        }
        { //::osgUtil::RenderStage::setImageReadPixelDataType
        
            typedef void ( ::osgUtil::RenderStage::*setImageReadPixelDataType_function_type )( ::GLenum ) ;
            
            RenderStage_exposer.def( 
                "setImageReadPixelDataType"
                , setImageReadPixelDataType_function_type( &::osgUtil::RenderStage::setImageReadPixelDataType )
                , ( bp::arg("type") ) );
        
        }
        { //::osgUtil::RenderStage::setImageReadPixelFormat
        
            typedef void ( ::osgUtil::RenderStage::*setImageReadPixelFormat_function_type )( ::GLenum ) ;
            
            RenderStage_exposer.def( 
                "setImageReadPixelFormat"
                , setImageReadPixelFormat_function_type( &::osgUtil::RenderStage::setImageReadPixelFormat )
                , ( bp::arg("format") ) );
        
        }
        { //::osgUtil::RenderStage::setInheritedPositionalStateContainer
        
            typedef void ( ::osgUtil::RenderStage::*setInheritedPositionalStateContainer_function_type )( ::osgUtil::PositionalStateContainer * ) ;
            
            RenderStage_exposer.def( 
                "setInheritedPositionalStateContainer"
                , setInheritedPositionalStateContainer_function_type( &::osgUtil::RenderStage::setInheritedPositionalStateContainer )
                , ( bp::arg("rsl") ) );
        
        }
        { //::osgUtil::RenderStage::setInheritedPositionalStateContainerMatrix
        
            typedef void ( ::osgUtil::RenderStage::*setInheritedPositionalStateContainerMatrix_function_type )( ::osg::Matrix const & ) ;
            
            RenderStage_exposer.def( 
                "setInheritedPositionalStateContainerMatrix"
                , setInheritedPositionalStateContainerMatrix_function_type( &::osgUtil::RenderStage::setInheritedPositionalStateContainerMatrix )
                , ( bp::arg("matrix") ) );
        
        }
        { //::osgUtil::RenderStage::setInitialViewMatrix
        
            typedef void ( ::osgUtil::RenderStage::*setInitialViewMatrix_function_type )( ::osg::RefMatrix const * ) ;
            
            RenderStage_exposer.def( 
                "setInitialViewMatrix"
                , setInitialViewMatrix_function_type( &::osgUtil::RenderStage::setInitialViewMatrix )
                , ( bp::arg("matrix") )
                , "\n Set the initial view matrix.\n" );
        
        }
        { //::osgUtil::RenderStage::setMultisampleResolveFramebufferObject
        
            typedef void ( ::osgUtil::RenderStage::*setMultisampleResolveFramebufferObject_function_type )( ::osg::FrameBufferObject * ) ;
            
            RenderStage_exposer.def( 
                "setMultisampleResolveFramebufferObject"
                , setMultisampleResolveFramebufferObject_function_type( &::osgUtil::RenderStage::setMultisampleResolveFramebufferObject )
                , ( bp::arg("fbo") )
                , "\n Sets the destination framebuffer object for glBlitFramebufferEXT to\n resolve a multisampled framebuffer object after the RenderStage is\n drawn. The resolve framebuffer object must not be multisampled. The\n resolve framebuffer object is only necessary if the primary framebuffer\n object is multisampled, if not then leave it set to null.\n" );
        
        }
        { //::osgUtil::RenderStage::setPositionalStateContainer
        
            typedef void ( ::osgUtil::RenderStage::*setPositionalStateContainer_function_type )( ::osgUtil::PositionalStateContainer * ) ;
            
            RenderStage_exposer.def( 
                "setPositionalStateContainer"
                , setPositionalStateContainer_function_type( &::osgUtil::RenderStage::setPositionalStateContainer )
                , ( bp::arg("rsl") ) );
        
        }
        { //::osgUtil::RenderStage::setReadBuffer
        
            typedef void ( ::osgUtil::RenderStage::*setReadBuffer_function_type )( ::GLenum,bool ) ;
            
            RenderStage_exposer.def( 
                "setReadBuffer"
                , setReadBuffer_function_type( &::osgUtil::RenderStage::setReadBuffer )
                , ( bp::arg("buffer"), bp::arg("applyMask")=(bool)(true) )
                , "\n Set the read buffer for any required copy operations to use.\n" );
        
        }
        { //::osgUtil::RenderStage::setReadBufferApplyMask
        
            typedef void ( ::osgUtil::RenderStage::*setReadBufferApplyMask_function_type )( bool ) ;
            
            RenderStage_exposer.def( 
                "setReadBufferApplyMask"
                , setReadBufferApplyMask_function_type( &::osgUtil::RenderStage::setReadBufferApplyMask )
                , ( bp::arg("applyMask") )
                , "\n Set the apply mask defining whether glReadBuffer is called at each frame draw.\n" );
        
        }
        { //::osgUtil::RenderStage::setTexture
        
            typedef void ( ::osgUtil::RenderStage::*setTexture_function_type )( ::osg::Texture *,unsigned int,unsigned int ) ;
            
            RenderStage_exposer.def( 
                "setTexture"
                , setTexture_function_type( &::osgUtil::RenderStage::setTexture )
                , ( bp::arg("texture"), bp::arg("level")=(unsigned int)(0), bp::arg("face")=(unsigned int)(0) ) );
        
        }
        { //::osgUtil::RenderStage::setViewport
        
            typedef void ( ::osgUtil::RenderStage::*setViewport_function_type )( ::osg::Viewport * ) ;
            
            RenderStage_exposer.def( 
                "setViewport"
                , setViewport_function_type( &::osgUtil::RenderStage::setViewport )
                , ( bp::arg("viewport") )
                , "\n Set the viewport.\n" );
        
        }
        { //::osgUtil::RenderStage::sort
        
            typedef void ( ::osgUtil::RenderStage::*sort_function_type )(  ) ;
            typedef void ( RenderStage_wrapper::*default_sort_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "sort"
                , sort_function_type(&::osgUtil::RenderStage::sort)
                , default_sort_function_type(&RenderStage_wrapper::default_sort) );
        
        }
        { //::osgUtil::RenderBin::libraryName
        
            typedef char const * ( ::osgUtil::RenderBin::*libraryName_function_type )(  ) const;
            typedef char const * ( RenderStage_wrapper::*default_libraryName_function_type )(  ) const;
            
            RenderStage_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgUtil::RenderBin::libraryName)
                , default_libraryName_function_type(&RenderStage_wrapper::default_libraryName) );
        
        }
        { //::osgUtil::RenderBin::sortBackToFront
        
            typedef void ( ::osgUtil::RenderBin::*sortBackToFront_function_type )(  ) ;
            typedef void ( RenderStage_wrapper::*default_sortBackToFront_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "sortBackToFront"
                , sortBackToFront_function_type(&::osgUtil::RenderBin::sortBackToFront)
                , default_sortBackToFront_function_type(&RenderStage_wrapper::default_sortBackToFront) );
        
        }
        { //::osgUtil::RenderBin::sortByState
        
            typedef void ( ::osgUtil::RenderBin::*sortByState_function_type )(  ) ;
            typedef void ( RenderStage_wrapper::*default_sortByState_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "sortByState"
                , sortByState_function_type(&::osgUtil::RenderBin::sortByState)
                , default_sortByState_function_type(&RenderStage_wrapper::default_sortByState) );
        
        }
        { //::osgUtil::RenderBin::sortByStateThenFrontToBack
        
            typedef void ( ::osgUtil::RenderBin::*sortByStateThenFrontToBack_function_type )(  ) ;
            typedef void ( RenderStage_wrapper::*default_sortByStateThenFrontToBack_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "sortByStateThenFrontToBack"
                , sortByStateThenFrontToBack_function_type(&::osgUtil::RenderBin::sortByStateThenFrontToBack)
                , default_sortByStateThenFrontToBack_function_type(&RenderStage_wrapper::default_sortByStateThenFrontToBack) );
        
        }
        { //::osgUtil::RenderBin::sortFrontToBack
        
            typedef void ( ::osgUtil::RenderBin::*sortFrontToBack_function_type )(  ) ;
            typedef void ( RenderStage_wrapper::*default_sortFrontToBack_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "sortFrontToBack"
                , sortFrontToBack_function_type(&::osgUtil::RenderBin::sortFrontToBack)
                , default_sortFrontToBack_function_type(&RenderStage_wrapper::default_sortFrontToBack) );
        
        }
        { //::osgUtil::RenderBin::sortImplementation
        
            typedef void ( ::osgUtil::RenderBin::*sortImplementation_function_type )(  ) ;
            typedef void ( RenderStage_wrapper::*default_sortImplementation_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "sortImplementation"
                , sortImplementation_function_type(&::osgUtil::RenderBin::sortImplementation)
                , default_sortImplementation_function_type(&RenderStage_wrapper::default_sortImplementation) );
        
        }
        { //::osgUtil::RenderBin::sortTraversalOrder
        
            typedef void ( ::osgUtil::RenderBin::*sortTraversalOrder_function_type )(  ) ;
            typedef void ( RenderStage_wrapper::*default_sortTraversalOrder_function_type )(  ) ;
            
            RenderStage_exposer.def( 
                "sortTraversalOrder"
                , sortTraversalOrder_function_type(&::osgUtil::RenderBin::sortTraversalOrder)
                , default_sortTraversalOrder_function_type(&RenderStage_wrapper::default_sortTraversalOrder) );
        
        }
    }

}
