// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgUtil.h"
#include "wrap_referenced.h"
#include "HalfWayMapGenerator.pypp.hpp"

namespace bp = boost::python;

void register_HalfWayMapGenerator_class(){

    { //::osgUtil::HalfWayMapGenerator
        typedef bp::class_< osgUtil::HalfWayMapGenerator, bp::bases< osgUtil::CubeMapGenerator >, osg::ref_ptr< ::osgUtil::HalfWayMapGenerator >, boost::noncopyable > HalfWayMapGenerator_exposer_t;
        HalfWayMapGenerator_exposer_t HalfWayMapGenerator_exposer = HalfWayMapGenerator_exposer_t( "HalfWayMapGenerator", "\n This cube map generator produces an Half-way vector map, useful for\n hardware-based specular lighting effects.\n It computes: C = normalize(R - L), where C is the resulting color,\n R is the reflection vector and L is the light direction.\n", bp::no_init );
        bp::scope HalfWayMapGenerator_scope( HalfWayMapGenerator_exposer );
        HalfWayMapGenerator_exposer.def( bp::init< osg::Vec3 const &, bp::optional< int > >(( bp::arg("light_direction"), bp::arg("texture_size")=(int)(64) ), "\n This cube map generator produces an Half-way vector map, useful for\n hardware-based specular lighting effects.\n It computes: C = normalize(R - L), where C is the resulting color,\n R is the reflection vector and L is the light direction.\n") );
        bp::implicitly_convertible< osg::Vec3 const &, osgUtil::HalfWayMapGenerator >();
    }

}
