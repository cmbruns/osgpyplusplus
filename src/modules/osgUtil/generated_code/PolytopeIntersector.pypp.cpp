// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "__convenience.pypp.hpp"
#include "__array_1.pypp.hpp"
#include "wrap_osgUtil.h"
#include "wrap_referenced.h"
#include "PolytopeIntersector.pypp.hpp"

namespace bp = boost::python;

struct PolytopeIntersector_wrapper : osgUtil::PolytopeIntersector, bp::wrapper< osgUtil::PolytopeIntersector > {

    struct Intersection_wrapper : osgUtil::PolytopeIntersector::Intersection, bp::wrapper< osgUtil::PolytopeIntersector::Intersection > {
    
        Intersection_wrapper(osgUtil::PolytopeIntersector::Intersection const & arg )
        : osgUtil::PolytopeIntersector::Intersection( arg )
          , bp::wrapper< osgUtil::PolytopeIntersector::Intersection >(){
            // copy constructor
            
        }
    
        Intersection_wrapper( )
        : osgUtil::PolytopeIntersector::Intersection( )
          , bp::wrapper< osgUtil::PolytopeIntersector::Intersection >(){
            // null constructor
        
        }
    
        static pyplusplus::containers::static_sized::array_1_t< ::osg::Vec3d, 6>
        pyplusplus_intersectionPoints_wrapper( ::osgUtil::PolytopeIntersector::Intersection & inst ){
            return pyplusplus::containers::static_sized::array_1_t< ::osg::Vec3d, 6>( inst.intersectionPoints );
        }
    
    };

    PolytopeIntersector_wrapper(::osg::Polytope const & polytope )
    : osgUtil::PolytopeIntersector( boost::ref(polytope) )
      , bp::wrapper< osgUtil::PolytopeIntersector >(){
        // constructor
    
    }

    PolytopeIntersector_wrapper(::osgUtil::Intersector::CoordinateFrame cf, ::osg::Polytope const & polytope )
    : osgUtil::PolytopeIntersector( cf, boost::ref(polytope) )
      , bp::wrapper< osgUtil::PolytopeIntersector >(){
        // constructor
    
    }

    PolytopeIntersector_wrapper(::osgUtil::Intersector::CoordinateFrame cf, double xMin, double yMin, double xMax, double yMax )
    : osgUtil::PolytopeIntersector( cf, xMin, yMin, xMax, yMax )
      , bp::wrapper< osgUtil::PolytopeIntersector >(){
        // constructor
    
    }

    virtual ::osgUtil::Intersector * clone( ::osgUtil::IntersectionVisitor & iv ) {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(iv) );
        else{
            return this->osgUtil::PolytopeIntersector::clone( boost::ref(iv) );
        }
    }
    
    ::osgUtil::Intersector * default_clone( ::osgUtil::IntersectionVisitor & iv ) {
        return osgUtil::PolytopeIntersector::clone( boost::ref(iv) );
    }

    virtual bool containsIntersections(  ) {
        if( bp::override func_containsIntersections = this->get_override( "containsIntersections" ) )
            return func_containsIntersections(  );
        else{
            return this->osgUtil::PolytopeIntersector::containsIntersections(  );
        }
    }
    
    bool default_containsIntersections(  ) {
        return osgUtil::PolytopeIntersector::containsIntersections( );
    }

    virtual bool enter( ::osg::Node const & node ) {
        namespace bpl = boost::python;
        if( bpl::override func_enter = this->get_override( "enter" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_enter.ptr(), node );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return osgUtil::PolytopeIntersector::enter( boost::ref(node) );
        }
    }
    
    static boost::python::object default_enter( ::osgUtil::PolytopeIntersector & inst, ::osg::Node & node ){
        bool result;
        if( dynamic_cast< PolytopeIntersector_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::osgUtil::PolytopeIntersector::enter(node);
        }
        else{
            result = inst.enter(node);
        }
        return bp::object( result );
    }

    virtual void intersect( ::osgUtil::IntersectionVisitor & iv, ::osg::Drawable * drawable ) {
        if( bp::override func_intersect = this->get_override( "intersect" ) )
            func_intersect( boost::ref(iv), boost::python::ptr(drawable) );
        else{
            this->osgUtil::PolytopeIntersector::intersect( boost::ref(iv), boost::python::ptr(drawable) );
        }
    }
    
    void default_intersect( ::osgUtil::IntersectionVisitor & iv, ::osg::Drawable * drawable ) {
        osgUtil::PolytopeIntersector::intersect( boost::ref(iv), boost::python::ptr(drawable) );
    }

    virtual void leave(  ) {
        if( bp::override func_leave = this->get_override( "leave" ) )
            func_leave(  );
        else{
            this->osgUtil::PolytopeIntersector::leave(  );
        }
    }
    
    void default_leave(  ) {
        osgUtil::PolytopeIntersector::leave( );
    }

    virtual void reset(  ) {
        if( bp::override func_reset = this->get_override( "reset" ) )
            func_reset(  );
        else{
            this->osgUtil::PolytopeIntersector::reset(  );
        }
    }
    
    void default_reset(  ) {
        osgUtil::PolytopeIntersector::reset( );
    }

};

void register_PolytopeIntersector_class(){

    { //::osgUtil::PolytopeIntersector
        typedef bp::class_< PolytopeIntersector_wrapper, bp::bases< osgUtil::Intersector >, osg::ref_ptr< PolytopeIntersector_wrapper >, boost::noncopyable > PolytopeIntersector_exposer_t;
        PolytopeIntersector_exposer_t PolytopeIntersector_exposer = PolytopeIntersector_exposer_t( "PolytopeIntersector", "\n Concrete class for implementing polytope intersections with the scene graph.\n To be used in conjunction with IntersectionVisitor.\n", bp::init< osg::Polytope const & >(( bp::arg("polytope") ), "\n Construct a PolytopeIntersector using specified polytope in MODEL coordinates.\n") );
        bp::scope PolytopeIntersector_scope( PolytopeIntersector_exposer );
        bp::scope().attr("DimZero") = (int)osgUtil::PolytopeIntersector::DimZero;
        bp::scope().attr("DimOne") = (int)osgUtil::PolytopeIntersector::DimOne;
        bp::scope().attr("DimTwo") = (int)osgUtil::PolytopeIntersector::DimTwo;
        bp::scope().attr("AllDims") = (int)osgUtil::PolytopeIntersector::AllDims;
        { //::osgUtil::PolytopeIntersector::Intersection
            typedef bp::class_< PolytopeIntersector_wrapper::Intersection_wrapper > PolytopeIntersection_exposer_t;
            PolytopeIntersection_exposer_t PolytopeIntersection_exposer = PolytopeIntersection_exposer_t( "PolytopeIntersection", bp::init< >() );
            bp::scope PolytopeIntersection_scope( PolytopeIntersection_exposer );
            bp::scope().attr("MaxNumIntesectionPoints") = (int)osgUtil::PolytopeIntersector::Intersection::MaxNumIntesectionPoints;
            PolytopeIntersection_exposer.def( bp::self < bp::self );
            PolytopeIntersection_exposer.def_readwrite( "distance", &osgUtil::PolytopeIntersector::Intersection::distance, " distance from reference plane" );
            PolytopeIntersection_exposer.def_readwrite( "drawable", &osgUtil::PolytopeIntersector::Intersection::drawable );
            pyplusplus::containers::static_sized::register_array_1< ::osg::Vec3d, 6, bp::return_internal_reference< > >( "__array_1__scope_osg_scope_Vec3d_6" );
            { //osgUtil::PolytopeIntersector::Intersection::intersectionPoints [variable], type=osg::Vec3d[6]
            
                typedef pyplusplus::containers::static_sized::array_1_t< ::osg::Vec3d, 6> ( *array_wrapper_creator )( ::osgUtil::PolytopeIntersector::Intersection & );
                
                PolytopeIntersection_exposer.add_property( "intersectionPoints"
                    , bp::make_function( array_wrapper_creator(&PolytopeIntersector_wrapper::Intersection_wrapper::pyplusplus_intersectionPoints_wrapper)
                                        , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
            }
            PolytopeIntersection_exposer.def_readwrite( "localIntersectionPoint", &osgUtil::PolytopeIntersector::Intersection::localIntersectionPoint, " center of all intersection points" );
            PolytopeIntersection_exposer.def_readwrite( "matrix", &osgUtil::PolytopeIntersector::Intersection::matrix );
            PolytopeIntersection_exposer.def_readwrite( "maxDistance", &osgUtil::PolytopeIntersector::Intersection::maxDistance, " maximum distance of intersection points from reference plane" );
            PolytopeIntersection_exposer.def_readwrite( "nodePath", &osgUtil::PolytopeIntersector::Intersection::nodePath );
            PolytopeIntersection_exposer.def_readwrite( "numIntersectionPoints", &osgUtil::PolytopeIntersector::Intersection::numIntersectionPoints );
            PolytopeIntersection_exposer.def_readwrite( "primitiveIndex", &osgUtil::PolytopeIntersector::Intersection::primitiveIndex, " primitive index" );
        }
        bp::implicitly_convertible< osg::Polytope const &, osgUtil::PolytopeIntersector >();
        PolytopeIntersector_exposer.def( bp::init< osgUtil::Intersector::CoordinateFrame, osg::Polytope const & >(( bp::arg("cf"), bp::arg("polytope") ), "\n Construct a PolytopeIntersector using specified polytope in specified coordinate frame.\n") );
        PolytopeIntersector_exposer.def( bp::init< osgUtil::Intersector::CoordinateFrame, double, double, double, double >(( bp::arg("cf"), bp::arg("xMin"), bp::arg("yMin"), bp::arg("xMax"), bp::arg("yMax") ), "\n Convenience constructor for supporting picking in WINDOW, or PROJECTION coordinates\n In WINDOW coordinates (clip space cube) creates a five sided polytope box that has a front face at 0.0 and sides around box xMin, yMin, xMax, yMax.\n In PROJECTION coordinates (clip space cube) creates a five sided polytope box that has a front face at -1 and sides around box xMin, yMin, xMax, yMax.\n In VIEW and MODEL coordinates (clip space cube) creates a five sided polytope box that has a front face at 0.0 and sides around box xMin, yMin, xMax, yMax.\n") );
        { //::osgUtil::PolytopeIntersector::clone
        
            typedef ::osgUtil::Intersector * ( ::osgUtil::PolytopeIntersector::*clone_function_type )( ::osgUtil::IntersectionVisitor & ) ;
            typedef ::osgUtil::Intersector * ( PolytopeIntersector_wrapper::*default_clone_function_type )( ::osgUtil::IntersectionVisitor & ) ;
            
            PolytopeIntersector_exposer.def( 
                "clone"
                , clone_function_type(&::osgUtil::PolytopeIntersector::clone)
                , default_clone_function_type(&PolytopeIntersector_wrapper::default_clone)
                , ( bp::arg("iv") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgUtil::PolytopeIntersector::containsIntersections
        
            typedef bool ( ::osgUtil::PolytopeIntersector::*containsIntersections_function_type )(  ) ;
            typedef bool ( PolytopeIntersector_wrapper::*default_containsIntersections_function_type )(  ) ;
            
            PolytopeIntersector_exposer.def( 
                "containsIntersections"
                , containsIntersections_function_type(&::osgUtil::PolytopeIntersector::containsIntersections)
                , default_containsIntersections_function_type(&PolytopeIntersector_wrapper::default_containsIntersections) );
        
        }
        { //::osgUtil::PolytopeIntersector::enter
        
            typedef boost::python::object ( *default_enter_function_type )( ::osgUtil::PolytopeIntersector &,::osg::Node & );
            
            PolytopeIntersector_exposer.def( 
                "enter"
                , default_enter_function_type( &PolytopeIntersector_wrapper::default_enter )
                , ( bp::arg("inst"), bp::arg("node") ) );
        
        }
        { //::osgUtil::PolytopeIntersector::getDimensionMask
        
            typedef unsigned int ( ::osgUtil::PolytopeIntersector::*getDimensionMask_function_type )(  ) const;
            
            PolytopeIntersector_exposer.def( 
                "getDimensionMask"
                , getDimensionMask_function_type( &::osgUtil::PolytopeIntersector::getDimensionMask ) );
        
        }
        { //::osgUtil::PolytopeIntersector::getFirstIntersection
        
            typedef ::osgUtil::PolytopeIntersector::Intersection ( ::osgUtil::PolytopeIntersector::*getFirstIntersection_function_type )(  ) ;
            
            PolytopeIntersector_exposer.def( 
                "getFirstIntersection"
                , getFirstIntersection_function_type( &::osgUtil::PolytopeIntersector::getFirstIntersection ) );
        
        }
        { //::osgUtil::PolytopeIntersector::getIntersections
        
            typedef ::std::set< osgUtil::PolytopeIntersector::Intersection > & ( ::osgUtil::PolytopeIntersector::*getIntersections_function_type )(  ) ;
            
            PolytopeIntersector_exposer.def( 
                "getIntersections"
                , getIntersections_function_type( &::osgUtil::PolytopeIntersector::getIntersections )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::PolytopeIntersector::getReferencePlane
        
            typedef ::osg::Plane const & ( ::osgUtil::PolytopeIntersector::*getReferencePlane_function_type )(  ) const;
            
            PolytopeIntersector_exposer.def( 
                "getReferencePlane"
                , getReferencePlane_function_type( &::osgUtil::PolytopeIntersector::getReferencePlane )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::PolytopeIntersector::insertIntersection
        
            typedef void ( ::osgUtil::PolytopeIntersector::*insertIntersection_function_type )( ::osgUtil::PolytopeIntersector::Intersection const & ) ;
            
            PolytopeIntersector_exposer.def( 
                "insertIntersection"
                , insertIntersection_function_type( &::osgUtil::PolytopeIntersector::insertIntersection )
                , ( bp::arg("intersection") ) );
        
        }
        { //::osgUtil::PolytopeIntersector::intersect
        
            typedef void ( ::osgUtil::PolytopeIntersector::*intersect_function_type )( ::osgUtil::IntersectionVisitor &,::osg::Drawable * ) ;
            typedef void ( PolytopeIntersector_wrapper::*default_intersect_function_type )( ::osgUtil::IntersectionVisitor &,::osg::Drawable * ) ;
            
            PolytopeIntersector_exposer.def( 
                "intersect"
                , intersect_function_type(&::osgUtil::PolytopeIntersector::intersect)
                , default_intersect_function_type(&PolytopeIntersector_wrapper::default_intersect)
                , ( bp::arg("iv"), bp::arg("drawable") ) );
        
        }
        { //::osgUtil::PolytopeIntersector::leave
        
            typedef void ( ::osgUtil::PolytopeIntersector::*leave_function_type )(  ) ;
            typedef void ( PolytopeIntersector_wrapper::*default_leave_function_type )(  ) ;
            
            PolytopeIntersector_exposer.def( 
                "leave"
                , leave_function_type(&::osgUtil::PolytopeIntersector::leave)
                , default_leave_function_type(&PolytopeIntersector_wrapper::default_leave) );
        
        }
        { //::osgUtil::PolytopeIntersector::reset
        
            typedef void ( ::osgUtil::PolytopeIntersector::*reset_function_type )(  ) ;
            typedef void ( PolytopeIntersector_wrapper::*default_reset_function_type )(  ) ;
            
            PolytopeIntersector_exposer.def( 
                "reset"
                , reset_function_type(&::osgUtil::PolytopeIntersector::reset)
                , default_reset_function_type(&PolytopeIntersector_wrapper::default_reset) );
        
        }
        { //::osgUtil::PolytopeIntersector::setDimensionMask
        
            typedef void ( ::osgUtil::PolytopeIntersector::*setDimensionMask_function_type )( unsigned int ) ;
            
            PolytopeIntersector_exposer.def( 
                "setDimensionMask"
                , setDimensionMask_function_type( &::osgUtil::PolytopeIntersector::setDimensionMask )
                , ( bp::arg("dimensionMask") )
                , " set the dimension mask.\n As polytope-triangle and polytope-quad intersections are expensive to compute\n it is possible to turn them off by calling setDimensionMask( DimZero | DimOne )" );
        
        }
        { //::osgUtil::PolytopeIntersector::setReferencePlane
        
            typedef void ( ::osgUtil::PolytopeIntersector::*setReferencePlane_function_type )( ::osg::Plane const & ) ;
            
            PolytopeIntersector_exposer.def( 
                "setReferencePlane"
                , setReferencePlane_function_type( &::osgUtil::PolytopeIntersector::setReferencePlane )
                , ( bp::arg("plane") )
                , " set the plane used to sort the intersections.\n The intersections are sorted by the distance of the localIntersectionPoint\n and the reference plane. The default for the reference plane is the\n last plane of the polytope." );
        
        }
    }

}
