// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgUtil.h"
#include "wrap_referenced.h"
#include "CullVisitor.pypp.hpp"

namespace bp = boost::python;

struct CullVisitor_wrapper : osgUtil::CullVisitor, bp::wrapper< osgUtil::CullVisitor > {

    struct Identifier_wrapper : osgUtil::CullVisitor::Identifier, bp::wrapper< osgUtil::CullVisitor::Identifier > {
    
        Identifier_wrapper( )
        : osgUtil::CullVisitor::Identifier( )
          , bp::wrapper< osgUtil::CullVisitor::Identifier >(){
            // null constructor
        
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    CullVisitor_wrapper( )
    : osgUtil::CullVisitor( )
      , bp::wrapper< osgUtil::CullVisitor >(){
        // null constructor
    
    }

    virtual void apply( ::osg::Node & arg0 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(arg0) );
        else{
            this->osgUtil::CullVisitor::apply( boost::ref(arg0) );
        }
    }
    
    void default_apply( ::osg::Node & arg0 ) {
        osgUtil::CullVisitor::apply( boost::ref(arg0) );
    }

    virtual void apply( ::osg::Geode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osgUtil::CullVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Geode & node ) {
        osgUtil::CullVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Billboard & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osgUtil::CullVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Billboard & node ) {
        osgUtil::CullVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::LightSource & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osgUtil::CullVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::LightSource & node ) {
        osgUtil::CullVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::ClipNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osgUtil::CullVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::ClipNode & node ) {
        osgUtil::CullVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::TexGenNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osgUtil::CullVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::TexGenNode & node ) {
        osgUtil::CullVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Group & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osgUtil::CullVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Group & node ) {
        osgUtil::CullVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Transform & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osgUtil::CullVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Transform & node ) {
        osgUtil::CullVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Projection & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osgUtil::CullVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Projection & node ) {
        osgUtil::CullVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Switch & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osgUtil::CullVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Switch & node ) {
        osgUtil::CullVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::LOD & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osgUtil::CullVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::LOD & node ) {
        osgUtil::CullVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::ClearNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osgUtil::CullVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::ClearNode & node ) {
        osgUtil::CullVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Camera & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osgUtil::CullVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Camera & node ) {
        osgUtil::CullVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::OccluderNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osgUtil::CullVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::OccluderNode & node ) {
        osgUtil::CullVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::OcclusionQueryNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osgUtil::CullVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::OcclusionQueryNode & node ) {
        osgUtil::CullVisitor::apply( boost::ref(node) );
    }

    virtual bool clampProjectionMatrixImplementation( ::osg::Matrixf & projection, double & znear, double & zfar ) const  {
        if( bp::override func_clampProjectionMatrixImplementation = this->get_override( "clampProjectionMatrixImplementation" ) )
            return func_clampProjectionMatrixImplementation( boost::ref(projection), znear, zfar );
        else{
            return this->osgUtil::CullVisitor::clampProjectionMatrixImplementation( boost::ref(projection), znear, zfar );
        }
    }
    
    bool default_clampProjectionMatrixImplementation( ::osg::Matrixf & projection, double & znear, double & zfar ) const  {
        return osgUtil::CullVisitor::clampProjectionMatrixImplementation( boost::ref(projection), znear, zfar );
    }

    virtual bool clampProjectionMatrixImplementation( ::osg::Matrixd & projection, double & znear, double & zfar ) const  {
        if( bp::override func_clampProjectionMatrixImplementation = this->get_override( "clampProjectionMatrixImplementation" ) )
            return func_clampProjectionMatrixImplementation( boost::ref(projection), znear, zfar );
        else{
            return this->osgUtil::CullVisitor::clampProjectionMatrixImplementation( boost::ref(projection), znear, zfar );
        }
    }
    
    bool default_clampProjectionMatrixImplementation( ::osg::Matrixd & projection, double & znear, double & zfar ) const  {
        return osgUtil::CullVisitor::clampProjectionMatrixImplementation( boost::ref(projection), znear, zfar );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgUtil::CullVisitor::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgUtil::CullVisitor::className( );
    }

    virtual ::osgUtil::CullVisitor * clone(  ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone(  );
        else{
            return this->osgUtil::CullVisitor::clone(  );
        }
    }
    
    ::osgUtil::CullVisitor * default_clone(  ) const  {
        return osgUtil::CullVisitor::clone( );
    }

    virtual float getDistanceFromEyePoint( ::osg::Vec3 const & pos, bool withLODScale ) const  {
        if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
            return func_getDistanceFromEyePoint( boost::ref(pos), withLODScale );
        else{
            return this->osgUtil::CullVisitor::getDistanceFromEyePoint( boost::ref(pos), withLODScale );
        }
    }
    
    float default_getDistanceFromEyePoint( ::osg::Vec3 const & pos, bool withLODScale ) const  {
        return osgUtil::CullVisitor::getDistanceFromEyePoint( boost::ref(pos), withLODScale );
    }

    virtual float getDistanceToEyePoint( ::osg::Vec3 const & pos, bool withLODScale ) const  {
        if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
            return func_getDistanceToEyePoint( boost::ref(pos), withLODScale );
        else{
            return this->osgUtil::CullVisitor::getDistanceToEyePoint( boost::ref(pos), withLODScale );
        }
    }
    
    float default_getDistanceToEyePoint( ::osg::Vec3 const & pos, bool withLODScale ) const  {
        return osgUtil::CullVisitor::getDistanceToEyePoint( boost::ref(pos), withLODScale );
    }

    virtual float getDistanceToViewPoint( ::osg::Vec3 const & pos, bool withLODScale ) const  {
        if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
            return func_getDistanceToViewPoint( boost::ref(pos), withLODScale );
        else{
            return this->osgUtil::CullVisitor::getDistanceToViewPoint( boost::ref(pos), withLODScale );
        }
    }
    
    float default_getDistanceToViewPoint( ::osg::Vec3 const & pos, bool withLODScale ) const  {
        return osgUtil::CullVisitor::getDistanceToViewPoint( boost::ref(pos), withLODScale );
    }

    virtual ::osg::Vec3 getEyePoint(  ) const  {
        if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
            return func_getEyePoint(  );
        else{
            return this->osgUtil::CullVisitor::getEyePoint(  );
        }
    }
    
    ::osg::Vec3 default_getEyePoint(  ) const  {
        return osgUtil::CullVisitor::getEyePoint( );
    }

    virtual ::osg::Vec3 getViewPoint(  ) const  {
        if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
            return func_getViewPoint(  );
        else{
            return this->osgUtil::CullVisitor::getViewPoint(  );
        }
    }
    
    ::osg::Vec3 default_getViewPoint(  ) const  {
        return osgUtil::CullVisitor::getViewPoint( );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgUtil::CullVisitor::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgUtil::CullVisitor::libraryName( );
    }

    virtual void popProjectionMatrix(  ) {
        if( bp::override func_popProjectionMatrix = this->get_override( "popProjectionMatrix" ) )
            func_popProjectionMatrix(  );
        else{
            this->osgUtil::CullVisitor::popProjectionMatrix(  );
        }
    }
    
    void default_popProjectionMatrix(  ) {
        osgUtil::CullVisitor::popProjectionMatrix( );
    }

    virtual void reset(  ) {
        if( bp::override func_reset = this->get_override( "reset" ) )
            func_reset(  );
        else{
            this->osgUtil::CullVisitor::reset(  );
        }
    }
    
    void default_reset(  ) {
        osgUtil::CullVisitor::reset( );
    }

    virtual void apply( ::osg::ProxyNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::ProxyNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::CoordinateSystemNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::CoordinateSystemNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::CameraView & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::CameraView & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::MatrixTransform & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::MatrixTransform & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::PositionAttitudeTransform & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::PositionAttitudeTransform & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Sequence & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Sequence & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::PagedLOD & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::PagedLOD & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void inheritCullSettings( ::osg::CullSettings const & settings ) {
        if( bp::override func_inheritCullSettings = this->get_override( "inheritCullSettings" ) )
            func_inheritCullSettings( boost::ref(settings) );
        else{
            this->osg::CullSettings::inheritCullSettings( boost::ref(settings) );
        }
    }
    
    void default_inheritCullSettings( ::osg::CullSettings const & settings ) {
        osg::CullSettings::inheritCullSettings( boost::ref(settings) );
    }

    virtual void inheritCullSettings( ::osg::CullSettings const & settings, unsigned int inheritanceMask ) {
        if( bp::override func_inheritCullSettings = this->get_override( "inheritCullSettings" ) )
            func_inheritCullSettings( boost::ref(settings), inheritanceMask );
        else{
            this->osg::CullSettings::inheritCullSettings( boost::ref(settings), inheritanceMask );
        }
    }
    
    void default_inheritCullSettings( ::osg::CullSettings const & settings, unsigned int inheritanceMask ) {
        osg::CullSettings::inheritCullSettings( boost::ref(settings), inheritanceMask );
    }

    virtual void setDefaults(  ) {
        if( bp::override func_setDefaults = this->get_override( "setDefaults" ) )
            func_setDefaults(  );
        else{
            this->osg::CullSettings::setDefaults(  );
        }
    }
    
    void default_setDefaults(  ) {
        osg::CullSettings::setDefaults( );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_CullVisitor_class(){

    { //::osgUtil::CullVisitor
        typedef bp::class_< CullVisitor_wrapper, bp::bases< ::osg::NodeVisitor >, osg::ref_ptr< CullVisitor_wrapper >, boost::noncopyable > CullVisitor_exposer_t;
        CullVisitor_exposer_t CullVisitor_exposer = CullVisitor_exposer_t( "CullVisitor", bp::no_init );
        bp::scope CullVisitor_scope( CullVisitor_exposer );
        bp::class_< CullVisitor_wrapper::Identifier_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< CullVisitor_wrapper::Identifier_wrapper >, boost::noncopyable >( "Identifier", bp::init< >() );
        CullVisitor_exposer.def( bp::init< >() );
        { //::osgUtil::CullVisitor::addDrawable
        
            typedef void ( ::osgUtil::CullVisitor::*addDrawable_function_type )( ::osg::Drawable *,::osg::RefMatrix * ) ;
            
            CullVisitor_exposer.def( 
                "addDrawable"
                , addDrawable_function_type( &::osgUtil::CullVisitor::addDrawable )
                , ( bp::arg("drawable"), bp::arg("matrix") ) );
        
        }
        { //::osgUtil::CullVisitor::addDrawableAndDepth
        
            typedef void ( ::osgUtil::CullVisitor::*addDrawableAndDepth_function_type )( ::osg::Drawable *,::osg::RefMatrix *,float ) ;
            
            CullVisitor_exposer.def( 
                "addDrawableAndDepth"
                , addDrawableAndDepth_function_type( &::osgUtil::CullVisitor::addDrawableAndDepth )
                , ( bp::arg("drawable"), bp::arg("matrix"), bp::arg("depth") ) );
        
        }
        { //::osgUtil::CullVisitor::addPositionedAttribute
        
            typedef void ( ::osgUtil::CullVisitor::*addPositionedAttribute_function_type )( ::osg::RefMatrix *,::osg::StateAttribute const * ) ;
            
            CullVisitor_exposer.def( 
                "addPositionedAttribute"
                , addPositionedAttribute_function_type( &::osgUtil::CullVisitor::addPositionedAttribute )
                , ( bp::arg("matrix"), bp::arg("attr") ) );
        
        }
        { //::osgUtil::CullVisitor::addPositionedTextureAttribute
        
            typedef void ( ::osgUtil::CullVisitor::*addPositionedTextureAttribute_function_type )( unsigned int,::osg::RefMatrix *,::osg::StateAttribute const * ) ;
            
            CullVisitor_exposer.def( 
                "addPositionedTextureAttribute"
                , addPositionedTextureAttribute_function_type( &::osgUtil::CullVisitor::addPositionedTextureAttribute )
                , ( bp::arg("textureUnit"), bp::arg("matrix"), bp::arg("attr") ) );
        
        }
        { //::osgUtil::CullVisitor::apply
        
            typedef void ( ::osgUtil::CullVisitor::*apply_function_type )( ::osg::Node & ) ;
            typedef void ( CullVisitor_wrapper::*default_apply_function_type )( ::osg::Node & ) ;
            
            CullVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::CullVisitor::apply)
                , default_apply_function_type(&CullVisitor_wrapper::default_apply)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgUtil::CullVisitor::apply
        
            typedef void ( ::osgUtil::CullVisitor::*apply_function_type )( ::osg::Geode & ) ;
            typedef void ( CullVisitor_wrapper::*default_apply_function_type )( ::osg::Geode & ) ;
            
            CullVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::CullVisitor::apply)
                , default_apply_function_type(&CullVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osgUtil::CullVisitor::apply
        
            typedef void ( ::osgUtil::CullVisitor::*apply_function_type )( ::osg::Billboard & ) ;
            typedef void ( CullVisitor_wrapper::*default_apply_function_type )( ::osg::Billboard & ) ;
            
            CullVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::CullVisitor::apply)
                , default_apply_function_type(&CullVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osgUtil::CullVisitor::apply
        
            typedef void ( ::osgUtil::CullVisitor::*apply_function_type )( ::osg::LightSource & ) ;
            typedef void ( CullVisitor_wrapper::*default_apply_function_type )( ::osg::LightSource & ) ;
            
            CullVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::CullVisitor::apply)
                , default_apply_function_type(&CullVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osgUtil::CullVisitor::apply
        
            typedef void ( ::osgUtil::CullVisitor::*apply_function_type )( ::osg::ClipNode & ) ;
            typedef void ( CullVisitor_wrapper::*default_apply_function_type )( ::osg::ClipNode & ) ;
            
            CullVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::CullVisitor::apply)
                , default_apply_function_type(&CullVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osgUtil::CullVisitor::apply
        
            typedef void ( ::osgUtil::CullVisitor::*apply_function_type )( ::osg::TexGenNode & ) ;
            typedef void ( CullVisitor_wrapper::*default_apply_function_type )( ::osg::TexGenNode & ) ;
            
            CullVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::CullVisitor::apply)
                , default_apply_function_type(&CullVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osgUtil::CullVisitor::apply
        
            typedef void ( ::osgUtil::CullVisitor::*apply_function_type )( ::osg::Group & ) ;
            typedef void ( CullVisitor_wrapper::*default_apply_function_type )( ::osg::Group & ) ;
            
            CullVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::CullVisitor::apply)
                , default_apply_function_type(&CullVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osgUtil::CullVisitor::apply
        
            typedef void ( ::osgUtil::CullVisitor::*apply_function_type )( ::osg::Transform & ) ;
            typedef void ( CullVisitor_wrapper::*default_apply_function_type )( ::osg::Transform & ) ;
            
            CullVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::CullVisitor::apply)
                , default_apply_function_type(&CullVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osgUtil::CullVisitor::apply
        
            typedef void ( ::osgUtil::CullVisitor::*apply_function_type )( ::osg::Projection & ) ;
            typedef void ( CullVisitor_wrapper::*default_apply_function_type )( ::osg::Projection & ) ;
            
            CullVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::CullVisitor::apply)
                , default_apply_function_type(&CullVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osgUtil::CullVisitor::apply
        
            typedef void ( ::osgUtil::CullVisitor::*apply_function_type )( ::osg::Switch & ) ;
            typedef void ( CullVisitor_wrapper::*default_apply_function_type )( ::osg::Switch & ) ;
            
            CullVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::CullVisitor::apply)
                , default_apply_function_type(&CullVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osgUtil::CullVisitor::apply
        
            typedef void ( ::osgUtil::CullVisitor::*apply_function_type )( ::osg::LOD & ) ;
            typedef void ( CullVisitor_wrapper::*default_apply_function_type )( ::osg::LOD & ) ;
            
            CullVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::CullVisitor::apply)
                , default_apply_function_type(&CullVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osgUtil::CullVisitor::apply
        
            typedef void ( ::osgUtil::CullVisitor::*apply_function_type )( ::osg::ClearNode & ) ;
            typedef void ( CullVisitor_wrapper::*default_apply_function_type )( ::osg::ClearNode & ) ;
            
            CullVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::CullVisitor::apply)
                , default_apply_function_type(&CullVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osgUtil::CullVisitor::apply
        
            typedef void ( ::osgUtil::CullVisitor::*apply_function_type )( ::osg::Camera & ) ;
            typedef void ( CullVisitor_wrapper::*default_apply_function_type )( ::osg::Camera & ) ;
            
            CullVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::CullVisitor::apply)
                , default_apply_function_type(&CullVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osgUtil::CullVisitor::apply
        
            typedef void ( ::osgUtil::CullVisitor::*apply_function_type )( ::osg::OccluderNode & ) ;
            typedef void ( CullVisitor_wrapper::*default_apply_function_type )( ::osg::OccluderNode & ) ;
            
            CullVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::CullVisitor::apply)
                , default_apply_function_type(&CullVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osgUtil::CullVisitor::apply
        
            typedef void ( ::osgUtil::CullVisitor::*apply_function_type )( ::osg::OcclusionQueryNode & ) ;
            typedef void ( CullVisitor_wrapper::*default_apply_function_type )( ::osg::OcclusionQueryNode & ) ;
            
            CullVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::CullVisitor::apply)
                , default_apply_function_type(&CullVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osgUtil::CullVisitor::clampProjectionMatrix
        
            typedef bool ( ::osgUtil::CullVisitor::*clampProjectionMatrix_function_type )( ::osg::Matrixf &,double &,double & ) const;
            
            CullVisitor_exposer.def( 
                "clampProjectionMatrix"
                , clampProjectionMatrix_function_type( &::osgUtil::CullVisitor::clampProjectionMatrix )
                , ( bp::arg("projection"), bp::arg("znear"), bp::arg("zfar") ) );
        
        }
        { //::osgUtil::CullVisitor::clampProjectionMatrix
        
            typedef bool ( ::osgUtil::CullVisitor::*clampProjectionMatrix_function_type )( ::osg::Matrixd &,double &,double & ) const;
            
            CullVisitor_exposer.def( 
                "clampProjectionMatrix"
                , clampProjectionMatrix_function_type( &::osgUtil::CullVisitor::clampProjectionMatrix )
                , ( bp::arg("projection"), bp::arg("znear"), bp::arg("zfar") ) );
        
        }
        { //::osgUtil::CullVisitor::clampProjectionMatrixImplementation
        
            typedef bool ( ::osgUtil::CullVisitor::*clampProjectionMatrixImplementation_function_type )( ::osg::Matrixf &,double &,double & ) const;
            typedef bool ( CullVisitor_wrapper::*default_clampProjectionMatrixImplementation_function_type )( ::osg::Matrixf &,double &,double & ) const;
            
            CullVisitor_exposer.def( 
                "clampProjectionMatrixImplementation"
                , clampProjectionMatrixImplementation_function_type(&::osgUtil::CullVisitor::clampProjectionMatrixImplementation)
                , default_clampProjectionMatrixImplementation_function_type(&CullVisitor_wrapper::default_clampProjectionMatrixImplementation)
                , ( bp::arg("projection"), bp::arg("znear"), bp::arg("zfar") ) );
        
        }
        { //::osgUtil::CullVisitor::clampProjectionMatrixImplementation
        
            typedef bool ( ::osgUtil::CullVisitor::*clampProjectionMatrixImplementation_function_type )( ::osg::Matrixd &,double &,double & ) const;
            typedef bool ( CullVisitor_wrapper::*default_clampProjectionMatrixImplementation_function_type )( ::osg::Matrixd &,double &,double & ) const;
            
            CullVisitor_exposer.def( 
                "clampProjectionMatrixImplementation"
                , clampProjectionMatrixImplementation_function_type(&::osgUtil::CullVisitor::clampProjectionMatrixImplementation)
                , default_clampProjectionMatrixImplementation_function_type(&CullVisitor_wrapper::default_clampProjectionMatrixImplementation)
                , ( bp::arg("projection"), bp::arg("znear"), bp::arg("zfar") ) );
        
        }
        { //::osgUtil::CullVisitor::className
        
            typedef char const * ( ::osgUtil::CullVisitor::*className_function_type )(  ) const;
            typedef char const * ( CullVisitor_wrapper::*default_className_function_type )(  ) const;
            
            CullVisitor_exposer.def( 
                "className"
                , className_function_type(&::osgUtil::CullVisitor::className)
                , default_className_function_type(&CullVisitor_wrapper::default_className) );
        
        }
        { //::osgUtil::CullVisitor::clone
        
            typedef ::osgUtil::CullVisitor * ( ::osgUtil::CullVisitor::*clone_function_type )(  ) const;
            typedef ::osgUtil::CullVisitor * ( CullVisitor_wrapper::*default_clone_function_type )(  ) const;
            
            CullVisitor_exposer.def( 
                "clone"
                , clone_function_type(&::osgUtil::CullVisitor::clone)
                , default_clone_function_type(&CullVisitor_wrapper::default_clone)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgUtil::CullVisitor::computeNearPlane
        
            typedef void ( ::osgUtil::CullVisitor::*computeNearPlane_function_type )(  ) ;
            
            CullVisitor_exposer.def( 
                "computeNearPlane"
                , computeNearPlane_function_type( &::osgUtil::CullVisitor::computeNearPlane ) );
        
        }
        { //::osgUtil::CullVisitor::create
        
            typedef ::osgUtil::CullVisitor * ( *create_function_type )(  );
            
            CullVisitor_exposer.def( 
                "create"
                , create_function_type( &::osgUtil::CullVisitor::create )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::CullVisitor::getCalculatedFarPlane
        
            typedef double ( ::osgUtil::CullVisitor::*getCalculatedFarPlane_function_type )(  ) const;
            
            CullVisitor_exposer.def( 
                "getCalculatedFarPlane"
                , getCalculatedFarPlane_function_type( &::osgUtil::CullVisitor::getCalculatedFarPlane ) );
        
        }
        { //::osgUtil::CullVisitor::getCalculatedNearPlane
        
            typedef double ( ::osgUtil::CullVisitor::*getCalculatedNearPlane_function_type )(  ) const;
            
            CullVisitor_exposer.def( 
                "getCalculatedNearPlane"
                , getCalculatedNearPlane_function_type( &::osgUtil::CullVisitor::getCalculatedNearPlane ) );
        
        }
        { //::osgUtil::CullVisitor::getCurrentCamera
        
            typedef ::osg::Camera * ( ::osgUtil::CullVisitor::*getCurrentCamera_function_type )(  ) ;
            
            CullVisitor_exposer.def( 
                "getCurrentCamera"
                , getCurrentCamera_function_type( &::osgUtil::CullVisitor::getCurrentCamera )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::CullVisitor::getCurrentRenderBin
        
            typedef ::osgUtil::RenderBin * ( ::osgUtil::CullVisitor::*getCurrentRenderBin_function_type )(  ) ;
            
            CullVisitor_exposer.def( 
                "getCurrentRenderBin"
                , getCurrentRenderBin_function_type( &::osgUtil::CullVisitor::getCurrentRenderBin )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::CullVisitor::getCurrentRenderStage
        
            typedef ::osgUtil::RenderStage * ( ::osgUtil::CullVisitor::*getCurrentRenderStage_function_type )(  ) ;
            
            CullVisitor_exposer.def( 
                "getCurrentRenderStage"
                , getCurrentRenderStage_function_type( &::osgUtil::CullVisitor::getCurrentRenderStage )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::CullVisitor::getCurrentStateGraph
        
            typedef ::osgUtil::StateGraph * ( ::osgUtil::CullVisitor::*getCurrentStateGraph_function_type )(  ) ;
            
            CullVisitor_exposer.def( 
                "getCurrentStateGraph"
                , getCurrentStateGraph_function_type( &::osgUtil::CullVisitor::getCurrentStateGraph )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::CullVisitor::getDistanceFromEyePoint
        
            typedef float ( ::osgUtil::CullVisitor::*getDistanceFromEyePoint_function_type )( ::osg::Vec3 const &,bool ) const;
            typedef float ( CullVisitor_wrapper::*default_getDistanceFromEyePoint_function_type )( ::osg::Vec3 const &,bool ) const;
            
            CullVisitor_exposer.def( 
                "getDistanceFromEyePoint"
                , getDistanceFromEyePoint_function_type(&::osgUtil::CullVisitor::getDistanceFromEyePoint)
                , default_getDistanceFromEyePoint_function_type(&CullVisitor_wrapper::default_getDistanceFromEyePoint)
                , ( bp::arg("pos"), bp::arg("withLODScale") ) );
        
        }
        { //::osgUtil::CullVisitor::getDistanceToEyePoint
        
            typedef float ( ::osgUtil::CullVisitor::*getDistanceToEyePoint_function_type )( ::osg::Vec3 const &,bool ) const;
            typedef float ( CullVisitor_wrapper::*default_getDistanceToEyePoint_function_type )( ::osg::Vec3 const &,bool ) const;
            
            CullVisitor_exposer.def( 
                "getDistanceToEyePoint"
                , getDistanceToEyePoint_function_type(&::osgUtil::CullVisitor::getDistanceToEyePoint)
                , default_getDistanceToEyePoint_function_type(&CullVisitor_wrapper::default_getDistanceToEyePoint)
                , ( bp::arg("pos"), bp::arg("withLODScale") ) );
        
        }
        { //::osgUtil::CullVisitor::getDistanceToViewPoint
        
            typedef float ( ::osgUtil::CullVisitor::*getDistanceToViewPoint_function_type )( ::osg::Vec3 const &,bool ) const;
            typedef float ( CullVisitor_wrapper::*default_getDistanceToViewPoint_function_type )( ::osg::Vec3 const &,bool ) const;
            
            CullVisitor_exposer.def( 
                "getDistanceToViewPoint"
                , getDistanceToViewPoint_function_type(&::osgUtil::CullVisitor::getDistanceToViewPoint)
                , default_getDistanceToViewPoint_function_type(&CullVisitor_wrapper::default_getDistanceToViewPoint)
                , ( bp::arg("pos"), bp::arg("withLODScale") ) );
        
        }
        { //::osgUtil::CullVisitor::getEyePoint
        
            typedef ::osg::Vec3 ( ::osgUtil::CullVisitor::*getEyePoint_function_type )(  ) const;
            typedef ::osg::Vec3 ( CullVisitor_wrapper::*default_getEyePoint_function_type )(  ) const;
            
            CullVisitor_exposer.def( 
                "getEyePoint"
                , getEyePoint_function_type(&::osgUtil::CullVisitor::getEyePoint)
                , default_getEyePoint_function_type(&CullVisitor_wrapper::default_getEyePoint) );
        
        }
        { //::osgUtil::CullVisitor::getIdentifier
        
            typedef ::osgUtil::CullVisitor::Identifier * ( ::osgUtil::CullVisitor::*getIdentifier_function_type )(  ) ;
            
            CullVisitor_exposer.def( 
                "getIdentifier"
                , getIdentifier_function_type( &::osgUtil::CullVisitor::getIdentifier )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::CullVisitor::getIdentifier
        
            typedef ::osgUtil::CullVisitor::Identifier const * ( ::osgUtil::CullVisitor::*getIdentifier_function_type )(  ) const;
            
            CullVisitor_exposer.def( 
                "getIdentifier"
                , getIdentifier_function_type( &::osgUtil::CullVisitor::getIdentifier )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::CullVisitor::getRenderInfo
        
            typedef ::osg::RenderInfo & ( ::osgUtil::CullVisitor::*getRenderInfo_function_type )(  ) ;
            
            CullVisitor_exposer.def( 
                "getRenderInfo"
                , getRenderInfo_function_type( &::osgUtil::CullVisitor::getRenderInfo )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::CullVisitor::getRenderInfo
        
            typedef ::osg::RenderInfo const & ( ::osgUtil::CullVisitor::*getRenderInfo_function_type )(  ) const;
            
            CullVisitor_exposer.def( 
                "getRenderInfo"
                , getRenderInfo_function_type( &::osgUtil::CullVisitor::getRenderInfo )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::CullVisitor::getRenderStage
        
            typedef ::osgUtil::RenderStage * ( ::osgUtil::CullVisitor::*getRenderStage_function_type )(  ) ;
            
            CullVisitor_exposer.def( 
                "getRenderStage"
                , getRenderStage_function_type( &::osgUtil::CullVisitor::getRenderStage )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::CullVisitor::getRootStateGraph
        
            typedef ::osgUtil::StateGraph * ( ::osgUtil::CullVisitor::*getRootStateGraph_function_type )(  ) ;
            
            CullVisitor_exposer.def( 
                "getRootStateGraph"
                , getRootStateGraph_function_type( &::osgUtil::CullVisitor::getRootStateGraph )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::CullVisitor::getState
        
            typedef ::osg::State * ( ::osgUtil::CullVisitor::*getState_function_type )(  ) ;
            
            CullVisitor_exposer.def( 
                "getState"
                , getState_function_type( &::osgUtil::CullVisitor::getState )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::CullVisitor::getState
        
            typedef ::osg::State const * ( ::osgUtil::CullVisitor::*getState_function_type )(  ) const;
            
            CullVisitor_exposer.def( 
                "getState"
                , getState_function_type( &::osgUtil::CullVisitor::getState )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::CullVisitor::getViewPoint
        
            typedef ::osg::Vec3 ( ::osgUtil::CullVisitor::*getViewPoint_function_type )(  ) const;
            typedef ::osg::Vec3 ( CullVisitor_wrapper::*default_getViewPoint_function_type )(  ) const;
            
            CullVisitor_exposer.def( 
                "getViewPoint"
                , getViewPoint_function_type(&::osgUtil::CullVisitor::getViewPoint)
                , default_getViewPoint_function_type(&CullVisitor_wrapper::default_getViewPoint) );
        
        }
        { //::osgUtil::CullVisitor::libraryName
        
            typedef char const * ( ::osgUtil::CullVisitor::*libraryName_function_type )(  ) const;
            typedef char const * ( CullVisitor_wrapper::*default_libraryName_function_type )(  ) const;
            
            CullVisitor_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgUtil::CullVisitor::libraryName)
                , default_libraryName_function_type(&CullVisitor_wrapper::default_libraryName) );
        
        }
        { //::osgUtil::CullVisitor::popProjectionMatrix
        
            typedef void ( ::osgUtil::CullVisitor::*popProjectionMatrix_function_type )(  ) ;
            typedef void ( CullVisitor_wrapper::*default_popProjectionMatrix_function_type )(  ) ;
            
            CullVisitor_exposer.def( 
                "popProjectionMatrix"
                , popProjectionMatrix_function_type(&::osgUtil::CullVisitor::popProjectionMatrix)
                , default_popProjectionMatrix_function_type(&CullVisitor_wrapper::default_popProjectionMatrix) );
        
        }
        { //::osgUtil::CullVisitor::popStateSet
        
            typedef void ( ::osgUtil::CullVisitor::*popStateSet_function_type )(  ) ;
            
            CullVisitor_exposer.def( 
                "popStateSet"
                , popStateSet_function_type( &::osgUtil::CullVisitor::popStateSet ) );
        
        }
        { //::osgUtil::CullVisitor::prototype
        
            typedef ::osg::ref_ptr< osgUtil::CullVisitor > & ( *prototype_function_type )(  );
            
            CullVisitor_exposer.def( 
                "prototype"
                , prototype_function_type( &::osgUtil::CullVisitor::prototype )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::CullVisitor::pushStateSet
        
            typedef void ( ::osgUtil::CullVisitor::*pushStateSet_function_type )( ::osg::StateSet const * ) ;
            
            CullVisitor_exposer.def( 
                "pushStateSet"
                , pushStateSet_function_type( &::osgUtil::CullVisitor::pushStateSet )
                , ( bp::arg("ss") ) );
        
        }
        { //::osgUtil::CullVisitor::reset
        
            typedef void ( ::osgUtil::CullVisitor::*reset_function_type )(  ) ;
            typedef void ( CullVisitor_wrapper::*default_reset_function_type )(  ) ;
            
            CullVisitor_exposer.def( 
                "reset"
                , reset_function_type(&::osgUtil::CullVisitor::reset)
                , default_reset_function_type(&CullVisitor_wrapper::default_reset) );
        
        }
        { //::osgUtil::CullVisitor::setCalculatedFarPlane
        
            typedef void ( ::osgUtil::CullVisitor::*setCalculatedFarPlane_function_type )( double ) ;
            
            CullVisitor_exposer.def( 
                "setCalculatedFarPlane"
                , setCalculatedFarPlane_function_type( &::osgUtil::CullVisitor::setCalculatedFarPlane )
                , ( bp::arg("value") ) );
        
        }
        { //::osgUtil::CullVisitor::setCalculatedNearPlane
        
            typedef void ( ::osgUtil::CullVisitor::*setCalculatedNearPlane_function_type )( double ) ;
            
            CullVisitor_exposer.def( 
                "setCalculatedNearPlane"
                , setCalculatedNearPlane_function_type( &::osgUtil::CullVisitor::setCalculatedNearPlane )
                , ( bp::arg("value") ) );
        
        }
        { //::osgUtil::CullVisitor::setCurrentRenderBin
        
            typedef void ( ::osgUtil::CullVisitor::*setCurrentRenderBin_function_type )( ::osgUtil::RenderBin * ) ;
            
            CullVisitor_exposer.def( 
                "setCurrentRenderBin"
                , setCurrentRenderBin_function_type( &::osgUtil::CullVisitor::setCurrentRenderBin )
                , ( bp::arg("rb") ) );
        
        }
        { //::osgUtil::CullVisitor::setIdentifier
        
            typedef void ( ::osgUtil::CullVisitor::*setIdentifier_function_type )( ::osgUtil::CullVisitor::Identifier * ) ;
            
            CullVisitor_exposer.def( 
                "setIdentifier"
                , setIdentifier_function_type( &::osgUtil::CullVisitor::setIdentifier )
                , ( bp::arg("identifier") ) );
        
        }
        { //::osgUtil::CullVisitor::setRenderInfo
        
            typedef void ( ::osgUtil::CullVisitor::*setRenderInfo_function_type )( ::osg::RenderInfo & ) ;
            
            CullVisitor_exposer.def( 
                "setRenderInfo"
                , setRenderInfo_function_type( &::osgUtil::CullVisitor::setRenderInfo )
                , ( bp::arg("renderInfo") ) );
        
        }
        { //::osgUtil::CullVisitor::setRenderStage
        
            typedef void ( ::osgUtil::CullVisitor::*setRenderStage_function_type )( ::osgUtil::RenderStage * ) ;
            
            CullVisitor_exposer.def( 
                "setRenderStage"
                , setRenderStage_function_type( &::osgUtil::CullVisitor::setRenderStage )
                , ( bp::arg("rg") ) );
        
        }
        { //::osgUtil::CullVisitor::setState
        
            typedef void ( ::osgUtil::CullVisitor::*setState_function_type )( ::osg::State * ) ;
            
            CullVisitor_exposer.def( 
                "setState"
                , setState_function_type( &::osgUtil::CullVisitor::setState )
                , ( bp::arg("state") ) );
        
        }
        { //::osgUtil::CullVisitor::setStateGraph
        
            typedef void ( ::osgUtil::CullVisitor::*setStateGraph_function_type )( ::osgUtil::StateGraph * ) ;
            
            CullVisitor_exposer.def( 
                "setStateGraph"
                , setStateGraph_function_type( &::osgUtil::CullVisitor::setStateGraph )
                , ( bp::arg("rg") ) );
        
        }
        CullVisitor_exposer.staticmethod( "create" );
        CullVisitor_exposer.staticmethod( "prototype" );
    }

}
