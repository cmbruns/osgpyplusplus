// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgUtil.h"
#include "wrap_referenced.h"
#include "HighlightMapGenerator.pypp.hpp"

namespace bp = boost::python;

struct HighlightMapGenerator_wrapper : osgUtil::HighlightMapGenerator, bp::wrapper< osgUtil::HighlightMapGenerator > {

    HighlightMapGenerator_wrapper(::osg::Vec3 const & light_direction, ::osg::Vec4 const & light_color, float specular_exponent, int texture_size=64 )
    : osgUtil::HighlightMapGenerator( boost::ref(light_direction), boost::ref(light_color), specular_exponent, texture_size )
      , bp::wrapper< osgUtil::HighlightMapGenerator >(){
        // constructor
    
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_HighlightMapGenerator_class(){

    bp::class_< HighlightMapGenerator_wrapper, bp::bases< osgUtil::CubeMapGenerator >, osg::ref_ptr< HighlightMapGenerator_wrapper >, boost::noncopyable >( "HighlightMapGenerator", bp::no_init )    
        .def( bp::init< osg::Vec3 const &, osg::Vec4 const &, float, bp::optional< int > >(( bp::arg("light_direction"), bp::arg("light_color"), bp::arg("specular_exponent"), bp::arg("texture_size")=(int)(64) )) );

}
