// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgUtil.h"
#include "Statistics.pypp.hpp"

namespace bp = boost::python;

struct Statistics_wrapper : osgUtil::Statistics, bp::wrapper< osgUtil::Statistics > {

    Statistics_wrapper(osgUtil::Statistics const & arg )
    : osgUtil::Statistics( arg )
      , bp::wrapper< osgUtil::Statistics >(){
        // copy constructor
        
    }

    Statistics_wrapper( )
    : osgUtil::Statistics( )
      , bp::wrapper< osgUtil::Statistics >(){
        // null constructor
    
    }

    virtual void begin( ::GLenum mode ) {
        if( bp::override func_begin = this->get_override( "begin" ) )
            func_begin( mode );
        else{
            this->osgUtil::Statistics::begin( mode );
        }
    }
    
    void default_begin( ::GLenum mode ) {
        osgUtil::Statistics::begin( mode );
    }

    virtual void drawArrays( ::GLenum mode, ::GLint arg1, ::GLsizei count ) {
        if( bp::override func_drawArrays = this->get_override( "drawArrays" ) )
            func_drawArrays( mode, arg1, count );
        else{
            this->osgUtil::Statistics::drawArrays( mode, arg1, count );
        }
    }
    
    void default_drawArrays( ::GLenum mode, ::GLint arg1, ::GLsizei count ) {
        osgUtil::Statistics::drawArrays( mode, arg1, count );
    }

    virtual void drawElements( ::GLenum mode, ::GLsizei count, ::GLubyte const * arg2 ) {
        if( bp::override func_drawElements = this->get_override( "drawElements" ) )
            func_drawElements( mode, count, arg2 );
        else{
            this->osgUtil::Statistics::drawElements( mode, count, arg2 );
        }
    }
    
    void default_drawElements( ::GLenum mode, ::GLsizei count, ::GLubyte const * arg2 ) {
        osgUtil::Statistics::drawElements( mode, count, arg2 );
    }

    virtual void drawElements( ::GLenum mode, ::GLsizei count, ::GLushort const * arg2 ) {
        if( bp::override func_drawElements = this->get_override( "drawElements" ) )
            func_drawElements( mode, count, arg2 );
        else{
            this->osgUtil::Statistics::drawElements( mode, count, arg2 );
        }
    }
    
    void default_drawElements( ::GLenum mode, ::GLsizei count, ::GLushort const * arg2 ) {
        osgUtil::Statistics::drawElements( mode, count, arg2 );
    }

    virtual void drawElements( ::GLenum mode, ::GLsizei count, ::GLuint const * arg2 ) {
        if( bp::override func_drawElements = this->get_override( "drawElements" ) )
            func_drawElements( mode, count, arg2 );
        else{
            this->osgUtil::Statistics::drawElements( mode, count, arg2 );
        }
    }
    
    void default_drawElements( ::GLenum mode, ::GLsizei count, ::GLuint const * arg2 ) {
        osgUtil::Statistics::drawElements( mode, count, arg2 );
    }

    virtual void end(  ) {
        if( bp::override func_end = this->get_override( "end" ) )
            func_end(  );
        else{
            this->osgUtil::Statistics::end(  );
        }
    }
    
    void default_end(  ) {
        osgUtil::Statistics::end( );
    }

    virtual void setVertexArray( unsigned int count, ::osg::Vec3 const * arg1 ) {
        if( bp::override func_setVertexArray = this->get_override( "setVertexArray" ) )
            func_setVertexArray( count, boost::python::ptr(arg1) );
        else{
            this->osgUtil::Statistics::setVertexArray( count, boost::python::ptr(arg1) );
        }
    }
    
    void default_setVertexArray( unsigned int count, ::osg::Vec3 const * arg1 ) {
        osgUtil::Statistics::setVertexArray( count, boost::python::ptr(arg1) );
    }

    virtual void setVertexArray( unsigned int count, ::osg::Vec2 const * arg1 ) {
        if( bp::override func_setVertexArray = this->get_override( "setVertexArray" ) )
            func_setVertexArray( count, boost::python::ptr(arg1) );
        else{
            this->osgUtil::Statistics::setVertexArray( count, boost::python::ptr(arg1) );
        }
    }
    
    void default_setVertexArray( unsigned int count, ::osg::Vec2 const * arg1 ) {
        osgUtil::Statistics::setVertexArray( count, boost::python::ptr(arg1) );
    }

    virtual void setVertexArray( unsigned int count, ::osg::Vec4 const * arg1 ) {
        if( bp::override func_setVertexArray = this->get_override( "setVertexArray" ) )
            func_setVertexArray( count, boost::python::ptr(arg1) );
        else{
            this->osgUtil::Statistics::setVertexArray( count, boost::python::ptr(arg1) );
        }
    }
    
    void default_setVertexArray( unsigned int count, ::osg::Vec4 const * arg1 ) {
        osgUtil::Statistics::setVertexArray( count, boost::python::ptr(arg1) );
    }

    virtual void setVertexArray( unsigned int count, ::osg::Vec3d const * arg1 ) {
        if( bp::override func_setVertexArray = this->get_override( "setVertexArray" ) )
            func_setVertexArray( count, boost::python::ptr(arg1) );
        else{
            this->osgUtil::Statistics::setVertexArray( count, boost::python::ptr(arg1) );
        }
    }
    
    void default_setVertexArray( unsigned int count, ::osg::Vec3d const * arg1 ) {
        osgUtil::Statistics::setVertexArray( count, boost::python::ptr(arg1) );
    }

    virtual void setVertexArray( unsigned int count, ::osg::Vec2d const * arg1 ) {
        if( bp::override func_setVertexArray = this->get_override( "setVertexArray" ) )
            func_setVertexArray( count, boost::python::ptr(arg1) );
        else{
            this->osgUtil::Statistics::setVertexArray( count, boost::python::ptr(arg1) );
        }
    }
    
    void default_setVertexArray( unsigned int count, ::osg::Vec2d const * arg1 ) {
        osgUtil::Statistics::setVertexArray( count, boost::python::ptr(arg1) );
    }

    virtual void setVertexArray( unsigned int count, ::osg::Vec4d const * arg1 ) {
        if( bp::override func_setVertexArray = this->get_override( "setVertexArray" ) )
            func_setVertexArray( count, boost::python::ptr(arg1) );
        else{
            this->osgUtil::Statistics::setVertexArray( count, boost::python::ptr(arg1) );
        }
    }
    
    void default_setVertexArray( unsigned int count, ::osg::Vec4d const * arg1 ) {
        osgUtil::Statistics::setVertexArray( count, boost::python::ptr(arg1) );
    }

    virtual void vertex( float arg0, float arg1, float arg2 ) {
        if( bp::override func_vertex = this->get_override( "vertex" ) )
            func_vertex( arg0, arg1, arg2 );
        else{
            this->osgUtil::Statistics::vertex( arg0, arg1, arg2 );
        }
    }
    
    void default_vertex( float arg0, float arg1, float arg2 ) {
        osgUtil::Statistics::vertex( arg0, arg1, arg2 );
    }

    virtual void vertex( ::osg::Vec3 const & arg0 ) {
        if( bp::override func_vertex = this->get_override( "vertex" ) )
            func_vertex( boost::ref(arg0) );
        else{
            this->osgUtil::Statistics::vertex( boost::ref(arg0) );
        }
    }
    
    void default_vertex( ::osg::Vec3 const & arg0 ) {
        osgUtil::Statistics::vertex( boost::ref(arg0) );
    }

    virtual void vertex( ::osg::Vec2 const & arg0 ) {
        if( bp::override func_vertex = this->get_override( "vertex" ) )
            func_vertex( boost::ref(arg0) );
        else{
            this->osgUtil::Statistics::vertex( boost::ref(arg0) );
        }
    }
    
    void default_vertex( ::osg::Vec2 const & arg0 ) {
        osgUtil::Statistics::vertex( boost::ref(arg0) );
    }

    virtual void vertex( ::osg::Vec4 const & arg0 ) {
        if( bp::override func_vertex = this->get_override( "vertex" ) )
            func_vertex( boost::ref(arg0) );
        else{
            this->osgUtil::Statistics::vertex( boost::ref(arg0) );
        }
    }
    
    void default_vertex( ::osg::Vec4 const & arg0 ) {
        osgUtil::Statistics::vertex( boost::ref(arg0) );
    }

    virtual void vertex( float arg0, float arg1 ) {
        if( bp::override func_vertex = this->get_override( "vertex" ) )
            func_vertex( arg0, arg1 );
        else{
            this->osgUtil::Statistics::vertex( arg0, arg1 );
        }
    }
    
    void default_vertex( float arg0, float arg1 ) {
        osgUtil::Statistics::vertex( arg0, arg1 );
    }

    virtual void vertex( float arg0, float arg1, float arg2, float arg3 ) {
        if( bp::override func_vertex = this->get_override( "vertex" ) )
            func_vertex( arg0, arg1, arg2, arg3 );
        else{
            this->osgUtil::Statistics::vertex( arg0, arg1, arg2, arg3 );
        }
    }
    
    void default_vertex( float arg0, float arg1, float arg2, float arg3 ) {
        osgUtil::Statistics::vertex( arg0, arg1, arg2, arg3 );
    }

};

void register_Statistics_class(){

    { //::osgUtil::Statistics
        typedef bp::class_< Statistics_wrapper, bp::bases< ::osg::PrimitiveFunctor > > Statistics_exposer_t;
        Statistics_exposer_t Statistics_exposer = Statistics_exposer_t( "Statistics", "\n Statistics base class. Used to extract primitive information from\n the renderBin(s).  Add a case of getStats(osgUtil::Statistics *stat)\n for any new drawable (or drawable derived class) that you generate\n (eg see Geometry.cpp).  There are 20 types of drawable counted - actually only\n 14 cases can occur in reality.  these represent sets of GL_POINTS, GL_LINES\n GL_LINESTRIPS, LOOPS, TRIANGLES, TRI-fans, tristrips, quads, quadstrips etc\n The number of triangles rendered is inferred:\n each triangle = 1 triangle (number of vertices/3)\n each quad = 2 triangles (nverts/2)\n each trifan or tristrip = (length-2) triangles and so on.\n", bp::init< >() );
        bp::scope Statistics_scope( Statistics_exposer );
        bp::enum_< osgUtil::Statistics::StatsType>("StatsType")
            .value("STAT_NONE", osgUtil::Statistics::STAT_NONE)
            .value("STAT_FRAMERATE", osgUtil::Statistics::STAT_FRAMERATE)
            .value("STAT_GRAPHS", osgUtil::Statistics::STAT_GRAPHS)
            .value("STAT_PRIMS", osgUtil::Statistics::STAT_PRIMS)
            .value("STAT_PRIMSPERVIEW", osgUtil::Statistics::STAT_PRIMSPERVIEW)
            .value("STAT_PRIMSPERBIN", osgUtil::Statistics::STAT_PRIMSPERBIN)
            .value("STAT_DC", osgUtil::Statistics::STAT_DC)
            .value("STAT_RESTART", osgUtil::Statistics::STAT_RESTART)
            .export_values()
            ;
        { //::osgUtil::Statistics::GetPrimitivesBegin
        
            typedef ::std::_Rb_tree_iterator< std::pair< unsigned int const, unsigned int > > ( ::osgUtil::Statistics::*GetPrimitivesBegin_function_type )(  ) ;
            
            Statistics_exposer.def( 
                "GetPrimitivesBegin"
                , GetPrimitivesBegin_function_type( &::osgUtil::Statistics::GetPrimitivesBegin )
                , " deprecated" );
        
        }
        { //::osgUtil::Statistics::GetPrimitivesEnd
        
            typedef ::std::_Rb_tree_iterator< std::pair< unsigned int const, unsigned int > > ( ::osgUtil::Statistics::*GetPrimitivesEnd_function_type )(  ) ;
            
            Statistics_exposer.def( 
                "GetPrimitivesEnd"
                , GetPrimitivesEnd_function_type( &::osgUtil::Statistics::GetPrimitivesEnd )
                , " deprecated" );
        
        }
        { //::osgUtil::Statistics::add
        
            typedef void ( ::osgUtil::Statistics::*add_function_type )( ::osgUtil::Statistics const & ) ;
            
            Statistics_exposer.def( 
                "add"
                , add_function_type( &::osgUtil::Statistics::add )
                , ( bp::arg("stats") ) );
        
        }
        { //::osgUtil::Statistics::addBins
        
            typedef void ( ::osgUtil::Statistics::*addBins_function_type )( int ) ;
            
            Statistics_exposer.def( 
                "addBins"
                , addBins_function_type( &::osgUtil::Statistics::addBins )
                , ( bp::arg("np") ) );
        
        }
        { //::osgUtil::Statistics::addDrawable
        
            typedef void ( ::osgUtil::Statistics::*addDrawable_function_type )(  ) ;
            
            Statistics_exposer.def( 
                "addDrawable"
                , addDrawable_function_type( &::osgUtil::Statistics::addDrawable ) );
        
        }
        { //::osgUtil::Statistics::addFastDrawable
        
            typedef void ( ::osgUtil::Statistics::*addFastDrawable_function_type )(  ) ;
            
            Statistics_exposer.def( 
                "addFastDrawable"
                , addFastDrawable_function_type( &::osgUtil::Statistics::addFastDrawable ) );
        
        }
        { //::osgUtil::Statistics::addImpostor
        
            typedef void ( ::osgUtil::Statistics::*addImpostor_function_type )( int ) ;
            
            Statistics_exposer.def( 
                "addImpostor"
                , addImpostor_function_type( &::osgUtil::Statistics::addImpostor )
                , ( bp::arg("np") ) );
        
        }
        { //::osgUtil::Statistics::addLight
        
            typedef void ( ::osgUtil::Statistics::*addLight_function_type )( int ) ;
            
            Statistics_exposer.def( 
                "addLight"
                , addLight_function_type( &::osgUtil::Statistics::addLight )
                , ( bp::arg("np") ) );
        
        }
        { //::osgUtil::Statistics::addMatrix
        
            typedef void ( ::osgUtil::Statistics::*addMatrix_function_type )(  ) ;
            
            Statistics_exposer.def( 
                "addMatrix"
                , addMatrix_function_type( &::osgUtil::Statistics::addMatrix ) );
        
        }
        { //::osgUtil::Statistics::addOrderedLeaves
        
            typedef void ( ::osgUtil::Statistics::*addOrderedLeaves_function_type )( int ) ;
            
            Statistics_exposer.def( 
                "addOrderedLeaves"
                , addOrderedLeaves_function_type( &::osgUtil::Statistics::addOrderedLeaves )
                , ( bp::arg("n") ) );
        
        }
        { //::osgUtil::Statistics::addStateGraphs
        
            typedef void ( ::osgUtil::Statistics::*addStateGraphs_function_type )( int ) ;
            
            Statistics_exposer.def( 
                "addStateGraphs"
                , addStateGraphs_function_type( &::osgUtil::Statistics::addStateGraphs )
                , ( bp::arg("n") ) );
        
        }
        { //::osgUtil::Statistics::begin
        
            typedef void ( ::osgUtil::Statistics::*begin_function_type )( ::GLenum ) ;
            typedef void ( Statistics_wrapper::*default_begin_function_type )( ::GLenum ) ;
            
            Statistics_exposer.def( 
                "begin"
                , begin_function_type(&::osgUtil::Statistics::begin)
                , default_begin_function_type(&Statistics_wrapper::default_begin)
                , ( bp::arg("mode") ) );
        
        }
        { //::osgUtil::Statistics::drawArrays
        
            typedef void ( ::osgUtil::Statistics::*drawArrays_function_type )( ::GLenum,::GLint,::GLsizei ) ;
            typedef void ( Statistics_wrapper::*default_drawArrays_function_type )( ::GLenum,::GLint,::GLsizei ) ;
            
            Statistics_exposer.def( 
                "drawArrays"
                , drawArrays_function_type(&::osgUtil::Statistics::drawArrays)
                , default_drawArrays_function_type(&Statistics_wrapper::default_drawArrays)
                , ( bp::arg("mode"), bp::arg("arg1"), bp::arg("count") ) );
        
        }
        { //::osgUtil::Statistics::drawElements
        
            typedef void ( ::osgUtil::Statistics::*drawElements_function_type )( ::GLenum,::GLsizei,::GLubyte const * ) ;
            typedef void ( Statistics_wrapper::*default_drawElements_function_type )( ::GLenum,::GLsizei,::GLubyte const * ) ;
            
            Statistics_exposer.def( 
                "drawElements"
                , drawElements_function_type(&::osgUtil::Statistics::drawElements)
                , default_drawElements_function_type(&Statistics_wrapper::default_drawElements)
                , ( bp::arg("mode"), bp::arg("count"), bp::arg("arg2") ) );
        
        }
        { //::osgUtil::Statistics::drawElements
        
            typedef void ( ::osgUtil::Statistics::*drawElements_function_type )( ::GLenum,::GLsizei,::GLushort const * ) ;
            typedef void ( Statistics_wrapper::*default_drawElements_function_type )( ::GLenum,::GLsizei,::GLushort const * ) ;
            
            Statistics_exposer.def( 
                "drawElements"
                , drawElements_function_type(&::osgUtil::Statistics::drawElements)
                , default_drawElements_function_type(&Statistics_wrapper::default_drawElements)
                , ( bp::arg("mode"), bp::arg("count"), bp::arg("arg2") ) );
        
        }
        { //::osgUtil::Statistics::drawElements
        
            typedef void ( ::osgUtil::Statistics::*drawElements_function_type )( ::GLenum,::GLsizei,::GLuint const * ) ;
            typedef void ( Statistics_wrapper::*default_drawElements_function_type )( ::GLenum,::GLsizei,::GLuint const * ) ;
            
            Statistics_exposer.def( 
                "drawElements"
                , drawElements_function_type(&::osgUtil::Statistics::drawElements)
                , default_drawElements_function_type(&Statistics_wrapper::default_drawElements)
                , ( bp::arg("mode"), bp::arg("count"), bp::arg("arg2") ) );
        
        }
        { //::osgUtil::Statistics::end
        
            typedef void ( ::osgUtil::Statistics::*end_function_type )(  ) ;
            typedef void ( Statistics_wrapper::*default_end_function_type )(  ) ;
            
            Statistics_exposer.def( 
                "end"
                , end_function_type(&::osgUtil::Statistics::end)
                , default_end_function_type(&Statistics_wrapper::default_end) );
        
        }
        { //::osgUtil::Statistics::getBins
        
            typedef int ( ::osgUtil::Statistics::*getBins_function_type )(  ) ;
            
            Statistics_exposer.def( 
                "getBins"
                , getBins_function_type( &::osgUtil::Statistics::getBins ) );
        
        }
        { //::osgUtil::Statistics::getPrimitiveCountMap
        
            typedef ::std::map< unsigned int, unsigned int > & ( ::osgUtil::Statistics::*getPrimitiveCountMap_function_type )(  ) ;
            
            Statistics_exposer.def( 
                "getPrimitiveCountMap"
                , getPrimitiveCountMap_function_type( &::osgUtil::Statistics::getPrimitiveCountMap )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::Statistics::getPrimitiveCountMap
        
            typedef ::std::map< unsigned int, unsigned int > const & ( ::osgUtil::Statistics::*getPrimitiveCountMap_function_type )(  ) const;
            
            Statistics_exposer.def( 
                "getPrimitiveCountMap"
                , getPrimitiveCountMap_function_type( &::osgUtil::Statistics::getPrimitiveCountMap )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::Statistics::getPrimitiveValueMap
        
            typedef ::std::map< unsigned int, std::pair<unsigned int, unsigned int> > & ( ::osgUtil::Statistics::*getPrimitiveValueMap_function_type )(  ) ;
            
            Statistics_exposer.def( 
                "getPrimitiveValueMap"
                , getPrimitiveValueMap_function_type( &::osgUtil::Statistics::getPrimitiveValueMap )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::Statistics::getPrimitiveValueMap
        
            typedef ::std::map< unsigned int, std::pair<unsigned int, unsigned int> > const & ( ::osgUtil::Statistics::*getPrimitiveValueMap_function_type )(  ) const;
            
            Statistics_exposer.def( 
                "getPrimitiveValueMap"
                , getPrimitiveValueMap_function_type( &::osgUtil::Statistics::getPrimitiveValueMap )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::Statistics::reset
        
            typedef void ( ::osgUtil::Statistics::*reset_function_type )(  ) ;
            
            Statistics_exposer.def( 
                "reset"
                , reset_function_type( &::osgUtil::Statistics::reset ) );
        
        }
        { //::osgUtil::Statistics::setBinNo
        
            typedef void ( ::osgUtil::Statistics::*setBinNo_function_type )( int ) ;
            
            Statistics_exposer.def( 
                "setBinNo"
                , setBinNo_function_type( &::osgUtil::Statistics::setBinNo )
                , ( bp::arg("n") ) );
        
        }
        { //::osgUtil::Statistics::setDepth
        
            typedef void ( ::osgUtil::Statistics::*setDepth_function_type )( int ) ;
            
            Statistics_exposer.def( 
                "setDepth"
                , setDepth_function_type( &::osgUtil::Statistics::setDepth )
                , ( bp::arg("d") ) );
        
        }
        { //::osgUtil::Statistics::setType
        
            typedef void ( ::osgUtil::Statistics::*setType_function_type )( ::osgUtil::Statistics::StatsType ) ;
            
            Statistics_exposer.def( 
                "setType"
                , setType_function_type( &::osgUtil::Statistics::setType )
                , ( bp::arg("t") ) );
        
        }
        { //::osgUtil::Statistics::setVertexArray
        
            typedef void ( ::osgUtil::Statistics::*setVertexArray_function_type )( unsigned int,::osg::Vec3 const * ) ;
            typedef void ( Statistics_wrapper::*default_setVertexArray_function_type )( unsigned int,::osg::Vec3 const * ) ;
            
            Statistics_exposer.def( 
                "setVertexArray"
                , setVertexArray_function_type(&::osgUtil::Statistics::setVertexArray)
                , default_setVertexArray_function_type(&Statistics_wrapper::default_setVertexArray)
                , ( bp::arg("count"), bp::arg("arg1") ) );
        
        }
        { //::osgUtil::Statistics::setVertexArray
        
            typedef void ( ::osgUtil::Statistics::*setVertexArray_function_type )( unsigned int,::osg::Vec2 const * ) ;
            typedef void ( Statistics_wrapper::*default_setVertexArray_function_type )( unsigned int,::osg::Vec2 const * ) ;
            
            Statistics_exposer.def( 
                "setVertexArray"
                , setVertexArray_function_type(&::osgUtil::Statistics::setVertexArray)
                , default_setVertexArray_function_type(&Statistics_wrapper::default_setVertexArray)
                , ( bp::arg("count"), bp::arg("arg1") ) );
        
        }
        { //::osgUtil::Statistics::setVertexArray
        
            typedef void ( ::osgUtil::Statistics::*setVertexArray_function_type )( unsigned int,::osg::Vec4 const * ) ;
            typedef void ( Statistics_wrapper::*default_setVertexArray_function_type )( unsigned int,::osg::Vec4 const * ) ;
            
            Statistics_exposer.def( 
                "setVertexArray"
                , setVertexArray_function_type(&::osgUtil::Statistics::setVertexArray)
                , default_setVertexArray_function_type(&Statistics_wrapper::default_setVertexArray)
                , ( bp::arg("count"), bp::arg("arg1") ) );
        
        }
        { //::osgUtil::Statistics::setVertexArray
        
            typedef void ( ::osgUtil::Statistics::*setVertexArray_function_type )( unsigned int,::osg::Vec3d const * ) ;
            typedef void ( Statistics_wrapper::*default_setVertexArray_function_type )( unsigned int,::osg::Vec3d const * ) ;
            
            Statistics_exposer.def( 
                "setVertexArray"
                , setVertexArray_function_type(&::osgUtil::Statistics::setVertexArray)
                , default_setVertexArray_function_type(&Statistics_wrapper::default_setVertexArray)
                , ( bp::arg("count"), bp::arg("arg1") ) );
        
        }
        { //::osgUtil::Statistics::setVertexArray
        
            typedef void ( ::osgUtil::Statistics::*setVertexArray_function_type )( unsigned int,::osg::Vec2d const * ) ;
            typedef void ( Statistics_wrapper::*default_setVertexArray_function_type )( unsigned int,::osg::Vec2d const * ) ;
            
            Statistics_exposer.def( 
                "setVertexArray"
                , setVertexArray_function_type(&::osgUtil::Statistics::setVertexArray)
                , default_setVertexArray_function_type(&Statistics_wrapper::default_setVertexArray)
                , ( bp::arg("count"), bp::arg("arg1") ) );
        
        }
        { //::osgUtil::Statistics::setVertexArray
        
            typedef void ( ::osgUtil::Statistics::*setVertexArray_function_type )( unsigned int,::osg::Vec4d const * ) ;
            typedef void ( Statistics_wrapper::*default_setVertexArray_function_type )( unsigned int,::osg::Vec4d const * ) ;
            
            Statistics_exposer.def( 
                "setVertexArray"
                , setVertexArray_function_type(&::osgUtil::Statistics::setVertexArray)
                , default_setVertexArray_function_type(&Statistics_wrapper::default_setVertexArray)
                , ( bp::arg("count"), bp::arg("arg1") ) );
        
        }
        { //::osgUtil::Statistics::vertex
        
            typedef void ( ::osgUtil::Statistics::*vertex_function_type )(  ) ;
            
            Statistics_exposer.def( 
                "vertex"
                , vertex_function_type( &::osgUtil::Statistics::vertex ) );
        
        }
        { //::osgUtil::Statistics::vertex
        
            typedef void ( ::osgUtil::Statistics::*vertex_function_type )( float,float,float ) ;
            typedef void ( Statistics_wrapper::*default_vertex_function_type )( float,float,float ) ;
            
            Statistics_exposer.def( 
                "vertex"
                , vertex_function_type(&::osgUtil::Statistics::vertex)
                , default_vertex_function_type(&Statistics_wrapper::default_vertex)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) );
        
        }
        { //::osgUtil::Statistics::vertex
        
            typedef void ( ::osgUtil::Statistics::*vertex_function_type )( ::osg::Vec3 const & ) ;
            typedef void ( Statistics_wrapper::*default_vertex_function_type )( ::osg::Vec3 const & ) ;
            
            Statistics_exposer.def( 
                "vertex"
                , vertex_function_type(&::osgUtil::Statistics::vertex)
                , default_vertex_function_type(&Statistics_wrapper::default_vertex)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgUtil::Statistics::vertex
        
            typedef void ( ::osgUtil::Statistics::*vertex_function_type )( ::osg::Vec2 const & ) ;
            typedef void ( Statistics_wrapper::*default_vertex_function_type )( ::osg::Vec2 const & ) ;
            
            Statistics_exposer.def( 
                "vertex"
                , vertex_function_type(&::osgUtil::Statistics::vertex)
                , default_vertex_function_type(&Statistics_wrapper::default_vertex)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgUtil::Statistics::vertex
        
            typedef void ( ::osgUtil::Statistics::*vertex_function_type )( ::osg::Vec4 const & ) ;
            typedef void ( Statistics_wrapper::*default_vertex_function_type )( ::osg::Vec4 const & ) ;
            
            Statistics_exposer.def( 
                "vertex"
                , vertex_function_type(&::osgUtil::Statistics::vertex)
                , default_vertex_function_type(&Statistics_wrapper::default_vertex)
                , ( bp::arg("arg0") ) );
        
        }
        { //::osgUtil::Statistics::vertex
        
            typedef void ( ::osgUtil::Statistics::*vertex_function_type )( float,float ) ;
            typedef void ( Statistics_wrapper::*default_vertex_function_type )( float,float ) ;
            
            Statistics_exposer.def( 
                "vertex"
                , vertex_function_type(&::osgUtil::Statistics::vertex)
                , default_vertex_function_type(&Statistics_wrapper::default_vertex)
                , ( bp::arg("arg0"), bp::arg("arg1") ) );
        
        }
        { //::osgUtil::Statistics::vertex
        
            typedef void ( ::osgUtil::Statistics::*vertex_function_type )( float,float,float,float ) ;
            typedef void ( Statistics_wrapper::*default_vertex_function_type )( float,float,float,float ) ;
            
            Statistics_exposer.def( 
                "vertex"
                , vertex_function_type(&::osgUtil::Statistics::vertex)
                , default_vertex_function_type(&Statistics_wrapper::default_vertex)
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2"), bp::arg("arg3") ) );
        
        }
        Statistics_exposer.def_readwrite( "_binNo", &osgUtil::Statistics::_binNo );
        Statistics_exposer.def_readwrite( "_currentPrimitiveFunctorMode", &osgUtil::Statistics::_currentPrimitiveFunctorMode );
        Statistics_exposer.def_readwrite( "_primitiveCount", &osgUtil::Statistics::_primitiveCount );
        Statistics_exposer.def_readwrite( "_vertexCount", &osgUtil::Statistics::_vertexCount );
        Statistics_exposer.def_readwrite( "depth", &osgUtil::Statistics::depth );
        Statistics_exposer.def_readwrite( "nbins", &osgUtil::Statistics::nbins );
        Statistics_exposer.def_readwrite( "nimpostor", &osgUtil::Statistics::nimpostor );
        Statistics_exposer.def_readwrite( "nlights", &osgUtil::Statistics::nlights );
        Statistics_exposer.def_readwrite( "numDrawables", &osgUtil::Statistics::numDrawables );
        Statistics_exposer.def_readwrite( "numFastDrawables", &osgUtil::Statistics::numFastDrawables );
        Statistics_exposer.def_readwrite( "numOrderedLeaves", &osgUtil::Statistics::numOrderedLeaves );
        Statistics_exposer.def_readwrite( "numStateGraphs", &osgUtil::Statistics::numStateGraphs );
        Statistics_exposer.def_readwrite( "nummat", &osgUtil::Statistics::nummat );
        Statistics_exposer.def_readwrite( "stattype", &osgUtil::Statistics::stattype );
    }

}
