// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgUtil.h"
#include "Optimizer.pypp.hpp"

namespace bp = boost::python;

struct Optimizer_wrapper : osgUtil::Optimizer, bp::wrapper< osgUtil::Optimizer > {

    Optimizer_wrapper(osgUtil::Optimizer const & arg )
    : osgUtil::Optimizer( arg )
      , bp::wrapper< osgUtil::Optimizer >(){
        // copy constructor
        
    }

    struct CheckGeometryVisitor_wrapper : osgUtil::Optimizer::CheckGeometryVisitor, bp::wrapper< osgUtil::Optimizer::CheckGeometryVisitor > {
    
        CheckGeometryVisitor_wrapper(::osgUtil::Optimizer * optimizer=0 )
        : osgUtil::Optimizer::CheckGeometryVisitor( boost::python::ptr(optimizer) )
          , bp::wrapper< osgUtil::Optimizer::CheckGeometryVisitor >(){
            // constructor
        
        }
    
        virtual void apply( ::osg::Geode & geode ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(geode) );
            else{
                this->osgUtil::Optimizer::CheckGeometryVisitor::apply( boost::ref(geode) );
            }
        }
        
        void default_apply( ::osg::Geode & geode ) {
            osgUtil::Optimizer::CheckGeometryVisitor::apply( boost::ref(geode) );
        }
    
        virtual void apply( ::osg::Node & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Node & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Billboard & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Billboard & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Group & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Group & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ProxyNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ProxyNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Projection & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Projection & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CoordinateSystemNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CoordinateSystemNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClipNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClipNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::TexGenNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::TexGenNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LightSource & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LightSource & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Transform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Transform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Camera & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Camera & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CameraView & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CameraView & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::MatrixTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::MatrixTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PositionAttitudeTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PositionAttitudeTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Switch & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Switch & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Sequence & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Sequence & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PagedLOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PagedLOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClearNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClearNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OccluderNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OccluderNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OcclusionQueryNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OcclusionQueryNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::NodeVisitor::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::NodeVisitor::className( );
        }
    
        virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
                return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
                return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
                return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    
        virtual ::osg::Vec3 getEyePoint(  ) const  {
            if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
                return func_getEyePoint(  );
            else{
                return this->osg::NodeVisitor::getEyePoint(  );
            }
        }
        
        ::osg::Vec3 default_getEyePoint(  ) const  {
            return osg::NodeVisitor::getEyePoint( );
        }
    
        virtual ::osg::Vec3 getViewPoint(  ) const  {
            if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
                return func_getViewPoint(  );
            else{
                return this->osg::NodeVisitor::getViewPoint(  );
            }
        }
        
        ::osg::Vec3 default_getViewPoint(  ) const  {
            return osg::NodeVisitor::getViewPoint( );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::NodeVisitor::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::NodeVisitor::libraryName( );
        }
    
        virtual void reset(  ) {
            if( bp::override func_reset = this->get_override( "reset" ) )
                func_reset(  );
            else{
                this->osg::NodeVisitor::reset(  );
            }
        }
        
        void default_reset(  ) {
            osg::NodeVisitor::reset( );
        }
    
    };

    struct CombineLODsVisitor_wrapper : osgUtil::Optimizer::CombineLODsVisitor, bp::wrapper< osgUtil::Optimizer::CombineLODsVisitor > {
    
        CombineLODsVisitor_wrapper(::osgUtil::Optimizer * optimizer=0 )
        : osgUtil::Optimizer::CombineLODsVisitor( boost::python::ptr(optimizer) )
          , bp::wrapper< osgUtil::Optimizer::CombineLODsVisitor >(){
            // constructor
        
        }
    
        virtual void apply( ::osg::LOD & lod ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(lod) );
            else{
                this->osgUtil::Optimizer::CombineLODsVisitor::apply( boost::ref(lod) );
            }
        }
        
        void default_apply( ::osg::LOD & lod ) {
            osgUtil::Optimizer::CombineLODsVisitor::apply( boost::ref(lod) );
        }
    
        virtual void apply( ::osg::Node & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Node & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Geode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Geode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Billboard & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Billboard & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Group & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Group & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ProxyNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ProxyNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Projection & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Projection & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CoordinateSystemNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CoordinateSystemNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClipNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClipNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::TexGenNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::TexGenNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LightSource & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LightSource & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Transform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Transform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Camera & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Camera & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CameraView & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CameraView & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::MatrixTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::MatrixTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PositionAttitudeTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PositionAttitudeTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Switch & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Switch & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Sequence & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Sequence & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PagedLOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PagedLOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClearNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClearNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OccluderNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OccluderNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OcclusionQueryNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OcclusionQueryNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::NodeVisitor::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::NodeVisitor::className( );
        }
    
        virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
                return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
                return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
                return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    
        virtual ::osg::Vec3 getEyePoint(  ) const  {
            if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
                return func_getEyePoint(  );
            else{
                return this->osg::NodeVisitor::getEyePoint(  );
            }
        }
        
        ::osg::Vec3 default_getEyePoint(  ) const  {
            return osg::NodeVisitor::getEyePoint( );
        }
    
        virtual ::osg::Vec3 getViewPoint(  ) const  {
            if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
                return func_getViewPoint(  );
            else{
                return this->osg::NodeVisitor::getViewPoint(  );
            }
        }
        
        ::osg::Vec3 default_getViewPoint(  ) const  {
            return osg::NodeVisitor::getViewPoint( );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::NodeVisitor::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::NodeVisitor::libraryName( );
        }
    
        virtual void reset(  ) {
            if( bp::override func_reset = this->get_override( "reset" ) )
                func_reset(  );
            else{
                this->osg::NodeVisitor::reset(  );
            }
        }
        
        void default_reset(  ) {
            osg::NodeVisitor::reset( );
        }
    
    };

    struct CombineStaticTransformsVisitor_wrapper : osgUtil::Optimizer::CombineStaticTransformsVisitor, bp::wrapper< osgUtil::Optimizer::CombineStaticTransformsVisitor > {
    
        CombineStaticTransformsVisitor_wrapper(::osgUtil::Optimizer * optimizer=0 )
        : osgUtil::Optimizer::CombineStaticTransformsVisitor( boost::python::ptr(optimizer) )
          , bp::wrapper< osgUtil::Optimizer::CombineStaticTransformsVisitor >(){
            // constructor
        
        }
    
        virtual void apply( ::osg::MatrixTransform & transform ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(transform) );
            else{
                this->osgUtil::Optimizer::CombineStaticTransformsVisitor::apply( boost::ref(transform) );
            }
        }
        
        void default_apply( ::osg::MatrixTransform & transform ) {
            osgUtil::Optimizer::CombineStaticTransformsVisitor::apply( boost::ref(transform) );
        }
    
        virtual void apply( ::osg::Node & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Node & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Geode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Geode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Billboard & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Billboard & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Group & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Group & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ProxyNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ProxyNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Projection & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Projection & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CoordinateSystemNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CoordinateSystemNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClipNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClipNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::TexGenNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::TexGenNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LightSource & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LightSource & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Transform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Transform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Camera & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Camera & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CameraView & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CameraView & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PositionAttitudeTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PositionAttitudeTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Switch & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Switch & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Sequence & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Sequence & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PagedLOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PagedLOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClearNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClearNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OccluderNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OccluderNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OcclusionQueryNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OcclusionQueryNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::NodeVisitor::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::NodeVisitor::className( );
        }
    
        virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
                return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
                return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
                return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    
        virtual ::osg::Vec3 getEyePoint(  ) const  {
            if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
                return func_getEyePoint(  );
            else{
                return this->osg::NodeVisitor::getEyePoint(  );
            }
        }
        
        ::osg::Vec3 default_getEyePoint(  ) const  {
            return osg::NodeVisitor::getEyePoint( );
        }
    
        virtual ::osg::Vec3 getViewPoint(  ) const  {
            if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
                return func_getViewPoint(  );
            else{
                return this->osg::NodeVisitor::getViewPoint(  );
            }
        }
        
        ::osg::Vec3 default_getViewPoint(  ) const  {
            return osg::NodeVisitor::getViewPoint( );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::NodeVisitor::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::NodeVisitor::libraryName( );
        }
    
        virtual void reset(  ) {
            if( bp::override func_reset = this->get_override( "reset" ) )
                func_reset(  );
            else{
                this->osg::NodeVisitor::reset(  );
            }
        }
        
        void default_reset(  ) {
            osg::NodeVisitor::reset( );
        }
    
    };

    struct CopySharedSubgraphsVisitor_wrapper : osgUtil::Optimizer::CopySharedSubgraphsVisitor, bp::wrapper< osgUtil::Optimizer::CopySharedSubgraphsVisitor > {
    
        CopySharedSubgraphsVisitor_wrapper(::osgUtil::Optimizer * optimizer=0 )
        : osgUtil::Optimizer::CopySharedSubgraphsVisitor( boost::python::ptr(optimizer) )
          , bp::wrapper< osgUtil::Optimizer::CopySharedSubgraphsVisitor >(){
            // constructor
        
        }
    
        virtual void apply( ::osg::Node & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osgUtil::Optimizer::CopySharedSubgraphsVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Node & node ) {
            osgUtil::Optimizer::CopySharedSubgraphsVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Geode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Geode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Billboard & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Billboard & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Group & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Group & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ProxyNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ProxyNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Projection & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Projection & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CoordinateSystemNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CoordinateSystemNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClipNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClipNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::TexGenNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::TexGenNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LightSource & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LightSource & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Transform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Transform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Camera & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Camera & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CameraView & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CameraView & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::MatrixTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::MatrixTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PositionAttitudeTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PositionAttitudeTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Switch & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Switch & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Sequence & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Sequence & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PagedLOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PagedLOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClearNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClearNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OccluderNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OccluderNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OcclusionQueryNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OcclusionQueryNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::NodeVisitor::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::NodeVisitor::className( );
        }
    
        virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
                return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
                return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
                return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    
        virtual ::osg::Vec3 getEyePoint(  ) const  {
            if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
                return func_getEyePoint(  );
            else{
                return this->osg::NodeVisitor::getEyePoint(  );
            }
        }
        
        ::osg::Vec3 default_getEyePoint(  ) const  {
            return osg::NodeVisitor::getEyePoint( );
        }
    
        virtual ::osg::Vec3 getViewPoint(  ) const  {
            if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
                return func_getViewPoint(  );
            else{
                return this->osg::NodeVisitor::getViewPoint(  );
            }
        }
        
        ::osg::Vec3 default_getViewPoint(  ) const  {
            return osg::NodeVisitor::getViewPoint( );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::NodeVisitor::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::NodeVisitor::libraryName( );
        }
    
        virtual void reset(  ) {
            if( bp::override func_reset = this->get_override( "reset" ) )
                func_reset(  );
            else{
                this->osg::NodeVisitor::reset(  );
            }
        }
        
        void default_reset(  ) {
            osg::NodeVisitor::reset( );
        }
    
    };

    struct FlattenBillboardVisitor_wrapper : osgUtil::Optimizer::FlattenBillboardVisitor, bp::wrapper< osgUtil::Optimizer::FlattenBillboardVisitor > {
    
        FlattenBillboardVisitor_wrapper(::osgUtil::Optimizer * optimizer=0 )
        : osgUtil::Optimizer::FlattenBillboardVisitor( boost::python::ptr(optimizer) )
          , bp::wrapper< osgUtil::Optimizer::FlattenBillboardVisitor >(){
            // constructor
        
        }
    
        virtual void apply( ::osg::Billboard & billboard ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(billboard) );
            else{
                this->osgUtil::Optimizer::FlattenBillboardVisitor::apply( boost::ref(billboard) );
            }
        }
        
        void default_apply( ::osg::Billboard & billboard ) {
            osgUtil::Optimizer::FlattenBillboardVisitor::apply( boost::ref(billboard) );
        }
    
        virtual void reset(  ) {
            if( bp::override func_reset = this->get_override( "reset" ) )
                func_reset(  );
            else{
                this->osgUtil::Optimizer::FlattenBillboardVisitor::reset(  );
            }
        }
        
        void default_reset(  ) {
            osgUtil::Optimizer::FlattenBillboardVisitor::reset( );
        }
    
        virtual void apply( ::osg::Node & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Node & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Geode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Geode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Group & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Group & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ProxyNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ProxyNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Projection & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Projection & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CoordinateSystemNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CoordinateSystemNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClipNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClipNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::TexGenNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::TexGenNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LightSource & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LightSource & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Transform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Transform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Camera & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Camera & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CameraView & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CameraView & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::MatrixTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::MatrixTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PositionAttitudeTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PositionAttitudeTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Switch & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Switch & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Sequence & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Sequence & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PagedLOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PagedLOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClearNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClearNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OccluderNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OccluderNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OcclusionQueryNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OcclusionQueryNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::NodeVisitor::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::NodeVisitor::className( );
        }
    
        virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
                return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
                return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
                return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    
        virtual ::osg::Vec3 getEyePoint(  ) const  {
            if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
                return func_getEyePoint(  );
            else{
                return this->osg::NodeVisitor::getEyePoint(  );
            }
        }
        
        ::osg::Vec3 default_getEyePoint(  ) const  {
            return osg::NodeVisitor::getEyePoint( );
        }
    
        virtual ::osg::Vec3 getViewPoint(  ) const  {
            if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
                return func_getViewPoint(  );
            else{
                return this->osg::NodeVisitor::getViewPoint(  );
            }
        }
        
        ::osg::Vec3 default_getViewPoint(  ) const  {
            return osg::NodeVisitor::getViewPoint( );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::NodeVisitor::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::NodeVisitor::libraryName( );
        }
    
    };

    struct FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_wrapper : osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor, bp::wrapper< osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor > {
    
        FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_wrapper(::osgUtil::Optimizer * optimizer=0 )
        : osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor( boost::python::ptr(optimizer) )
          , bp::wrapper< osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor >(){
            // constructor
        
        }
    
        virtual void apply( ::osg::Group & group ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(group) );
            else{
                this->osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply( boost::ref(group) );
            }
        }
        
        void default_apply( ::osg::Group & group ) {
            osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply( boost::ref(group) );
        }
    
        virtual void apply( ::osg::Transform & transform ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(transform) );
            else{
                this->osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply( boost::ref(transform) );
            }
        }
        
        void default_apply( ::osg::Transform & transform ) {
            osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply( boost::ref(transform) );
        }
    
        virtual void apply( ::osg::LOD & lod ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(lod) );
            else{
                this->osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply( boost::ref(lod) );
            }
        }
        
        void default_apply( ::osg::LOD & lod ) {
            osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply( boost::ref(lod) );
        }
    
        virtual void apply( ::osg::Geode & geode ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(geode) );
            else{
                this->osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply( boost::ref(geode) );
            }
        }
        
        void default_apply( ::osg::Geode & geode ) {
            osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply( boost::ref(geode) );
        }
    
        virtual void apply( ::osg::Billboard & billboard ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(billboard) );
            else{
                this->osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply( boost::ref(billboard) );
            }
        }
        
        void default_apply( ::osg::Billboard & billboard ) {
            osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply( boost::ref(billboard) );
        }
    
        virtual void reset(  ) {
            if( bp::override func_reset = this->get_override( "reset" ) )
                func_reset(  );
            else{
                this->osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::reset(  );
            }
        }
        
        void default_reset(  ) {
            osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::reset( );
        }
    
        virtual void apply( ::osg::Node & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Node & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ProxyNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ProxyNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Projection & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Projection & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CoordinateSystemNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CoordinateSystemNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClipNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClipNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::TexGenNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::TexGenNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LightSource & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LightSource & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Camera & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Camera & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CameraView & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CameraView & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::MatrixTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::MatrixTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PositionAttitudeTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PositionAttitudeTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Switch & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Switch & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Sequence & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Sequence & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PagedLOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PagedLOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClearNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClearNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OccluderNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OccluderNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OcclusionQueryNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OcclusionQueryNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::NodeVisitor::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::NodeVisitor::className( );
        }
    
        virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
                return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
                return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
                return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    
        virtual ::osg::Vec3 getEyePoint(  ) const  {
            if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
                return func_getEyePoint(  );
            else{
                return this->osg::NodeVisitor::getEyePoint(  );
            }
        }
        
        ::osg::Vec3 default_getEyePoint(  ) const  {
            return osg::NodeVisitor::getEyePoint( );
        }
    
        virtual ::osg::Vec3 getViewPoint(  ) const  {
            if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
                return func_getViewPoint(  );
            else{
                return this->osg::NodeVisitor::getViewPoint(  );
            }
        }
        
        ::osg::Vec3 default_getViewPoint(  ) const  {
            return osg::NodeVisitor::getViewPoint( );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::NodeVisitor::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::NodeVisitor::libraryName( );
        }
    
    };

    struct FlattenStaticTransformsVisitor_wrapper : osgUtil::Optimizer::FlattenStaticTransformsVisitor, bp::wrapper< osgUtil::Optimizer::FlattenStaticTransformsVisitor > {
    
        FlattenStaticTransformsVisitor_wrapper(::osgUtil::Optimizer * optimizer=0 )
        : osgUtil::Optimizer::FlattenStaticTransformsVisitor( boost::python::ptr(optimizer) )
          , bp::wrapper< osgUtil::Optimizer::FlattenStaticTransformsVisitor >(){
            // constructor
        
        }
    
        virtual void apply( ::osg::Node & geode ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(geode) );
            else{
                this->osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply( boost::ref(geode) );
            }
        }
        
        void default_apply( ::osg::Node & geode ) {
            osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply( boost::ref(geode) );
        }
    
        virtual void apply( ::osg::Geode & geode ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(geode) );
            else{
                this->osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply( boost::ref(geode) );
            }
        }
        
        void default_apply( ::osg::Geode & geode ) {
            osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply( boost::ref(geode) );
        }
    
        virtual void apply( ::osg::Billboard & geode ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(geode) );
            else{
                this->osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply( boost::ref(geode) );
            }
        }
        
        void default_apply( ::osg::Billboard & geode ) {
            osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply( boost::ref(geode) );
        }
    
        virtual void apply( ::osg::ProxyNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ProxyNode & node ) {
            osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PagedLOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PagedLOD & node ) {
            osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Transform & transform ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(transform) );
            else{
                this->osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply( boost::ref(transform) );
            }
        }
        
        void default_apply( ::osg::Transform & transform ) {
            osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply( boost::ref(transform) );
        }
    
        virtual void apply( ::osg::Group & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Group & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Projection & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Projection & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CoordinateSystemNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CoordinateSystemNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClipNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClipNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::TexGenNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::TexGenNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LightSource & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LightSource & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Camera & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Camera & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CameraView & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CameraView & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::MatrixTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::MatrixTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PositionAttitudeTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PositionAttitudeTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Switch & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Switch & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Sequence & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Sequence & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClearNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClearNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OccluderNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OccluderNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OcclusionQueryNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OcclusionQueryNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::NodeVisitor::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::NodeVisitor::className( );
        }
    
        virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
                return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
                return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
                return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    
        virtual ::osg::Vec3 getEyePoint(  ) const  {
            if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
                return func_getEyePoint(  );
            else{
                return this->osg::NodeVisitor::getEyePoint(  );
            }
        }
        
        ::osg::Vec3 default_getEyePoint(  ) const  {
            return osg::NodeVisitor::getEyePoint( );
        }
    
        virtual ::osg::Vec3 getViewPoint(  ) const  {
            if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
                return func_getViewPoint(  );
            else{
                return this->osg::NodeVisitor::getViewPoint(  );
            }
        }
        
        ::osg::Vec3 default_getViewPoint(  ) const  {
            return osg::NodeVisitor::getViewPoint( );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::NodeVisitor::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::NodeVisitor::libraryName( );
        }
    
        virtual void reset(  ) {
            if( bp::override func_reset = this->get_override( "reset" ) )
                func_reset(  );
            else{
                this->osg::NodeVisitor::reset(  );
            }
        }
        
        void default_reset(  ) {
            osg::NodeVisitor::reset( );
        }
    
    };

    struct IsOperationPermissibleForObjectCallback_wrapper : osgUtil::Optimizer::IsOperationPermissibleForObjectCallback, bp::wrapper< osgUtil::Optimizer::IsOperationPermissibleForObjectCallback > {
    
        IsOperationPermissibleForObjectCallback_wrapper()
        : osgUtil::Optimizer::IsOperationPermissibleForObjectCallback()
          , bp::wrapper< osgUtil::Optimizer::IsOperationPermissibleForObjectCallback >(){
            // null constructor
            
        }
    
        virtual bool isOperationPermissibleForObjectImplementation( ::osgUtil::Optimizer const * optimizer, ::osg::StateSet const * stateset, unsigned int option ) const  {
            if( bp::override func_isOperationPermissibleForObjectImplementation = this->get_override( "isOperationPermissibleForObjectImplementation" ) )
                return func_isOperationPermissibleForObjectImplementation( boost::python::ptr(optimizer), boost::python::ptr(stateset), option );
            else{
                return this->osgUtil::Optimizer::IsOperationPermissibleForObjectCallback::isOperationPermissibleForObjectImplementation( boost::python::ptr(optimizer), boost::python::ptr(stateset), option );
            }
        }
        
        bool default_isOperationPermissibleForObjectImplementation( ::osgUtil::Optimizer const * optimizer, ::osg::StateSet const * stateset, unsigned int option ) const  {
            return osgUtil::Optimizer::IsOperationPermissibleForObjectCallback::isOperationPermissibleForObjectImplementation( boost::python::ptr(optimizer), boost::python::ptr(stateset), option );
        }
    
        virtual bool isOperationPermissibleForObjectImplementation( ::osgUtil::Optimizer const * optimizer, ::osg::StateAttribute const * attribute, unsigned int option ) const  {
            if( bp::override func_isOperationPermissibleForObjectImplementation = this->get_override( "isOperationPermissibleForObjectImplementation" ) )
                return func_isOperationPermissibleForObjectImplementation( boost::python::ptr(optimizer), boost::python::ptr(attribute), option );
            else{
                return this->osgUtil::Optimizer::IsOperationPermissibleForObjectCallback::isOperationPermissibleForObjectImplementation( boost::python::ptr(optimizer), boost::python::ptr(attribute), option );
            }
        }
        
        bool default_isOperationPermissibleForObjectImplementation( ::osgUtil::Optimizer const * optimizer, ::osg::StateAttribute const * attribute, unsigned int option ) const  {
            return osgUtil::Optimizer::IsOperationPermissibleForObjectCallback::isOperationPermissibleForObjectImplementation( boost::python::ptr(optimizer), boost::python::ptr(attribute), option );
        }
    
        virtual bool isOperationPermissibleForObjectImplementation( ::osgUtil::Optimizer const * optimizer, ::osg::Drawable const * drawable, unsigned int option ) const  {
            if( bp::override func_isOperationPermissibleForObjectImplementation = this->get_override( "isOperationPermissibleForObjectImplementation" ) )
                return func_isOperationPermissibleForObjectImplementation( boost::python::ptr(optimizer), boost::python::ptr(drawable), option );
            else{
                return this->osgUtil::Optimizer::IsOperationPermissibleForObjectCallback::isOperationPermissibleForObjectImplementation( boost::python::ptr(optimizer), boost::python::ptr(drawable), option );
            }
        }
        
        bool default_isOperationPermissibleForObjectImplementation( ::osgUtil::Optimizer const * optimizer, ::osg::Drawable const * drawable, unsigned int option ) const  {
            return osgUtil::Optimizer::IsOperationPermissibleForObjectCallback::isOperationPermissibleForObjectImplementation( boost::python::ptr(optimizer), boost::python::ptr(drawable), option );
        }
    
        virtual bool isOperationPermissibleForObjectImplementation( ::osgUtil::Optimizer const * optimizer, ::osg::Node const * node, unsigned int option ) const  {
            if( bp::override func_isOperationPermissibleForObjectImplementation = this->get_override( "isOperationPermissibleForObjectImplementation" ) )
                return func_isOperationPermissibleForObjectImplementation( boost::python::ptr(optimizer), boost::python::ptr(node), option );
            else{
                return this->osgUtil::Optimizer::IsOperationPermissibleForObjectCallback::isOperationPermissibleForObjectImplementation( boost::python::ptr(optimizer), boost::python::ptr(node), option );
            }
        }
        
        bool default_isOperationPermissibleForObjectImplementation( ::osgUtil::Optimizer const * optimizer, ::osg::Node const * node, unsigned int option ) const  {
            return osgUtil::Optimizer::IsOperationPermissibleForObjectCallback::isOperationPermissibleForObjectImplementation( boost::python::ptr(optimizer), boost::python::ptr(node), option );
        }
    
    };

    struct MakeFastGeometryVisitor_wrapper : osgUtil::Optimizer::MakeFastGeometryVisitor, bp::wrapper< osgUtil::Optimizer::MakeFastGeometryVisitor > {
    
        MakeFastGeometryVisitor_wrapper(::osgUtil::Optimizer * optimizer=0 )
        : osgUtil::Optimizer::MakeFastGeometryVisitor( boost::python::ptr(optimizer) )
          , bp::wrapper< osgUtil::Optimizer::MakeFastGeometryVisitor >(){
            // constructor
        
        }
    
        virtual void apply( ::osg::Geode & geode ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(geode) );
            else{
                this->osgUtil::Optimizer::MakeFastGeometryVisitor::apply( boost::ref(geode) );
            }
        }
        
        void default_apply( ::osg::Geode & geode ) {
            osgUtil::Optimizer::MakeFastGeometryVisitor::apply( boost::ref(geode) );
        }
    
        virtual void apply( ::osg::Node & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Node & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Billboard & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Billboard & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Group & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Group & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ProxyNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ProxyNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Projection & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Projection & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CoordinateSystemNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CoordinateSystemNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClipNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClipNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::TexGenNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::TexGenNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LightSource & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LightSource & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Transform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Transform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Camera & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Camera & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CameraView & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CameraView & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::MatrixTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::MatrixTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PositionAttitudeTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PositionAttitudeTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Switch & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Switch & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Sequence & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Sequence & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PagedLOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PagedLOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClearNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClearNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OccluderNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OccluderNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OcclusionQueryNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OcclusionQueryNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::NodeVisitor::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::NodeVisitor::className( );
        }
    
        virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
                return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
                return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
                return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    
        virtual ::osg::Vec3 getEyePoint(  ) const  {
            if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
                return func_getEyePoint(  );
            else{
                return this->osg::NodeVisitor::getEyePoint(  );
            }
        }
        
        ::osg::Vec3 default_getEyePoint(  ) const  {
            return osg::NodeVisitor::getEyePoint( );
        }
    
        virtual ::osg::Vec3 getViewPoint(  ) const  {
            if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
                return func_getViewPoint(  );
            else{
                return this->osg::NodeVisitor::getViewPoint(  );
            }
        }
        
        ::osg::Vec3 default_getViewPoint(  ) const  {
            return osg::NodeVisitor::getViewPoint( );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::NodeVisitor::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::NodeVisitor::libraryName( );
        }
    
        virtual void reset(  ) {
            if( bp::override func_reset = this->get_override( "reset" ) )
                func_reset(  );
            else{
                this->osg::NodeVisitor::reset(  );
            }
        }
        
        void default_reset(  ) {
            osg::NodeVisitor::reset( );
        }
    
    };

    struct MergeGeodesVisitor_wrapper : osgUtil::Optimizer::MergeGeodesVisitor, bp::wrapper< osgUtil::Optimizer::MergeGeodesVisitor > {
    
        MergeGeodesVisitor_wrapper(::osgUtil::Optimizer * optimizer=0 )
        : osgUtil::Optimizer::MergeGeodesVisitor( boost::python::ptr(optimizer) )
          , bp::wrapper< osgUtil::Optimizer::MergeGeodesVisitor >(){
            // constructor
        
        }
    
        virtual void apply( ::osg::Group & group ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(group) );
            else{
                this->osgUtil::Optimizer::MergeGeodesVisitor::apply( boost::ref(group) );
            }
        }
        
        void default_apply( ::osg::Group & group ) {
            osgUtil::Optimizer::MergeGeodesVisitor::apply( boost::ref(group) );
        }
    
        virtual void apply( ::osg::Node & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Node & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Geode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Geode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Billboard & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Billboard & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ProxyNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ProxyNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Projection & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Projection & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CoordinateSystemNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CoordinateSystemNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClipNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClipNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::TexGenNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::TexGenNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LightSource & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LightSource & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Transform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Transform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Camera & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Camera & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CameraView & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CameraView & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::MatrixTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::MatrixTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PositionAttitudeTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PositionAttitudeTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Switch & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Switch & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Sequence & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Sequence & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PagedLOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PagedLOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClearNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClearNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OccluderNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OccluderNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OcclusionQueryNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OcclusionQueryNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::NodeVisitor::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::NodeVisitor::className( );
        }
    
        virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
                return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
                return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
                return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    
        virtual ::osg::Vec3 getEyePoint(  ) const  {
            if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
                return func_getEyePoint(  );
            else{
                return this->osg::NodeVisitor::getEyePoint(  );
            }
        }
        
        ::osg::Vec3 default_getEyePoint(  ) const  {
            return osg::NodeVisitor::getEyePoint( );
        }
    
        virtual ::osg::Vec3 getViewPoint(  ) const  {
            if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
                return func_getViewPoint(  );
            else{
                return this->osg::NodeVisitor::getViewPoint(  );
            }
        }
        
        ::osg::Vec3 default_getViewPoint(  ) const  {
            return osg::NodeVisitor::getViewPoint( );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::NodeVisitor::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::NodeVisitor::libraryName( );
        }
    
        virtual void reset(  ) {
            if( bp::override func_reset = this->get_override( "reset" ) )
                func_reset(  );
            else{
                this->osg::NodeVisitor::reset(  );
            }
        }
        
        void default_reset(  ) {
            osg::NodeVisitor::reset( );
        }
    
    };

    struct MergeGeometryVisitor_wrapper : osgUtil::Optimizer::MergeGeometryVisitor, bp::wrapper< osgUtil::Optimizer::MergeGeometryVisitor > {
    
        MergeGeometryVisitor_wrapper(::osgUtil::Optimizer * optimizer=0 )
        : osgUtil::Optimizer::MergeGeometryVisitor( boost::python::ptr(optimizer) )
          , bp::wrapper< osgUtil::Optimizer::MergeGeometryVisitor >(){
            // constructor
        
        }
    
        virtual void apply( ::osg::Geode & geode ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(geode) );
            else{
                this->osgUtil::Optimizer::MergeGeometryVisitor::apply( boost::ref(geode) );
            }
        }
        
        void default_apply( ::osg::Geode & geode ) {
            osgUtil::Optimizer::MergeGeometryVisitor::apply( boost::ref(geode) );
        }
    
        virtual void apply( ::osg::Billboard & arg0 ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(arg0) );
            else{
                this->osgUtil::Optimizer::MergeGeometryVisitor::apply( boost::ref(arg0) );
            }
        }
        
        void default_apply( ::osg::Billboard & arg0 ) {
            osgUtil::Optimizer::MergeGeometryVisitor::apply( boost::ref(arg0) );
        }
    
        virtual void apply( ::osg::Node & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Node & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Group & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Group & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ProxyNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ProxyNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Projection & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Projection & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CoordinateSystemNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CoordinateSystemNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClipNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClipNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::TexGenNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::TexGenNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LightSource & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LightSource & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Transform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Transform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Camera & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Camera & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CameraView & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CameraView & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::MatrixTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::MatrixTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PositionAttitudeTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PositionAttitudeTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Switch & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Switch & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Sequence & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Sequence & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PagedLOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PagedLOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClearNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClearNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OccluderNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OccluderNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OcclusionQueryNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OcclusionQueryNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::NodeVisitor::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::NodeVisitor::className( );
        }
    
        virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
                return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
                return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
                return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    
        virtual ::osg::Vec3 getEyePoint(  ) const  {
            if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
                return func_getEyePoint(  );
            else{
                return this->osg::NodeVisitor::getEyePoint(  );
            }
        }
        
        ::osg::Vec3 default_getEyePoint(  ) const  {
            return osg::NodeVisitor::getEyePoint( );
        }
    
        virtual ::osg::Vec3 getViewPoint(  ) const  {
            if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
                return func_getViewPoint(  );
            else{
                return this->osg::NodeVisitor::getViewPoint(  );
            }
        }
        
        ::osg::Vec3 default_getViewPoint(  ) const  {
            return osg::NodeVisitor::getViewPoint( );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::NodeVisitor::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::NodeVisitor::libraryName( );
        }
    
        virtual void reset(  ) {
            if( bp::override func_reset = this->get_override( "reset" ) )
                func_reset(  );
            else{
                this->osg::NodeVisitor::reset(  );
            }
        }
        
        void default_reset(  ) {
            osg::NodeVisitor::reset( );
        }
    
    };

    struct RemoveEmptyNodesVisitor_wrapper : osgUtil::Optimizer::RemoveEmptyNodesVisitor, bp::wrapper< osgUtil::Optimizer::RemoveEmptyNodesVisitor > {
    
        RemoveEmptyNodesVisitor_wrapper(::osgUtil::Optimizer * optimizer=0 )
        : osgUtil::Optimizer::RemoveEmptyNodesVisitor( boost::python::ptr(optimizer) )
          , bp::wrapper< osgUtil::Optimizer::RemoveEmptyNodesVisitor >(){
            // constructor
        
        }
    
        virtual void apply( ::osg::Geode & geode ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(geode) );
            else{
                this->osgUtil::Optimizer::RemoveEmptyNodesVisitor::apply( boost::ref(geode) );
            }
        }
        
        void default_apply( ::osg::Geode & geode ) {
            osgUtil::Optimizer::RemoveEmptyNodesVisitor::apply( boost::ref(geode) );
        }
    
        virtual void apply( ::osg::Group & group ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(group) );
            else{
                this->osgUtil::Optimizer::RemoveEmptyNodesVisitor::apply( boost::ref(group) );
            }
        }
        
        void default_apply( ::osg::Group & group ) {
            osgUtil::Optimizer::RemoveEmptyNodesVisitor::apply( boost::ref(group) );
        }
    
        virtual void apply( ::osg::Node & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Node & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Billboard & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Billboard & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ProxyNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ProxyNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Projection & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Projection & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CoordinateSystemNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CoordinateSystemNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClipNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClipNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::TexGenNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::TexGenNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LightSource & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LightSource & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Transform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Transform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Camera & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Camera & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CameraView & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CameraView & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::MatrixTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::MatrixTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PositionAttitudeTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PositionAttitudeTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Switch & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Switch & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Sequence & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Sequence & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PagedLOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PagedLOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClearNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClearNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OccluderNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OccluderNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OcclusionQueryNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OcclusionQueryNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::NodeVisitor::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::NodeVisitor::className( );
        }
    
        virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
                return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
                return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
                return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    
        virtual ::osg::Vec3 getEyePoint(  ) const  {
            if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
                return func_getEyePoint(  );
            else{
                return this->osg::NodeVisitor::getEyePoint(  );
            }
        }
        
        ::osg::Vec3 default_getEyePoint(  ) const  {
            return osg::NodeVisitor::getEyePoint( );
        }
    
        virtual ::osg::Vec3 getViewPoint(  ) const  {
            if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
                return func_getViewPoint(  );
            else{
                return this->osg::NodeVisitor::getViewPoint(  );
            }
        }
        
        ::osg::Vec3 default_getViewPoint(  ) const  {
            return osg::NodeVisitor::getViewPoint( );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::NodeVisitor::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::NodeVisitor::libraryName( );
        }
    
        virtual void reset(  ) {
            if( bp::override func_reset = this->get_override( "reset" ) )
                func_reset(  );
            else{
                this->osg::NodeVisitor::reset(  );
            }
        }
        
        void default_reset(  ) {
            osg::NodeVisitor::reset( );
        }
    
    };

    struct RemoveLoadedProxyNodesVisitor_wrapper : osgUtil::Optimizer::RemoveLoadedProxyNodesVisitor, bp::wrapper< osgUtil::Optimizer::RemoveLoadedProxyNodesVisitor > {
    
        RemoveLoadedProxyNodesVisitor_wrapper(::osgUtil::Optimizer * optimizer=0 )
        : osgUtil::Optimizer::RemoveLoadedProxyNodesVisitor( boost::python::ptr(optimizer) )
          , bp::wrapper< osgUtil::Optimizer::RemoveLoadedProxyNodesVisitor >(){
            // constructor
        
        }
    
        virtual void apply( ::osg::ProxyNode & group ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(group) );
            else{
                this->osgUtil::Optimizer::RemoveLoadedProxyNodesVisitor::apply( boost::ref(group) );
            }
        }
        
        void default_apply( ::osg::ProxyNode & group ) {
            osgUtil::Optimizer::RemoveLoadedProxyNodesVisitor::apply( boost::ref(group) );
        }
    
        virtual void apply( ::osg::Node & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Node & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Geode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Geode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Billboard & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Billboard & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Group & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Group & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Projection & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Projection & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CoordinateSystemNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CoordinateSystemNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClipNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClipNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::TexGenNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::TexGenNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LightSource & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LightSource & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Transform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Transform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Camera & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Camera & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CameraView & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CameraView & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::MatrixTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::MatrixTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PositionAttitudeTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PositionAttitudeTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Switch & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Switch & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Sequence & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Sequence & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PagedLOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PagedLOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClearNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClearNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OccluderNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OccluderNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OcclusionQueryNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OcclusionQueryNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::NodeVisitor::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::NodeVisitor::className( );
        }
    
        virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
                return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
                return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
                return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    
        virtual ::osg::Vec3 getEyePoint(  ) const  {
            if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
                return func_getEyePoint(  );
            else{
                return this->osg::NodeVisitor::getEyePoint(  );
            }
        }
        
        ::osg::Vec3 default_getEyePoint(  ) const  {
            return osg::NodeVisitor::getEyePoint( );
        }
    
        virtual ::osg::Vec3 getViewPoint(  ) const  {
            if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
                return func_getViewPoint(  );
            else{
                return this->osg::NodeVisitor::getViewPoint(  );
            }
        }
        
        ::osg::Vec3 default_getViewPoint(  ) const  {
            return osg::NodeVisitor::getViewPoint( );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::NodeVisitor::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::NodeVisitor::libraryName( );
        }
    
        virtual void reset(  ) {
            if( bp::override func_reset = this->get_override( "reset" ) )
                func_reset(  );
            else{
                this->osg::NodeVisitor::reset(  );
            }
        }
        
        void default_reset(  ) {
            osg::NodeVisitor::reset( );
        }
    
    };

    struct RemoveRedundantNodesVisitor_wrapper : osgUtil::Optimizer::RemoveRedundantNodesVisitor, bp::wrapper< osgUtil::Optimizer::RemoveRedundantNodesVisitor > {
    
        RemoveRedundantNodesVisitor_wrapper(::osgUtil::Optimizer * optimizer=0 )
        : osgUtil::Optimizer::RemoveRedundantNodesVisitor( boost::python::ptr(optimizer) )
          , bp::wrapper< osgUtil::Optimizer::RemoveRedundantNodesVisitor >(){
            // constructor
        
        }
    
        virtual void apply( ::osg::Group & group ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(group) );
            else{
                this->osgUtil::Optimizer::RemoveRedundantNodesVisitor::apply( boost::ref(group) );
            }
        }
        
        void default_apply( ::osg::Group & group ) {
            osgUtil::Optimizer::RemoveRedundantNodesVisitor::apply( boost::ref(group) );
        }
    
        virtual void apply( ::osg::Transform & transform ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(transform) );
            else{
                this->osgUtil::Optimizer::RemoveRedundantNodesVisitor::apply( boost::ref(transform) );
            }
        }
        
        void default_apply( ::osg::Transform & transform ) {
            osgUtil::Optimizer::RemoveRedundantNodesVisitor::apply( boost::ref(transform) );
        }
    
        virtual void apply( ::osg::Node & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Node & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Geode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Geode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Billboard & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Billboard & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ProxyNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ProxyNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Projection & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Projection & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CoordinateSystemNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CoordinateSystemNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClipNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClipNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::TexGenNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::TexGenNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LightSource & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LightSource & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Camera & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Camera & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CameraView & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CameraView & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::MatrixTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::MatrixTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PositionAttitudeTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PositionAttitudeTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Switch & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Switch & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Sequence & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Sequence & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PagedLOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PagedLOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClearNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClearNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OccluderNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OccluderNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OcclusionQueryNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OcclusionQueryNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::NodeVisitor::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::NodeVisitor::className( );
        }
    
        virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
                return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
                return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
                return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    
        virtual ::osg::Vec3 getEyePoint(  ) const  {
            if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
                return func_getEyePoint(  );
            else{
                return this->osg::NodeVisitor::getEyePoint(  );
            }
        }
        
        ::osg::Vec3 default_getEyePoint(  ) const  {
            return osg::NodeVisitor::getEyePoint( );
        }
    
        virtual ::osg::Vec3 getViewPoint(  ) const  {
            if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
                return func_getViewPoint(  );
            else{
                return this->osg::NodeVisitor::getViewPoint(  );
            }
        }
        
        ::osg::Vec3 default_getViewPoint(  ) const  {
            return osg::NodeVisitor::getViewPoint( );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::NodeVisitor::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::NodeVisitor::libraryName( );
        }
    
        virtual void reset(  ) {
            if( bp::override func_reset = this->get_override( "reset" ) )
                func_reset(  );
            else{
                this->osg::NodeVisitor::reset(  );
            }
        }
        
        void default_reset(  ) {
            osg::NodeVisitor::reset( );
        }
    
    };

    struct SpatializeGroupsVisitor_wrapper : osgUtil::Optimizer::SpatializeGroupsVisitor, bp::wrapper< osgUtil::Optimizer::SpatializeGroupsVisitor > {
    
        SpatializeGroupsVisitor_wrapper(::osgUtil::Optimizer * optimizer=0 )
        : osgUtil::Optimizer::SpatializeGroupsVisitor( boost::python::ptr(optimizer) )
          , bp::wrapper< osgUtil::Optimizer::SpatializeGroupsVisitor >(){
            // constructor
        
        }
    
        virtual void apply( ::osg::Group & group ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(group) );
            else{
                this->osgUtil::Optimizer::SpatializeGroupsVisitor::apply( boost::ref(group) );
            }
        }
        
        void default_apply( ::osg::Group & group ) {
            osgUtil::Optimizer::SpatializeGroupsVisitor::apply( boost::ref(group) );
        }
    
        virtual void apply( ::osg::Geode & geode ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(geode) );
            else{
                this->osgUtil::Optimizer::SpatializeGroupsVisitor::apply( boost::ref(geode) );
            }
        }
        
        void default_apply( ::osg::Geode & geode ) {
            osgUtil::Optimizer::SpatializeGroupsVisitor::apply( boost::ref(geode) );
        }
    
        virtual void apply( ::osg::Node & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Node & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Billboard & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Billboard & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ProxyNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ProxyNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Projection & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Projection & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CoordinateSystemNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CoordinateSystemNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClipNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClipNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::TexGenNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::TexGenNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LightSource & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LightSource & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Transform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Transform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Camera & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Camera & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CameraView & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CameraView & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::MatrixTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::MatrixTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PositionAttitudeTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PositionAttitudeTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Switch & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Switch & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Sequence & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Sequence & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PagedLOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PagedLOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClearNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClearNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OccluderNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OccluderNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OcclusionQueryNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OcclusionQueryNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::NodeVisitor::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::NodeVisitor::className( );
        }
    
        virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
                return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
                return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
                return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    
        virtual ::osg::Vec3 getEyePoint(  ) const  {
            if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
                return func_getEyePoint(  );
            else{
                return this->osg::NodeVisitor::getEyePoint(  );
            }
        }
        
        ::osg::Vec3 default_getEyePoint(  ) const  {
            return osg::NodeVisitor::getEyePoint( );
        }
    
        virtual ::osg::Vec3 getViewPoint(  ) const  {
            if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
                return func_getViewPoint(  );
            else{
                return this->osg::NodeVisitor::getViewPoint(  );
            }
        }
        
        ::osg::Vec3 default_getViewPoint(  ) const  {
            return osg::NodeVisitor::getViewPoint( );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::NodeVisitor::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::NodeVisitor::libraryName( );
        }
    
        virtual void reset(  ) {
            if( bp::override func_reset = this->get_override( "reset" ) )
                func_reset(  );
            else{
                this->osg::NodeVisitor::reset(  );
            }
        }
        
        void default_reset(  ) {
            osg::NodeVisitor::reset( );
        }
    
    };

    struct StateVisitor_wrapper : osgUtil::Optimizer::StateVisitor, bp::wrapper< osgUtil::Optimizer::StateVisitor > {
    
        StateVisitor_wrapper(bool combineDynamicState, bool combineStaticState, bool combineUnspecifiedState, ::osgUtil::Optimizer * optimizer=0 )
        : osgUtil::Optimizer::StateVisitor( combineDynamicState, combineStaticState, combineUnspecifiedState, boost::python::ptr(optimizer) )
          , bp::wrapper< osgUtil::Optimizer::StateVisitor >(){
            // constructor
        
        }
    
        virtual void apply( ::osg::Node & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osgUtil::Optimizer::StateVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Node & node ) {
            osgUtil::Optimizer::StateVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Geode & geode ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(geode) );
            else{
                this->osgUtil::Optimizer::StateVisitor::apply( boost::ref(geode) );
            }
        }
        
        void default_apply( ::osg::Geode & geode ) {
            osgUtil::Optimizer::StateVisitor::apply( boost::ref(geode) );
        }
    
        virtual void reset(  ) {
            if( bp::override func_reset = this->get_override( "reset" ) )
                func_reset(  );
            else{
                this->osgUtil::Optimizer::StateVisitor::reset(  );
            }
        }
        
        void default_reset(  ) {
            osgUtil::Optimizer::StateVisitor::reset( );
        }
    
        virtual void apply( ::osg::Billboard & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Billboard & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Group & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Group & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ProxyNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ProxyNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Projection & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Projection & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CoordinateSystemNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CoordinateSystemNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClipNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClipNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::TexGenNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::TexGenNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LightSource & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LightSource & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Transform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Transform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Camera & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Camera & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CameraView & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CameraView & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::MatrixTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::MatrixTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PositionAttitudeTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PositionAttitudeTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Switch & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Switch & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Sequence & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Sequence & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PagedLOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PagedLOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClearNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClearNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OccluderNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OccluderNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OcclusionQueryNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OcclusionQueryNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::NodeVisitor::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::NodeVisitor::className( );
        }
    
        virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
                return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
                return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
                return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    
        virtual ::osg::Vec3 getEyePoint(  ) const  {
            if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
                return func_getEyePoint(  );
            else{
                return this->osg::NodeVisitor::getEyePoint(  );
            }
        }
        
        ::osg::Vec3 default_getEyePoint(  ) const  {
            return osg::NodeVisitor::getEyePoint( );
        }
    
        virtual ::osg::Vec3 getViewPoint(  ) const  {
            if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
                return func_getViewPoint(  );
            else{
                return this->osg::NodeVisitor::getViewPoint(  );
            }
        }
        
        ::osg::Vec3 default_getViewPoint(  ) const  {
            return osg::NodeVisitor::getViewPoint( );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::NodeVisitor::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::NodeVisitor::libraryName( );
        }
    
    };

    struct StaticObjectDetectionVisitor_wrapper : osgUtil::Optimizer::StaticObjectDetectionVisitor, bp::wrapper< osgUtil::Optimizer::StaticObjectDetectionVisitor > {
    
        StaticObjectDetectionVisitor_wrapper(::osgUtil::Optimizer * optimizer=0 )
        : osgUtil::Optimizer::StaticObjectDetectionVisitor( boost::python::ptr(optimizer) )
          , bp::wrapper< osgUtil::Optimizer::StaticObjectDetectionVisitor >(){
            // constructor
        
        }
    
        virtual void apply( ::osg::Node & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osgUtil::Optimizer::StaticObjectDetectionVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Node & node ) {
            osgUtil::Optimizer::StaticObjectDetectionVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Geode & geode ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(geode) );
            else{
                this->osgUtil::Optimizer::StaticObjectDetectionVisitor::apply( boost::ref(geode) );
            }
        }
        
        void default_apply( ::osg::Geode & geode ) {
            osgUtil::Optimizer::StaticObjectDetectionVisitor::apply( boost::ref(geode) );
        }
    
        virtual void apply( ::osg::Billboard & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Billboard & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Group & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Group & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ProxyNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ProxyNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Projection & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Projection & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CoordinateSystemNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CoordinateSystemNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClipNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClipNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::TexGenNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::TexGenNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LightSource & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LightSource & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Transform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Transform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Camera & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Camera & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CameraView & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CameraView & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::MatrixTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::MatrixTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PositionAttitudeTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PositionAttitudeTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Switch & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Switch & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Sequence & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Sequence & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PagedLOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PagedLOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClearNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClearNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OccluderNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OccluderNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OcclusionQueryNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OcclusionQueryNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::NodeVisitor::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::NodeVisitor::className( );
        }
    
        virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
                return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
                return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
                return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    
        virtual ::osg::Vec3 getEyePoint(  ) const  {
            if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
                return func_getEyePoint(  );
            else{
                return this->osg::NodeVisitor::getEyePoint(  );
            }
        }
        
        ::osg::Vec3 default_getEyePoint(  ) const  {
            return osg::NodeVisitor::getEyePoint( );
        }
    
        virtual ::osg::Vec3 getViewPoint(  ) const  {
            if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
                return func_getViewPoint(  );
            else{
                return this->osg::NodeVisitor::getViewPoint(  );
            }
        }
        
        ::osg::Vec3 default_getViewPoint(  ) const  {
            return osg::NodeVisitor::getViewPoint( );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::NodeVisitor::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::NodeVisitor::libraryName( );
        }
    
        virtual void reset(  ) {
            if( bp::override func_reset = this->get_override( "reset" ) )
                func_reset(  );
            else{
                this->osg::NodeVisitor::reset(  );
            }
        }
        
        void default_reset(  ) {
            osg::NodeVisitor::reset( );
        }
    
    };

    struct TessellateVisitor_wrapper : osgUtil::Optimizer::TessellateVisitor, bp::wrapper< osgUtil::Optimizer::TessellateVisitor > {
    
        TessellateVisitor_wrapper(::osgUtil::Optimizer * optimizer=0 )
        : osgUtil::Optimizer::TessellateVisitor( boost::python::ptr(optimizer) )
          , bp::wrapper< osgUtil::Optimizer::TessellateVisitor >(){
            // constructor
        
        }
    
        virtual void apply( ::osg::Geode & geode ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(geode) );
            else{
                this->osgUtil::Optimizer::TessellateVisitor::apply( boost::ref(geode) );
            }
        }
        
        void default_apply( ::osg::Geode & geode ) {
            osgUtil::Optimizer::TessellateVisitor::apply( boost::ref(geode) );
        }
    
        virtual void apply( ::osg::Node & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Node & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Billboard & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Billboard & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Group & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Group & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ProxyNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ProxyNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Projection & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Projection & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CoordinateSystemNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CoordinateSystemNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClipNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClipNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::TexGenNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::TexGenNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LightSource & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LightSource & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Transform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Transform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Camera & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Camera & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CameraView & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CameraView & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::MatrixTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::MatrixTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PositionAttitudeTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PositionAttitudeTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Switch & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Switch & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Sequence & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Sequence & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PagedLOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PagedLOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClearNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClearNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OccluderNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OccluderNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OcclusionQueryNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OcclusionQueryNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::NodeVisitor::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::NodeVisitor::className( );
        }
    
        virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
                return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
                return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
                return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    
        virtual ::osg::Vec3 getEyePoint(  ) const  {
            if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
                return func_getEyePoint(  );
            else{
                return this->osg::NodeVisitor::getEyePoint(  );
            }
        }
        
        ::osg::Vec3 default_getEyePoint(  ) const  {
            return osg::NodeVisitor::getEyePoint( );
        }
    
        virtual ::osg::Vec3 getViewPoint(  ) const  {
            if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
                return func_getViewPoint(  );
            else{
                return this->osg::NodeVisitor::getViewPoint(  );
            }
        }
        
        ::osg::Vec3 default_getViewPoint(  ) const  {
            return osg::NodeVisitor::getViewPoint( );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::NodeVisitor::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::NodeVisitor::libraryName( );
        }
    
        virtual void reset(  ) {
            if( bp::override func_reset = this->get_override( "reset" ) )
                func_reset(  );
            else{
                this->osg::NodeVisitor::reset(  );
            }
        }
        
        void default_reset(  ) {
            osg::NodeVisitor::reset( );
        }
    
    };

    struct TextureAtlasVisitor_wrapper : osgUtil::Optimizer::TextureAtlasVisitor, bp::wrapper< osgUtil::Optimizer::TextureAtlasVisitor > {
    
        TextureAtlasVisitor_wrapper(::osgUtil::Optimizer * optimizer=0 )
        : osgUtil::Optimizer::TextureAtlasVisitor( boost::python::ptr(optimizer) )
          , bp::wrapper< osgUtil::Optimizer::TextureAtlasVisitor >(){
            // constructor
        
        }
    
        virtual void apply( ::osg::Node & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osgUtil::Optimizer::TextureAtlasVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Node & node ) {
            osgUtil::Optimizer::TextureAtlasVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Geode & geode ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(geode) );
            else{
                this->osgUtil::Optimizer::TextureAtlasVisitor::apply( boost::ref(geode) );
            }
        }
        
        void default_apply( ::osg::Geode & geode ) {
            osgUtil::Optimizer::TextureAtlasVisitor::apply( boost::ref(geode) );
        }
    
        virtual void reset(  ) {
            if( bp::override func_reset = this->get_override( "reset" ) )
                func_reset(  );
            else{
                this->osgUtil::Optimizer::TextureAtlasVisitor::reset(  );
            }
        }
        
        void default_reset(  ) {
            osgUtil::Optimizer::TextureAtlasVisitor::reset( );
        }
    
        virtual void apply( ::osg::Billboard & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Billboard & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Group & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Group & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ProxyNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ProxyNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Projection & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Projection & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CoordinateSystemNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CoordinateSystemNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClipNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClipNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::TexGenNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::TexGenNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LightSource & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LightSource & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Transform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Transform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Camera & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Camera & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CameraView & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CameraView & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::MatrixTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::MatrixTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PositionAttitudeTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PositionAttitudeTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Switch & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Switch & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Sequence & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Sequence & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PagedLOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PagedLOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClearNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClearNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OccluderNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OccluderNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OcclusionQueryNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OcclusionQueryNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::NodeVisitor::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::NodeVisitor::className( );
        }
    
        virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
                return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
                return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
                return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    
        virtual ::osg::Vec3 getEyePoint(  ) const  {
            if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
                return func_getEyePoint(  );
            else{
                return this->osg::NodeVisitor::getEyePoint(  );
            }
        }
        
        ::osg::Vec3 default_getEyePoint(  ) const  {
            return osg::NodeVisitor::getEyePoint( );
        }
    
        virtual ::osg::Vec3 getViewPoint(  ) const  {
            if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
                return func_getViewPoint(  );
            else{
                return this->osg::NodeVisitor::getViewPoint(  );
            }
        }
        
        ::osg::Vec3 default_getViewPoint(  ) const  {
            return osg::NodeVisitor::getViewPoint( );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::NodeVisitor::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::NodeVisitor::libraryName( );
        }
    
    };

    struct TextureVisitor_wrapper : osgUtil::Optimizer::TextureVisitor, bp::wrapper< osgUtil::Optimizer::TextureVisitor > {
    
        TextureVisitor_wrapper(bool changeAutoUnRef, bool valueAutoUnRef, bool changeClientImageStorage, bool valueClientImageStorage, bool changeAnisotropy, float valueAnisotropy, ::osgUtil::Optimizer * optimizer=0 )
        : osgUtil::Optimizer::TextureVisitor( changeAutoUnRef, valueAutoUnRef, changeClientImageStorage, valueClientImageStorage, changeAnisotropy, valueAnisotropy, boost::python::ptr(optimizer) )
          , bp::wrapper< osgUtil::Optimizer::TextureVisitor >(){
            // constructor
        
        }
    
        virtual void apply( ::osg::Geode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osgUtil::Optimizer::TextureVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Geode & node ) {
            osgUtil::Optimizer::TextureVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Node & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osgUtil::Optimizer::TextureVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Node & node ) {
            osgUtil::Optimizer::TextureVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Billboard & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Billboard & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Group & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Group & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ProxyNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ProxyNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Projection & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Projection & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CoordinateSystemNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CoordinateSystemNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClipNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClipNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::TexGenNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::TexGenNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LightSource & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LightSource & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Transform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Transform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Camera & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Camera & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::CameraView & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::CameraView & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::MatrixTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::MatrixTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PositionAttitudeTransform & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PositionAttitudeTransform & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Switch & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Switch & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::Sequence & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::Sequence & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::LOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::LOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::PagedLOD & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::PagedLOD & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::ClearNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::ClearNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OccluderNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OccluderNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual void apply( ::osg::OcclusionQueryNode & node ) {
            if( bp::override func_apply = this->get_override( "apply" ) )
                func_apply( boost::ref(node) );
            else{
                this->osg::NodeVisitor::apply( boost::ref(node) );
            }
        }
        
        void default_apply( ::osg::OcclusionQueryNode & node ) {
            osg::NodeVisitor::apply( boost::ref(node) );
        }
    
        virtual char const * className(  ) const  {
            if( bp::override func_className = this->get_override( "className" ) )
                return func_className(  );
            else{
                return this->osg::NodeVisitor::className(  );
            }
        }
        
        char const * default_className(  ) const  {
            return osg::NodeVisitor::className( );
        }
    
        virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
                return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
                return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    
        virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
                return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
            else{
                return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
            }
        }
        
        float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
            return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    
        virtual ::osg::Vec3 getEyePoint(  ) const  {
            if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
                return func_getEyePoint(  );
            else{
                return this->osg::NodeVisitor::getEyePoint(  );
            }
        }
        
        ::osg::Vec3 default_getEyePoint(  ) const  {
            return osg::NodeVisitor::getEyePoint( );
        }
    
        virtual ::osg::Vec3 getViewPoint(  ) const  {
            if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
                return func_getViewPoint(  );
            else{
                return this->osg::NodeVisitor::getViewPoint(  );
            }
        }
        
        ::osg::Vec3 default_getViewPoint(  ) const  {
            return osg::NodeVisitor::getViewPoint( );
        }
    
        virtual char const * libraryName(  ) const  {
            if( bp::override func_libraryName = this->get_override( "libraryName" ) )
                return func_libraryName(  );
            else{
                return this->osg::NodeVisitor::libraryName(  );
            }
        }
        
        char const * default_libraryName(  ) const  {
            return osg::NodeVisitor::libraryName( );
        }
    
        virtual void reset(  ) {
            if( bp::override func_reset = this->get_override( "reset" ) )
                func_reset(  );
            else{
                this->osg::NodeVisitor::reset(  );
            }
        }
        
        void default_reset(  ) {
            osg::NodeVisitor::reset( );
        }
    
    };

    Optimizer_wrapper( )
    : osgUtil::Optimizer( )
      , bp::wrapper< osgUtil::Optimizer >(){
        // null constructor
    
    }

    virtual void optimize( ::osg::Node * node, unsigned int options ) {
        if( bp::override func_optimize = this->get_override( "optimize" ) )
            func_optimize( boost::python::ptr(node), options );
        else{
            this->osgUtil::Optimizer::optimize( boost::python::ptr(node), options );
        }
    }
    
    void default_optimize( ::osg::Node * node, unsigned int options ) {
        osgUtil::Optimizer::optimize( boost::python::ptr(node), options );
    }

};

void register_Optimizer_class(){

    { //::osgUtil::Optimizer
        typedef bp::class_< Optimizer_wrapper > Optimizer_exposer_t;
        Optimizer_exposer_t Optimizer_exposer = Optimizer_exposer_t( "Optimizer", "\n Traverses scene graph to improve efficiency. See OptimizationOptions.\n For example of usage see examples/osgimpostor or osgviewer.\n", bp::init< >("\n Traverses scene graph to improve efficiency. See OptimizationOptions.\n For example of usage see examples/osgimpostor or osgviewer.\n") );
        bp::scope Optimizer_scope( Optimizer_exposer );
        bp::enum_< osgUtil::Optimizer::OptimizationOptions>("OptimizationOptions")
            .value("FLATTEN_STATIC_TRANSFORMS", osgUtil::Optimizer::FLATTEN_STATIC_TRANSFORMS)
            .value("REMOVE_REDUNDANT_NODES", osgUtil::Optimizer::REMOVE_REDUNDANT_NODES)
            .value("REMOVE_LOADED_PROXY_NODES", osgUtil::Optimizer::REMOVE_LOADED_PROXY_NODES)
            .value("COMBINE_ADJACENT_LODS", osgUtil::Optimizer::COMBINE_ADJACENT_LODS)
            .value("SHARE_DUPLICATE_STATE", osgUtil::Optimizer::SHARE_DUPLICATE_STATE)
            .value("MERGE_GEOMETRY", osgUtil::Optimizer::MERGE_GEOMETRY)
            .value("CHECK_GEOMETRY", osgUtil::Optimizer::CHECK_GEOMETRY)
            .value("MAKE_FAST_GEOMETRY", osgUtil::Optimizer::MAKE_FAST_GEOMETRY)
            .value("SPATIALIZE_GROUPS", osgUtil::Optimizer::SPATIALIZE_GROUPS)
            .value("COPY_SHARED_NODES", osgUtil::Optimizer::COPY_SHARED_NODES)
            .value("TRISTRIP_GEOMETRY", osgUtil::Optimizer::TRISTRIP_GEOMETRY)
            .value("TESSELLATE_GEOMETRY", osgUtil::Optimizer::TESSELLATE_GEOMETRY)
            .value("OPTIMIZE_TEXTURE_SETTINGS", osgUtil::Optimizer::OPTIMIZE_TEXTURE_SETTINGS)
            .value("MERGE_GEODES", osgUtil::Optimizer::MERGE_GEODES)
            .value("FLATTEN_BILLBOARDS", osgUtil::Optimizer::FLATTEN_BILLBOARDS)
            .value("TEXTURE_ATLAS_BUILDER", osgUtil::Optimizer::TEXTURE_ATLAS_BUILDER)
            .value("STATIC_OBJECT_DETECTION", osgUtil::Optimizer::STATIC_OBJECT_DETECTION)
            .value("FLATTEN_STATIC_TRANSFORMS_DUPLICATING_SHARED_SUBGRAPHS", osgUtil::Optimizer::FLATTEN_STATIC_TRANSFORMS_DUPLICATING_SHARED_SUBGRAPHS)
            .value("INDEX_MESH", osgUtil::Optimizer::INDEX_MESH)
            .value("VERTEX_POSTTRANSFORM", osgUtil::Optimizer::VERTEX_POSTTRANSFORM)
            .value("VERTEX_PRETRANSFORM", osgUtil::Optimizer::VERTEX_PRETRANSFORM)
            .value("DEFAULT_OPTIMIZATIONS", osgUtil::Optimizer::DEFAULT_OPTIMIZATIONS)
            .value("ALL_OPTIMIZATIONS", osgUtil::Optimizer::ALL_OPTIMIZATIONS)
            .export_values()
            ;
        { //::osgUtil::Optimizer::CheckGeometryVisitor
            typedef bp::class_< Optimizer_wrapper::CheckGeometryVisitor_wrapper, bp::bases< osgUtil::BaseOptimizerVisitor >, osg::ref_ptr< Optimizer_wrapper::CheckGeometryVisitor_wrapper >, boost::noncopyable > CheckGeometryVisitor_exposer_t;
            CheckGeometryVisitor_exposer_t CheckGeometryVisitor_exposer = CheckGeometryVisitor_exposer_t( "CheckGeometryVisitor", bp::init< bp::optional< osgUtil::Optimizer * > >(( bp::arg("optimizer")=bp::object() ), "\n default to traversing all children.\n") );
            bp::scope CheckGeometryVisitor_scope( CheckGeometryVisitor_exposer );
            bp::implicitly_convertible< osgUtil::Optimizer *, osgUtil::Optimizer::CheckGeometryVisitor >();
            { //::osgUtil::Optimizer::CheckGeometryVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::CheckGeometryVisitor::*apply_function_type )( ::osg::Geode & ) ;
                typedef void ( Optimizer_wrapper::CheckGeometryVisitor_wrapper::*default_apply_function_type )( ::osg::Geode & ) ;
                
                CheckGeometryVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::CheckGeometryVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::CheckGeometryVisitor_wrapper::default_apply)
                    , ( bp::arg("geode") ) );
            
            }
            { //::osgUtil::Optimizer::CheckGeometryVisitor::checkGeode
            
                typedef void ( ::osgUtil::Optimizer::CheckGeometryVisitor::*checkGeode_function_type )( ::osg::Geode & ) ;
                
                CheckGeometryVisitor_exposer.def( 
                    "checkGeode"
                    , checkGeode_function_type( &::osgUtil::Optimizer::CheckGeometryVisitor::checkGeode )
                    , ( bp::arg("geode") ) );
            
            }
        }
        { //::osgUtil::Optimizer::CombineLODsVisitor
            typedef bp::class_< Optimizer_wrapper::CombineLODsVisitor_wrapper, bp::bases< osgUtil::BaseOptimizerVisitor >, osg::ref_ptr< Optimizer_wrapper::CombineLODsVisitor_wrapper >, boost::noncopyable > CombineLODsVisitor_exposer_t;
            CombineLODsVisitor_exposer_t CombineLODsVisitor_exposer = CombineLODsVisitor_exposer_t( "CombineLODsVisitor", "\n Optimize the LOD groups, by combining adjacent LODs which have\n complementary ranges.\n", bp::init< bp::optional< osgUtil::Optimizer * > >(( bp::arg("optimizer")=bp::object() )) );
            bp::scope CombineLODsVisitor_scope( CombineLODsVisitor_exposer );
            bp::implicitly_convertible< osgUtil::Optimizer *, osgUtil::Optimizer::CombineLODsVisitor >();
            { //::osgUtil::Optimizer::CombineLODsVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::CombineLODsVisitor::*apply_function_type )( ::osg::LOD & ) ;
                typedef void ( Optimizer_wrapper::CombineLODsVisitor_wrapper::*default_apply_function_type )( ::osg::LOD & ) ;
                
                CombineLODsVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::CombineLODsVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::CombineLODsVisitor_wrapper::default_apply)
                    , ( bp::arg("lod") ) );
            
            }
            { //::osgUtil::Optimizer::CombineLODsVisitor::combineLODs
            
                typedef void ( ::osgUtil::Optimizer::CombineLODsVisitor::*combineLODs_function_type )(  ) ;
                
                CombineLODsVisitor_exposer.def( 
                    "combineLODs"
                    , combineLODs_function_type( &::osgUtil::Optimizer::CombineLODsVisitor::combineLODs ) );
            
            }
            CombineLODsVisitor_exposer.def_readwrite( "_groupList", &osgUtil::Optimizer::CombineLODsVisitor::_groupList );
        }
        { //::osgUtil::Optimizer::CombineStaticTransformsVisitor
            typedef bp::class_< Optimizer_wrapper::CombineStaticTransformsVisitor_wrapper, bp::bases< osgUtil::BaseOptimizerVisitor >, osg::ref_ptr< Optimizer_wrapper::CombineStaticTransformsVisitor_wrapper >, boost::noncopyable > CombineStaticTransformsVisitor_exposer_t;
            CombineStaticTransformsVisitor_exposer_t CombineStaticTransformsVisitor_exposer = CombineStaticTransformsVisitor_exposer_t( "CombineStaticTransformsVisitor", "\n Combine Static Transform nodes that sit above one another.\n", bp::init< bp::optional< osgUtil::Optimizer * > >(( bp::arg("optimizer")=bp::object() ), "\n Combine Static Transform nodes that sit above one another.\n") );
            bp::scope CombineStaticTransformsVisitor_scope( CombineStaticTransformsVisitor_exposer );
            bp::implicitly_convertible< osgUtil::Optimizer *, osgUtil::Optimizer::CombineStaticTransformsVisitor >();
            { //::osgUtil::Optimizer::CombineStaticTransformsVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::CombineStaticTransformsVisitor::*apply_function_type )( ::osg::MatrixTransform & ) ;
                typedef void ( Optimizer_wrapper::CombineStaticTransformsVisitor_wrapper::*default_apply_function_type )( ::osg::MatrixTransform & ) ;
                
                CombineStaticTransformsVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::CombineStaticTransformsVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::CombineStaticTransformsVisitor_wrapper::default_apply)
                    , ( bp::arg("transform") ) );
            
            }
            { //::osgUtil::Optimizer::CombineStaticTransformsVisitor::removeTransforms
            
                typedef bool ( ::osgUtil::Optimizer::CombineStaticTransformsVisitor::*removeTransforms_function_type )( ::osg::Node * ) ;
                
                CombineStaticTransformsVisitor_exposer.def( 
                    "removeTransforms"
                    , removeTransforms_function_type( &::osgUtil::Optimizer::CombineStaticTransformsVisitor::removeTransforms )
                    , ( bp::arg("nodeWeCannotRemove") ) );
            
            }
        }
        { //::osgUtil::Optimizer::CopySharedSubgraphsVisitor
            typedef bp::class_< Optimizer_wrapper::CopySharedSubgraphsVisitor_wrapper, bp::bases< osgUtil::BaseOptimizerVisitor >, osg::ref_ptr< Optimizer_wrapper::CopySharedSubgraphsVisitor_wrapper >, boost::noncopyable > CopySharedSubgraphsVisitor_exposer_t;
            CopySharedSubgraphsVisitor_exposer_t CopySharedSubgraphsVisitor_exposer = CopySharedSubgraphsVisitor_exposer_t( "CopySharedSubgraphsVisitor", "\n Copy any shared subgraphs, enabling flattening of static transforms.\n", bp::init< bp::optional< osgUtil::Optimizer * > >(( bp::arg("optimizer")=bp::object() ), "\n Copy any shared subgraphs, enabling flattening of static transforms.\n") );
            bp::scope CopySharedSubgraphsVisitor_scope( CopySharedSubgraphsVisitor_exposer );
            bp::implicitly_convertible< osgUtil::Optimizer *, osgUtil::Optimizer::CopySharedSubgraphsVisitor >();
            { //::osgUtil::Optimizer::CopySharedSubgraphsVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::CopySharedSubgraphsVisitor::*apply_function_type )( ::osg::Node & ) ;
                typedef void ( Optimizer_wrapper::CopySharedSubgraphsVisitor_wrapper::*default_apply_function_type )( ::osg::Node & ) ;
                
                CopySharedSubgraphsVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::CopySharedSubgraphsVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::CopySharedSubgraphsVisitor_wrapper::default_apply)
                    , ( bp::arg("node") ) );
            
            }
            { //::osgUtil::Optimizer::CopySharedSubgraphsVisitor::copySharedNodes
            
                typedef void ( ::osgUtil::Optimizer::CopySharedSubgraphsVisitor::*copySharedNodes_function_type )(  ) ;
                
                CopySharedSubgraphsVisitor_exposer.def( 
                    "copySharedNodes"
                    , copySharedNodes_function_type( &::osgUtil::Optimizer::CopySharedSubgraphsVisitor::copySharedNodes ) );
            
            }
            CopySharedSubgraphsVisitor_exposer.def_readwrite( "_sharedNodeList", &osgUtil::Optimizer::CopySharedSubgraphsVisitor::_sharedNodeList );
        }
        { //::osgUtil::Optimizer::FlattenBillboardVisitor
            typedef bp::class_< Optimizer_wrapper::FlattenBillboardVisitor_wrapper, bp::bases< osgUtil::BaseOptimizerVisitor >, osg::ref_ptr< Optimizer_wrapper::FlattenBillboardVisitor_wrapper >, boost::noncopyable > FlattenBillboardVisitor_exposer_t;
            FlattenBillboardVisitor_exposer_t FlattenBillboardVisitor_exposer = FlattenBillboardVisitor_exposer_t( "FlattenBillboardVisitor", "\n Flatten MatrixTransform/Billboard pairs.\n", bp::init< bp::optional< osgUtil::Optimizer * > >(( bp::arg("optimizer")=bp::object() ), "\n Flatten MatrixTransform/Billboard pairs.\n") );
            bp::scope FlattenBillboardVisitor_scope( FlattenBillboardVisitor_exposer );
            bp::implicitly_convertible< osgUtil::Optimizer *, osgUtil::Optimizer::FlattenBillboardVisitor >();
            { //::osgUtil::Optimizer::FlattenBillboardVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::FlattenBillboardVisitor::*apply_function_type )( ::osg::Billboard & ) ;
                typedef void ( Optimizer_wrapper::FlattenBillboardVisitor_wrapper::*default_apply_function_type )( ::osg::Billboard & ) ;
                
                FlattenBillboardVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::FlattenBillboardVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::FlattenBillboardVisitor_wrapper::default_apply)
                    , ( bp::arg("billboard") ) );
            
            }
            { //::osgUtil::Optimizer::FlattenBillboardVisitor::process
            
                typedef void ( ::osgUtil::Optimizer::FlattenBillboardVisitor::*process_function_type )(  ) ;
                
                FlattenBillboardVisitor_exposer.def( 
                    "process"
                    , process_function_type( &::osgUtil::Optimizer::FlattenBillboardVisitor::process ) );
            
            }
            { //::osgUtil::Optimizer::FlattenBillboardVisitor::reset
            
                typedef void ( ::osgUtil::Optimizer::FlattenBillboardVisitor::*reset_function_type )(  ) ;
                typedef void ( Optimizer_wrapper::FlattenBillboardVisitor_wrapper::*default_reset_function_type )(  ) ;
                
                FlattenBillboardVisitor_exposer.def( 
                    "reset"
                    , reset_function_type(&::osgUtil::Optimizer::FlattenBillboardVisitor::reset)
                    , default_reset_function_type(&Optimizer_wrapper::FlattenBillboardVisitor_wrapper::default_reset) );
            
            }
        }
        { //::osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor
            typedef bp::class_< Optimizer_wrapper::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_wrapper, bp::bases< osgUtil::BaseOptimizerVisitor >, osg::ref_ptr< Optimizer_wrapper::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_wrapper >, boost::noncopyable > FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_exposer_t;
            FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_exposer_t FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_exposer = FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_exposer_t( "FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor", "\n FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor is similar\n to FlattenStaticTransformsVisitor in that it is designed to remove static transforms\n from the scene graph, pushing down the transforms to the geometry leaves of the scene graph,\n but with the difference that any subgraphs that are shared between different transforms\n are duplicated and flattened individually.  This results in more static transforms\n being removed, but also means that more data is generated, and as a result may\n not always be the most appropriate flatten visitor to use.\n", bp::init< bp::optional< osgUtil::Optimizer * > >(( bp::arg("optimizer")=bp::object() ), "\n FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor is similar\n to FlattenStaticTransformsVisitor in that it is designed to remove static transforms\n from the scene graph, pushing down the transforms to the geometry leaves of the scene graph,\n but with the difference that any subgraphs that are shared between different transforms\n are duplicated and flattened individually.  This results in more static transforms\n being removed, but also means that more data is generated, and as a result may\n not always be the most appropriate flatten visitor to use.\n") );
            bp::scope FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_scope( FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_exposer );
            bp::implicitly_convertible< osgUtil::Optimizer *, osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor >();
            { //::osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::*apply_function_type )( ::osg::Group & ) ;
                typedef void ( Optimizer_wrapper::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_wrapper::*default_apply_function_type )( ::osg::Group & ) ;
                
                FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_wrapper::default_apply)
                    , ( bp::arg("group") ) );
            
            }
            { //::osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::*apply_function_type )( ::osg::Transform & ) ;
                typedef void ( Optimizer_wrapper::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_wrapper::*default_apply_function_type )( ::osg::Transform & ) ;
                
                FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_wrapper::default_apply)
                    , ( bp::arg("transform") ) );
            
            }
            { //::osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::*apply_function_type )( ::osg::LOD & ) ;
                typedef void ( Optimizer_wrapper::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_wrapper::*default_apply_function_type )( ::osg::LOD & ) ;
                
                FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_wrapper::default_apply)
                    , ( bp::arg("lod") ) );
            
            }
            { //::osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::*apply_function_type )( ::osg::Geode & ) ;
                typedef void ( Optimizer_wrapper::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_wrapper::*default_apply_function_type )( ::osg::Geode & ) ;
                
                FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_wrapper::default_apply)
                    , ( bp::arg("geode") ) );
            
            }
            { //::osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::*apply_function_type )( ::osg::Billboard & ) ;
                typedef void ( Optimizer_wrapper::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_wrapper::*default_apply_function_type )( ::osg::Billboard & ) ;
                
                FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_wrapper::default_apply)
                    , ( bp::arg("billboard") ) );
            
            }
            { //::osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::reset
            
                typedef void ( ::osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::*reset_function_type )(  ) ;
                typedef void ( Optimizer_wrapper::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_wrapper::*default_reset_function_type )(  ) ;
                
                FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_exposer.def( 
                    "reset"
                    , reset_function_type(&::osgUtil::Optimizer::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor::reset)
                    , default_reset_function_type(&Optimizer_wrapper::FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor_wrapper::default_reset) );
            
            }
        }
        { //::osgUtil::Optimizer::FlattenStaticTransformsVisitor
            typedef bp::class_< Optimizer_wrapper::FlattenStaticTransformsVisitor_wrapper, bp::bases< osgUtil::BaseOptimizerVisitor >, osg::ref_ptr< Optimizer_wrapper::FlattenStaticTransformsVisitor_wrapper >, boost::noncopyable > FlattenStaticTransformsVisitor_exposer_t;
            FlattenStaticTransformsVisitor_exposer_t FlattenStaticTransformsVisitor_exposer = FlattenStaticTransformsVisitor_exposer_t( "FlattenStaticTransformsVisitor", "\n Flatten Static Transform nodes by applying their transform to the\n geometry on the leaves of the scene graph, then removing the\n now redundant transforms.  Static transformed subgraphs that have multiple\n parental paths above them are not flattened, if you require this then\n the subgraphs have to be duplicated - for this use the\n FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor.\n", bp::init< bp::optional< osgUtil::Optimizer * > >(( bp::arg("optimizer")=bp::object() ), "\n Flatten Static Transform nodes by applying their transform to the\n geometry on the leaves of the scene graph, then removing the\n now redundant transforms.  Static transformed subgraphs that have multiple\n parental paths above them are not flattened, if you require this then\n the subgraphs have to be duplicated - for this use the\n FlattenStaticTransformsDuplicatingSharedSubgraphsVisitor.\n") );
            bp::scope FlattenStaticTransformsVisitor_scope( FlattenStaticTransformsVisitor_exposer );
            bp::implicitly_convertible< osgUtil::Optimizer *, osgUtil::Optimizer::FlattenStaticTransformsVisitor >();
            { //::osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::FlattenStaticTransformsVisitor::*apply_function_type )( ::osg::Node & ) ;
                typedef void ( Optimizer_wrapper::FlattenStaticTransformsVisitor_wrapper::*default_apply_function_type )( ::osg::Node & ) ;
                
                FlattenStaticTransformsVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::FlattenStaticTransformsVisitor_wrapper::default_apply)
                    , ( bp::arg("geode") ) );
            
            }
            { //::osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::FlattenStaticTransformsVisitor::*apply_function_type )( ::osg::Geode & ) ;
                typedef void ( Optimizer_wrapper::FlattenStaticTransformsVisitor_wrapper::*default_apply_function_type )( ::osg::Geode & ) ;
                
                FlattenStaticTransformsVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::FlattenStaticTransformsVisitor_wrapper::default_apply)
                    , ( bp::arg("geode") ) );
            
            }
            { //::osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::FlattenStaticTransformsVisitor::*apply_function_type )( ::osg::Billboard & ) ;
                typedef void ( Optimizer_wrapper::FlattenStaticTransformsVisitor_wrapper::*default_apply_function_type )( ::osg::Billboard & ) ;
                
                FlattenStaticTransformsVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::FlattenStaticTransformsVisitor_wrapper::default_apply)
                    , ( bp::arg("geode") ) );
            
            }
            { //::osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::FlattenStaticTransformsVisitor::*apply_function_type )( ::osg::ProxyNode & ) ;
                typedef void ( Optimizer_wrapper::FlattenStaticTransformsVisitor_wrapper::*default_apply_function_type )( ::osg::ProxyNode & ) ;
                
                FlattenStaticTransformsVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::FlattenStaticTransformsVisitor_wrapper::default_apply)
                    , ( bp::arg("node") ) );
            
            }
            { //::osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::FlattenStaticTransformsVisitor::*apply_function_type )( ::osg::PagedLOD & ) ;
                typedef void ( Optimizer_wrapper::FlattenStaticTransformsVisitor_wrapper::*default_apply_function_type )( ::osg::PagedLOD & ) ;
                
                FlattenStaticTransformsVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::FlattenStaticTransformsVisitor_wrapper::default_apply)
                    , ( bp::arg("node") ) );
            
            }
            { //::osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::FlattenStaticTransformsVisitor::*apply_function_type )( ::osg::Transform & ) ;
                typedef void ( Optimizer_wrapper::FlattenStaticTransformsVisitor_wrapper::*default_apply_function_type )( ::osg::Transform & ) ;
                
                FlattenStaticTransformsVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::FlattenStaticTransformsVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::FlattenStaticTransformsVisitor_wrapper::default_apply)
                    , ( bp::arg("transform") ) );
            
            }
            { //::osgUtil::Optimizer::FlattenStaticTransformsVisitor::removeTransforms
            
                typedef bool ( ::osgUtil::Optimizer::FlattenStaticTransformsVisitor::*removeTransforms_function_type )( ::osg::Node * ) ;
                
                FlattenStaticTransformsVisitor_exposer.def( 
                    "removeTransforms"
                    , removeTransforms_function_type( &::osgUtil::Optimizer::FlattenStaticTransformsVisitor::removeTransforms )
                    , ( bp::arg("nodeWeCannotRemove") ) );
            
            }
        }
        bp::class_< Optimizer_wrapper::IsOperationPermissibleForObjectCallback_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< Optimizer_wrapper::IsOperationPermissibleForObjectCallback_wrapper >, boost::noncopyable >( "IsOperationPermissibleForObjectCallback", "\n Callback for customizing what operations are permitted on objects in the scene graph.\n" )    
            .def( 
                "isOperationPermissibleForObjectImplementation"
                , (bool ( ::osgUtil::Optimizer::IsOperationPermissibleForObjectCallback::* )( ::osgUtil::Optimizer const *,::osg::StateSet const *,unsigned int ) const)(&::osgUtil::Optimizer::IsOperationPermissibleForObjectCallback::isOperationPermissibleForObjectImplementation)
                , (bool ( Optimizer_wrapper::IsOperationPermissibleForObjectCallback_wrapper::* )( ::osgUtil::Optimizer const *,::osg::StateSet const *,unsigned int ) const)(&Optimizer_wrapper::IsOperationPermissibleForObjectCallback_wrapper::default_isOperationPermissibleForObjectImplementation)
                , ( bp::arg("optimizer"), bp::arg("stateset"), bp::arg("option") ) )    
            .def( 
                "isOperationPermissibleForObjectImplementation"
                , (bool ( ::osgUtil::Optimizer::IsOperationPermissibleForObjectCallback::* )( ::osgUtil::Optimizer const *,::osg::StateAttribute const *,unsigned int ) const)(&::osgUtil::Optimizer::IsOperationPermissibleForObjectCallback::isOperationPermissibleForObjectImplementation)
                , (bool ( Optimizer_wrapper::IsOperationPermissibleForObjectCallback_wrapper::* )( ::osgUtil::Optimizer const *,::osg::StateAttribute const *,unsigned int ) const)(&Optimizer_wrapper::IsOperationPermissibleForObjectCallback_wrapper::default_isOperationPermissibleForObjectImplementation)
                , ( bp::arg("optimizer"), bp::arg("attribute"), bp::arg("option") ) )    
            .def( 
                "isOperationPermissibleForObjectImplementation"
                , (bool ( ::osgUtil::Optimizer::IsOperationPermissibleForObjectCallback::* )( ::osgUtil::Optimizer const *,::osg::Drawable const *,unsigned int ) const)(&::osgUtil::Optimizer::IsOperationPermissibleForObjectCallback::isOperationPermissibleForObjectImplementation)
                , (bool ( Optimizer_wrapper::IsOperationPermissibleForObjectCallback_wrapper::* )( ::osgUtil::Optimizer const *,::osg::Drawable const *,unsigned int ) const)(&Optimizer_wrapper::IsOperationPermissibleForObjectCallback_wrapper::default_isOperationPermissibleForObjectImplementation)
                , ( bp::arg("optimizer"), bp::arg("drawable"), bp::arg("option") ) )    
            .def( 
                "isOperationPermissibleForObjectImplementation"
                , (bool ( ::osgUtil::Optimizer::IsOperationPermissibleForObjectCallback::* )( ::osgUtil::Optimizer const *,::osg::Node const *,unsigned int ) const)(&::osgUtil::Optimizer::IsOperationPermissibleForObjectCallback::isOperationPermissibleForObjectImplementation)
                , (bool ( Optimizer_wrapper::IsOperationPermissibleForObjectCallback_wrapper::* )( ::osgUtil::Optimizer const *,::osg::Node const *,unsigned int ) const)(&Optimizer_wrapper::IsOperationPermissibleForObjectCallback_wrapper::default_isOperationPermissibleForObjectImplementation)
                , ( bp::arg("optimizer"), bp::arg("node"), bp::arg("option") ) );
        { //::osgUtil::Optimizer::MakeFastGeometryVisitor
            typedef bp::class_< Optimizer_wrapper::MakeFastGeometryVisitor_wrapper, bp::bases< osgUtil::BaseOptimizerVisitor >, osg::ref_ptr< Optimizer_wrapper::MakeFastGeometryVisitor_wrapper >, boost::noncopyable > MakeFastGeometryVisitor_exposer_t;
            MakeFastGeometryVisitor_exposer_t MakeFastGeometryVisitor_exposer = MakeFastGeometryVisitor_exposer_t( "MakeFastGeometryVisitor", bp::init< bp::optional< osgUtil::Optimizer * > >(( bp::arg("optimizer")=bp::object() ), "\n default to traversing all children.\n") );
            bp::scope MakeFastGeometryVisitor_scope( MakeFastGeometryVisitor_exposer );
            bp::implicitly_convertible< osgUtil::Optimizer *, osgUtil::Optimizer::MakeFastGeometryVisitor >();
            { //::osgUtil::Optimizer::MakeFastGeometryVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::MakeFastGeometryVisitor::*apply_function_type )( ::osg::Geode & ) ;
                typedef void ( Optimizer_wrapper::MakeFastGeometryVisitor_wrapper::*default_apply_function_type )( ::osg::Geode & ) ;
                
                MakeFastGeometryVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::MakeFastGeometryVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::MakeFastGeometryVisitor_wrapper::default_apply)
                    , ( bp::arg("geode") ) );
            
            }
            { //::osgUtil::Optimizer::MakeFastGeometryVisitor::checkGeode
            
                typedef void ( ::osgUtil::Optimizer::MakeFastGeometryVisitor::*checkGeode_function_type )( ::osg::Geode & ) ;
                
                MakeFastGeometryVisitor_exposer.def( 
                    "checkGeode"
                    , checkGeode_function_type( &::osgUtil::Optimizer::MakeFastGeometryVisitor::checkGeode )
                    , ( bp::arg("geode") ) );
            
            }
        }
        { //::osgUtil::Optimizer::MergeGeodesVisitor
            typedef bp::class_< Optimizer_wrapper::MergeGeodesVisitor_wrapper, bp::bases< osgUtil::BaseOptimizerVisitor >, osg::ref_ptr< Optimizer_wrapper::MergeGeodesVisitor_wrapper >, boost::noncopyable > MergeGeodesVisitor_exposer_t;
            MergeGeodesVisitor_exposer_t MergeGeodesVisitor_exposer = MergeGeodesVisitor_exposer_t( "MergeGeodesVisitor", "\n Combine geodes\n", bp::init< bp::optional< osgUtil::Optimizer * > >(( bp::arg("optimizer")=bp::object() ), "\n default to traversing all children.\n") );
            bp::scope MergeGeodesVisitor_scope( MergeGeodesVisitor_exposer );
            bp::implicitly_convertible< osgUtil::Optimizer *, osgUtil::Optimizer::MergeGeodesVisitor >();
            { //::osgUtil::Optimizer::MergeGeodesVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::MergeGeodesVisitor::*apply_function_type )( ::osg::Group & ) ;
                typedef void ( Optimizer_wrapper::MergeGeodesVisitor_wrapper::*default_apply_function_type )( ::osg::Group & ) ;
                
                MergeGeodesVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::MergeGeodesVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::MergeGeodesVisitor_wrapper::default_apply)
                    , ( bp::arg("group") ) );
            
            }
            { //::osgUtil::Optimizer::MergeGeodesVisitor::mergeGeodes
            
                typedef bool ( ::osgUtil::Optimizer::MergeGeodesVisitor::*mergeGeodes_function_type )( ::osg::Group & ) ;
                
                MergeGeodesVisitor_exposer.def( 
                    "mergeGeodes"
                    , mergeGeodes_function_type( &::osgUtil::Optimizer::MergeGeodesVisitor::mergeGeodes )
                    , ( bp::arg("group") ) );
            
            }
        }
        { //::osgUtil::Optimizer::MergeGeometryVisitor
            typedef bp::class_< Optimizer_wrapper::MergeGeometryVisitor_wrapper, bp::bases< osgUtil::BaseOptimizerVisitor >, osg::ref_ptr< Optimizer_wrapper::MergeGeometryVisitor_wrapper >, boost::noncopyable > MergeGeometryVisitor_exposer_t;
            MergeGeometryVisitor_exposer_t MergeGeometryVisitor_exposer = MergeGeometryVisitor_exposer_t( "MergeGeometryVisitor", bp::init< bp::optional< osgUtil::Optimizer * > >(( bp::arg("optimizer")=bp::object() ), "\n default to traversing all children.\n") );
            bp::scope MergeGeometryVisitor_scope( MergeGeometryVisitor_exposer );
            bp::implicitly_convertible< osgUtil::Optimizer *, osgUtil::Optimizer::MergeGeometryVisitor >();
            { //::osgUtil::Optimizer::MergeGeometryVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::MergeGeometryVisitor::*apply_function_type )( ::osg::Geode & ) ;
                typedef void ( Optimizer_wrapper::MergeGeometryVisitor_wrapper::*default_apply_function_type )( ::osg::Geode & ) ;
                
                MergeGeometryVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::MergeGeometryVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::MergeGeometryVisitor_wrapper::default_apply)
                    , ( bp::arg("geode") ) );
            
            }
            { //::osgUtil::Optimizer::MergeGeometryVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::MergeGeometryVisitor::*apply_function_type )( ::osg::Billboard & ) ;
                typedef void ( Optimizer_wrapper::MergeGeometryVisitor_wrapper::*default_apply_function_type )( ::osg::Billboard & ) ;
                
                MergeGeometryVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::MergeGeometryVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::MergeGeometryVisitor_wrapper::default_apply)
                    , ( bp::arg("arg0") ) );
            
            }
            { //::osgUtil::Optimizer::MergeGeometryVisitor::geometryContainsSharedArrays
            
                typedef bool ( *geometryContainsSharedArrays_function_type )( ::osg::Geometry & );
                
                MergeGeometryVisitor_exposer.def( 
                    "geometryContainsSharedArrays"
                    , geometryContainsSharedArrays_function_type( &::osgUtil::Optimizer::MergeGeometryVisitor::geometryContainsSharedArrays )
                    , ( bp::arg("geom") ) );
            
            }
            { //::osgUtil::Optimizer::MergeGeometryVisitor::getTargetMaximumNumberOfVertices
            
                typedef unsigned int ( ::osgUtil::Optimizer::MergeGeometryVisitor::*getTargetMaximumNumberOfVertices_function_type )(  ) const;
                
                MergeGeometryVisitor_exposer.def( 
                    "getTargetMaximumNumberOfVertices"
                    , getTargetMaximumNumberOfVertices_function_type( &::osgUtil::Optimizer::MergeGeometryVisitor::getTargetMaximumNumberOfVertices ) );
            
            }
            { //::osgUtil::Optimizer::MergeGeometryVisitor::mergeGeode
            
                typedef bool ( ::osgUtil::Optimizer::MergeGeometryVisitor::*mergeGeode_function_type )( ::osg::Geode & ) ;
                
                MergeGeometryVisitor_exposer.def( 
                    "mergeGeode"
                    , mergeGeode_function_type( &::osgUtil::Optimizer::MergeGeometryVisitor::mergeGeode )
                    , ( bp::arg("geode") ) );
            
            }
            { //::osgUtil::Optimizer::MergeGeometryVisitor::mergeGeometry
            
                typedef bool ( *mergeGeometry_function_type )( ::osg::Geometry &,::osg::Geometry & );
                
                MergeGeometryVisitor_exposer.def( 
                    "mergeGeometry"
                    , mergeGeometry_function_type( &::osgUtil::Optimizer::MergeGeometryVisitor::mergeGeometry )
                    , ( bp::arg("lhs"), bp::arg("rhs") ) );
            
            }
            { //::osgUtil::Optimizer::MergeGeometryVisitor::mergePrimitive
            
                typedef bool ( *mergePrimitive_function_type )( ::osg::DrawArrays &,::osg::DrawArrays & );
                
                MergeGeometryVisitor_exposer.def( 
                    "mergePrimitive"
                    , mergePrimitive_function_type( &::osgUtil::Optimizer::MergeGeometryVisitor::mergePrimitive )
                    , ( bp::arg("lhs"), bp::arg("rhs") ) );
            
            }
            { //::osgUtil::Optimizer::MergeGeometryVisitor::mergePrimitive
            
                typedef bool ( *mergePrimitive_function_type )( ::osg::DrawArrayLengths &,::osg::DrawArrayLengths & );
                
                MergeGeometryVisitor_exposer.def( 
                    "mergePrimitive"
                    , mergePrimitive_function_type( &::osgUtil::Optimizer::MergeGeometryVisitor::mergePrimitive )
                    , ( bp::arg("lhs"), bp::arg("rhs") ) );
            
            }
            { //::osgUtil::Optimizer::MergeGeometryVisitor::mergePrimitive
            
                typedef bool ( *mergePrimitive_function_type )( ::osg::DrawElementsUByte &,::osg::DrawElementsUByte & );
                
                MergeGeometryVisitor_exposer.def( 
                    "mergePrimitive"
                    , mergePrimitive_function_type( &::osgUtil::Optimizer::MergeGeometryVisitor::mergePrimitive )
                    , ( bp::arg("lhs"), bp::arg("rhs") ) );
            
            }
            { //::osgUtil::Optimizer::MergeGeometryVisitor::mergePrimitive
            
                typedef bool ( *mergePrimitive_function_type )( ::osg::DrawElementsUShort &,::osg::DrawElementsUShort & );
                
                MergeGeometryVisitor_exposer.def( 
                    "mergePrimitive"
                    , mergePrimitive_function_type( &::osgUtil::Optimizer::MergeGeometryVisitor::mergePrimitive )
                    , ( bp::arg("lhs"), bp::arg("rhs") ) );
            
            }
            { //::osgUtil::Optimizer::MergeGeometryVisitor::mergePrimitive
            
                typedef bool ( *mergePrimitive_function_type )( ::osg::DrawElementsUInt &,::osg::DrawElementsUInt & );
                
                MergeGeometryVisitor_exposer.def( 
                    "mergePrimitive"
                    , mergePrimitive_function_type( &::osgUtil::Optimizer::MergeGeometryVisitor::mergePrimitive )
                    , ( bp::arg("lhs"), bp::arg("rhs") ) );
            
            }
            { //::osgUtil::Optimizer::MergeGeometryVisitor::setTargetMaximumNumberOfVertices
            
                typedef void ( ::osgUtil::Optimizer::MergeGeometryVisitor::*setTargetMaximumNumberOfVertices_function_type )( unsigned int ) ;
                
                MergeGeometryVisitor_exposer.def( 
                    "setTargetMaximumNumberOfVertices"
                    , setTargetMaximumNumberOfVertices_function_type( &::osgUtil::Optimizer::MergeGeometryVisitor::setTargetMaximumNumberOfVertices )
                    , ( bp::arg("num") )
                    , " default to traversing all children." );
            
            }
            MergeGeometryVisitor_exposer.staticmethod( "geometryContainsSharedArrays" );
            MergeGeometryVisitor_exposer.staticmethod( "mergeGeometry" );
            MergeGeometryVisitor_exposer.staticmethod( "mergePrimitive" );
        }
        { //::osgUtil::Optimizer::RemoveEmptyNodesVisitor
            typedef bp::class_< Optimizer_wrapper::RemoveEmptyNodesVisitor_wrapper, bp::bases< osgUtil::BaseOptimizerVisitor >, osg::ref_ptr< Optimizer_wrapper::RemoveEmptyNodesVisitor_wrapper >, boost::noncopyable > RemoveEmptyNodesVisitor_exposer_t;
            RemoveEmptyNodesVisitor_exposer_t RemoveEmptyNodesVisitor_exposer = RemoveEmptyNodesVisitor_exposer_t( "RemoveEmptyNodesVisitor", "\n Remove rendundant nodes, such as groups with one single child.\n", bp::init< bp::optional< osgUtil::Optimizer * > >(( bp::arg("optimizer")=bp::object() )) );
            bp::scope RemoveEmptyNodesVisitor_scope( RemoveEmptyNodesVisitor_exposer );
            bp::implicitly_convertible< osgUtil::Optimizer *, osgUtil::Optimizer::RemoveEmptyNodesVisitor >();
            { //::osgUtil::Optimizer::RemoveEmptyNodesVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::RemoveEmptyNodesVisitor::*apply_function_type )( ::osg::Geode & ) ;
                typedef void ( Optimizer_wrapper::RemoveEmptyNodesVisitor_wrapper::*default_apply_function_type )( ::osg::Geode & ) ;
                
                RemoveEmptyNodesVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::RemoveEmptyNodesVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::RemoveEmptyNodesVisitor_wrapper::default_apply)
                    , ( bp::arg("geode") ) );
            
            }
            { //::osgUtil::Optimizer::RemoveEmptyNodesVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::RemoveEmptyNodesVisitor::*apply_function_type )( ::osg::Group & ) ;
                typedef void ( Optimizer_wrapper::RemoveEmptyNodesVisitor_wrapper::*default_apply_function_type )( ::osg::Group & ) ;
                
                RemoveEmptyNodesVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::RemoveEmptyNodesVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::RemoveEmptyNodesVisitor_wrapper::default_apply)
                    , ( bp::arg("group") ) );
            
            }
            { //::osgUtil::Optimizer::RemoveEmptyNodesVisitor::removeEmptyNodes
            
                typedef void ( ::osgUtil::Optimizer::RemoveEmptyNodesVisitor::*removeEmptyNodes_function_type )(  ) ;
                
                RemoveEmptyNodesVisitor_exposer.def( 
                    "removeEmptyNodes"
                    , removeEmptyNodes_function_type( &::osgUtil::Optimizer::RemoveEmptyNodesVisitor::removeEmptyNodes ) );
            
            }
            RemoveEmptyNodesVisitor_exposer.def_readwrite( "_redundantNodeList", &osgUtil::Optimizer::RemoveEmptyNodesVisitor::_redundantNodeList );
        }
        { //::osgUtil::Optimizer::RemoveLoadedProxyNodesVisitor
            typedef bp::class_< Optimizer_wrapper::RemoveLoadedProxyNodesVisitor_wrapper, bp::bases< osgUtil::BaseOptimizerVisitor >, osg::ref_ptr< Optimizer_wrapper::RemoveLoadedProxyNodesVisitor_wrapper >, boost::noncopyable > RemoveLoadedProxyNodesVisitor_exposer_t;
            RemoveLoadedProxyNodesVisitor_exposer_t RemoveLoadedProxyNodesVisitor_exposer = RemoveLoadedProxyNodesVisitor_exposer_t( "RemoveLoadedProxyNodesVisitor", "\n Remove loaded proxy nodes.\n", bp::init< bp::optional< osgUtil::Optimizer * > >(( bp::arg("optimizer")=bp::object() )) );
            bp::scope RemoveLoadedProxyNodesVisitor_scope( RemoveLoadedProxyNodesVisitor_exposer );
            bp::implicitly_convertible< osgUtil::Optimizer *, osgUtil::Optimizer::RemoveLoadedProxyNodesVisitor >();
            { //::osgUtil::Optimizer::RemoveLoadedProxyNodesVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::RemoveLoadedProxyNodesVisitor::*apply_function_type )( ::osg::ProxyNode & ) ;
                typedef void ( Optimizer_wrapper::RemoveLoadedProxyNodesVisitor_wrapper::*default_apply_function_type )( ::osg::ProxyNode & ) ;
                
                RemoveLoadedProxyNodesVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::RemoveLoadedProxyNodesVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::RemoveLoadedProxyNodesVisitor_wrapper::default_apply)
                    , ( bp::arg("group") ) );
            
            }
            { //::osgUtil::Optimizer::RemoveLoadedProxyNodesVisitor::removeRedundantNodes
            
                typedef void ( ::osgUtil::Optimizer::RemoveLoadedProxyNodesVisitor::*removeRedundantNodes_function_type )(  ) ;
                
                RemoveLoadedProxyNodesVisitor_exposer.def( 
                    "removeRedundantNodes"
                    , removeRedundantNodes_function_type( &::osgUtil::Optimizer::RemoveLoadedProxyNodesVisitor::removeRedundantNodes ) );
            
            }
            RemoveLoadedProxyNodesVisitor_exposer.def_readwrite( "_redundantNodeList", &osgUtil::Optimizer::RemoveLoadedProxyNodesVisitor::_redundantNodeList );
        }
        { //::osgUtil::Optimizer::RemoveRedundantNodesVisitor
            typedef bp::class_< Optimizer_wrapper::RemoveRedundantNodesVisitor_wrapper, bp::bases< osgUtil::BaseOptimizerVisitor >, osg::ref_ptr< Optimizer_wrapper::RemoveRedundantNodesVisitor_wrapper >, boost::noncopyable > RemoveRedundantNodesVisitor_exposer_t;
            RemoveRedundantNodesVisitor_exposer_t RemoveRedundantNodesVisitor_exposer = RemoveRedundantNodesVisitor_exposer_t( "RemoveRedundantNodesVisitor", "\n Remove redundant nodes, such as groups with one single child.\n", bp::init< bp::optional< osgUtil::Optimizer * > >(( bp::arg("optimizer")=bp::object() )) );
            bp::scope RemoveRedundantNodesVisitor_scope( RemoveRedundantNodesVisitor_exposer );
            bp::implicitly_convertible< osgUtil::Optimizer *, osgUtil::Optimizer::RemoveRedundantNodesVisitor >();
            { //::osgUtil::Optimizer::RemoveRedundantNodesVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::RemoveRedundantNodesVisitor::*apply_function_type )( ::osg::Group & ) ;
                typedef void ( Optimizer_wrapper::RemoveRedundantNodesVisitor_wrapper::*default_apply_function_type )( ::osg::Group & ) ;
                
                RemoveRedundantNodesVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::RemoveRedundantNodesVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::RemoveRedundantNodesVisitor_wrapper::default_apply)
                    , ( bp::arg("group") ) );
            
            }
            { //::osgUtil::Optimizer::RemoveRedundantNodesVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::RemoveRedundantNodesVisitor::*apply_function_type )( ::osg::Transform & ) ;
                typedef void ( Optimizer_wrapper::RemoveRedundantNodesVisitor_wrapper::*default_apply_function_type )( ::osg::Transform & ) ;
                
                RemoveRedundantNodesVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::RemoveRedundantNodesVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::RemoveRedundantNodesVisitor_wrapper::default_apply)
                    , ( bp::arg("transform") ) );
            
            }
            { //::osgUtil::Optimizer::RemoveRedundantNodesVisitor::isOperationPermissible
            
                typedef bool ( ::osgUtil::Optimizer::RemoveRedundantNodesVisitor::*isOperationPermissible_function_type )( ::osg::Node & ) ;
                
                RemoveRedundantNodesVisitor_exposer.def( 
                    "isOperationPermissible"
                    , isOperationPermissible_function_type( &::osgUtil::Optimizer::RemoveRedundantNodesVisitor::isOperationPermissible )
                    , ( bp::arg("node") ) );
            
            }
            { //::osgUtil::Optimizer::RemoveRedundantNodesVisitor::removeRedundantNodes
            
                typedef void ( ::osgUtil::Optimizer::RemoveRedundantNodesVisitor::*removeRedundantNodes_function_type )(  ) ;
                
                RemoveRedundantNodesVisitor_exposer.def( 
                    "removeRedundantNodes"
                    , removeRedundantNodes_function_type( &::osgUtil::Optimizer::RemoveRedundantNodesVisitor::removeRedundantNodes ) );
            
            }
            RemoveRedundantNodesVisitor_exposer.def_readwrite( "_redundantNodeList", &osgUtil::Optimizer::RemoveRedundantNodesVisitor::_redundantNodeList );
        }
        { //::osgUtil::Optimizer::SpatializeGroupsVisitor
            typedef bp::class_< Optimizer_wrapper::SpatializeGroupsVisitor_wrapper, bp::bases< osgUtil::BaseOptimizerVisitor >, osg::ref_ptr< Optimizer_wrapper::SpatializeGroupsVisitor_wrapper >, boost::noncopyable > SpatializeGroupsVisitor_exposer_t;
            SpatializeGroupsVisitor_exposer_t SpatializeGroupsVisitor_exposer = SpatializeGroupsVisitor_exposer_t( "SpatializeGroupsVisitor", "\n Spatialize scene into a balanced quad/oct tree.\n", bp::init< bp::optional< osgUtil::Optimizer * > >(( bp::arg("optimizer")=bp::object() ), "\n Spatialize scene into a balanced quad/oct tree.\n") );
            bp::scope SpatializeGroupsVisitor_scope( SpatializeGroupsVisitor_exposer );
            bp::implicitly_convertible< osgUtil::Optimizer *, osgUtil::Optimizer::SpatializeGroupsVisitor >();
            { //::osgUtil::Optimizer::SpatializeGroupsVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::SpatializeGroupsVisitor::*apply_function_type )( ::osg::Group & ) ;
                typedef void ( Optimizer_wrapper::SpatializeGroupsVisitor_wrapper::*default_apply_function_type )( ::osg::Group & ) ;
                
                SpatializeGroupsVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::SpatializeGroupsVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::SpatializeGroupsVisitor_wrapper::default_apply)
                    , ( bp::arg("group") ) );
            
            }
            { //::osgUtil::Optimizer::SpatializeGroupsVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::SpatializeGroupsVisitor::*apply_function_type )( ::osg::Geode & ) ;
                typedef void ( Optimizer_wrapper::SpatializeGroupsVisitor_wrapper::*default_apply_function_type )( ::osg::Geode & ) ;
                
                SpatializeGroupsVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::SpatializeGroupsVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::SpatializeGroupsVisitor_wrapper::default_apply)
                    , ( bp::arg("geode") ) );
            
            }
            { //::osgUtil::Optimizer::SpatializeGroupsVisitor::divide
            
                typedef bool ( ::osgUtil::Optimizer::SpatializeGroupsVisitor::*divide_function_type )( unsigned int ) ;
                
                SpatializeGroupsVisitor_exposer.def( 
                    "divide"
                    , divide_function_type( &::osgUtil::Optimizer::SpatializeGroupsVisitor::divide )
                    , ( bp::arg("maxNumTreesPerCell")=(unsigned int)(8) ) );
            
            }
            { //::osgUtil::Optimizer::SpatializeGroupsVisitor::divide
            
                typedef bool ( ::osgUtil::Optimizer::SpatializeGroupsVisitor::*divide_function_type )( ::osg::Group *,unsigned int ) ;
                
                SpatializeGroupsVisitor_exposer.def( 
                    "divide"
                    , divide_function_type( &::osgUtil::Optimizer::SpatializeGroupsVisitor::divide )
                    , ( bp::arg("group"), bp::arg("maxNumTreesPerCell") ) );
            
            }
            { //::osgUtil::Optimizer::SpatializeGroupsVisitor::divide
            
                typedef bool ( ::osgUtil::Optimizer::SpatializeGroupsVisitor::*divide_function_type )( ::osg::Geode *,unsigned int ) ;
                
                SpatializeGroupsVisitor_exposer.def( 
                    "divide"
                    , divide_function_type( &::osgUtil::Optimizer::SpatializeGroupsVisitor::divide )
                    , ( bp::arg("geode"), bp::arg("maxNumTreesPerCell") ) );
            
            }
            SpatializeGroupsVisitor_exposer.def_readwrite( "_geodesToDivideList", &osgUtil::Optimizer::SpatializeGroupsVisitor::_geodesToDivideList );
            SpatializeGroupsVisitor_exposer.def_readwrite( "_groupsToDivideList", &osgUtil::Optimizer::SpatializeGroupsVisitor::_groupsToDivideList );
        }
        bp::class_< Optimizer_wrapper::StateVisitor_wrapper, bp::bases< osgUtil::BaseOptimizerVisitor >, osg::ref_ptr< Optimizer_wrapper::StateVisitor_wrapper >, boost::noncopyable >( "StateVisitor", "\n Optimize State in the scene graph by removing duplicate state,\n replacing it with shared instances, both for StateAttributes,\n and whole StateSets.\n", bp::init< bool, bool, bool, bp::optional< osgUtil::Optimizer * > >(( bp::arg("combineDynamicState"), bp::arg("combineStaticState"), bp::arg("combineUnspecifiedState"), bp::arg("optimizer")=bp::object() ), "\n default to traversing all children.\n") )    
            .def( 
                "apply"
                , (void ( ::osgUtil::Optimizer::StateVisitor::* )( ::osg::Node & ) )(&::osgUtil::Optimizer::StateVisitor::apply)
                , (void ( Optimizer_wrapper::StateVisitor_wrapper::* )( ::osg::Node & ) )(&Optimizer_wrapper::StateVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) )    
            .def( 
                "apply"
                , (void ( ::osgUtil::Optimizer::StateVisitor::* )( ::osg::Geode & ) )(&::osgUtil::Optimizer::StateVisitor::apply)
                , (void ( Optimizer_wrapper::StateVisitor_wrapper::* )( ::osg::Geode & ) )(&Optimizer_wrapper::StateVisitor_wrapper::default_apply)
                , ( bp::arg("geode") ) )    
            .def( 
                "optimize"
                , (void ( ::osgUtil::Optimizer::StateVisitor::* )(  ) )( &::osgUtil::Optimizer::StateVisitor::optimize ) )    
            .def( 
                "reset"
                , (void ( ::osgUtil::Optimizer::StateVisitor::* )(  ) )(&::osgUtil::Optimizer::StateVisitor::reset)
                , (void ( Optimizer_wrapper::StateVisitor_wrapper::* )(  ) )(&Optimizer_wrapper::StateVisitor_wrapper::default_reset) );
        { //::osgUtil::Optimizer::StaticObjectDetectionVisitor
            typedef bp::class_< Optimizer_wrapper::StaticObjectDetectionVisitor_wrapper, bp::bases< osgUtil::BaseOptimizerVisitor >, osg::ref_ptr< Optimizer_wrapper::StaticObjectDetectionVisitor_wrapper >, boost::noncopyable > StaticObjectDetectionVisitor_exposer_t;
            StaticObjectDetectionVisitor_exposer_t StaticObjectDetectionVisitor_exposer = StaticObjectDetectionVisitor_exposer_t( "StaticObjectDetectionVisitor", "\n Optimize the setting of StateSet and Geometry objects in scene so that they have a STATIC DataVariance\n when they dont have any callbacks associated with them.\n", bp::init< bp::optional< osgUtil::Optimizer * > >(( bp::arg("optimizer")=bp::object() ), "\n default to traversing all children.\n") );
            bp::scope StaticObjectDetectionVisitor_scope( StaticObjectDetectionVisitor_exposer );
            bp::implicitly_convertible< osgUtil::Optimizer *, osgUtil::Optimizer::StaticObjectDetectionVisitor >();
            { //::osgUtil::Optimizer::StaticObjectDetectionVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::StaticObjectDetectionVisitor::*apply_function_type )( ::osg::Node & ) ;
                typedef void ( Optimizer_wrapper::StaticObjectDetectionVisitor_wrapper::*default_apply_function_type )( ::osg::Node & ) ;
                
                StaticObjectDetectionVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::StaticObjectDetectionVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::StaticObjectDetectionVisitor_wrapper::default_apply)
                    , ( bp::arg("node") ) );
            
            }
            { //::osgUtil::Optimizer::StaticObjectDetectionVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::StaticObjectDetectionVisitor::*apply_function_type )( ::osg::Geode & ) ;
                typedef void ( Optimizer_wrapper::StaticObjectDetectionVisitor_wrapper::*default_apply_function_type )( ::osg::Geode & ) ;
                
                StaticObjectDetectionVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::StaticObjectDetectionVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::StaticObjectDetectionVisitor_wrapper::default_apply)
                    , ( bp::arg("geode") ) );
            
            }
        }
        { //::osgUtil::Optimizer::TessellateVisitor
            typedef bp::class_< Optimizer_wrapper::TessellateVisitor_wrapper, bp::bases< osgUtil::BaseOptimizerVisitor >, osg::ref_ptr< Optimizer_wrapper::TessellateVisitor_wrapper >, boost::noncopyable > TessellateVisitor_exposer_t;
            TessellateVisitor_exposer_t TessellateVisitor_exposer = TessellateVisitor_exposer_t( "TessellateVisitor", "\n Tessellate all geodes, to remove POLYGONS.\n", bp::init< bp::optional< osgUtil::Optimizer * > >(( bp::arg("optimizer")=bp::object() )) );
            bp::scope TessellateVisitor_scope( TessellateVisitor_exposer );
            bp::implicitly_convertible< osgUtil::Optimizer *, osgUtil::Optimizer::TessellateVisitor >();
            { //::osgUtil::Optimizer::TessellateVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::TessellateVisitor::*apply_function_type )( ::osg::Geode & ) ;
                typedef void ( Optimizer_wrapper::TessellateVisitor_wrapper::*default_apply_function_type )( ::osg::Geode & ) ;
                
                TessellateVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::TessellateVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::TessellateVisitor_wrapper::default_apply)
                    , ( bp::arg("geode") ) );
            
            }
            TessellateVisitor_exposer.def_readwrite( "_groupList", &osgUtil::Optimizer::TessellateVisitor::_groupList );
        }
        bp::class_< osgUtil::Optimizer::TextureAtlasBuilder >( "TextureAtlasBuilder", " Texture Atlas Builder creates a set of textures/images which each contain multiple images.\n Texture Atlas are used to make it possible to use much wider batching of data.", bp::init< >(" Texture Atlas Builder creates a set of textures/images which each contain multiple images.\n Texture Atlas are used to make it possible to use much wider batching of data.") )    
            .def( 
                "addSource"
                , (void ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )( ::osg::Image const * ) )( &::osgUtil::Optimizer::TextureAtlasBuilder::addSource )
                , ( bp::arg("image") ) )    
            .def( 
                "addSource"
                , (void ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )( ::osg::Texture2D const * ) )( &::osgUtil::Optimizer::TextureAtlasBuilder::addSource )
                , ( bp::arg("texture") ) )    
            .def( 
                "buildAtlas"
                , (void ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )(  ) )( &::osgUtil::Optimizer::TextureAtlasBuilder::buildAtlas ) )    
            .def( 
                "getImageAtlas"
                , (::osg::Image * ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )( unsigned int ) )( &::osgUtil::Optimizer::TextureAtlasBuilder::getImageAtlas )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() )    
            .def( 
                "getImageAtlas"
                , (::osg::Image * ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )( ::osg::Image const * ) )( &::osgUtil::Optimizer::TextureAtlasBuilder::getImageAtlas )
                , ( bp::arg("image") )
                , bp::return_internal_reference< >() )    
            .def( 
                "getImageAtlas"
                , (::osg::Image * ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )( ::osg::Texture2D const * ) )( &::osgUtil::Optimizer::TextureAtlasBuilder::getImageAtlas )
                , ( bp::arg("textue") )
                , bp::return_internal_reference< >() )    
            .def( 
                "getMargin"
                , (int ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )(  ) const)( &::osgUtil::Optimizer::TextureAtlasBuilder::getMargin ) )    
            .def( 
                "getMaximumAtlasHeight"
                , (int ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )(  ) const)( &::osgUtil::Optimizer::TextureAtlasBuilder::getMaximumAtlasHeight ) )    
            .def( 
                "getMaximumAtlasWidth"
                , (int ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )(  ) const)( &::osgUtil::Optimizer::TextureAtlasBuilder::getMaximumAtlasWidth ) )    
            .def( 
                "getNumSources"
                , (unsigned int ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )(  ) const)( &::osgUtil::Optimizer::TextureAtlasBuilder::getNumSources ) )    
            .def( 
                "getSourceImage"
                , (::osg::Image const * ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )( unsigned int ) )( &::osgUtil::Optimizer::TextureAtlasBuilder::getSourceImage )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() )    
            .def( 
                "getSourceTexture"
                , (::osg::Texture2D const * ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )( unsigned int ) )( &::osgUtil::Optimizer::TextureAtlasBuilder::getSourceTexture )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() )    
            .def( 
                "getTextureAtlas"
                , (::osg::Texture2D * ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )( unsigned int ) )( &::osgUtil::Optimizer::TextureAtlasBuilder::getTextureAtlas )
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() )    
            .def( 
                "getTextureAtlas"
                , (::osg::Texture2D * ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )( ::osg::Image const * ) )( &::osgUtil::Optimizer::TextureAtlasBuilder::getTextureAtlas )
                , ( bp::arg("image") )
                , bp::return_internal_reference< >() )    
            .def( 
                "getTextureAtlas"
                , (::osg::Texture2D * ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )( ::osg::Texture2D const * ) )( &::osgUtil::Optimizer::TextureAtlasBuilder::getTextureAtlas )
                , ( bp::arg("texture") )
                , bp::return_internal_reference< >() )    
            .def( 
                "getTextureMatrix"
                , (::osg::Matrix ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )( unsigned int ) )( &::osgUtil::Optimizer::TextureAtlasBuilder::getTextureMatrix )
                , ( bp::arg("i") ) )    
            .def( 
                "getTextureMatrix"
                , (::osg::Matrix ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )( ::osg::Image const * ) )( &::osgUtil::Optimizer::TextureAtlasBuilder::getTextureMatrix )
                , ( bp::arg("image") ) )    
            .def( 
                "getTextureMatrix"
                , (::osg::Matrix ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )( ::osg::Texture2D const * ) )( &::osgUtil::Optimizer::TextureAtlasBuilder::getTextureMatrix )
                , ( bp::arg("texture") ) )    
            .def( 
                "reset"
                , (void ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )(  ) )( &::osgUtil::Optimizer::TextureAtlasBuilder::reset ) )    
            .def( 
                "setMargin"
                , (void ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )( int ) )( &::osgUtil::Optimizer::TextureAtlasBuilder::setMargin )
                , ( bp::arg("margin") ) )    
            .def( 
                "setMaximumAtlasSize"
                , (void ( ::osgUtil::Optimizer::TextureAtlasBuilder::* )( int,int ) )( &::osgUtil::Optimizer::TextureAtlasBuilder::setMaximumAtlasSize )
                , ( bp::arg("width"), bp::arg("height") ) );
        { //::osgUtil::Optimizer::TextureAtlasVisitor
            typedef bp::class_< Optimizer_wrapper::TextureAtlasVisitor_wrapper, bp::bases< osgUtil::BaseOptimizerVisitor >, osg::ref_ptr< Optimizer_wrapper::TextureAtlasVisitor_wrapper >, boost::noncopyable > TextureAtlasVisitor_exposer_t;
            TextureAtlasVisitor_exposer_t TextureAtlasVisitor_exposer = TextureAtlasVisitor_exposer_t( "TextureAtlasVisitor", "\n Optimize texture usage in the scene graph by combining textures into texture atlas\n Use of texture atlas cuts down on the number of seperate states in the scene, reducing\n state changes and improving the chances of using larger batches of geometry.\n", bp::init< bp::optional< osgUtil::Optimizer * > >(( bp::arg("optimizer")=bp::object() ), "\n default to traversing all children.\n") );
            bp::scope TextureAtlasVisitor_scope( TextureAtlasVisitor_exposer );
            bp::implicitly_convertible< osgUtil::Optimizer *, osgUtil::Optimizer::TextureAtlasVisitor >();
            { //::osgUtil::Optimizer::TextureAtlasVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::TextureAtlasVisitor::*apply_function_type )( ::osg::Node & ) ;
                typedef void ( Optimizer_wrapper::TextureAtlasVisitor_wrapper::*default_apply_function_type )( ::osg::Node & ) ;
                
                TextureAtlasVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::TextureAtlasVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::TextureAtlasVisitor_wrapper::default_apply)
                    , ( bp::arg("node") ) );
            
            }
            { //::osgUtil::Optimizer::TextureAtlasVisitor::apply
            
                typedef void ( ::osgUtil::Optimizer::TextureAtlasVisitor::*apply_function_type )( ::osg::Geode & ) ;
                typedef void ( Optimizer_wrapper::TextureAtlasVisitor_wrapper::*default_apply_function_type )( ::osg::Geode & ) ;
                
                TextureAtlasVisitor_exposer.def( 
                    "apply"
                    , apply_function_type(&::osgUtil::Optimizer::TextureAtlasVisitor::apply)
                    , default_apply_function_type(&Optimizer_wrapper::TextureAtlasVisitor_wrapper::default_apply)
                    , ( bp::arg("geode") ) );
            
            }
            { //::osgUtil::Optimizer::TextureAtlasVisitor::getTextureAtlasBuilder
            
                typedef ::osgUtil::Optimizer::TextureAtlasBuilder & ( ::osgUtil::Optimizer::TextureAtlasVisitor::*getTextureAtlasBuilder_function_type )(  ) ;
                
                TextureAtlasVisitor_exposer.def( 
                    "getTextureAtlasBuilder"
                    , getTextureAtlasBuilder_function_type( &::osgUtil::Optimizer::TextureAtlasVisitor::getTextureAtlasBuilder )
                    , bp::return_internal_reference< >()
                    , " default to traversing all children." );
            
            }
            { //::osgUtil::Optimizer::TextureAtlasVisitor::optimize
            
                typedef void ( ::osgUtil::Optimizer::TextureAtlasVisitor::*optimize_function_type )(  ) ;
                
                TextureAtlasVisitor_exposer.def( 
                    "optimize"
                    , optimize_function_type( &::osgUtil::Optimizer::TextureAtlasVisitor::optimize ) );
            
            }
            { //::osgUtil::Optimizer::TextureAtlasVisitor::reset
            
                typedef void ( ::osgUtil::Optimizer::TextureAtlasVisitor::*reset_function_type )(  ) ;
                typedef void ( Optimizer_wrapper::TextureAtlasVisitor_wrapper::*default_reset_function_type )(  ) ;
                
                TextureAtlasVisitor_exposer.def( 
                    "reset"
                    , reset_function_type(&::osgUtil::Optimizer::TextureAtlasVisitor::reset)
                    , default_reset_function_type(&Optimizer_wrapper::TextureAtlasVisitor_wrapper::default_reset) );
            
            }
        }
        bp::class_< Optimizer_wrapper::TextureVisitor_wrapper, bp::bases< osgUtil::BaseOptimizerVisitor >, osg::ref_ptr< Optimizer_wrapper::TextureVisitor_wrapper >, boost::noncopyable >( "TextureVisitor", "\n For all textures apply settings.\n", bp::init< bool, bool, bool, bool, bool, float, bp::optional< osgUtil::Optimizer * > >(( bp::arg("changeAutoUnRef"), bp::arg("valueAutoUnRef"), bp::arg("changeClientImageStorage"), bp::arg("valueClientImageStorage"), bp::arg("changeAnisotropy"), bp::arg("valueAnisotropy"), bp::arg("optimizer")=bp::object() ), "\n For all textures apply settings.\n") )    
            .def( 
                "apply"
                , (void ( ::osgUtil::Optimizer::TextureVisitor::* )( ::osg::Geode & ) )(&::osgUtil::Optimizer::TextureVisitor::apply)
                , (void ( Optimizer_wrapper::TextureVisitor_wrapper::* )( ::osg::Geode & ) )(&Optimizer_wrapper::TextureVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) )    
            .def( 
                "apply"
                , (void ( ::osgUtil::Optimizer::TextureVisitor::* )( ::osg::Node & ) )(&::osgUtil::Optimizer::TextureVisitor::apply)
                , (void ( Optimizer_wrapper::TextureVisitor_wrapper::* )( ::osg::Node & ) )(&Optimizer_wrapper::TextureVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) )    
            .def( 
                "apply"
                , (void ( ::osgUtil::Optimizer::TextureVisitor::* )( ::osg::StateSet & ) )( &::osgUtil::Optimizer::TextureVisitor::apply )
                , ( bp::arg("stateset") ) )    
            .def( 
                "apply"
                , (void ( ::osgUtil::Optimizer::TextureVisitor::* )( ::osg::Texture & ) )( &::osgUtil::Optimizer::TextureVisitor::apply )
                , ( bp::arg("texture") ) )    
            .def_readwrite( "_changeAnisotropy", &osgUtil::Optimizer::TextureVisitor::_changeAnisotropy )    
            .def_readwrite( "_changeAutoUnRef", &osgUtil::Optimizer::TextureVisitor::_changeAutoUnRef )    
            .def_readwrite( "_changeClientImageStorage", &osgUtil::Optimizer::TextureVisitor::_changeClientImageStorage )    
            .def_readwrite( "_valueAnisotropy", &osgUtil::Optimizer::TextureVisitor::_valueAnisotropy )    
            .def_readwrite( "_valueAutoUnRef", &osgUtil::Optimizer::TextureVisitor::_valueAutoUnRef )    
            .def_readwrite( "_valueClientImageStorage", &osgUtil::Optimizer::TextureVisitor::_valueClientImageStorage );
        { //::osgUtil::Optimizer::getIsOperationPermissibleForObjectCallback
        
            typedef ::osgUtil::Optimizer::IsOperationPermissibleForObjectCallback * ( ::osgUtil::Optimizer::*getIsOperationPermissibleForObjectCallback_function_type )(  ) ;
            
            Optimizer_exposer.def( 
                "getIsOperationPermissibleForObjectCallback"
                , getIsOperationPermissibleForObjectCallback_function_type( &::osgUtil::Optimizer::getIsOperationPermissibleForObjectCallback )
                , bp::return_internal_reference< >()
                , " Get the callback for customizing what operations are permitted on objects in the scene graph." );
        
        }
        { //::osgUtil::Optimizer::getIsOperationPermissibleForObjectCallback
        
            typedef ::osgUtil::Optimizer::IsOperationPermissibleForObjectCallback const * ( ::osgUtil::Optimizer::*getIsOperationPermissibleForObjectCallback_function_type )(  ) const;
            
            Optimizer_exposer.def( 
                "getIsOperationPermissibleForObjectCallback"
                , getIsOperationPermissibleForObjectCallback_function_type( &::osgUtil::Optimizer::getIsOperationPermissibleForObjectCallback )
                , bp::return_internal_reference< >()
                , " Get the callback for customizing what operations are permitted on objects in the scene graph." );
        
        }
        { //::osgUtil::Optimizer::getPermissibleOptimizationsForObject
        
            typedef unsigned int ( ::osgUtil::Optimizer::*getPermissibleOptimizationsForObject_function_type )( ::osg::Object const * ) const;
            
            Optimizer_exposer.def( 
                "getPermissibleOptimizationsForObject"
                , getPermissibleOptimizationsForObject_function_type( &::osgUtil::Optimizer::getPermissibleOptimizationsForObject )
                , ( bp::arg("object") ) );
        
        }
        { //::osgUtil::Optimizer::isOperationPermissibleForObject
        
            typedef bool ( ::osgUtil::Optimizer::*isOperationPermissibleForObject_function_type )( ::osg::StateSet const *,unsigned int ) const;
            
            Optimizer_exposer.def( 
                "isOperationPermissibleForObject"
                , isOperationPermissibleForObject_function_type( &::osgUtil::Optimizer::isOperationPermissibleForObject )
                , ( bp::arg("object"), bp::arg("option") ) );
        
        }
        { //::osgUtil::Optimizer::isOperationPermissibleForObject
        
            typedef bool ( ::osgUtil::Optimizer::*isOperationPermissibleForObject_function_type )( ::osg::StateAttribute const *,unsigned int ) const;
            
            Optimizer_exposer.def( 
                "isOperationPermissibleForObject"
                , isOperationPermissibleForObject_function_type( &::osgUtil::Optimizer::isOperationPermissibleForObject )
                , ( bp::arg("object"), bp::arg("option") ) );
        
        }
        { //::osgUtil::Optimizer::isOperationPermissibleForObject
        
            typedef bool ( ::osgUtil::Optimizer::*isOperationPermissibleForObject_function_type )( ::osg::Drawable const *,unsigned int ) const;
            
            Optimizer_exposer.def( 
                "isOperationPermissibleForObject"
                , isOperationPermissibleForObject_function_type( &::osgUtil::Optimizer::isOperationPermissibleForObject )
                , ( bp::arg("object"), bp::arg("option") ) );
        
        }
        { //::osgUtil::Optimizer::isOperationPermissibleForObject
        
            typedef bool ( ::osgUtil::Optimizer::*isOperationPermissibleForObject_function_type )( ::osg::Node const *,unsigned int ) const;
            
            Optimizer_exposer.def( 
                "isOperationPermissibleForObject"
                , isOperationPermissibleForObject_function_type( &::osgUtil::Optimizer::isOperationPermissibleForObject )
                , ( bp::arg("object"), bp::arg("option") ) );
        
        }
        { //::osgUtil::Optimizer::isOperationPermissibleForObjectImplementation
        
            typedef bool ( ::osgUtil::Optimizer::*isOperationPermissibleForObjectImplementation_function_type )( ::osg::StateSet const *,unsigned int ) const;
            
            Optimizer_exposer.def( 
                "isOperationPermissibleForObjectImplementation"
                , isOperationPermissibleForObjectImplementation_function_type( &::osgUtil::Optimizer::isOperationPermissibleForObjectImplementation )
                , ( bp::arg("stateset"), bp::arg("option") ) );
        
        }
        { //::osgUtil::Optimizer::isOperationPermissibleForObjectImplementation
        
            typedef bool ( ::osgUtil::Optimizer::*isOperationPermissibleForObjectImplementation_function_type )( ::osg::StateAttribute const *,unsigned int ) const;
            
            Optimizer_exposer.def( 
                "isOperationPermissibleForObjectImplementation"
                , isOperationPermissibleForObjectImplementation_function_type( &::osgUtil::Optimizer::isOperationPermissibleForObjectImplementation )
                , ( bp::arg("attribute"), bp::arg("option") ) );
        
        }
        { //::osgUtil::Optimizer::isOperationPermissibleForObjectImplementation
        
            typedef bool ( ::osgUtil::Optimizer::*isOperationPermissibleForObjectImplementation_function_type )( ::osg::Drawable const *,unsigned int ) const;
            
            Optimizer_exposer.def( 
                "isOperationPermissibleForObjectImplementation"
                , isOperationPermissibleForObjectImplementation_function_type( &::osgUtil::Optimizer::isOperationPermissibleForObjectImplementation )
                , ( bp::arg("drawable"), bp::arg("option") ) );
        
        }
        { //::osgUtil::Optimizer::isOperationPermissibleForObjectImplementation
        
            typedef bool ( ::osgUtil::Optimizer::*isOperationPermissibleForObjectImplementation_function_type )( ::osg::Node const *,unsigned int ) const;
            
            Optimizer_exposer.def( 
                "isOperationPermissibleForObjectImplementation"
                , isOperationPermissibleForObjectImplementation_function_type( &::osgUtil::Optimizer::isOperationPermissibleForObjectImplementation )
                , ( bp::arg("node"), bp::arg("option") ) );
        
        }
        { //::osgUtil::Optimizer::optimize
        
            typedef void ( ::osgUtil::Optimizer::*optimize_function_type )( ::osg::Node * ) ;
            
            Optimizer_exposer.def( 
                "optimize"
                , optimize_function_type( &::osgUtil::Optimizer::optimize )
                , ( bp::arg("node") )
                , " Traverse the node and its subgraph with a series of optimization\n visitors, specified by the OptimizationOptions." );
        
        }
        { //::osgUtil::Optimizer::optimize
        
            typedef void ( ::osgUtil::Optimizer::*optimize_function_type )( ::osg::Node *,unsigned int ) ;
            typedef void ( Optimizer_wrapper::*default_optimize_function_type )( ::osg::Node *,unsigned int ) ;
            
            Optimizer_exposer.def( 
                "optimize"
                , optimize_function_type(&::osgUtil::Optimizer::optimize)
                , default_optimize_function_type(&Optimizer_wrapper::default_optimize)
                , ( bp::arg("node"), bp::arg("options") ) );
        
        }
        { //::osgUtil::Optimizer::reset
        
            typedef void ( ::osgUtil::Optimizer::*reset_function_type )(  ) ;
            
            Optimizer_exposer.def( 
                "reset"
                , reset_function_type( &::osgUtil::Optimizer::reset )
                , " Reset internal data to initial state - the getPermissibleOptionsMap is cleared." );
        
        }
        { //::osgUtil::Optimizer::setIsOperationPermissibleForObjectCallback
        
            typedef void ( ::osgUtil::Optimizer::*setIsOperationPermissibleForObjectCallback_function_type )( ::osgUtil::Optimizer::IsOperationPermissibleForObjectCallback * ) ;
            
            Optimizer_exposer.def( 
                "setIsOperationPermissibleForObjectCallback"
                , setIsOperationPermissibleForObjectCallback_function_type( &::osgUtil::Optimizer::setIsOperationPermissibleForObjectCallback )
                , ( bp::arg("callback") )
                , " Set the callback for customizing what operations are permitted on objects in the scene graph." );
        
        }
        { //::osgUtil::Optimizer::setPermissibleOptimizationsForObject
        
            typedef void ( ::osgUtil::Optimizer::*setPermissibleOptimizationsForObject_function_type )( ::osg::Object const *,unsigned int ) ;
            
            Optimizer_exposer.def( 
                "setPermissibleOptimizationsForObject"
                , setPermissibleOptimizationsForObject_function_type( &::osgUtil::Optimizer::setPermissibleOptimizationsForObject )
                , ( bp::arg("object"), bp::arg("options") ) );
        
        }
    }

}
