// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgUtil.h"
#include "TransformAttributeFunctor.pypp.hpp"

namespace bp = boost::python;

struct TransformAttributeFunctor_wrapper : osgUtil::TransformAttributeFunctor, bp::wrapper< osgUtil::TransformAttributeFunctor > {

    TransformAttributeFunctor_wrapper(osgUtil::TransformAttributeFunctor const & arg )
    : osgUtil::TransformAttributeFunctor( arg )
      , bp::wrapper< osgUtil::TransformAttributeFunctor >(){
        // copy constructor
        
    }

    TransformAttributeFunctor_wrapper(::osg::Matrix const & m )
    : osgUtil::TransformAttributeFunctor( boost::ref(m) )
      , bp::wrapper< osgUtil::TransformAttributeFunctor >(){
        // constructor
    
    }

    virtual void apply( unsigned int type, unsigned int count, ::osg::Vec3 * begin ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( type, count, boost::python::ptr(begin) );
        else{
            this->osgUtil::TransformAttributeFunctor::apply( type, count, boost::python::ptr(begin) );
        }
    }
    
    void default_apply( unsigned int type, unsigned int count, ::osg::Vec3 * begin ) {
        osgUtil::TransformAttributeFunctor::apply( type, count, boost::python::ptr(begin) );
    }

    virtual void apply( unsigned int type, unsigned int count, ::osg::Vec3d * begin ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( type, count, boost::python::ptr(begin) );
        else{
            this->osgUtil::TransformAttributeFunctor::apply( type, count, boost::python::ptr(begin) );
        }
    }
    
    void default_apply( unsigned int type, unsigned int count, ::osg::Vec3d * begin ) {
        osgUtil::TransformAttributeFunctor::apply( type, count, boost::python::ptr(begin) );
    }

    virtual void apply( unsigned int arg0, unsigned int arg1, ::GLbyte * arg2 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( arg0, arg1, arg2 );
        else{
            this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
        }
    }
    
    void default_apply( unsigned int arg0, unsigned int arg1, ::GLbyte * arg2 ) {
        osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
    }

    virtual void apply( unsigned int arg0, unsigned int arg1, ::GLshort * arg2 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( arg0, arg1, arg2 );
        else{
            this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
        }
    }
    
    void default_apply( unsigned int arg0, unsigned int arg1, ::GLshort * arg2 ) {
        osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
    }

    virtual void apply( unsigned int arg0, unsigned int arg1, ::GLint * arg2 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( arg0, arg1, arg2 );
        else{
            this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
        }
    }
    
    void default_apply( unsigned int arg0, unsigned int arg1, ::GLint * arg2 ) {
        osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
    }

    virtual void apply( unsigned int arg0, unsigned int arg1, ::GLubyte * arg2 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( arg0, arg1, arg2 );
        else{
            this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
        }
    }
    
    void default_apply( unsigned int arg0, unsigned int arg1, ::GLubyte * arg2 ) {
        osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
    }

    virtual void apply( unsigned int arg0, unsigned int arg1, ::GLushort * arg2 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( arg0, arg1, arg2 );
        else{
            this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
        }
    }
    
    void default_apply( unsigned int arg0, unsigned int arg1, ::GLushort * arg2 ) {
        osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
    }

    virtual void apply( unsigned int arg0, unsigned int arg1, ::GLuint * arg2 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( arg0, arg1, arg2 );
        else{
            this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
        }
    }
    
    void default_apply( unsigned int arg0, unsigned int arg1, ::GLuint * arg2 ) {
        osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
    }

    virtual void apply( unsigned int arg0, unsigned int arg1, float * arg2 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( arg0, arg1, arg2 );
        else{
            this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
        }
    }
    
    void default_apply( unsigned int arg0, unsigned int arg1, float * arg2 ) {
        osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
    }

    virtual void apply( unsigned int arg0, unsigned int arg1, ::osg::Vec2 * arg2 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( arg0, arg1, boost::python::ptr(arg2) );
        else{
            this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    void default_apply( unsigned int arg0, unsigned int arg1, ::osg::Vec2 * arg2 ) {
        osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual void apply( unsigned int arg0, unsigned int arg1, ::osg::Vec4 * arg2 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( arg0, arg1, boost::python::ptr(arg2) );
        else{
            this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    void default_apply( unsigned int arg0, unsigned int arg1, ::osg::Vec4 * arg2 ) {
        osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual void apply( unsigned int arg0, unsigned int arg1, ::osg::Vec4ub * arg2 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( arg0, arg1, boost::python::ptr(arg2) );
        else{
            this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    void default_apply( unsigned int arg0, unsigned int arg1, ::osg::Vec4ub * arg2 ) {
        osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual void apply( unsigned int arg0, unsigned int arg1, double * arg2 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( arg0, arg1, arg2 );
        else{
            this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
        }
    }
    
    void default_apply( unsigned int arg0, unsigned int arg1, double * arg2 ) {
        osg::Drawable::AttributeFunctor::apply( arg0, arg1, arg2 );
    }

    virtual void apply( unsigned int arg0, unsigned int arg1, ::osg::Vec2d * arg2 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( arg0, arg1, boost::python::ptr(arg2) );
        else{
            this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    void default_apply( unsigned int arg0, unsigned int arg1, ::osg::Vec2d * arg2 ) {
        osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
    }

    virtual void apply( unsigned int arg0, unsigned int arg1, ::osg::Vec4d * arg2 ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( arg0, arg1, boost::python::ptr(arg2) );
        else{
            this->osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
        }
    }
    
    void default_apply( unsigned int arg0, unsigned int arg1, ::osg::Vec4d * arg2 ) {
        osg::Drawable::AttributeFunctor::apply( arg0, arg1, boost::python::ptr(arg2) );
    }

};

void register_TransformAttributeFunctor_class(){

    { //::osgUtil::TransformAttributeFunctor
        typedef bp::class_< TransformAttributeFunctor_wrapper, bp::bases< ::osg::Drawable::AttributeFunctor > > TransformAttributeFunctor_exposer_t;
        TransformAttributeFunctor_exposer_t TransformAttributeFunctor_exposer = TransformAttributeFunctor_exposer_t( "TransformAttributeFunctor", bp::init< osg::Matrix const & >(( bp::arg("m") )) );
        bp::scope TransformAttributeFunctor_scope( TransformAttributeFunctor_exposer );
        bp::implicitly_convertible< osg::Matrix const &, osgUtil::TransformAttributeFunctor >();
        { //::osgUtil::TransformAttributeFunctor::apply
        
            typedef void ( ::osgUtil::TransformAttributeFunctor::*apply_function_type )( unsigned int,unsigned int,::osg::Vec3 * ) ;
            typedef void ( TransformAttributeFunctor_wrapper::*default_apply_function_type )( unsigned int,unsigned int,::osg::Vec3 * ) ;
            
            TransformAttributeFunctor_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::TransformAttributeFunctor::apply)
                , default_apply_function_type(&TransformAttributeFunctor_wrapper::default_apply)
                , ( bp::arg("type"), bp::arg("count"), bp::arg("begin") ) );
        
        }
        { //::osgUtil::TransformAttributeFunctor::apply
        
            typedef void ( ::osgUtil::TransformAttributeFunctor::*apply_function_type )( unsigned int,unsigned int,::osg::Vec3d * ) ;
            typedef void ( TransformAttributeFunctor_wrapper::*default_apply_function_type )( unsigned int,unsigned int,::osg::Vec3d * ) ;
            
            TransformAttributeFunctor_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::TransformAttributeFunctor::apply)
                , default_apply_function_type(&TransformAttributeFunctor_wrapper::default_apply)
                , ( bp::arg("type"), bp::arg("count"), bp::arg("begin") ) );
        
        }
        TransformAttributeFunctor_exposer.def_readwrite( "_im", &osgUtil::TransformAttributeFunctor::_im );
        TransformAttributeFunctor_exposer.def_readwrite( "_m", &osgUtil::TransformAttributeFunctor::_m );
    }

}
