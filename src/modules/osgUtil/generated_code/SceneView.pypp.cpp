// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgUtil.h"
#include "wrap_referenced.h"
#include "SceneView.pypp.hpp"

namespace bp = boost::python;

struct SceneView_wrapper : osgUtil::SceneView, bp::wrapper< osgUtil::SceneView > {

    struct ComputeStereoMatricesCallback_wrapper : osgUtil::SceneView::ComputeStereoMatricesCallback, bp::wrapper< osgUtil::SceneView::ComputeStereoMatricesCallback > {
    
        ComputeStereoMatricesCallback_wrapper()
        : osgUtil::SceneView::ComputeStereoMatricesCallback()
          , bp::wrapper< osgUtil::SceneView::ComputeStereoMatricesCallback >(){
            // null constructor
            
        }
    
        virtual ::osg::Matrixd computeLeftEyeProjection( ::osg::Matrixd const & projection ) const {
            bp::override func_computeLeftEyeProjection = this->get_override( "computeLeftEyeProjection" );
            return func_computeLeftEyeProjection( boost::ref(projection) );
        }
    
        virtual ::osg::Matrixd computeLeftEyeView( ::osg::Matrixd const & view ) const {
            bp::override func_computeLeftEyeView = this->get_override( "computeLeftEyeView" );
            return func_computeLeftEyeView( boost::ref(view) );
        }
    
        virtual ::osg::Matrixd computeRightEyeProjection( ::osg::Matrixd const & projection ) const {
            bp::override func_computeRightEyeProjection = this->get_override( "computeRightEyeProjection" );
            return func_computeRightEyeProjection( boost::ref(projection) );
        }
    
        virtual ::osg::Matrixd computeRightEyeView( ::osg::Matrixd const & view ) const {
            bp::override func_computeRightEyeView = this->get_override( "computeRightEyeView" );
            return func_computeRightEyeView( boost::ref(view) );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    SceneView_wrapper(::osg::DisplaySettings * ds=0l )
    : osgUtil::SceneView( boost::python::ptr(ds) )
      , bp::wrapper< osgUtil::SceneView >(){
        // constructor
    
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgUtil::SceneView::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgUtil::SceneView::className( );
    }

    virtual ::osg::Object * clone( ::osg::CopyOp const & copyop ) const  {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(copyop) );
        else{
            return this->osgUtil::SceneView::clone( boost::ref(copyop) );
        }
    }
    
    ::osg::Object * default_clone( ::osg::CopyOp const & copyop ) const  {
        return osgUtil::SceneView::clone( boost::ref(copyop) );
    }

    virtual ::osg::Object * cloneType(  ) const  {
        if( bp::override func_cloneType = this->get_override( "cloneType" ) )
            return func_cloneType(  );
        else{
            return this->osgUtil::SceneView::cloneType(  );
        }
    }
    
    ::osg::Object * default_cloneType(  ) const  {
        return osgUtil::SceneView::cloneType( );
    }

    virtual ::osg::Matrixd computeLeftEyeProjectionImplementation( ::osg::Matrixd const & projection ) const  {
        if( bp::override func_computeLeftEyeProjectionImplementation = this->get_override( "computeLeftEyeProjectionImplementation" ) )
            return func_computeLeftEyeProjectionImplementation( boost::ref(projection) );
        else{
            return this->osgUtil::SceneView::computeLeftEyeProjectionImplementation( boost::ref(projection) );
        }
    }
    
    ::osg::Matrixd default_computeLeftEyeProjectionImplementation( ::osg::Matrixd const & projection ) const  {
        return osgUtil::SceneView::computeLeftEyeProjectionImplementation( boost::ref(projection) );
    }

    virtual ::osg::Matrixd computeLeftEyeViewImplementation( ::osg::Matrixd const & view ) const  {
        if( bp::override func_computeLeftEyeViewImplementation = this->get_override( "computeLeftEyeViewImplementation" ) )
            return func_computeLeftEyeViewImplementation( boost::ref(view) );
        else{
            return this->osgUtil::SceneView::computeLeftEyeViewImplementation( boost::ref(view) );
        }
    }
    
    ::osg::Matrixd default_computeLeftEyeViewImplementation( ::osg::Matrixd const & view ) const  {
        return osgUtil::SceneView::computeLeftEyeViewImplementation( boost::ref(view) );
    }

    virtual ::osg::Matrixd computeRightEyeProjectionImplementation( ::osg::Matrixd const & projection ) const  {
        if( bp::override func_computeRightEyeProjectionImplementation = this->get_override( "computeRightEyeProjectionImplementation" ) )
            return func_computeRightEyeProjectionImplementation( boost::ref(projection) );
        else{
            return this->osgUtil::SceneView::computeRightEyeProjectionImplementation( boost::ref(projection) );
        }
    }
    
    ::osg::Matrixd default_computeRightEyeProjectionImplementation( ::osg::Matrixd const & projection ) const  {
        return osgUtil::SceneView::computeRightEyeProjectionImplementation( boost::ref(projection) );
    }

    virtual ::osg::Matrixd computeRightEyeViewImplementation( ::osg::Matrixd const & view ) const  {
        if( bp::override func_computeRightEyeViewImplementation = this->get_override( "computeRightEyeViewImplementation" ) )
            return func_computeRightEyeViewImplementation( boost::ref(view) );
        else{
            return this->osgUtil::SceneView::computeRightEyeViewImplementation( boost::ref(view) );
        }
    }
    
    ::osg::Matrixd default_computeRightEyeViewImplementation( ::osg::Matrixd const & view ) const  {
        return osgUtil::SceneView::computeRightEyeViewImplementation( boost::ref(view) );
    }

    virtual void cull(  ) {
        if( bp::override func_cull = this->get_override( "cull" ) )
            func_cull(  );
        else{
            this->osgUtil::SceneView::cull(  );
        }
    }
    
    void default_cull(  ) {
        osgUtil::SceneView::cull( );
    }

    virtual void draw(  ) {
        if( bp::override func_draw = this->get_override( "draw" ) )
            func_draw(  );
        else{
            this->osgUtil::SceneView::draw(  );
        }
    }
    
    void default_draw(  ) {
        osgUtil::SceneView::draw( );
    }

    virtual void flushAllDeletedGLObjects(  ) {
        if( bp::override func_flushAllDeletedGLObjects = this->get_override( "flushAllDeletedGLObjects" ) )
            func_flushAllDeletedGLObjects(  );
        else{
            this->osgUtil::SceneView::flushAllDeletedGLObjects(  );
        }
    }
    
    void default_flushAllDeletedGLObjects(  ) {
        osgUtil::SceneView::flushAllDeletedGLObjects( );
    }

    virtual void flushDeletedGLObjects( double & availableTime ) {
        if( bp::override func_flushDeletedGLObjects = this->get_override( "flushDeletedGLObjects" ) )
            func_flushDeletedGLObjects( availableTime );
        else{
            this->osgUtil::SceneView::flushDeletedGLObjects( availableTime );
        }
    }
    
    void default_flushDeletedGLObjects( double & availableTime ) {
        osgUtil::SceneView::flushDeletedGLObjects( availableTime );
    }

    virtual void inheritCullSettings( ::osg::CullSettings const & settings ) {
        if( bp::override func_inheritCullSettings = this->get_override( "inheritCullSettings" ) )
            func_inheritCullSettings( boost::ref(settings) );
        else{
            this->osgUtil::SceneView::inheritCullSettings( boost::ref(settings) );
        }
    }
    
    void default_inheritCullSettings( ::osg::CullSettings const & settings ) {
        osgUtil::SceneView::inheritCullSettings( boost::ref(settings) );
    }

    virtual void inheritCullSettings( ::osg::CullSettings const & settings, unsigned int inheritanceMask ) {
        if( bp::override func_inheritCullSettings = this->get_override( "inheritCullSettings" ) )
            func_inheritCullSettings( boost::ref(settings), inheritanceMask );
        else{
            this->osgUtil::SceneView::inheritCullSettings( boost::ref(settings), inheritanceMask );
        }
    }
    
    void default_inheritCullSettings( ::osg::CullSettings const & settings, unsigned int inheritanceMask ) {
        osgUtil::SceneView::inheritCullSettings( boost::ref(settings), inheritanceMask );
    }

    virtual void init(  ) {
        if( bp::override func_init = this->get_override( "init" ) )
            func_init(  );
        else{
            this->osgUtil::SceneView::init(  );
        }
    }
    
    void default_init(  ) {
        osgUtil::SceneView::init( );
    }

    virtual bool isSameKindAs( ::osg::Object const * obj ) const  {
        if( bp::override func_isSameKindAs = this->get_override( "isSameKindAs" ) )
            return func_isSameKindAs( boost::python::ptr(obj) );
        else{
            return this->osgUtil::SceneView::isSameKindAs( boost::python::ptr(obj) );
        }
    }
    
    bool default_isSameKindAs( ::osg::Object const * obj ) const  {
        return osgUtil::SceneView::isSameKindAs( boost::python::ptr(obj) );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgUtil::SceneView::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgUtil::SceneView::libraryName( );
    }

    virtual void releaseAllGLObjects(  ) {
        if( bp::override func_releaseAllGLObjects = this->get_override( "releaseAllGLObjects" ) )
            func_releaseAllGLObjects(  );
        else{
            this->osgUtil::SceneView::releaseAllGLObjects(  );
        }
    }
    
    void default_releaseAllGLObjects(  ) {
        osgUtil::SceneView::releaseAllGLObjects( );
    }

    virtual void setDefaults(  ) {
        if( bp::override func_setDefaults = this->get_override( "setDefaults" ) )
            func_setDefaults(  );
        else{
            this->osgUtil::SceneView::setDefaults(  );
        }
    }
    
    void default_setDefaults(  ) {
        osgUtil::SceneView::setDefaults( );
    }

    virtual void setDefaults( unsigned int options ) {
        if( bp::override func_setDefaults = this->get_override( "setDefaults" ) )
            func_setDefaults( options );
        else{
            this->osgUtil::SceneView::setDefaults( options );
        }
    }
    
    void default_setDefaults( unsigned int options ) {
        osgUtil::SceneView::setDefaults( options );
    }

    virtual void update(  ) {
        if( bp::override func_update = this->get_override( "update" ) )
            func_update(  );
        else{
            this->osgUtil::SceneView::update(  );
        }
    }
    
    void default_update(  ) {
        osgUtil::SceneView::update( );
    }

    virtual void computeDataVariance(  ) {
        if( bp::override func_computeDataVariance = this->get_override( "computeDataVariance" ) )
            func_computeDataVariance(  );
        else{
            this->osg::Object::computeDataVariance(  );
        }
    }
    
    void default_computeDataVariance(  ) {
        osg::Object::computeDataVariance( );
    }

    virtual ::osg::Referenced * getUserData(  ) {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced * default_getUserData(  ) {
        return osg::Object::getUserData( );
    }

    virtual ::osg::Referenced const * getUserData(  ) const  {
        if( bp::override func_getUserData = this->get_override( "getUserData" ) )
            return func_getUserData(  );
        else{
            return this->osg::Object::getUserData(  );
        }
    }
    
    ::osg::Referenced const * default_getUserData(  ) const  {
        return osg::Object::getUserData( );
    }

    virtual void resizeGLObjectBuffers( unsigned int arg0 ) {
        if( bp::override func_resizeGLObjectBuffers = this->get_override( "resizeGLObjectBuffers" ) )
            func_resizeGLObjectBuffers( arg0 );
        else{
            this->osg::Object::resizeGLObjectBuffers( arg0 );
        }
    }
    
    void default_resizeGLObjectBuffers( unsigned int arg0 ) {
        osg::Object::resizeGLObjectBuffers( arg0 );
    }

    virtual void setName( ::std::string const & name ) {
        if( bp::override func_setName = this->get_override( "setName" ) )
            func_setName( name );
        else{
            this->osg::Object::setName( name );
        }
    }
    
    void default_setName( ::std::string const & name ) {
        osg::Object::setName( name );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Object::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Object::setThreadSafeRefUnref( threadSafe );
    }

    virtual void setUserData( ::osg::Referenced * obj ) {
        if( bp::override func_setUserData = this->get_override( "setUserData" ) )
            func_setUserData( boost::python::ptr(obj) );
        else{
            this->osg::Object::setUserData( boost::python::ptr(obj) );
        }
    }
    
    void default_setUserData( ::osg::Referenced * obj ) {
        osg::Object::setUserData( boost::python::ptr(obj) );
    }

};

void register_SceneView_class(){

    { //::osgUtil::SceneView
        typedef bp::class_< SceneView_wrapper, bp::bases< ::osg::Object, ::osg::CullSettings >, osg::ref_ptr< SceneView_wrapper >, boost::noncopyable > SceneView_exposer_t;
        SceneView_exposer_t SceneView_exposer = SceneView_exposer_t( "SceneView", bp::no_init );
        bp::scope SceneView_scope( SceneView_exposer );
        bp::enum_< osgUtil::SceneView::ActiveUniforms>("ActiveUniforms")
            .value("FRAME_NUMBER_UNIFORM", osgUtil::SceneView::FRAME_NUMBER_UNIFORM)
            .value("FRAME_TIME_UNIFORM", osgUtil::SceneView::FRAME_TIME_UNIFORM)
            .value("DELTA_FRAME_TIME_UNIFORM", osgUtil::SceneView::DELTA_FRAME_TIME_UNIFORM)
            .value("SIMULATION_TIME_UNIFORM", osgUtil::SceneView::SIMULATION_TIME_UNIFORM)
            .value("DELTA_SIMULATION_TIME_UNIFORM", osgUtil::SceneView::DELTA_SIMULATION_TIME_UNIFORM)
            .value("VIEW_MATRIX_UNIFORM", osgUtil::SceneView::VIEW_MATRIX_UNIFORM)
            .value("VIEW_MATRIX_INVERSE_UNIFORM", osgUtil::SceneView::VIEW_MATRIX_INVERSE_UNIFORM)
            .value("DEFAULT_UNIFORMS", osgUtil::SceneView::DEFAULT_UNIFORMS)
            .value("ALL_UNIFORMS", osgUtil::SceneView::ALL_UNIFORMS)
            .export_values()
            ;
        bp::enum_< osgUtil::SceneView::FusionDistanceMode>("FusionDistanceMode")
            .value("USE_FUSION_DISTANCE_VALUE", osgUtil::SceneView::USE_FUSION_DISTANCE_VALUE)
            .value("PROPORTIONAL_TO_SCREEN_DISTANCE", osgUtil::SceneView::PROPORTIONAL_TO_SCREEN_DISTANCE)
            .export_values()
            ;
        bp::enum_< osgUtil::SceneView::Options>("Options")
            .value("NO_SCENEVIEW_LIGHT", osgUtil::SceneView::NO_SCENEVIEW_LIGHT)
            .value("HEADLIGHT", osgUtil::SceneView::HEADLIGHT)
            .value("SKY_LIGHT", osgUtil::SceneView::SKY_LIGHT)
            .value("COMPILE_GLOBJECTS_AT_INIT", osgUtil::SceneView::COMPILE_GLOBJECTS_AT_INIT)
            .value("APPLY_GLOBAL_DEFAULTS", osgUtil::SceneView::APPLY_GLOBAL_DEFAULTS)
            .value("CLEAR_GLOBAL_STATESET", osgUtil::SceneView::CLEAR_GLOBAL_STATESET)
            .value("STANDARD_SETTINGS", osgUtil::SceneView::STANDARD_SETTINGS)
            .export_values()
            ;
        bp::class_< SceneView_wrapper::ComputeStereoMatricesCallback_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< SceneView_wrapper::ComputeStereoMatricesCallback_wrapper >, boost::noncopyable >( "ComputeStereoMatricesCallback", bp::no_init )    
            .def( 
                "computeLeftEyeProjection"
                , bp::pure_virtual( (::osg::Matrixd ( ::osgUtil::SceneView::ComputeStereoMatricesCallback::* )( ::osg::Matrixd const & ) const)(&::osgUtil::SceneView::ComputeStereoMatricesCallback::computeLeftEyeProjection) )
                , ( bp::arg("projection") ) )    
            .def( 
                "computeLeftEyeView"
                , bp::pure_virtual( (::osg::Matrixd ( ::osgUtil::SceneView::ComputeStereoMatricesCallback::* )( ::osg::Matrixd const & ) const)(&::osgUtil::SceneView::ComputeStereoMatricesCallback::computeLeftEyeView) )
                , ( bp::arg("view") ) )    
            .def( 
                "computeRightEyeProjection"
                , bp::pure_virtual( (::osg::Matrixd ( ::osgUtil::SceneView::ComputeStereoMatricesCallback::* )( ::osg::Matrixd const & ) const)(&::osgUtil::SceneView::ComputeStereoMatricesCallback::computeRightEyeProjection) )
                , ( bp::arg("projection") ) )    
            .def( 
                "computeRightEyeView"
                , bp::pure_virtual( (::osg::Matrixd ( ::osgUtil::SceneView::ComputeStereoMatricesCallback::* )( ::osg::Matrixd const & ) const)(&::osgUtil::SceneView::ComputeStereoMatricesCallback::computeRightEyeView) )
                , ( bp::arg("view") ) );
        SceneView_exposer.def( bp::init< bp::optional< osg::DisplaySettings * > >(( bp::arg("ds")=0l )) );
        bp::implicitly_convertible< osg::DisplaySettings *, osgUtil::SceneView >();
        { //::osgUtil::SceneView::className
        
            typedef char const * ( ::osgUtil::SceneView::*className_function_type )(  ) const;
            typedef char const * ( SceneView_wrapper::*default_className_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "className"
                , className_function_type(&::osgUtil::SceneView::className)
                , default_className_function_type(&SceneView_wrapper::default_className) );
        
        }
        { //::osgUtil::SceneView::clearReferencesToDependentCameras
        
            typedef void ( ::osgUtil::SceneView::*clearReferencesToDependentCameras_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "clearReferencesToDependentCameras"
                , clearReferencesToDependentCameras_function_type( &::osgUtil::SceneView::clearReferencesToDependentCameras ) );
        
        }
        { //::osgUtil::SceneView::clone
        
            typedef ::osg::Object * ( ::osgUtil::SceneView::*clone_function_type )( ::osg::CopyOp const & ) const;
            typedef ::osg::Object * ( SceneView_wrapper::*default_clone_function_type )( ::osg::CopyOp const & ) const;
            
            SceneView_exposer.def( 
                "clone"
                , clone_function_type(&::osgUtil::SceneView::clone)
                , default_clone_function_type(&SceneView_wrapper::default_clone)
                , ( bp::arg("copyop") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgUtil::SceneView::cloneType
        
            typedef ::osg::Object * ( ::osgUtil::SceneView::*cloneType_function_type )(  ) const;
            typedef ::osg::Object * ( SceneView_wrapper::*default_cloneType_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "cloneType"
                , cloneType_function_type(&::osgUtil::SceneView::cloneType)
                , default_cloneType_function_type(&SceneView_wrapper::default_cloneType)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgUtil::SceneView::collateReferencesToDependentCameras
        
            typedef void ( ::osgUtil::SceneView::*collateReferencesToDependentCameras_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "collateReferencesToDependentCameras"
                , collateReferencesToDependentCameras_function_type( &::osgUtil::SceneView::collateReferencesToDependentCameras ) );
        
        }
        { //::osgUtil::SceneView::computeLeftEyeProjection
        
            typedef ::osg::Matrixd ( ::osgUtil::SceneView::*computeLeftEyeProjection_function_type )( ::osg::Matrixd const & ) const;
            
            SceneView_exposer.def( 
                "computeLeftEyeProjection"
                , computeLeftEyeProjection_function_type( &::osgUtil::SceneView::computeLeftEyeProjection )
                , ( bp::arg("projection") ) );
        
        }
        { //::osgUtil::SceneView::computeLeftEyeProjectionImplementation
        
            typedef ::osg::Matrixd ( ::osgUtil::SceneView::*computeLeftEyeProjectionImplementation_function_type )( ::osg::Matrixd const & ) const;
            typedef ::osg::Matrixd ( SceneView_wrapper::*default_computeLeftEyeProjectionImplementation_function_type )( ::osg::Matrixd const & ) const;
            
            SceneView_exposer.def( 
                "computeLeftEyeProjectionImplementation"
                , computeLeftEyeProjectionImplementation_function_type(&::osgUtil::SceneView::computeLeftEyeProjectionImplementation)
                , default_computeLeftEyeProjectionImplementation_function_type(&SceneView_wrapper::default_computeLeftEyeProjectionImplementation)
                , ( bp::arg("projection") ) );
        
        }
        { //::osgUtil::SceneView::computeLeftEyeView
        
            typedef ::osg::Matrixd ( ::osgUtil::SceneView::*computeLeftEyeView_function_type )( ::osg::Matrixd const & ) const;
            
            SceneView_exposer.def( 
                "computeLeftEyeView"
                , computeLeftEyeView_function_type( &::osgUtil::SceneView::computeLeftEyeView )
                , ( bp::arg("view") ) );
        
        }
        { //::osgUtil::SceneView::computeLeftEyeViewImplementation
        
            typedef ::osg::Matrixd ( ::osgUtil::SceneView::*computeLeftEyeViewImplementation_function_type )( ::osg::Matrixd const & ) const;
            typedef ::osg::Matrixd ( SceneView_wrapper::*default_computeLeftEyeViewImplementation_function_type )( ::osg::Matrixd const & ) const;
            
            SceneView_exposer.def( 
                "computeLeftEyeViewImplementation"
                , computeLeftEyeViewImplementation_function_type(&::osgUtil::SceneView::computeLeftEyeViewImplementation)
                , default_computeLeftEyeViewImplementation_function_type(&SceneView_wrapper::default_computeLeftEyeViewImplementation)
                , ( bp::arg("view") ) );
        
        }
        { //::osgUtil::SceneView::computeRightEyeProjection
        
            typedef ::osg::Matrixd ( ::osgUtil::SceneView::*computeRightEyeProjection_function_type )( ::osg::Matrixd const & ) const;
            
            SceneView_exposer.def( 
                "computeRightEyeProjection"
                , computeRightEyeProjection_function_type( &::osgUtil::SceneView::computeRightEyeProjection )
                , ( bp::arg("projection") ) );
        
        }
        { //::osgUtil::SceneView::computeRightEyeProjectionImplementation
        
            typedef ::osg::Matrixd ( ::osgUtil::SceneView::*computeRightEyeProjectionImplementation_function_type )( ::osg::Matrixd const & ) const;
            typedef ::osg::Matrixd ( SceneView_wrapper::*default_computeRightEyeProjectionImplementation_function_type )( ::osg::Matrixd const & ) const;
            
            SceneView_exposer.def( 
                "computeRightEyeProjectionImplementation"
                , computeRightEyeProjectionImplementation_function_type(&::osgUtil::SceneView::computeRightEyeProjectionImplementation)
                , default_computeRightEyeProjectionImplementation_function_type(&SceneView_wrapper::default_computeRightEyeProjectionImplementation)
                , ( bp::arg("projection") ) );
        
        }
        { //::osgUtil::SceneView::computeRightEyeView
        
            typedef ::osg::Matrixd ( ::osgUtil::SceneView::*computeRightEyeView_function_type )( ::osg::Matrixd const & ) const;
            
            SceneView_exposer.def( 
                "computeRightEyeView"
                , computeRightEyeView_function_type( &::osgUtil::SceneView::computeRightEyeView )
                , ( bp::arg("view") ) );
        
        }
        { //::osgUtil::SceneView::computeRightEyeViewImplementation
        
            typedef ::osg::Matrixd ( ::osgUtil::SceneView::*computeRightEyeViewImplementation_function_type )( ::osg::Matrixd const & ) const;
            typedef ::osg::Matrixd ( SceneView_wrapper::*default_computeRightEyeViewImplementation_function_type )( ::osg::Matrixd const & ) const;
            
            SceneView_exposer.def( 
                "computeRightEyeViewImplementation"
                , computeRightEyeViewImplementation_function_type(&::osgUtil::SceneView::computeRightEyeViewImplementation)
                , default_computeRightEyeViewImplementation_function_type(&SceneView_wrapper::default_computeRightEyeViewImplementation)
                , ( bp::arg("view") ) );
        
        }
        { //::osgUtil::SceneView::cull
        
            typedef void ( ::osgUtil::SceneView::*cull_function_type )(  ) ;
            typedef void ( SceneView_wrapper::*default_cull_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "cull"
                , cull_function_type(&::osgUtil::SceneView::cull)
                , default_cull_function_type(&SceneView_wrapper::default_cull) );
        
        }
        { //::osgUtil::SceneView::draw
        
            typedef void ( ::osgUtil::SceneView::*draw_function_type )(  ) ;
            typedef void ( SceneView_wrapper::*default_draw_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "draw"
                , draw_function_type(&::osgUtil::SceneView::draw)
                , default_draw_function_type(&SceneView_wrapper::default_draw) );
        
        }
        { //::osgUtil::SceneView::flushAllDeletedGLObjects
        
            typedef void ( ::osgUtil::SceneView::*flushAllDeletedGLObjects_function_type )(  ) ;
            typedef void ( SceneView_wrapper::*default_flushAllDeletedGLObjects_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "flushAllDeletedGLObjects"
                , flushAllDeletedGLObjects_function_type(&::osgUtil::SceneView::flushAllDeletedGLObjects)
                , default_flushAllDeletedGLObjects_function_type(&SceneView_wrapper::default_flushAllDeletedGLObjects) );
        
        }
        { //::osgUtil::SceneView::flushDeletedGLObjects
        
            typedef void ( ::osgUtil::SceneView::*flushDeletedGLObjects_function_type )( double & ) ;
            typedef void ( SceneView_wrapper::*default_flushDeletedGLObjects_function_type )( double & ) ;
            
            SceneView_exposer.def( 
                "flushDeletedGLObjects"
                , flushDeletedGLObjects_function_type(&::osgUtil::SceneView::flushDeletedGLObjects)
                , default_flushDeletedGLObjects_function_type(&SceneView_wrapper::default_flushDeletedGLObjects)
                , ( bp::arg("availableTime") ) );
        
        }
        { //::osgUtil::SceneView::getActiveUniforms
        
            typedef int ( ::osgUtil::SceneView::*getActiveUniforms_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getActiveUniforms"
                , getActiveUniforms_function_type( &::osgUtil::SceneView::getActiveUniforms ) );
        
        }
        { //::osgUtil::SceneView::getAutomaticFlush
        
            typedef bool ( ::osgUtil::SceneView::*getAutomaticFlush_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getAutomaticFlush"
                , getAutomaticFlush_function_type( &::osgUtil::SceneView::getAutomaticFlush ) );
        
        }
        { //::osgUtil::SceneView::getCamera
        
            typedef ::osg::Camera * ( ::osgUtil::SceneView::*getCamera_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getCamera"
                , getCamera_function_type( &::osgUtil::SceneView::getCamera )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getCamera
        
            typedef ::osg::Camera const * ( ::osgUtil::SceneView::*getCamera_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getCamera"
                , getCamera_function_type( &::osgUtil::SceneView::getCamera )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getClearColor
        
            typedef ::osg::Vec4 const & ( ::osgUtil::SceneView::*getClearColor_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getClearColor"
                , getClearColor_function_type( &::osgUtil::SceneView::getClearColor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getCollectOccludersVisitor
        
            typedef ::osg::CollectOccludersVisitor * ( ::osgUtil::SceneView::*getCollectOccludersVisitor_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getCollectOccludersVisitor"
                , getCollectOccludersVisitor_function_type( &::osgUtil::SceneView::getCollectOccludersVisitor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getCollectOccludersVisitor
        
            typedef ::osg::CollectOccludersVisitor const * ( ::osgUtil::SceneView::*getCollectOccludersVisitor_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getCollectOccludersVisitor"
                , getCollectOccludersVisitor_function_type( &::osgUtil::SceneView::getCollectOccludersVisitor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getComputeStereoMatricesCallback
        
            typedef ::osgUtil::SceneView::ComputeStereoMatricesCallback * ( ::osgUtil::SceneView::*getComputeStereoMatricesCallback_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getComputeStereoMatricesCallback"
                , getComputeStereoMatricesCallback_function_type( &::osgUtil::SceneView::getComputeStereoMatricesCallback )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getComputeStereoMatricesCallback
        
            typedef ::osgUtil::SceneView::ComputeStereoMatricesCallback const * ( ::osgUtil::SceneView::*getComputeStereoMatricesCallback_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getComputeStereoMatricesCallback"
                , getComputeStereoMatricesCallback_function_type( &::osgUtil::SceneView::getComputeStereoMatricesCallback )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getCullVisitor
        
            typedef ::osgUtil::CullVisitor * ( ::osgUtil::SceneView::*getCullVisitor_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getCullVisitor"
                , getCullVisitor_function_type( &::osgUtil::SceneView::getCullVisitor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getCullVisitor
        
            typedef ::osgUtil::CullVisitor const * ( ::osgUtil::SceneView::*getCullVisitor_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getCullVisitor"
                , getCullVisitor_function_type( &::osgUtil::SceneView::getCullVisitor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getCullVisitorLeft
        
            typedef ::osgUtil::CullVisitor * ( ::osgUtil::SceneView::*getCullVisitorLeft_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getCullVisitorLeft"
                , getCullVisitorLeft_function_type( &::osgUtil::SceneView::getCullVisitorLeft )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getCullVisitorLeft
        
            typedef ::osgUtil::CullVisitor const * ( ::osgUtil::SceneView::*getCullVisitorLeft_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getCullVisitorLeft"
                , getCullVisitorLeft_function_type( &::osgUtil::SceneView::getCullVisitorLeft )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getCullVisitorRight
        
            typedef ::osgUtil::CullVisitor * ( ::osgUtil::SceneView::*getCullVisitorRight_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getCullVisitorRight"
                , getCullVisitorRight_function_type( &::osgUtil::SceneView::getCullVisitorRight )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getCullVisitorRight
        
            typedef ::osgUtil::CullVisitor const * ( ::osgUtil::SceneView::*getCullVisitorRight_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getCullVisitorRight"
                , getCullVisitorRight_function_type( &::osgUtil::SceneView::getCullVisitorRight )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getDisplaySettings
        
            typedef ::osg::DisplaySettings const * ( ::osgUtil::SceneView::*getDisplaySettings_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getDisplaySettings"
                , getDisplaySettings_function_type( &::osgUtil::SceneView::getDisplaySettings )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getDisplaySettings
        
            typedef ::osg::DisplaySettings * ( ::osgUtil::SceneView::*getDisplaySettings_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getDisplaySettings"
                , getDisplaySettings_function_type( &::osgUtil::SceneView::getDisplaySettings )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getDrawBufferValue
        
            typedef ::GLenum ( ::osgUtil::SceneView::*getDrawBufferValue_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getDrawBufferValue"
                , getDrawBufferValue_function_type( &::osgUtil::SceneView::getDrawBufferValue ) );
        
        }
        { //::osgUtil::SceneView::getDynamicObjectCount
        
            typedef unsigned int ( ::osgUtil::SceneView::*getDynamicObjectCount_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getDynamicObjectCount"
                , getDynamicObjectCount_function_type( &::osgUtil::SceneView::getDynamicObjectCount ) );
        
        }
        { //::osgUtil::SceneView::getFrameStamp
        
            typedef ::osg::FrameStamp const * ( ::osgUtil::SceneView::*getFrameStamp_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getFrameStamp"
                , getFrameStamp_function_type( &::osgUtil::SceneView::getFrameStamp )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getFusionDistanceMode
        
            typedef ::osgUtil::SceneView::FusionDistanceMode ( ::osgUtil::SceneView::*getFusionDistanceMode_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getFusionDistanceMode"
                , getFusionDistanceMode_function_type( &::osgUtil::SceneView::getFusionDistanceMode ) );
        
        }
        { //::osgUtil::SceneView::getFusionDistanceValue
        
            typedef float ( ::osgUtil::SceneView::*getFusionDistanceValue_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getFusionDistanceValue"
                , getFusionDistanceValue_function_type( &::osgUtil::SceneView::getFusionDistanceValue ) );
        
        }
        { //::osgUtil::SceneView::getGlobalStateSet
        
            typedef ::osg::StateSet * ( ::osgUtil::SceneView::*getGlobalStateSet_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getGlobalStateSet"
                , getGlobalStateSet_function_type( &::osgUtil::SceneView::getGlobalStateSet )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getGlobalStateSet
        
            typedef ::osg::StateSet const * ( ::osgUtil::SceneView::*getGlobalStateSet_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getGlobalStateSet"
                , getGlobalStateSet_function_type( &::osgUtil::SceneView::getGlobalStateSet )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getInitVisitor
        
            typedef ::osg::NodeVisitor * ( ::osgUtil::SceneView::*getInitVisitor_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getInitVisitor"
                , getInitVisitor_function_type( &::osgUtil::SceneView::getInitVisitor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getInitVisitor
        
            typedef ::osg::NodeVisitor const * ( ::osgUtil::SceneView::*getInitVisitor_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getInitVisitor"
                , getInitVisitor_function_type( &::osgUtil::SceneView::getInitVisitor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getLight
        
            typedef ::osg::Light * ( ::osgUtil::SceneView::*getLight_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getLight"
                , getLight_function_type( &::osgUtil::SceneView::getLight )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getLight
        
            typedef ::osg::Light const * ( ::osgUtil::SceneView::*getLight_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getLight"
                , getLight_function_type( &::osgUtil::SceneView::getLight )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getLightingMode
        
            typedef ::osgUtil::SceneView::Options ( ::osgUtil::SceneView::*getLightingMode_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getLightingMode"
                , getLightingMode_function_type( &::osgUtil::SceneView::getLightingMode ) );
        
        }
        { //::osgUtil::SceneView::getLocalStateSet
        
            typedef ::osg::StateSet * ( ::osgUtil::SceneView::*getLocalStateSet_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getLocalStateSet"
                , getLocalStateSet_function_type( &::osgUtil::SceneView::getLocalStateSet )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getLocalStateSet
        
            typedef ::osg::StateSet const * ( ::osgUtil::SceneView::*getLocalStateSet_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getLocalStateSet"
                , getLocalStateSet_function_type( &::osgUtil::SceneView::getLocalStateSet )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getNumSceneData
        
            typedef unsigned int ( ::osgUtil::SceneView::*getNumSceneData_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getNumSceneData"
                , getNumSceneData_function_type( &::osgUtil::SceneView::getNumSceneData ) );
        
        }
        { //::osgUtil::SceneView::getPrioritizeTextures
        
            typedef bool ( ::osgUtil::SceneView::*getPrioritizeTextures_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getPrioritizeTextures"
                , getPrioritizeTextures_function_type( &::osgUtil::SceneView::getPrioritizeTextures ) );
        
        }
        { //::osgUtil::SceneView::getProjectionMatrix
        
            typedef ::osg::Matrixd & ( ::osgUtil::SceneView::*getProjectionMatrix_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getProjectionMatrix"
                , getProjectionMatrix_function_type( &::osgUtil::SceneView::getProjectionMatrix )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getProjectionMatrix
        
            typedef ::osg::Matrixd const & ( ::osgUtil::SceneView::*getProjectionMatrix_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getProjectionMatrix"
                , getProjectionMatrix_function_type( &::osgUtil::SceneView::getProjectionMatrix )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getProjectionMatrixAsFrustum
        
            typedef bool ( ::osgUtil::SceneView::*getProjectionMatrixAsFrustum_function_type )( double &,double &,double &,double &,double &,double & ) const;
            
            SceneView_exposer.def( 
                "getProjectionMatrixAsFrustum"
                , getProjectionMatrixAsFrustum_function_type( &::osgUtil::SceneView::getProjectionMatrixAsFrustum )
                , ( bp::arg("left"), bp::arg("right"), bp::arg("bottom"), bp::arg("top"), bp::arg("zNear"), bp::arg("zFar") ) );
        
        }
        { //::osgUtil::SceneView::getProjectionMatrixAsOrtho
        
            typedef bool ( ::osgUtil::SceneView::*getProjectionMatrixAsOrtho_function_type )( double &,double &,double &,double &,double &,double & ) const;
            
            SceneView_exposer.def( 
                "getProjectionMatrixAsOrtho"
                , getProjectionMatrixAsOrtho_function_type( &::osgUtil::SceneView::getProjectionMatrixAsOrtho )
                , ( bp::arg("left"), bp::arg("right"), bp::arg("bottom"), bp::arg("top"), bp::arg("zNear"), bp::arg("zFar") ) );
        
        }
        { //::osgUtil::SceneView::getProjectionMatrixAsPerspective
        
            typedef bool ( ::osgUtil::SceneView::*getProjectionMatrixAsPerspective_function_type )( double &,double &,double &,double & ) const;
            
            SceneView_exposer.def( 
                "getProjectionMatrixAsPerspective"
                , getProjectionMatrixAsPerspective_function_type( &::osgUtil::SceneView::getProjectionMatrixAsPerspective )
                , ( bp::arg("fovy"), bp::arg("aspectRatio"), bp::arg("zNear"), bp::arg("zFar") ) );
        
        }
        { //::osgUtil::SceneView::getRedrawInterlacedStereoStencilMask
        
            typedef bool ( ::osgUtil::SceneView::*getRedrawInterlacedStereoStencilMask_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getRedrawInterlacedStereoStencilMask"
                , getRedrawInterlacedStereoStencilMask_function_type( &::osgUtil::SceneView::getRedrawInterlacedStereoStencilMask ) );
        
        }
        { //::osgUtil::SceneView::getRenderInfo
        
            typedef ::osg::RenderInfo & ( ::osgUtil::SceneView::*getRenderInfo_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getRenderInfo"
                , getRenderInfo_function_type( &::osgUtil::SceneView::getRenderInfo )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getRenderInfo
        
            typedef ::osg::RenderInfo const & ( ::osgUtil::SceneView::*getRenderInfo_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getRenderInfo"
                , getRenderInfo_function_type( &::osgUtil::SceneView::getRenderInfo )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getRenderStage
        
            typedef ::osgUtil::RenderStage * ( ::osgUtil::SceneView::*getRenderStage_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getRenderStage"
                , getRenderStage_function_type( &::osgUtil::SceneView::getRenderStage )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getRenderStage
        
            typedef ::osgUtil::RenderStage const * ( ::osgUtil::SceneView::*getRenderStage_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getRenderStage"
                , getRenderStage_function_type( &::osgUtil::SceneView::getRenderStage )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getRenderStageLeft
        
            typedef ::osgUtil::RenderStage * ( ::osgUtil::SceneView::*getRenderStageLeft_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getRenderStageLeft"
                , getRenderStageLeft_function_type( &::osgUtil::SceneView::getRenderStageLeft )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getRenderStageLeft
        
            typedef ::osgUtil::RenderStage const * ( ::osgUtil::SceneView::*getRenderStageLeft_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getRenderStageLeft"
                , getRenderStageLeft_function_type( &::osgUtil::SceneView::getRenderStageLeft )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getRenderStageRight
        
            typedef ::osgUtil::RenderStage * ( ::osgUtil::SceneView::*getRenderStageRight_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getRenderStageRight"
                , getRenderStageRight_function_type( &::osgUtil::SceneView::getRenderStageRight )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getRenderStageRight
        
            typedef ::osgUtil::RenderStage const * ( ::osgUtil::SceneView::*getRenderStageRight_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getRenderStageRight"
                , getRenderStageRight_function_type( &::osgUtil::SceneView::getRenderStageRight )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getSceneData
        
            typedef ::osg::Node * ( ::osgUtil::SceneView::*getSceneData_function_type )( unsigned int ) ;
            
            SceneView_exposer.def( 
                "getSceneData"
                , getSceneData_function_type( &::osgUtil::SceneView::getSceneData )
                , ( bp::arg("childNo")=(unsigned int)(0) )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getSceneData
        
            typedef ::osg::Node const * ( ::osgUtil::SceneView::*getSceneData_function_type )( unsigned int ) const;
            
            SceneView_exposer.def( 
                "getSceneData"
                , getSceneData_function_type( &::osgUtil::SceneView::getSceneData )
                , ( bp::arg("childNo")=(unsigned int)(0) )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getSecondaryStateSet
        
            typedef ::osg::StateSet * ( ::osgUtil::SceneView::*getSecondaryStateSet_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getSecondaryStateSet"
                , getSecondaryStateSet_function_type( &::osgUtil::SceneView::getSecondaryStateSet )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getSecondaryStateSet
        
            typedef ::osg::StateSet const * ( ::osgUtil::SceneView::*getSecondaryStateSet_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getSecondaryStateSet"
                , getSecondaryStateSet_function_type( &::osgUtil::SceneView::getSecondaryStateSet )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getState
        
            typedef ::osg::State * ( ::osgUtil::SceneView::*getState_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getState"
                , getState_function_type( &::osgUtil::SceneView::getState )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getState
        
            typedef ::osg::State const * ( ::osgUtil::SceneView::*getState_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getState"
                , getState_function_type( &::osgUtil::SceneView::getState )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getStateGraph
        
            typedef ::osgUtil::StateGraph * ( ::osgUtil::SceneView::*getStateGraph_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getStateGraph"
                , getStateGraph_function_type( &::osgUtil::SceneView::getStateGraph )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getStateGraph
        
            typedef ::osgUtil::StateGraph const * ( ::osgUtil::SceneView::*getStateGraph_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getStateGraph"
                , getStateGraph_function_type( &::osgUtil::SceneView::getStateGraph )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getStateGraphLeft
        
            typedef ::osgUtil::StateGraph * ( ::osgUtil::SceneView::*getStateGraphLeft_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getStateGraphLeft"
                , getStateGraphLeft_function_type( &::osgUtil::SceneView::getStateGraphLeft )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getStateGraphLeft
        
            typedef ::osgUtil::StateGraph const * ( ::osgUtil::SceneView::*getStateGraphLeft_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getStateGraphLeft"
                , getStateGraphLeft_function_type( &::osgUtil::SceneView::getStateGraphLeft )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getStateGraphRight
        
            typedef ::osgUtil::StateGraph * ( ::osgUtil::SceneView::*getStateGraphRight_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getStateGraphRight"
                , getStateGraphRight_function_type( &::osgUtil::SceneView::getStateGraphRight )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getStateGraphRight
        
            typedef ::osgUtil::StateGraph const * ( ::osgUtil::SceneView::*getStateGraphRight_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getStateGraphRight"
                , getStateGraphRight_function_type( &::osgUtil::SceneView::getStateGraphRight )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getStats
        
            typedef bool ( ::osgUtil::SceneView::*getStats_function_type )( ::osgUtil::Statistics & ) ;
            
            SceneView_exposer.def( 
                "getStats"
                , getStats_function_type( &::osgUtil::SceneView::getStats )
                , ( bp::arg("primStats") ) );
        
        }
        { //::osgUtil::SceneView::getUpdateVisitor
        
            typedef ::osg::NodeVisitor * ( ::osgUtil::SceneView::*getUpdateVisitor_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getUpdateVisitor"
                , getUpdateVisitor_function_type( &::osgUtil::SceneView::getUpdateVisitor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getUpdateVisitor
        
            typedef ::osg::NodeVisitor const * ( ::osgUtil::SceneView::*getUpdateVisitor_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getUpdateVisitor"
                , getUpdateVisitor_function_type( &::osgUtil::SceneView::getUpdateVisitor )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getView
        
            typedef ::osg::View * ( ::osgUtil::SceneView::*getView_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getView"
                , getView_function_type( &::osgUtil::SceneView::getView )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getView
        
            typedef ::osg::View const * ( ::osgUtil::SceneView::*getView_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getView"
                , getView_function_type( &::osgUtil::SceneView::getView )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getViewMatrix
        
            typedef ::osg::Matrixd & ( ::osgUtil::SceneView::*getViewMatrix_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getViewMatrix"
                , getViewMatrix_function_type( &::osgUtil::SceneView::getViewMatrix )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getViewMatrix
        
            typedef ::osg::Matrixd const & ( ::osgUtil::SceneView::*getViewMatrix_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getViewMatrix"
                , getViewMatrix_function_type( &::osgUtil::SceneView::getViewMatrix )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getViewMatrixAsLookAt
        
            typedef void ( ::osgUtil::SceneView::*getViewMatrixAsLookAt_function_type )( ::osg::Vec3 &,::osg::Vec3 &,::osg::Vec3 &,float ) const;
            
            SceneView_exposer.def( 
                "getViewMatrixAsLookAt"
                , getViewMatrixAsLookAt_function_type( &::osgUtil::SceneView::getViewMatrixAsLookAt )
                , ( bp::arg("eye"), bp::arg("center"), bp::arg("up"), bp::arg("lookDistance")=1.0e+0f ) );
        
        }
        { //::osgUtil::SceneView::getViewport
        
            typedef ::osg::Viewport * ( ::osgUtil::SceneView::*getViewport_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "getViewport"
                , getViewport_function_type( &::osgUtil::SceneView::getViewport )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::getViewport
        
            typedef ::osg::Viewport const * ( ::osgUtil::SceneView::*getViewport_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "getViewport"
                , getViewport_function_type( &::osgUtil::SceneView::getViewport )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::SceneView::inheritCullSettings
        
            typedef void ( ::osgUtil::SceneView::*inheritCullSettings_function_type )( ::osg::CullSettings const & ) ;
            typedef void ( SceneView_wrapper::*default_inheritCullSettings_function_type )( ::osg::CullSettings const & ) ;
            
            SceneView_exposer.def( 
                "inheritCullSettings"
                , inheritCullSettings_function_type(&::osgUtil::SceneView::inheritCullSettings)
                , default_inheritCullSettings_function_type(&SceneView_wrapper::default_inheritCullSettings)
                , ( bp::arg("settings") ) );
        
        }
        { //::osgUtil::SceneView::inheritCullSettings
        
            typedef void ( ::osgUtil::SceneView::*inheritCullSettings_function_type )( ::osg::CullSettings const &,unsigned int ) ;
            typedef void ( SceneView_wrapper::*default_inheritCullSettings_function_type )( ::osg::CullSettings const &,unsigned int ) ;
            
            SceneView_exposer.def( 
                "inheritCullSettings"
                , inheritCullSettings_function_type(&::osgUtil::SceneView::inheritCullSettings)
                , default_inheritCullSettings_function_type(&SceneView_wrapper::default_inheritCullSettings)
                , ( bp::arg("settings"), bp::arg("inheritanceMask") ) );
        
        }
        { //::osgUtil::SceneView::init
        
            typedef void ( ::osgUtil::SceneView::*init_function_type )(  ) ;
            typedef void ( SceneView_wrapper::*default_init_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "init"
                , init_function_type(&::osgUtil::SceneView::init)
                , default_init_function_type(&SceneView_wrapper::default_init) );
        
        }
        { //::osgUtil::SceneView::isSameKindAs
        
            typedef bool ( ::osgUtil::SceneView::*isSameKindAs_function_type )( ::osg::Object const * ) const;
            typedef bool ( SceneView_wrapper::*default_isSameKindAs_function_type )( ::osg::Object const * ) const;
            
            SceneView_exposer.def( 
                "isSameKindAs"
                , isSameKindAs_function_type(&::osgUtil::SceneView::isSameKindAs)
                , default_isSameKindAs_function_type(&SceneView_wrapper::default_isSameKindAs)
                , ( bp::arg("obj") ) );
        
        }
        { //::osgUtil::SceneView::libraryName
        
            typedef char const * ( ::osgUtil::SceneView::*libraryName_function_type )(  ) const;
            typedef char const * ( SceneView_wrapper::*default_libraryName_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgUtil::SceneView::libraryName)
                , default_libraryName_function_type(&SceneView_wrapper::default_libraryName) );
        
        }
        { //::osgUtil::SceneView::projectObjectIntoWindow
        
            typedef bool ( ::osgUtil::SceneView::*projectObjectIntoWindow_function_type )( ::osg::Vec3 const &,::osg::Vec3 & ) const;
            
            SceneView_exposer.def( 
                "projectObjectIntoWindow"
                , projectObjectIntoWindow_function_type( &::osgUtil::SceneView::projectObjectIntoWindow )
                , ( bp::arg("object"), bp::arg("window") ) );
        
        }
        { //::osgUtil::SceneView::projectWindowIntoObject
        
            typedef bool ( ::osgUtil::SceneView::*projectWindowIntoObject_function_type )( ::osg::Vec3 const &,::osg::Vec3 & ) const;
            
            SceneView_exposer.def( 
                "projectWindowIntoObject"
                , projectWindowIntoObject_function_type( &::osgUtil::SceneView::projectWindowIntoObject )
                , ( bp::arg("window"), bp::arg("object") ) );
        
        }
        { //::osgUtil::SceneView::projectWindowXYIntoObject
        
            typedef bool ( ::osgUtil::SceneView::*projectWindowXYIntoObject_function_type )( int,int,::osg::Vec3 &,::osg::Vec3 & ) const;
            
            SceneView_exposer.def( 
                "projectWindowXYIntoObject"
                , projectWindowXYIntoObject_function_type( &::osgUtil::SceneView::projectWindowXYIntoObject )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("near_point"), bp::arg("far_point") ) );
        
        }
        { //::osgUtil::SceneView::releaseAllGLObjects
        
            typedef void ( ::osgUtil::SceneView::*releaseAllGLObjects_function_type )(  ) ;
            typedef void ( SceneView_wrapper::*default_releaseAllGLObjects_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "releaseAllGLObjects"
                , releaseAllGLObjects_function_type(&::osgUtil::SceneView::releaseAllGLObjects)
                , default_releaseAllGLObjects_function_type(&SceneView_wrapper::default_releaseAllGLObjects) );
        
        }
        { //::osgUtil::SceneView::setActiveUniforms
        
            typedef void ( ::osgUtil::SceneView::*setActiveUniforms_function_type )( int ) ;
            
            SceneView_exposer.def( 
                "setActiveUniforms"
                , setActiveUniforms_function_type( &::osgUtil::SceneView::setActiveUniforms )
                , ( bp::arg("activeUniforms") ) );
        
        }
        { //::osgUtil::SceneView::setAutomaticFlush
        
            typedef void ( ::osgUtil::SceneView::*setAutomaticFlush_function_type )( bool ) ;
            
            SceneView_exposer.def( 
                "setAutomaticFlush"
                , setAutomaticFlush_function_type( &::osgUtil::SceneView::setAutomaticFlush )
                , ( bp::arg("automaticFlush") ) );
        
        }
        { //::osgUtil::SceneView::setCamera
        
            typedef void ( ::osgUtil::SceneView::*setCamera_function_type )( ::osg::Camera *,bool ) ;
            
            SceneView_exposer.def( 
                "setCamera"
                , setCamera_function_type( &::osgUtil::SceneView::setCamera )
                , ( bp::arg("camera"), bp::arg("assumeOwnershipOfCamera")=(bool)(true) ) );
        
        }
        { //::osgUtil::SceneView::setClearColor
        
            typedef void ( ::osgUtil::SceneView::*setClearColor_function_type )( ::osg::Vec4 const & ) ;
            
            SceneView_exposer.def( 
                "setClearColor"
                , setClearColor_function_type( &::osgUtil::SceneView::setClearColor )
                , ( bp::arg("color") ) );
        
        }
        { //::osgUtil::SceneView::setCollectOccludersVisitor
        
            typedef void ( ::osgUtil::SceneView::*setCollectOccludersVisitor_function_type )( ::osg::CollectOccludersVisitor * ) ;
            
            SceneView_exposer.def( 
                "setCollectOccludersVisitor"
                , setCollectOccludersVisitor_function_type( &::osgUtil::SceneView::setCollectOccludersVisitor )
                , ( bp::arg("cov") ) );
        
        }
        { //::osgUtil::SceneView::setComputeStereoMatricesCallback
        
            typedef void ( ::osgUtil::SceneView::*setComputeStereoMatricesCallback_function_type )( ::osgUtil::SceneView::ComputeStereoMatricesCallback * ) ;
            
            SceneView_exposer.def( 
                "setComputeStereoMatricesCallback"
                , setComputeStereoMatricesCallback_function_type( &::osgUtil::SceneView::setComputeStereoMatricesCallback )
                , ( bp::arg("callback") ) );
        
        }
        { //::osgUtil::SceneView::setCullVisitor
        
            typedef void ( ::osgUtil::SceneView::*setCullVisitor_function_type )( ::osgUtil::CullVisitor * ) ;
            
            SceneView_exposer.def( 
                "setCullVisitor"
                , setCullVisitor_function_type( &::osgUtil::SceneView::setCullVisitor )
                , ( bp::arg("cv") ) );
        
        }
        { //::osgUtil::SceneView::setCullVisitorLeft
        
            typedef void ( ::osgUtil::SceneView::*setCullVisitorLeft_function_type )( ::osgUtil::CullVisitor * ) ;
            
            SceneView_exposer.def( 
                "setCullVisitorLeft"
                , setCullVisitorLeft_function_type( &::osgUtil::SceneView::setCullVisitorLeft )
                , ( bp::arg("cv") ) );
        
        }
        { //::osgUtil::SceneView::setCullVisitorRight
        
            typedef void ( ::osgUtil::SceneView::*setCullVisitorRight_function_type )( ::osgUtil::CullVisitor * ) ;
            
            SceneView_exposer.def( 
                "setCullVisitorRight"
                , setCullVisitorRight_function_type( &::osgUtil::SceneView::setCullVisitorRight )
                , ( bp::arg("cv") ) );
        
        }
        { //::osgUtil::SceneView::setDefaults
        
            typedef void ( ::osgUtil::SceneView::*setDefaults_function_type )(  ) ;
            typedef void ( SceneView_wrapper::*default_setDefaults_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "setDefaults"
                , setDefaults_function_type(&::osgUtil::SceneView::setDefaults)
                , default_setDefaults_function_type(&SceneView_wrapper::default_setDefaults) );
        
        }
        { //::osgUtil::SceneView::setDefaults
        
            typedef void ( ::osgUtil::SceneView::*setDefaults_function_type )( unsigned int ) ;
            typedef void ( SceneView_wrapper::*default_setDefaults_function_type )( unsigned int ) ;
            
            SceneView_exposer.def( 
                "setDefaults"
                , setDefaults_function_type(&::osgUtil::SceneView::setDefaults)
                , default_setDefaults_function_type(&SceneView_wrapper::default_setDefaults)
                , ( bp::arg("options") ) );
        
        }
        { //::osgUtil::SceneView::setDisplaySettings
        
            typedef void ( ::osgUtil::SceneView::*setDisplaySettings_function_type )( ::osg::DisplaySettings * ) ;
            
            SceneView_exposer.def( 
                "setDisplaySettings"
                , setDisplaySettings_function_type( &::osgUtil::SceneView::setDisplaySettings )
                , ( bp::arg("vs") ) );
        
        }
        { //::osgUtil::SceneView::setDrawBufferValue
        
            typedef void ( ::osgUtil::SceneView::*setDrawBufferValue_function_type )( ::GLenum ) ;
            
            SceneView_exposer.def( 
                "setDrawBufferValue"
                , setDrawBufferValue_function_type( &::osgUtil::SceneView::setDrawBufferValue )
                , ( bp::arg("drawBufferValue") ) );
        
        }
        { //::osgUtil::SceneView::setFrameStamp
        
            typedef void ( ::osgUtil::SceneView::*setFrameStamp_function_type )( ::osg::FrameStamp * ) ;
            
            SceneView_exposer.def( 
                "setFrameStamp"
                , setFrameStamp_function_type( &::osgUtil::SceneView::setFrameStamp )
                , ( bp::arg("fs") ) );
        
        }
        { //::osgUtil::SceneView::setFusionDistance
        
            typedef void ( ::osgUtil::SceneView::*setFusionDistance_function_type )( ::osgUtil::SceneView::FusionDistanceMode,float ) ;
            
            SceneView_exposer.def( 
                "setFusionDistance"
                , setFusionDistance_function_type( &::osgUtil::SceneView::setFusionDistance )
                , ( bp::arg("mode"), bp::arg("value")=1.0e+0f ) );
        
        }
        { //::osgUtil::SceneView::setGlobalStateSet
        
            typedef void ( ::osgUtil::SceneView::*setGlobalStateSet_function_type )( ::osg::StateSet * ) ;
            
            SceneView_exposer.def( 
                "setGlobalStateSet"
                , setGlobalStateSet_function_type( &::osgUtil::SceneView::setGlobalStateSet )
                , ( bp::arg("state") ) );
        
        }
        { //::osgUtil::SceneView::setInitVisitor
        
            typedef void ( ::osgUtil::SceneView::*setInitVisitor_function_type )( ::osg::NodeVisitor * ) ;
            
            SceneView_exposer.def( 
                "setInitVisitor"
                , setInitVisitor_function_type( &::osgUtil::SceneView::setInitVisitor )
                , ( bp::arg("av") ) );
        
        }
        { //::osgUtil::SceneView::setLight
        
            typedef void ( ::osgUtil::SceneView::*setLight_function_type )( ::osg::Light * ) ;
            
            SceneView_exposer.def( 
                "setLight"
                , setLight_function_type( &::osgUtil::SceneView::setLight )
                , ( bp::arg("light") ) );
        
        }
        { //::osgUtil::SceneView::setLightingMode
        
            typedef void ( ::osgUtil::SceneView::*setLightingMode_function_type )( ::osgUtil::SceneView::Options ) ;
            
            SceneView_exposer.def( 
                "setLightingMode"
                , setLightingMode_function_type( &::osgUtil::SceneView::setLightingMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::osgUtil::SceneView::setLocalStateSet
        
            typedef void ( ::osgUtil::SceneView::*setLocalStateSet_function_type )( ::osg::StateSet * ) ;
            
            SceneView_exposer.def( 
                "setLocalStateSet"
                , setLocalStateSet_function_type( &::osgUtil::SceneView::setLocalStateSet )
                , ( bp::arg("state") ) );
        
        }
        { //::osgUtil::SceneView::setPrioritizeTextures
        
            typedef void ( ::osgUtil::SceneView::*setPrioritizeTextures_function_type )( bool ) ;
            
            SceneView_exposer.def( 
                "setPrioritizeTextures"
                , setPrioritizeTextures_function_type( &::osgUtil::SceneView::setPrioritizeTextures )
                , ( bp::arg("pt") ) );
        
        }
        { //::osgUtil::SceneView::setProjectionMatrix
        
            typedef void ( ::osgUtil::SceneView::*setProjectionMatrix_function_type )( ::osg::Matrixf const & ) ;
            
            SceneView_exposer.def( 
                "setProjectionMatrix"
                , setProjectionMatrix_function_type( &::osgUtil::SceneView::setProjectionMatrix )
                , ( bp::arg("matrix") ) );
        
        }
        { //::osgUtil::SceneView::setProjectionMatrix
        
            typedef void ( ::osgUtil::SceneView::*setProjectionMatrix_function_type )( ::osg::Matrixd const & ) ;
            
            SceneView_exposer.def( 
                "setProjectionMatrix"
                , setProjectionMatrix_function_type( &::osgUtil::SceneView::setProjectionMatrix )
                , ( bp::arg("matrix") ) );
        
        }
        { //::osgUtil::SceneView::setProjectionMatrixAsFrustum
        
            typedef void ( ::osgUtil::SceneView::*setProjectionMatrixAsFrustum_function_type )( double,double,double,double,double,double ) ;
            
            SceneView_exposer.def( 
                "setProjectionMatrixAsFrustum"
                , setProjectionMatrixAsFrustum_function_type( &::osgUtil::SceneView::setProjectionMatrixAsFrustum )
                , ( bp::arg("left"), bp::arg("right"), bp::arg("bottom"), bp::arg("top"), bp::arg("zNear"), bp::arg("zFar") ) );
        
        }
        { //::osgUtil::SceneView::setProjectionMatrixAsOrtho
        
            typedef void ( ::osgUtil::SceneView::*setProjectionMatrixAsOrtho_function_type )( double,double,double,double,double,double ) ;
            
            SceneView_exposer.def( 
                "setProjectionMatrixAsOrtho"
                , setProjectionMatrixAsOrtho_function_type( &::osgUtil::SceneView::setProjectionMatrixAsOrtho )
                , ( bp::arg("left"), bp::arg("right"), bp::arg("bottom"), bp::arg("top"), bp::arg("zNear"), bp::arg("zFar") ) );
        
        }
        { //::osgUtil::SceneView::setProjectionMatrixAsOrtho2D
        
            typedef void ( ::osgUtil::SceneView::*setProjectionMatrixAsOrtho2D_function_type )( double,double,double,double ) ;
            
            SceneView_exposer.def( 
                "setProjectionMatrixAsOrtho2D"
                , setProjectionMatrixAsOrtho2D_function_type( &::osgUtil::SceneView::setProjectionMatrixAsOrtho2D )
                , ( bp::arg("left"), bp::arg("right"), bp::arg("bottom"), bp::arg("top") ) );
        
        }
        { //::osgUtil::SceneView::setProjectionMatrixAsPerspective
        
            typedef void ( ::osgUtil::SceneView::*setProjectionMatrixAsPerspective_function_type )( double,double,double,double ) ;
            
            SceneView_exposer.def( 
                "setProjectionMatrixAsPerspective"
                , setProjectionMatrixAsPerspective_function_type( &::osgUtil::SceneView::setProjectionMatrixAsPerspective )
                , ( bp::arg("fovy"), bp::arg("aspectRatio"), bp::arg("zNear"), bp::arg("zFar") ) );
        
        }
        { //::osgUtil::SceneView::setRedrawInterlacedStereoStencilMask
        
            typedef void ( ::osgUtil::SceneView::*setRedrawInterlacedStereoStencilMask_function_type )( bool ) ;
            
            SceneView_exposer.def( 
                "setRedrawInterlacedStereoStencilMask"
                , setRedrawInterlacedStereoStencilMask_function_type( &::osgUtil::SceneView::setRedrawInterlacedStereoStencilMask )
                , ( bp::arg("flag") ) );
        
        }
        { //::osgUtil::SceneView::setRenderInfo
        
            typedef void ( ::osgUtil::SceneView::*setRenderInfo_function_type )( ::osg::RenderInfo & ) ;
            
            SceneView_exposer.def( 
                "setRenderInfo"
                , setRenderInfo_function_type( &::osgUtil::SceneView::setRenderInfo )
                , ( bp::arg("renderInfo") ) );
        
        }
        { //::osgUtil::SceneView::setRenderStage
        
            typedef void ( ::osgUtil::SceneView::*setRenderStage_function_type )( ::osgUtil::RenderStage * ) ;
            
            SceneView_exposer.def( 
                "setRenderStage"
                , setRenderStage_function_type( &::osgUtil::SceneView::setRenderStage )
                , ( bp::arg("rs") ) );
        
        }
        { //::osgUtil::SceneView::setRenderStageLeft
        
            typedef void ( ::osgUtil::SceneView::*setRenderStageLeft_function_type )( ::osgUtil::RenderStage * ) ;
            
            SceneView_exposer.def( 
                "setRenderStageLeft"
                , setRenderStageLeft_function_type( &::osgUtil::SceneView::setRenderStageLeft )
                , ( bp::arg("rs") ) );
        
        }
        { //::osgUtil::SceneView::setRenderStageRight
        
            typedef void ( ::osgUtil::SceneView::*setRenderStageRight_function_type )( ::osgUtil::RenderStage * ) ;
            
            SceneView_exposer.def( 
                "setRenderStageRight"
                , setRenderStageRight_function_type( &::osgUtil::SceneView::setRenderStageRight )
                , ( bp::arg("rs") ) );
        
        }
        { //::osgUtil::SceneView::setResetColorMaskToAllOn
        
            typedef void ( ::osgUtil::SceneView::*setResetColorMaskToAllOn_function_type )( bool ) ;
            
            SceneView_exposer.def( 
                "setResetColorMaskToAllOn"
                , setResetColorMaskToAllOn_function_type( &::osgUtil::SceneView::setResetColorMaskToAllOn )
                , ( bp::arg("enable") ) );
        
        }
        { //::osgUtil::SceneView::setResetColorMaskToAllOn
        
            typedef bool ( ::osgUtil::SceneView::*setResetColorMaskToAllOn_function_type )(  ) const;
            
            SceneView_exposer.def( 
                "setResetColorMaskToAllOn"
                , setResetColorMaskToAllOn_function_type( &::osgUtil::SceneView::setResetColorMaskToAllOn ) );
        
        }
        { //::osgUtil::SceneView::setSceneData
        
            typedef void ( ::osgUtil::SceneView::*setSceneData_function_type )( ::osg::Node * ) ;
            
            SceneView_exposer.def( 
                "setSceneData"
                , setSceneData_function_type( &::osgUtil::SceneView::setSceneData )
                , ( bp::arg("node") ) );
        
        }
        { //::osgUtil::SceneView::setSecondaryStateSet
        
            typedef void ( ::osgUtil::SceneView::*setSecondaryStateSet_function_type )( ::osg::StateSet * ) ;
            
            SceneView_exposer.def( 
                "setSecondaryStateSet"
                , setSecondaryStateSet_function_type( &::osgUtil::SceneView::setSecondaryStateSet )
                , ( bp::arg("state") ) );
        
        }
        { //::osgUtil::SceneView::setState
        
            typedef void ( ::osgUtil::SceneView::*setState_function_type )( ::osg::State * ) ;
            
            SceneView_exposer.def( 
                "setState"
                , setState_function_type( &::osgUtil::SceneView::setState )
                , ( bp::arg("state") ) );
        
        }
        { //::osgUtil::SceneView::setStateGraph
        
            typedef void ( ::osgUtil::SceneView::*setStateGraph_function_type )( ::osgUtil::StateGraph * ) ;
            
            SceneView_exposer.def( 
                "setStateGraph"
                , setStateGraph_function_type( &::osgUtil::SceneView::setStateGraph )
                , ( bp::arg("rg") ) );
        
        }
        { //::osgUtil::SceneView::setStateGraphLeft
        
            typedef void ( ::osgUtil::SceneView::*setStateGraphLeft_function_type )( ::osgUtil::StateGraph * ) ;
            
            SceneView_exposer.def( 
                "setStateGraphLeft"
                , setStateGraphLeft_function_type( &::osgUtil::SceneView::setStateGraphLeft )
                , ( bp::arg("rg") ) );
        
        }
        { //::osgUtil::SceneView::setStateGraphRight
        
            typedef void ( ::osgUtil::SceneView::*setStateGraphRight_function_type )( ::osgUtil::StateGraph * ) ;
            
            SceneView_exposer.def( 
                "setStateGraphRight"
                , setStateGraphRight_function_type( &::osgUtil::SceneView::setStateGraphRight )
                , ( bp::arg("rg") ) );
        
        }
        { //::osgUtil::SceneView::setUpdateVisitor
        
            typedef void ( ::osgUtil::SceneView::*setUpdateVisitor_function_type )( ::osg::NodeVisitor * ) ;
            
            SceneView_exposer.def( 
                "setUpdateVisitor"
                , setUpdateVisitor_function_type( &::osgUtil::SceneView::setUpdateVisitor )
                , ( bp::arg("av") ) );
        
        }
        { //::osgUtil::SceneView::setView
        
            typedef void ( ::osgUtil::SceneView::*setView_function_type )( ::osg::View * ) ;
            
            SceneView_exposer.def( 
                "setView"
                , setView_function_type( &::osgUtil::SceneView::setView )
                , ( bp::arg("view") ) );
        
        }
        { //::osgUtil::SceneView::setViewMatrix
        
            typedef void ( ::osgUtil::SceneView::*setViewMatrix_function_type )( ::osg::Matrixf const & ) ;
            
            SceneView_exposer.def( 
                "setViewMatrix"
                , setViewMatrix_function_type( &::osgUtil::SceneView::setViewMatrix )
                , ( bp::arg("matrix") ) );
        
        }
        { //::osgUtil::SceneView::setViewMatrix
        
            typedef void ( ::osgUtil::SceneView::*setViewMatrix_function_type )( ::osg::Matrixd const & ) ;
            
            SceneView_exposer.def( 
                "setViewMatrix"
                , setViewMatrix_function_type( &::osgUtil::SceneView::setViewMatrix )
                , ( bp::arg("matrix") ) );
        
        }
        { //::osgUtil::SceneView::setViewMatrixAsLookAt
        
            typedef void ( ::osgUtil::SceneView::*setViewMatrixAsLookAt_function_type )( ::osg::Vec3 const &,::osg::Vec3 const &,::osg::Vec3 const & ) ;
            
            SceneView_exposer.def( 
                "setViewMatrixAsLookAt"
                , setViewMatrixAsLookAt_function_type( &::osgUtil::SceneView::setViewMatrixAsLookAt )
                , ( bp::arg("eye"), bp::arg("center"), bp::arg("up") ) );
        
        }
        { //::osgUtil::SceneView::setViewport
        
            typedef void ( ::osgUtil::SceneView::*setViewport_function_type )( ::osg::Viewport * ) ;
            
            SceneView_exposer.def( 
                "setViewport"
                , setViewport_function_type( &::osgUtil::SceneView::setViewport )
                , ( bp::arg("viewport") ) );
        
        }
        { //::osgUtil::SceneView::setViewport
        
            typedef void ( ::osgUtil::SceneView::*setViewport_function_type )( int,int,int,int ) ;
            
            SceneView_exposer.def( 
                "setViewport"
                , setViewport_function_type( &::osgUtil::SceneView::setViewport )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("width"), bp::arg("height") ) );
        
        }
        { //::osgUtil::SceneView::update
        
            typedef void ( ::osgUtil::SceneView::*update_function_type )(  ) ;
            typedef void ( SceneView_wrapper::*default_update_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "update"
                , update_function_type(&::osgUtil::SceneView::update)
                , default_update_function_type(&SceneView_wrapper::default_update) );
        
        }
        { //::osgUtil::SceneView::updateUniforms
        
            typedef void ( ::osgUtil::SceneView::*updateUniforms_function_type )(  ) ;
            
            SceneView_exposer.def( 
                "updateUniforms"
                , updateUniforms_function_type( &::osgUtil::SceneView::updateUniforms ) );
        
        }
    }

}
