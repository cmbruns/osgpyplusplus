// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgUtil.h"
#include "EdgeCollector.pypp.hpp"

namespace bp = boost::python;

struct EdgeCollector_wrapper : osgUtil::EdgeCollector, bp::wrapper< osgUtil::EdgeCollector > {

    EdgeCollector_wrapper(osgUtil::EdgeCollector const & arg )
    : osgUtil::EdgeCollector( arg )
      , bp::wrapper< osgUtil::EdgeCollector >(){
        // copy constructor
        
    }

    EdgeCollector_wrapper()
    : osgUtil::EdgeCollector()
      , bp::wrapper< osgUtil::EdgeCollector >(){
        // null constructor
        
    }

    static ::osg::Geometry * get__geometry(osgUtil::EdgeCollector const & inst ){
        return inst._geometry;
    }
    
    static void set__geometry( osgUtil::EdgeCollector & inst, ::osg::Geometry * new_value ){ 
        inst._geometry = new_value;
    }

};

void register_EdgeCollector_class(){

    { //::osgUtil::EdgeCollector
        typedef bp::class_< EdgeCollector_wrapper > EdgeCollector_exposer_t;
        EdgeCollector_exposer_t EdgeCollector_exposer = EdgeCollector_exposer_t( "EdgeCollector" );
        bp::scope EdgeCollector_scope( EdgeCollector_exposer );
        bp::class_< osgUtil::EdgeCollector::Edge, bp::bases< ::osg::Referenced >, osg::ref_ptr< ::osgUtil::EdgeCollector::Edge >, boost::noncopyable >( "Edge" )    
            .def( 
                "addTriangle"
                , (void ( ::osgUtil::EdgeCollector::Edge::* )( ::osgUtil::EdgeCollector::Triangle * ) )( &::osgUtil::EdgeCollector::Edge::addTriangle )
                , ( bp::arg("triangle") ) )    
            .def( 
                "beginConnected"
                , (bool ( ::osgUtil::EdgeCollector::Edge::* )( ::osgUtil::EdgeCollector::Edge const & ) const)( &::osgUtil::EdgeCollector::Edge::beginConnected )
                , ( bp::arg("rhs") ) )    
            .def( 
                "clear"
                , (void ( ::osgUtil::EdgeCollector::Edge::* )(  ) )( &::osgUtil::EdgeCollector::Edge::clear ) )    
            .def( 
                "endConnected"
                , (bool ( ::osgUtil::EdgeCollector::Edge::* )( ::osgUtil::EdgeCollector::Edge const & ) const)( &::osgUtil::EdgeCollector::Edge::endConnected )
                , ( bp::arg("rhs") ) )    
            .def( 
                "isAdjacentToBoundary"
                , (bool ( ::osgUtil::EdgeCollector::Edge::* )(  ) const)( &::osgUtil::EdgeCollector::Edge::isAdjacentToBoundary ) )    
            .def( 
                "isBoundaryEdge"
                , (bool ( ::osgUtil::EdgeCollector::Edge::* )(  ) const)( &::osgUtil::EdgeCollector::Edge::isBoundaryEdge ) )    
            .def( bp::self != bp::self )    
            .def( bp::self < bp::self )    
            .def( bp::self == bp::self )    
            .def( 
                "setOrderedPoints"
                , (void ( ::osgUtil::EdgeCollector::Edge::* )( ::osgUtil::EdgeCollector::Point *,::osgUtil::EdgeCollector::Point * ) )( &::osgUtil::EdgeCollector::Edge::setOrderedPoints )
                , ( bp::arg("p1"), bp::arg("p2") ) )    
            .def_readwrite( "_op1", &osgUtil::EdgeCollector::Edge::_op1 )    
            .def_readwrite( "_op2", &osgUtil::EdgeCollector::Edge::_op2 )    
            .def_readwrite( "_p1", &osgUtil::EdgeCollector::Edge::_p1 )    
            .def_readwrite( "_p2", &osgUtil::EdgeCollector::Edge::_p2 )    
            .def_readwrite( "_triangles", &osgUtil::EdgeCollector::Edge::_triangles );
        bp::class_< osgUtil::EdgeCollector::Edgeloop, bp::bases< ::osg::Referenced >, osg::ref_ptr< ::osgUtil::EdgeCollector::Edgeloop >, boost::noncopyable >( "Edgeloop" )    
            .def( 
                "isClosed"
                , (bool ( ::osgUtil::EdgeCollector::Edgeloop::* )(  ) )( &::osgUtil::EdgeCollector::Edgeloop::isClosed ) )    
            .def( 
                "toIndexArray"
                , (::osg::UIntArray * ( ::osgUtil::EdgeCollector::Edgeloop::* )(  ) const)( &::osgUtil::EdgeCollector::Edgeloop::toIndexArray )
                , bp::return_internal_reference< >() )    
            .def_readwrite( "_edgeList", &osgUtil::EdgeCollector::Edgeloop::_edgeList );
        bp::class_< osgUtil::EdgeCollector::Point, bp::bases< ::osg::Referenced >, osg::ref_ptr< ::osgUtil::EdgeCollector::Point >, boost::noncopyable >( "Point", bp::init< >() )    
            .def( 
                "clear"
                , (void ( ::osgUtil::EdgeCollector::Point::* )(  ) )( &::osgUtil::EdgeCollector::Point::clear ) )    
            .def( 
                "isBoundaryPoint"
                , (bool ( ::osgUtil::EdgeCollector::Point::* )(  ) const)( &::osgUtil::EdgeCollector::Point::isBoundaryPoint ) )    
            .def( bp::self < bp::self )    
            .def_readwrite( "_index", &osgUtil::EdgeCollector::Point::_index )    
            .def_readwrite( "_protected", &osgUtil::EdgeCollector::Point::_protected )    
            .def_readwrite( "_triangles", &osgUtil::EdgeCollector::Point::_triangles )    
            .def_readwrite( "_vertex", &osgUtil::EdgeCollector::Point::_vertex );
        bp::class_< osgUtil::EdgeCollector::Triangle, bp::bases< ::osg::Referenced >, osg::ref_ptr< ::osgUtil::EdgeCollector::Triangle >, boost::noncopyable >( "Triangle", bp::init< >() )    
            .def( 
                "clear"
                , (void ( ::osgUtil::EdgeCollector::Triangle::* )(  ) )( &::osgUtil::EdgeCollector::Triangle::clear ) )    
            .def( 
                "distance"
                , (float ( ::osgUtil::EdgeCollector::Triangle::* )( ::osg::Vec3 const & ) const)( &::osgUtil::EdgeCollector::Triangle::distance )
                , ( bp::arg("vertex") ) )    
            .def( 
                "isBoundaryTriangle"
                , (bool ( ::osgUtil::EdgeCollector::Triangle::* )(  ) const)( &::osgUtil::EdgeCollector::Triangle::isBoundaryTriangle ) )    
            .def( bp::self < bp::self )    
            .def( 
                "setOrderedPoints"
                , (void ( ::osgUtil::EdgeCollector::Triangle::* )( ::osgUtil::EdgeCollector::Point *,::osgUtil::EdgeCollector::Point *,::osgUtil::EdgeCollector::Point * ) )( &::osgUtil::EdgeCollector::Triangle::setOrderedPoints )
                , ( bp::arg("p1"), bp::arg("p2"), bp::arg("p3") ) )    
            .def_readwrite( "_e1", &osgUtil::EdgeCollector::Triangle::_e1 )    
            .def_readwrite( "_e2", &osgUtil::EdgeCollector::Triangle::_e2 )    
            .def_readwrite( "_e3", &osgUtil::EdgeCollector::Triangle::_e3 )    
            .def_readwrite( "_op1", &osgUtil::EdgeCollector::Triangle::_op1 )    
            .def_readwrite( "_op2", &osgUtil::EdgeCollector::Triangle::_op2 )    
            .def_readwrite( "_op3", &osgUtil::EdgeCollector::Triangle::_op3 )    
            .def_readwrite( "_p1", &osgUtil::EdgeCollector::Triangle::_p1 )    
            .def_readwrite( "_p2", &osgUtil::EdgeCollector::Triangle::_p2 )    
            .def_readwrite( "_p3", &osgUtil::EdgeCollector::Triangle::_p3 )    
            .def_readwrite( "_plane", &osgUtil::EdgeCollector::Triangle::_plane );
        { //::osgUtil::EdgeCollector::addEdge
        
            typedef ::osgUtil::EdgeCollector::Edge * ( ::osgUtil::EdgeCollector::*addEdge_function_type )( ::osgUtil::EdgeCollector::Triangle *,::osgUtil::EdgeCollector::Point *,::osgUtil::EdgeCollector::Point * ) ;
            
            EdgeCollector_exposer.def( 
                "addEdge"
                , addEdge_function_type( &::osgUtil::EdgeCollector::addEdge )
                , ( bp::arg("triangle"), bp::arg("p1"), bp::arg("p2") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::EdgeCollector::addPoint
        
            typedef ::osgUtil::EdgeCollector::Point * ( ::osgUtil::EdgeCollector::*addPoint_function_type )( ::osgUtil::EdgeCollector::Triangle *,unsigned int ) ;
            
            EdgeCollector_exposer.def( 
                "addPoint"
                , addPoint_function_type( &::osgUtil::EdgeCollector::addPoint )
                , ( bp::arg("triangle"), bp::arg("p1") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::EdgeCollector::addPoint
        
            typedef ::osgUtil::EdgeCollector::Point * ( ::osgUtil::EdgeCollector::*addPoint_function_type )( ::osgUtil::EdgeCollector::Triangle *,::osgUtil::EdgeCollector::Point * ) ;
            
            EdgeCollector_exposer.def( 
                "addPoint"
                , addPoint_function_type( &::osgUtil::EdgeCollector::addPoint )
                , ( bp::arg("triangle"), bp::arg("point") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::EdgeCollector::addTriangle
        
            typedef ::osgUtil::EdgeCollector::Triangle * ( ::osgUtil::EdgeCollector::*addTriangle_function_type )( unsigned int,unsigned int,unsigned int ) ;
            
            EdgeCollector_exposer.def( 
                "addTriangle"
                , addTriangle_function_type( &::osgUtil::EdgeCollector::addTriangle )
                , ( bp::arg("p1"), bp::arg("p2"), bp::arg("p3") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::EdgeCollector::addTriangle
        
            typedef ::osgUtil::EdgeCollector::Triangle * ( ::osgUtil::EdgeCollector::*addTriangle_function_type )( ::osgUtil::EdgeCollector::Point *,::osgUtil::EdgeCollector::Point *,::osgUtil::EdgeCollector::Point * ) ;
            
            EdgeCollector_exposer.def( 
                "addTriangle"
                , addTriangle_function_type( &::osgUtil::EdgeCollector::addTriangle )
                , ( bp::arg("p1"), bp::arg("p2"), bp::arg("p3") )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::EdgeCollector::extractBoundaryEdgeloop
        
            typedef bool ( ::osgUtil::EdgeCollector::*extractBoundaryEdgeloop_function_type )( ::std::vector< osg::ref_ptr<osgUtil::EdgeCollector::Edge> > &,::osgUtil::EdgeCollector::Edgeloop & ) ;
            
            EdgeCollector_exposer.def( 
                "extractBoundaryEdgeloop"
                , extractBoundaryEdgeloop_function_type( &::osgUtil::EdgeCollector::extractBoundaryEdgeloop )
                , ( bp::arg("el"), bp::arg("edgeloop") ) );
        
        }
        { //::osgUtil::EdgeCollector::extractBoundaryEdgeloopList
        
            typedef bool ( ::osgUtil::EdgeCollector::*extractBoundaryEdgeloopList_function_type )( ::std::vector< osg::ref_ptr<osgUtil::EdgeCollector::Edge> > &,::std::list< osg::ref_ptr<osgUtil::EdgeCollector::Edgeloop> > & ) ;
            
            EdgeCollector_exposer.def( 
                "extractBoundaryEdgeloopList"
                , extractBoundaryEdgeloopList_function_type( &::osgUtil::EdgeCollector::extractBoundaryEdgeloopList )
                , ( bp::arg("el"), bp::arg("edgeloopList") ) );
        
        }
        { //::osgUtil::EdgeCollector::getBoundaryEdgeList
        
            typedef void ( ::osgUtil::EdgeCollector::*getBoundaryEdgeList_function_type )( ::std::vector< osg::ref_ptr<osgUtil::EdgeCollector::Edge> > & ) ;
            
            EdgeCollector_exposer.def( 
                "getBoundaryEdgeList"
                , getBoundaryEdgeList_function_type( &::osgUtil::EdgeCollector::getBoundaryEdgeList )
                , ( bp::arg("el") ) );
        
        }
        { //::osgUtil::EdgeCollector::getEdgeloopIndexList
        
            typedef void ( ::osgUtil::EdgeCollector::*getEdgeloopIndexList_function_type )( ::std::list< osg::ref_ptr<osg::TemplateIndexArray<unsigned int, (osg::Array::Type)6, 1, 5125> > > & ) ;
            
            EdgeCollector_exposer.def( 
                "getEdgeloopIndexList"
                , getEdgeloopIndexList_function_type( &::osgUtil::EdgeCollector::getEdgeloopIndexList )
                , ( bp::arg("ial") ) );
        
        }
        { //::osgUtil::EdgeCollector::getGeometry
        
            typedef ::osg::Geometry * ( ::osgUtil::EdgeCollector::*getGeometry_function_type )(  ) ;
            
            EdgeCollector_exposer.def( 
                "getGeometry"
                , getGeometry_function_type( &::osgUtil::EdgeCollector::getGeometry )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::EdgeCollector::getNumOfTriangles
        
            typedef unsigned int ( ::osgUtil::EdgeCollector::*getNumOfTriangles_function_type )(  ) ;
            
            EdgeCollector_exposer.def( 
                "getNumOfTriangles"
                , getNumOfTriangles_function_type( &::osgUtil::EdgeCollector::getNumOfTriangles ) );
        
        }
        { //::osgUtil::EdgeCollector::setGeometry
        
            typedef void ( ::osgUtil::EdgeCollector::*setGeometry_function_type )( ::osg::Geometry * ) ;
            
            EdgeCollector_exposer.def( 
                "setGeometry"
                , setGeometry_function_type( &::osgUtil::EdgeCollector::setGeometry )
                , ( bp::arg("geometry") ) );
        
        }
        EdgeCollector_exposer.def_readwrite( "_edgeSet", &osgUtil::EdgeCollector::_edgeSet );
        EdgeCollector_exposer.add_property( "_geometry"
                    , bp::make_function( (::osg::Geometry * (*)( ::osgUtil::EdgeCollector const & ))(&EdgeCollector_wrapper::get__geometry), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::osgUtil::EdgeCollector &,::osg::Geometry * ))(&EdgeCollector_wrapper::set__geometry), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
        EdgeCollector_exposer.def_readwrite( "_originalPointList", &osgUtil::EdgeCollector::_originalPointList );
        EdgeCollector_exposer.def_readwrite( "_pointSet", &osgUtil::EdgeCollector::_pointSet );
        EdgeCollector_exposer.def_readwrite( "_triangleSet", &osgUtil::EdgeCollector::_triangleSet );
    }

}
