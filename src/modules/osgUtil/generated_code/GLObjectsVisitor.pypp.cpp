// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgUtil.h"
#include "wrap_referenced.h"
#include "GLObjectsVisitor.pypp.hpp"

namespace bp = boost::python;

struct GLObjectsVisitor_wrapper : osgUtil::GLObjectsVisitor, bp::wrapper< osgUtil::GLObjectsVisitor > {

    GLObjectsVisitor_wrapper(unsigned int mode=268 )
    : osgUtil::GLObjectsVisitor( mode )
      , bp::wrapper< osgUtil::GLObjectsVisitor >(){
        // constructor
    
    }

    virtual void apply( ::osg::Node & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osgUtil::GLObjectsVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Node & node ) {
        osgUtil::GLObjectsVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Geode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osgUtil::GLObjectsVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Geode & node ) {
        osgUtil::GLObjectsVisitor::apply( boost::ref(node) );
    }

    virtual char const * className(  ) const  {
        if( bp::override func_className = this->get_override( "className" ) )
            return func_className(  );
        else{
            return this->osgUtil::GLObjectsVisitor::className(  );
        }
    }
    
    char const * default_className(  ) const  {
        return osgUtil::GLObjectsVisitor::className( );
    }

    virtual char const * libraryName(  ) const  {
        if( bp::override func_libraryName = this->get_override( "libraryName" ) )
            return func_libraryName(  );
        else{
            return this->osgUtil::GLObjectsVisitor::libraryName(  );
        }
    }
    
    char const * default_libraryName(  ) const  {
        return osgUtil::GLObjectsVisitor::libraryName( );
    }

    virtual void reset(  ) {
        if( bp::override func_reset = this->get_override( "reset" ) )
            func_reset(  );
        else{
            this->osgUtil::GLObjectsVisitor::reset(  );
        }
    }
    
    void default_reset(  ) {
        osgUtil::GLObjectsVisitor::reset( );
    }

    virtual void apply( ::osg::Billboard & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Billboard & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Group & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Group & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::ProxyNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::ProxyNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Projection & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Projection & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::CoordinateSystemNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::CoordinateSystemNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::ClipNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::ClipNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::TexGenNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::TexGenNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::LightSource & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::LightSource & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Transform & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Transform & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Camera & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Camera & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::CameraView & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::CameraView & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::MatrixTransform & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::MatrixTransform & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::PositionAttitudeTransform & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::PositionAttitudeTransform & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Switch & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Switch & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::Sequence & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::Sequence & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::LOD & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::LOD & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::PagedLOD & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::PagedLOD & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::ClearNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::ClearNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::OccluderNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::OccluderNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual void apply( ::osg::OcclusionQueryNode & node ) {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(node) );
        else{
            this->osg::NodeVisitor::apply( boost::ref(node) );
        }
    }
    
    void default_apply( ::osg::OcclusionQueryNode & node ) {
        osg::NodeVisitor::apply( boost::ref(node) );
    }

    virtual float getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        if( bp::override func_getDistanceFromEyePoint = this->get_override( "getDistanceFromEyePoint" ) )
            return func_getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        else{
            return this->osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
        }
    }
    
    float default_getDistanceFromEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        return osg::NodeVisitor::getDistanceFromEyePoint( boost::ref(arg0), arg1 );
    }

    virtual float getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        if( bp::override func_getDistanceToEyePoint = this->get_override( "getDistanceToEyePoint" ) )
            return func_getDistanceToEyePoint( boost::ref(arg0), arg1 );
        else{
            return this->osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
        }
    }
    
    float default_getDistanceToEyePoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        return osg::NodeVisitor::getDistanceToEyePoint( boost::ref(arg0), arg1 );
    }

    virtual float getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        if( bp::override func_getDistanceToViewPoint = this->get_override( "getDistanceToViewPoint" ) )
            return func_getDistanceToViewPoint( boost::ref(arg0), arg1 );
        else{
            return this->osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
        }
    }
    
    float default_getDistanceToViewPoint( ::osg::Vec3 const & arg0, bool arg1 ) const  {
        return osg::NodeVisitor::getDistanceToViewPoint( boost::ref(arg0), arg1 );
    }

    virtual ::osg::Vec3 getEyePoint(  ) const  {
        if( bp::override func_getEyePoint = this->get_override( "getEyePoint" ) )
            return func_getEyePoint(  );
        else{
            return this->osg::NodeVisitor::getEyePoint(  );
        }
    }
    
    ::osg::Vec3 default_getEyePoint(  ) const  {
        return osg::NodeVisitor::getEyePoint( );
    }

    virtual ::osg::Vec3 getViewPoint(  ) const  {
        if( bp::override func_getViewPoint = this->get_override( "getViewPoint" ) )
            return func_getViewPoint(  );
        else{
            return this->osg::NodeVisitor::getViewPoint(  );
        }
    }
    
    ::osg::Vec3 default_getViewPoint(  ) const  {
        return osg::NodeVisitor::getViewPoint( );
    }

};

void register_GLObjectsVisitor_class(){

    { //::osgUtil::GLObjectsVisitor
        typedef bp::class_< GLObjectsVisitor_wrapper, bp::bases< ::osg::NodeVisitor >, osg::ref_ptr< GLObjectsVisitor_wrapper >, boost::noncopyable > GLObjectsVisitor_exposer_t;
        GLObjectsVisitor_exposer_t GLObjectsVisitor_exposer = GLObjectsVisitor_exposer_t( "GLObjectsVisitor", bp::init< bp::optional< unsigned int > >(( bp::arg("mode")=(unsigned int)(268) )) );
        bp::scope GLObjectsVisitor_scope( GLObjectsVisitor_exposer );
        bp::enum_< osgUtil::GLObjectsVisitor::ModeValues>("ModeValues")
            .value("SWITCH_ON_DISPLAY_LISTS", osgUtil::GLObjectsVisitor::SWITCH_ON_DISPLAY_LISTS)
            .value("SWITCH_OFF_DISPLAY_LISTS", osgUtil::GLObjectsVisitor::SWITCH_OFF_DISPLAY_LISTS)
            .value("COMPILE_DISPLAY_LISTS", osgUtil::GLObjectsVisitor::COMPILE_DISPLAY_LISTS)
            .value("COMPILE_STATE_ATTRIBUTES", osgUtil::GLObjectsVisitor::COMPILE_STATE_ATTRIBUTES)
            .value("RELEASE_DISPLAY_LISTS", osgUtil::GLObjectsVisitor::RELEASE_DISPLAY_LISTS)
            .value("RELEASE_STATE_ATTRIBUTES", osgUtil::GLObjectsVisitor::RELEASE_STATE_ATTRIBUTES)
            .value("SWITCH_ON_VERTEX_BUFFER_OBJECTS", osgUtil::GLObjectsVisitor::SWITCH_ON_VERTEX_BUFFER_OBJECTS)
            .value("SWITCH_OFF_VERTEX_BUFFER_OBJECTS", osgUtil::GLObjectsVisitor::SWITCH_OFF_VERTEX_BUFFER_OBJECTS)
            .value("CHECK_BLACK_LISTED_MODES", osgUtil::GLObjectsVisitor::CHECK_BLACK_LISTED_MODES)
            .export_values()
            ;
        bp::implicitly_convertible< unsigned int, osgUtil::GLObjectsVisitor >();
        { //::osgUtil::GLObjectsVisitor::apply
        
            typedef void ( ::osgUtil::GLObjectsVisitor::*apply_function_type )( ::osg::Node & ) ;
            typedef void ( GLObjectsVisitor_wrapper::*default_apply_function_type )( ::osg::Node & ) ;
            
            GLObjectsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::GLObjectsVisitor::apply)
                , default_apply_function_type(&GLObjectsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osgUtil::GLObjectsVisitor::apply
        
            typedef void ( ::osgUtil::GLObjectsVisitor::*apply_function_type )( ::osg::Geode & ) ;
            typedef void ( GLObjectsVisitor_wrapper::*default_apply_function_type )( ::osg::Geode & ) ;
            
            GLObjectsVisitor_exposer.def( 
                "apply"
                , apply_function_type(&::osgUtil::GLObjectsVisitor::apply)
                , default_apply_function_type(&GLObjectsVisitor_wrapper::default_apply)
                , ( bp::arg("node") ) );
        
        }
        { //::osgUtil::GLObjectsVisitor::apply
        
            typedef void ( ::osgUtil::GLObjectsVisitor::*apply_function_type )( ::osg::Drawable & ) ;
            
            GLObjectsVisitor_exposer.def( 
                "apply"
                , apply_function_type( &::osgUtil::GLObjectsVisitor::apply )
                , ( bp::arg("drawable") ) );
        
        }
        { //::osgUtil::GLObjectsVisitor::apply
        
            typedef void ( ::osgUtil::GLObjectsVisitor::*apply_function_type )( ::osg::StateSet & ) ;
            
            GLObjectsVisitor_exposer.def( 
                "apply"
                , apply_function_type( &::osgUtil::GLObjectsVisitor::apply )
                , ( bp::arg("stateset") ) );
        
        }
        { //::osgUtil::GLObjectsVisitor::className
        
            typedef char const * ( ::osgUtil::GLObjectsVisitor::*className_function_type )(  ) const;
            typedef char const * ( GLObjectsVisitor_wrapper::*default_className_function_type )(  ) const;
            
            GLObjectsVisitor_exposer.def( 
                "className"
                , className_function_type(&::osgUtil::GLObjectsVisitor::className)
                , default_className_function_type(&GLObjectsVisitor_wrapper::default_className) );
        
        }
        { //::osgUtil::GLObjectsVisitor::getMode
        
            typedef unsigned int ( ::osgUtil::GLObjectsVisitor::*getMode_function_type )(  ) const;
            
            GLObjectsVisitor_exposer.def( 
                "getMode"
                , getMode_function_type( &::osgUtil::GLObjectsVisitor::getMode ) );
        
        }
        { //::osgUtil::GLObjectsVisitor::getRenderInfo
        
            typedef ::osg::RenderInfo & ( ::osgUtil::GLObjectsVisitor::*getRenderInfo_function_type )(  ) ;
            
            GLObjectsVisitor_exposer.def( 
                "getRenderInfo"
                , getRenderInfo_function_type( &::osgUtil::GLObjectsVisitor::getRenderInfo )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::GLObjectsVisitor::getState
        
            typedef ::osg::State * ( ::osgUtil::GLObjectsVisitor::*getState_function_type )(  ) ;
            
            GLObjectsVisitor_exposer.def( 
                "getState"
                , getState_function_type( &::osgUtil::GLObjectsVisitor::getState )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::GLObjectsVisitor::libraryName
        
            typedef char const * ( ::osgUtil::GLObjectsVisitor::*libraryName_function_type )(  ) const;
            typedef char const * ( GLObjectsVisitor_wrapper::*default_libraryName_function_type )(  ) const;
            
            GLObjectsVisitor_exposer.def( 
                "libraryName"
                , libraryName_function_type(&::osgUtil::GLObjectsVisitor::libraryName)
                , default_libraryName_function_type(&GLObjectsVisitor_wrapper::default_libraryName) );
        
        }
        { //::osgUtil::GLObjectsVisitor::reset
        
            typedef void ( ::osgUtil::GLObjectsVisitor::*reset_function_type )(  ) ;
            typedef void ( GLObjectsVisitor_wrapper::*default_reset_function_type )(  ) ;
            
            GLObjectsVisitor_exposer.def( 
                "reset"
                , reset_function_type(&::osgUtil::GLObjectsVisitor::reset)
                , default_reset_function_type(&GLObjectsVisitor_wrapper::default_reset) );
        
        }
        { //::osgUtil::GLObjectsVisitor::setMode
        
            typedef void ( ::osgUtil::GLObjectsVisitor::*setMode_function_type )( unsigned int ) ;
            
            GLObjectsVisitor_exposer.def( 
                "setMode"
                , setMode_function_type( &::osgUtil::GLObjectsVisitor::setMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::osgUtil::GLObjectsVisitor::setRenderInfo
        
            typedef void ( ::osgUtil::GLObjectsVisitor::*setRenderInfo_function_type )( ::osg::RenderInfo & ) ;
            
            GLObjectsVisitor_exposer.def( 
                "setRenderInfo"
                , setRenderInfo_function_type( &::osgUtil::GLObjectsVisitor::setRenderInfo )
                , ( bp::arg("renderInfo") ) );
        
        }
        { //::osgUtil::GLObjectsVisitor::setState
        
            typedef void ( ::osgUtil::GLObjectsVisitor::*setState_function_type )( ::osg::State * ) ;
            
            GLObjectsVisitor_exposer.def( 
                "setState"
                , setState_function_type( &::osgUtil::GLObjectsVisitor::setState )
                , ( bp::arg("state") ) );
        
        }
    }

}
