// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgUtil.h"
#include "wrap_referenced.h"
#include "DelaunayTriangulator.pypp.hpp"

namespace bp = boost::python;

struct DelaunayTriangulator_wrapper : osgUtil::DelaunayTriangulator, bp::wrapper< osgUtil::DelaunayTriangulator > {

    DelaunayTriangulator_wrapper( )
    : osgUtil::DelaunayTriangulator( )
      , bp::wrapper< osgUtil::DelaunayTriangulator >(){
        // null constructor
    
    }

    DelaunayTriangulator_wrapper(::osg::Vec3Array * points, ::osg::Vec3Array * normals=0 )
    : osgUtil::DelaunayTriangulator( boost::python::ptr(points), boost::python::ptr(normals) )
      , bp::wrapper< osgUtil::DelaunayTriangulator >(){
        // constructor
    
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_DelaunayTriangulator_class(){

    { //::osgUtil::DelaunayTriangulator
        typedef bp::class_< DelaunayTriangulator_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< DelaunayTriangulator_wrapper >, boost::noncopyable > DelaunayTriangulator_exposer_t;
        DelaunayTriangulator_exposer_t DelaunayTriangulator_exposer = DelaunayTriangulator_exposer_t( "DelaunayTriangulator", bp::no_init );
        bp::scope DelaunayTriangulator_scope( DelaunayTriangulator_exposer );
        DelaunayTriangulator_exposer.def( bp::init< >() );
        DelaunayTriangulator_exposer.def( bp::init< osg::Vec3Array *, bp::optional< osg::Vec3Array * > >(( bp::arg("points"), bp::arg("normals")=bp::object() )) );
        bp::implicitly_convertible< osg::Vec3Array *, osgUtil::DelaunayTriangulator >();
        { //::osgUtil::DelaunayTriangulator::addInputConstraint
        
            typedef void ( ::osgUtil::DelaunayTriangulator::*addInputConstraint_function_type )( ::osgUtil::DelaunayConstraint * ) ;
            
            DelaunayTriangulator_exposer.def( 
                "addInputConstraint"
                , addInputConstraint_function_type( &::osgUtil::DelaunayTriangulator::addInputConstraint )
                , ( bp::arg("dc") ) );
        
        }
        { //::osgUtil::DelaunayTriangulator::getInputPointArray
        
            typedef ::osg::Vec3Array const * ( ::osgUtil::DelaunayTriangulator::*getInputPointArray_function_type )(  ) const;
            
            DelaunayTriangulator_exposer.def( 
                "getInputPointArray"
                , getInputPointArray_function_type( &::osgUtil::DelaunayTriangulator::getInputPointArray )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::DelaunayTriangulator::getInputPointArray
        
            typedef ::osg::Vec3Array * ( ::osgUtil::DelaunayTriangulator::*getInputPointArray_function_type )(  ) ;
            
            DelaunayTriangulator_exposer.def( 
                "getInputPointArray"
                , getInputPointArray_function_type( &::osgUtil::DelaunayTriangulator::getInputPointArray )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::DelaunayTriangulator::getOutputNormalArray
        
            typedef ::osg::Vec3Array const * ( ::osgUtil::DelaunayTriangulator::*getOutputNormalArray_function_type )(  ) const;
            
            DelaunayTriangulator_exposer.def( 
                "getOutputNormalArray"
                , getOutputNormalArray_function_type( &::osgUtil::DelaunayTriangulator::getOutputNormalArray )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::DelaunayTriangulator::getOutputNormalArray
        
            typedef ::osg::Vec3Array * ( ::osgUtil::DelaunayTriangulator::*getOutputNormalArray_function_type )(  ) ;
            
            DelaunayTriangulator_exposer.def( 
                "getOutputNormalArray"
                , getOutputNormalArray_function_type( &::osgUtil::DelaunayTriangulator::getOutputNormalArray )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::DelaunayTriangulator::getTriangles
        
            typedef ::osg::DrawElementsUInt const * ( ::osgUtil::DelaunayTriangulator::*getTriangles_function_type )(  ) const;
            
            DelaunayTriangulator_exposer.def( 
                "getTriangles"
                , getTriangles_function_type( &::osgUtil::DelaunayTriangulator::getTriangles )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::DelaunayTriangulator::getTriangles
        
            typedef ::osg::DrawElementsUInt * ( ::osgUtil::DelaunayTriangulator::*getTriangles_function_type )(  ) ;
            
            DelaunayTriangulator_exposer.def( 
                "getTriangles"
                , getTriangles_function_type( &::osgUtil::DelaunayTriangulator::getTriangles )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::DelaunayTriangulator::removeInternalTriangles
        
            typedef void ( ::osgUtil::DelaunayTriangulator::*removeInternalTriangles_function_type )( ::osgUtil::DelaunayConstraint * ) ;
            
            DelaunayTriangulator_exposer.def( 
                "removeInternalTriangles"
                , removeInternalTriangles_function_type( &::osgUtil::DelaunayTriangulator::removeInternalTriangles )
                , ( bp::arg("constraint") ) );
        
        }
        { //::osgUtil::DelaunayTriangulator::setInputPointArray
        
            typedef void ( ::osgUtil::DelaunayTriangulator::*setInputPointArray_function_type )( ::osg::Vec3Array * ) ;
            
            DelaunayTriangulator_exposer.def( 
                "setInputPointArray"
                , setInputPointArray_function_type( &::osgUtil::DelaunayTriangulator::setInputPointArray )
                , ( bp::arg("points") ) );
        
        }
        { //::osgUtil::DelaunayTriangulator::setOutputNormalArray
        
            typedef void ( ::osgUtil::DelaunayTriangulator::*setOutputNormalArray_function_type )( ::osg::Vec3Array * ) ;
            
            DelaunayTriangulator_exposer.def( 
                "setOutputNormalArray"
                , setOutputNormalArray_function_type( &::osgUtil::DelaunayTriangulator::setOutputNormalArray )
                , ( bp::arg("normals") ) );
        
        }
        { //::osgUtil::DelaunayTriangulator::triangulate
        
            typedef bool ( ::osgUtil::DelaunayTriangulator::*triangulate_function_type )(  ) ;
            
            DelaunayTriangulator_exposer.def( 
                "triangulate"
                , triangulate_function_type( &::osgUtil::DelaunayTriangulator::triangulate ) );
        
        }
    }

}
