// This file has been generated by Py++.

#include "boost/python.hpp"
#include "wrap_osgUtil.h"
#include "wrap_referenced.h"
#include "IncrementalCompileOperation.pypp.hpp"

namespace bp = boost::python;

struct IncrementalCompileOperation_wrapper : osgUtil::IncrementalCompileOperation, bp::wrapper< osgUtil::IncrementalCompileOperation > {

    struct CompileCompletedCallback_wrapper : osgUtil::IncrementalCompileOperation::CompileCompletedCallback, bp::wrapper< osgUtil::IncrementalCompileOperation::CompileCompletedCallback > {
    
        CompileCompletedCallback_wrapper()
        : osgUtil::IncrementalCompileOperation::CompileCompletedCallback()
          , bp::wrapper< osgUtil::IncrementalCompileOperation::CompileCompletedCallback >(){
            // null constructor
            
        }
    
        virtual bool compileCompleted( ::osgUtil::IncrementalCompileOperation::CompileSet * compileSet ){
            bp::override func_compileCompleted = this->get_override( "compileCompleted" );
            return func_compileCompleted( boost::python::ptr(compileSet) );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    struct CompileOp_wrapper : osgUtil::IncrementalCompileOperation::CompileOp, bp::wrapper< osgUtil::IncrementalCompileOperation::CompileOp > {
    
        CompileOp_wrapper()
        : osgUtil::IncrementalCompileOperation::CompileOp()
          , bp::wrapper< osgUtil::IncrementalCompileOperation::CompileOp >(){
            // null constructor
            
        }
    
        virtual bool compile( ::osgUtil::IncrementalCompileOperation::CompileInfo & compileInfo ){
            bp::override func_compile = this->get_override( "compile" );
            return func_compile( boost::ref(compileInfo) );
        }
    
        virtual double estimatedTimeForCompile( ::osgUtil::IncrementalCompileOperation::CompileInfo & compileInfo ) const {
            bp::override func_estimatedTimeForCompile = this->get_override( "estimatedTimeForCompile" );
            return func_estimatedTimeForCompile( boost::ref(compileInfo) );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    struct CompileDrawableOp_wrapper : osgUtil::IncrementalCompileOperation::CompileDrawableOp, bp::wrapper< osgUtil::IncrementalCompileOperation::CompileDrawableOp > {
    
        CompileDrawableOp_wrapper(::osg::Drawable * drawable )
        : osgUtil::IncrementalCompileOperation::CompileDrawableOp( boost::python::ptr(drawable) )
          , bp::wrapper< osgUtil::IncrementalCompileOperation::CompileDrawableOp >(){
            // constructor
        
        }
    
        virtual bool compile( ::osgUtil::IncrementalCompileOperation::CompileInfo & compileInfo ) {
            if( bp::override func_compile = this->get_override( "compile" ) )
                return func_compile( boost::ref(compileInfo) );
            else{
                return this->osgUtil::IncrementalCompileOperation::CompileDrawableOp::compile( boost::ref(compileInfo) );
            }
        }
        
        bool default_compile( ::osgUtil::IncrementalCompileOperation::CompileInfo & compileInfo ) {
            return osgUtil::IncrementalCompileOperation::CompileDrawableOp::compile( boost::ref(compileInfo) );
        }
    
        virtual double estimatedTimeForCompile( ::osgUtil::IncrementalCompileOperation::CompileInfo & compileInfo ) const  {
            if( bp::override func_estimatedTimeForCompile = this->get_override( "estimatedTimeForCompile" ) )
                return func_estimatedTimeForCompile( boost::ref(compileInfo) );
            else{
                return this->osgUtil::IncrementalCompileOperation::CompileDrawableOp::estimatedTimeForCompile( boost::ref(compileInfo) );
            }
        }
        
        double default_estimatedTimeForCompile( ::osgUtil::IncrementalCompileOperation::CompileInfo & compileInfo ) const  {
            return osgUtil::IncrementalCompileOperation::CompileDrawableOp::estimatedTimeForCompile( boost::ref(compileInfo) );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    struct CompileInfo_wrapper : osgUtil::IncrementalCompileOperation::CompileInfo, bp::wrapper< osgUtil::IncrementalCompileOperation::CompileInfo > {
    
        CompileInfo_wrapper(osgUtil::IncrementalCompileOperation::CompileInfo const & arg )
        : osgUtil::IncrementalCompileOperation::CompileInfo( arg )
          , bp::wrapper< osgUtil::IncrementalCompileOperation::CompileInfo >(){
            // copy constructor
            
        }
    
        CompileInfo_wrapper(::osg::GraphicsContext * context, ::osgUtil::IncrementalCompileOperation * ico )
        : osgUtil::IncrementalCompileOperation::CompileInfo( boost::python::ptr(context), boost::python::ptr(ico) )
          , bp::wrapper< osgUtil::IncrementalCompileOperation::CompileInfo >(){
            // constructor
        
        }
    
        static ::osgUtil::IncrementalCompileOperation * get_incrementalCompileOperation(osgUtil::IncrementalCompileOperation::CompileInfo const & inst ){
            return inst.incrementalCompileOperation;
        }
        
        static void set_incrementalCompileOperation( osgUtil::IncrementalCompileOperation::CompileInfo & inst, ::osgUtil::IncrementalCompileOperation * new_value ){ 
            inst.incrementalCompileOperation = new_value;
        }
    
    };

    struct CompileProgramOp_wrapper : osgUtil::IncrementalCompileOperation::CompileProgramOp, bp::wrapper< osgUtil::IncrementalCompileOperation::CompileProgramOp > {
    
        CompileProgramOp_wrapper(::osg::Program * program )
        : osgUtil::IncrementalCompileOperation::CompileProgramOp( boost::python::ptr(program) )
          , bp::wrapper< osgUtil::IncrementalCompileOperation::CompileProgramOp >(){
            // constructor
        
        }
    
        virtual bool compile( ::osgUtil::IncrementalCompileOperation::CompileInfo & compileInfo ) {
            if( bp::override func_compile = this->get_override( "compile" ) )
                return func_compile( boost::ref(compileInfo) );
            else{
                return this->osgUtil::IncrementalCompileOperation::CompileProgramOp::compile( boost::ref(compileInfo) );
            }
        }
        
        bool default_compile( ::osgUtil::IncrementalCompileOperation::CompileInfo & compileInfo ) {
            return osgUtil::IncrementalCompileOperation::CompileProgramOp::compile( boost::ref(compileInfo) );
        }
    
        virtual double estimatedTimeForCompile( ::osgUtil::IncrementalCompileOperation::CompileInfo & compileInfo ) const  {
            if( bp::override func_estimatedTimeForCompile = this->get_override( "estimatedTimeForCompile" ) )
                return func_estimatedTimeForCompile( boost::ref(compileInfo) );
            else{
                return this->osgUtil::IncrementalCompileOperation::CompileProgramOp::estimatedTimeForCompile( boost::ref(compileInfo) );
            }
        }
        
        double default_estimatedTimeForCompile( ::osgUtil::IncrementalCompileOperation::CompileInfo & compileInfo ) const  {
            return osgUtil::IncrementalCompileOperation::CompileProgramOp::estimatedTimeForCompile( boost::ref(compileInfo) );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    struct CompileSet_wrapper : osgUtil::IncrementalCompileOperation::CompileSet, bp::wrapper< osgUtil::IncrementalCompileOperation::CompileSet > {
    
        CompileSet_wrapper( )
        : osgUtil::IncrementalCompileOperation::CompileSet( )
          , bp::wrapper< osgUtil::IncrementalCompileOperation::CompileSet >(){
            // null constructor
        
        }
    
        CompileSet_wrapper(::osg::Node * subgraphToCompile )
        : osgUtil::IncrementalCompileOperation::CompileSet( boost::python::ptr(subgraphToCompile) )
          , bp::wrapper< osgUtil::IncrementalCompileOperation::CompileSet >(){
            // constructor
        
        }
    
        CompileSet_wrapper(::osg::Group * attachmentPoint, ::osg::Node * subgraphToCompile )
        : osgUtil::IncrementalCompileOperation::CompileSet( boost::python::ptr(attachmentPoint), boost::python::ptr(subgraphToCompile) )
          , bp::wrapper< osgUtil::IncrementalCompileOperation::CompileSet >(){
            // constructor
        
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    struct CompileTextureOp_wrapper : osgUtil::IncrementalCompileOperation::CompileTextureOp, bp::wrapper< osgUtil::IncrementalCompileOperation::CompileTextureOp > {
    
        CompileTextureOp_wrapper(::osg::Texture * texture )
        : osgUtil::IncrementalCompileOperation::CompileTextureOp( boost::python::ptr(texture) )
          , bp::wrapper< osgUtil::IncrementalCompileOperation::CompileTextureOp >(){
            // constructor
        
        }
    
        virtual bool compile( ::osgUtil::IncrementalCompileOperation::CompileInfo & compileInfo ) {
            if( bp::override func_compile = this->get_override( "compile" ) )
                return func_compile( boost::ref(compileInfo) );
            else{
                return this->osgUtil::IncrementalCompileOperation::CompileTextureOp::compile( boost::ref(compileInfo) );
            }
        }
        
        bool default_compile( ::osgUtil::IncrementalCompileOperation::CompileInfo & compileInfo ) {
            return osgUtil::IncrementalCompileOperation::CompileTextureOp::compile( boost::ref(compileInfo) );
        }
    
        virtual double estimatedTimeForCompile( ::osgUtil::IncrementalCompileOperation::CompileInfo & compileInfo ) const  {
            if( bp::override func_estimatedTimeForCompile = this->get_override( "estimatedTimeForCompile" ) )
                return func_estimatedTimeForCompile( boost::ref(compileInfo) );
            else{
                return this->osgUtil::IncrementalCompileOperation::CompileTextureOp::estimatedTimeForCompile( boost::ref(compileInfo) );
            }
        }
        
        double default_estimatedTimeForCompile( ::osgUtil::IncrementalCompileOperation::CompileInfo & compileInfo ) const  {
            return osgUtil::IncrementalCompileOperation::CompileTextureOp::estimatedTimeForCompile( boost::ref(compileInfo) );
        }
    
        virtual void setThreadSafeRefUnref( bool threadSafe ) {
            if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
                func_setThreadSafeRefUnref( threadSafe );
            else{
                this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
            }
        }
        
        void default_setThreadSafeRefUnref( bool threadSafe ) {
            osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    
    };

    IncrementalCompileOperation_wrapper( )
    : osgUtil::IncrementalCompileOperation( )
      , bp::wrapper< osgUtil::IncrementalCompileOperation >(){
        // null constructor
    
    }

    virtual void operator()( ::osg::GraphicsContext * context ) {
        if( bp::override func___call__ = this->get_override( "__call__" ) )
            func___call__( boost::python::ptr(context) );
        else{
            this->osgUtil::IncrementalCompileOperation::operator()( boost::python::ptr(context) );
        }
    }
    
    void default___call__( ::osg::GraphicsContext * context ) {
        osgUtil::IncrementalCompileOperation::operator()( boost::python::ptr(context) );
    }

    virtual void release(  ) {
        if( bp::override func_release = this->get_override( "release" ) )
            func_release(  );
        else{
            this->osg::Operation::release(  );
        }
    }
    
    void default_release(  ) {
        osg::Operation::release( );
    }

    virtual void setThreadSafeRefUnref( bool threadSafe ) {
        if( bp::override func_setThreadSafeRefUnref = this->get_override( "setThreadSafeRefUnref" ) )
            func_setThreadSafeRefUnref( threadSafe );
        else{
            this->osg::Referenced::setThreadSafeRefUnref( threadSafe );
        }
    }
    
    void default_setThreadSafeRefUnref( bool threadSafe ) {
        osg::Referenced::setThreadSafeRefUnref( threadSafe );
    }

};

void register_IncrementalCompileOperation_class(){

    { //::osgUtil::IncrementalCompileOperation
        typedef bp::class_< IncrementalCompileOperation_wrapper, bp::bases< ::osg::GraphicsOperation >, osg::ref_ptr< IncrementalCompileOperation_wrapper >, boost::noncopyable > IncrementalCompileOperation_exposer_t;
        IncrementalCompileOperation_exposer_t IncrementalCompileOperation_exposer = IncrementalCompileOperation_exposer_t( "IncrementalCompileOperation", bp::no_init );
        bp::scope IncrementalCompileOperation_scope( IncrementalCompileOperation_exposer );
        bp::class_< IncrementalCompileOperation_wrapper::CompileCompletedCallback_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< IncrementalCompileOperation_wrapper::CompileCompletedCallback_wrapper >, boost::noncopyable >( "CompileCompletedCallback", bp::no_init )    
            .def( 
                "compileCompleted"
                , bp::pure_virtual( (bool ( ::osgUtil::IncrementalCompileOperation::CompileCompletedCallback::* )( ::osgUtil::IncrementalCompileOperation::CompileSet * ) )(&::osgUtil::IncrementalCompileOperation::CompileCompletedCallback::compileCompleted) )
                , ( bp::arg("compileSet") ) );
        bp::class_< IncrementalCompileOperation_wrapper::CompileOp_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< IncrementalCompileOperation_wrapper::CompileOp_wrapper >, boost::noncopyable >( "CompileOp", bp::no_init )    
            .def( 
                "compile"
                , bp::pure_virtual( (bool ( ::osgUtil::IncrementalCompileOperation::CompileOp::* )( ::osgUtil::IncrementalCompileOperation::CompileInfo & ) )(&::osgUtil::IncrementalCompileOperation::CompileOp::compile) )
                , ( bp::arg("compileInfo") ) )    
            .def( 
                "estimatedTimeForCompile"
                , bp::pure_virtual( (double ( ::osgUtil::IncrementalCompileOperation::CompileOp::* )( ::osgUtil::IncrementalCompileOperation::CompileInfo & ) const)(&::osgUtil::IncrementalCompileOperation::CompileOp::estimatedTimeForCompile) )
                , ( bp::arg("compileInfo") ) );
        { //::osgUtil::IncrementalCompileOperation::CompileDrawableOp
            typedef bp::class_< IncrementalCompileOperation_wrapper::CompileDrawableOp_wrapper, bp::bases< osgUtil::IncrementalCompileOperation::CompileOp >, osg::ref_ptr< IncrementalCompileOperation_wrapper::CompileDrawableOp_wrapper >, boost::noncopyable > CompileDrawableOp_exposer_t;
            CompileDrawableOp_exposer_t CompileDrawableOp_exposer = CompileDrawableOp_exposer_t( "CompileDrawableOp", bp::init< osg::Drawable * >(( bp::arg("drawable") )) );
            bp::scope CompileDrawableOp_scope( CompileDrawableOp_exposer );
            bp::implicitly_convertible< osg::Drawable *, osgUtil::IncrementalCompileOperation::CompileDrawableOp >();
            { //::osgUtil::IncrementalCompileOperation::CompileDrawableOp::compile
            
                typedef bool ( ::osgUtil::IncrementalCompileOperation::CompileDrawableOp::*compile_function_type )( ::osgUtil::IncrementalCompileOperation::CompileInfo & ) ;
                typedef bool ( IncrementalCompileOperation_wrapper::CompileDrawableOp_wrapper::*default_compile_function_type )( ::osgUtil::IncrementalCompileOperation::CompileInfo & ) ;
                
                CompileDrawableOp_exposer.def( 
                    "compile"
                    , compile_function_type(&::osgUtil::IncrementalCompileOperation::CompileDrawableOp::compile)
                    , default_compile_function_type(&IncrementalCompileOperation_wrapper::CompileDrawableOp_wrapper::default_compile)
                    , ( bp::arg("compileInfo") ) );
            
            }
            { //::osgUtil::IncrementalCompileOperation::CompileDrawableOp::estimatedTimeForCompile
            
                typedef double ( ::osgUtil::IncrementalCompileOperation::CompileDrawableOp::*estimatedTimeForCompile_function_type )( ::osgUtil::IncrementalCompileOperation::CompileInfo & ) const;
                typedef double ( IncrementalCompileOperation_wrapper::CompileDrawableOp_wrapper::*default_estimatedTimeForCompile_function_type )( ::osgUtil::IncrementalCompileOperation::CompileInfo & ) const;
                
                CompileDrawableOp_exposer.def( 
                    "estimatedTimeForCompile"
                    , estimatedTimeForCompile_function_type(&::osgUtil::IncrementalCompileOperation::CompileDrawableOp::estimatedTimeForCompile)
                    , default_estimatedTimeForCompile_function_type(&IncrementalCompileOperation_wrapper::CompileDrawableOp_wrapper::default_estimatedTimeForCompile)
                    , ( bp::arg("compileInfo") ) );
            
            }
            CompileDrawableOp_exposer.def_readwrite( "_drawable", &osgUtil::IncrementalCompileOperation::CompileDrawableOp::_drawable );
        }
        bp::class_< IncrementalCompileOperation_wrapper::CompileInfo_wrapper, bp::bases< ::osg::RenderInfo > >( "CompileInfo", bp::init< osg::GraphicsContext *, osgUtil::IncrementalCompileOperation * >(( bp::arg("context"), bp::arg("ico") )) )    
            .def( 
                "okToCompile"
                , (bool ( ::osgUtil::IncrementalCompileOperation::CompileInfo::* )( double ) const)( &::osgUtil::IncrementalCompileOperation::CompileInfo::okToCompile )
                , ( bp::arg("estimatedTimeForCompile")=0.0 ) )    
            .def_readwrite( "allocatedTime", &osgUtil::IncrementalCompileOperation::CompileInfo::allocatedTime )    
            .def_readwrite( "compileAll", &osgUtil::IncrementalCompileOperation::CompileInfo::compileAll )    
            .add_property( "incrementalCompileOperation"
                        , bp::make_function( (::osgUtil::IncrementalCompileOperation * (*)( ::osgUtil::IncrementalCompileOperation::CompileInfo const & ))(&IncrementalCompileOperation_wrapper::CompileInfo_wrapper::get_incrementalCompileOperation), bp::return_internal_reference< >() )
                        , bp::make_function( (void (*)( ::osgUtil::IncrementalCompileOperation::CompileInfo &,::osgUtil::IncrementalCompileOperation * ))(&IncrementalCompileOperation_wrapper::CompileInfo_wrapper::set_incrementalCompileOperation), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
            .def_readwrite( "maxNumObjectsToCompile", &osgUtil::IncrementalCompileOperation::CompileInfo::maxNumObjectsToCompile )    
            .def_readwrite( "timer", &osgUtil::IncrementalCompileOperation::CompileInfo::timer );
        bp::class_< osgUtil::IncrementalCompileOperation::CompileList >( "CompileList", bp::init< >() )    
            .def( 
                "add"
                , (void ( ::osgUtil::IncrementalCompileOperation::CompileList::* )( ::osgUtil::IncrementalCompileOperation::CompileOp * ) )( &::osgUtil::IncrementalCompileOperation::CompileList::add )
                , ( bp::arg("compileOp") ) )    
            .def( 
                "add"
                , (void ( ::osgUtil::IncrementalCompileOperation::CompileList::* )( ::osg::Drawable * ) )( &::osgUtil::IncrementalCompileOperation::CompileList::add )
                , ( bp::arg("drawable") ) )    
            .def( 
                "add"
                , (void ( ::osgUtil::IncrementalCompileOperation::CompileList::* )( ::osg::Texture * ) )( &::osgUtil::IncrementalCompileOperation::CompileList::add )
                , ( bp::arg("texture") ) )    
            .def( 
                "add"
                , (void ( ::osgUtil::IncrementalCompileOperation::CompileList::* )( ::osg::Program * ) )( &::osgUtil::IncrementalCompileOperation::CompileList::add )
                , ( bp::arg("program") ) )    
            .def( 
                "compile"
                , (bool ( ::osgUtil::IncrementalCompileOperation::CompileList::* )( ::osgUtil::IncrementalCompileOperation::CompileInfo & ) )( &::osgUtil::IncrementalCompileOperation::CompileList::compile )
                , ( bp::arg("compileInfo") ) )    
            .def( 
                "empty"
                , (bool ( ::osgUtil::IncrementalCompileOperation::CompileList::* )(  ) const)( &::osgUtil::IncrementalCompileOperation::CompileList::empty ) )    
            .def( 
                "estimatedTimeForCompile"
                , (double ( ::osgUtil::IncrementalCompileOperation::CompileList::* )( ::osgUtil::IncrementalCompileOperation::CompileInfo & ) const)( &::osgUtil::IncrementalCompileOperation::CompileList::estimatedTimeForCompile )
                , ( bp::arg("compileInfo") ) )    
            .def_readwrite( "_compileOps", &osgUtil::IncrementalCompileOperation::CompileList::_compileOps );
        { //::osgUtil::IncrementalCompileOperation::CompileProgramOp
            typedef bp::class_< IncrementalCompileOperation_wrapper::CompileProgramOp_wrapper, bp::bases< osgUtil::IncrementalCompileOperation::CompileOp >, osg::ref_ptr< IncrementalCompileOperation_wrapper::CompileProgramOp_wrapper >, boost::noncopyable > CompileProgramOp_exposer_t;
            CompileProgramOp_exposer_t CompileProgramOp_exposer = CompileProgramOp_exposer_t( "CompileProgramOp", bp::init< osg::Program * >(( bp::arg("program") )) );
            bp::scope CompileProgramOp_scope( CompileProgramOp_exposer );
            bp::implicitly_convertible< osg::Program *, osgUtil::IncrementalCompileOperation::CompileProgramOp >();
            { //::osgUtil::IncrementalCompileOperation::CompileProgramOp::compile
            
                typedef bool ( ::osgUtil::IncrementalCompileOperation::CompileProgramOp::*compile_function_type )( ::osgUtil::IncrementalCompileOperation::CompileInfo & ) ;
                typedef bool ( IncrementalCompileOperation_wrapper::CompileProgramOp_wrapper::*default_compile_function_type )( ::osgUtil::IncrementalCompileOperation::CompileInfo & ) ;
                
                CompileProgramOp_exposer.def( 
                    "compile"
                    , compile_function_type(&::osgUtil::IncrementalCompileOperation::CompileProgramOp::compile)
                    , default_compile_function_type(&IncrementalCompileOperation_wrapper::CompileProgramOp_wrapper::default_compile)
                    , ( bp::arg("compileInfo") ) );
            
            }
            { //::osgUtil::IncrementalCompileOperation::CompileProgramOp::estimatedTimeForCompile
            
                typedef double ( ::osgUtil::IncrementalCompileOperation::CompileProgramOp::*estimatedTimeForCompile_function_type )( ::osgUtil::IncrementalCompileOperation::CompileInfo & ) const;
                typedef double ( IncrementalCompileOperation_wrapper::CompileProgramOp_wrapper::*default_estimatedTimeForCompile_function_type )( ::osgUtil::IncrementalCompileOperation::CompileInfo & ) const;
                
                CompileProgramOp_exposer.def( 
                    "estimatedTimeForCompile"
                    , estimatedTimeForCompile_function_type(&::osgUtil::IncrementalCompileOperation::CompileProgramOp::estimatedTimeForCompile)
                    , default_estimatedTimeForCompile_function_type(&IncrementalCompileOperation_wrapper::CompileProgramOp_wrapper::default_estimatedTimeForCompile)
                    , ( bp::arg("compileInfo") ) );
            
            }
            CompileProgramOp_exposer.def_readwrite( "_program", &osgUtil::IncrementalCompileOperation::CompileProgramOp::_program );
        }
        { //::osgUtil::IncrementalCompileOperation::CompileSet
            typedef bp::class_< IncrementalCompileOperation_wrapper::CompileSet_wrapper, bp::bases< ::osg::Referenced >, osg::ref_ptr< IncrementalCompileOperation_wrapper::CompileSet_wrapper >, boost::noncopyable > CompileSet_exposer_t;
            CompileSet_exposer_t CompileSet_exposer = CompileSet_exposer_t( "CompileSet", bp::no_init );
            bp::scope CompileSet_scope( CompileSet_exposer );
            CompileSet_exposer.def( bp::init< >() );
            CompileSet_exposer.def( bp::init< osg::Node * >(( bp::arg("subgraphToCompile") )) );
            bp::implicitly_convertible< osg::Node *, osgUtil::IncrementalCompileOperation::CompileSet >();
            CompileSet_exposer.def( bp::init< osg::Group *, osg::Node * >(( bp::arg("attachmentPoint"), bp::arg("subgraphToCompile") )) );
            { //::osgUtil::IncrementalCompileOperation::CompileSet::buildCompileMap
            
                typedef void ( ::osgUtil::IncrementalCompileOperation::CompileSet::*buildCompileMap_function_type )( ::std::set< osg::GraphicsContext* > &,::osgUtil::StateToCompile & ) ;
                
                CompileSet_exposer.def( 
                    "buildCompileMap"
                    , buildCompileMap_function_type( &::osgUtil::IncrementalCompileOperation::CompileSet::buildCompileMap )
                    , ( bp::arg("contexts"), bp::arg("stateToCompile") ) );
            
            }
            { //::osgUtil::IncrementalCompileOperation::CompileSet::buildCompileMap
            
                typedef void ( ::osgUtil::IncrementalCompileOperation::CompileSet::*buildCompileMap_function_type )( ::std::set< osg::GraphicsContext* > &,unsigned int ) ;
                
                CompileSet_exposer.def( 
                    "buildCompileMap"
                    , buildCompileMap_function_type( &::osgUtil::IncrementalCompileOperation::CompileSet::buildCompileMap )
                    , ( bp::arg("contexts"), bp::arg("mode")=(unsigned int)(12) ) );
            
            }
            { //::osgUtil::IncrementalCompileOperation::CompileSet::compile
            
                typedef bool ( ::osgUtil::IncrementalCompileOperation::CompileSet::*compile_function_type )( ::osgUtil::IncrementalCompileOperation::CompileInfo & ) ;
                
                CompileSet_exposer.def( 
                    "compile"
                    , compile_function_type( &::osgUtil::IncrementalCompileOperation::CompileSet::compile )
                    , ( bp::arg("compileInfo") ) );
            
            }
            { //::osgUtil::IncrementalCompileOperation::CompileSet::compiled
            
                typedef bool ( ::osgUtil::IncrementalCompileOperation::CompileSet::*compiled_function_type )(  ) const;
                
                CompileSet_exposer.def( 
                    "compiled"
                    , compiled_function_type( &::osgUtil::IncrementalCompileOperation::CompileSet::compiled ) );
            
            }
            CompileSet_exposer.def_readwrite( "_attachmentPoint", &osgUtil::IncrementalCompileOperation::CompileSet::_attachmentPoint );
            CompileSet_exposer.def_readwrite( "_compileCompletedCallback", &osgUtil::IncrementalCompileOperation::CompileSet::_compileCompletedCallback );
            CompileSet_exposer.def_readonly( "_numberCompileListsToCompile", &osgUtil::IncrementalCompileOperation::CompileSet::_numberCompileListsToCompile );
            CompileSet_exposer.def_readwrite( "_subgraphToCompile", &osgUtil::IncrementalCompileOperation::CompileSet::_subgraphToCompile );
        }
        { //::osgUtil::IncrementalCompileOperation::CompileTextureOp
            typedef bp::class_< IncrementalCompileOperation_wrapper::CompileTextureOp_wrapper, bp::bases< osgUtil::IncrementalCompileOperation::CompileOp >, osg::ref_ptr< IncrementalCompileOperation_wrapper::CompileTextureOp_wrapper >, boost::noncopyable > CompileTextureOp_exposer_t;
            CompileTextureOp_exposer_t CompileTextureOp_exposer = CompileTextureOp_exposer_t( "CompileTextureOp", bp::init< osg::Texture * >(( bp::arg("texture") )) );
            bp::scope CompileTextureOp_scope( CompileTextureOp_exposer );
            bp::implicitly_convertible< osg::Texture *, osgUtil::IncrementalCompileOperation::CompileTextureOp >();
            { //::osgUtil::IncrementalCompileOperation::CompileTextureOp::compile
            
                typedef bool ( ::osgUtil::IncrementalCompileOperation::CompileTextureOp::*compile_function_type )( ::osgUtil::IncrementalCompileOperation::CompileInfo & ) ;
                typedef bool ( IncrementalCompileOperation_wrapper::CompileTextureOp_wrapper::*default_compile_function_type )( ::osgUtil::IncrementalCompileOperation::CompileInfo & ) ;
                
                CompileTextureOp_exposer.def( 
                    "compile"
                    , compile_function_type(&::osgUtil::IncrementalCompileOperation::CompileTextureOp::compile)
                    , default_compile_function_type(&IncrementalCompileOperation_wrapper::CompileTextureOp_wrapper::default_compile)
                    , ( bp::arg("compileInfo") ) );
            
            }
            { //::osgUtil::IncrementalCompileOperation::CompileTextureOp::estimatedTimeForCompile
            
                typedef double ( ::osgUtil::IncrementalCompileOperation::CompileTextureOp::*estimatedTimeForCompile_function_type )( ::osgUtil::IncrementalCompileOperation::CompileInfo & ) const;
                typedef double ( IncrementalCompileOperation_wrapper::CompileTextureOp_wrapper::*default_estimatedTimeForCompile_function_type )( ::osgUtil::IncrementalCompileOperation::CompileInfo & ) const;
                
                CompileTextureOp_exposer.def( 
                    "estimatedTimeForCompile"
                    , estimatedTimeForCompile_function_type(&::osgUtil::IncrementalCompileOperation::CompileTextureOp::estimatedTimeForCompile)
                    , default_estimatedTimeForCompile_function_type(&IncrementalCompileOperation_wrapper::CompileTextureOp_wrapper::default_estimatedTimeForCompile)
                    , ( bp::arg("compileInfo") ) );
            
            }
            CompileTextureOp_exposer.def_readwrite( "_texture", &osgUtil::IncrementalCompileOperation::CompileTextureOp::_texture );
        }
        IncrementalCompileOperation_exposer.def( bp::init< >() );
        { //::osgUtil::IncrementalCompileOperation::add
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*add_function_type )( ::osg::Node * ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "add"
                , add_function_type( &::osgUtil::IncrementalCompileOperation::add )
                , ( bp::arg("subgraphToCompile") ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::add
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*add_function_type )( ::osg::Group *,::osg::Node * ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "add"
                , add_function_type( &::osgUtil::IncrementalCompileOperation::add )
                , ( bp::arg("attachmentPoint"), bp::arg("subgraphToCompile") ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::add
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*add_function_type )( ::osgUtil::IncrementalCompileOperation::CompileSet *,bool ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "add"
                , add_function_type( &::osgUtil::IncrementalCompileOperation::add )
                , ( bp::arg("compileSet"), bp::arg("callBuildCompileMap")=(bool)(true) ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::addGraphicsContext
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*addGraphicsContext_function_type )( ::osg::GraphicsContext * ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "addGraphicsContext"
                , addGraphicsContext_function_type( &::osgUtil::IncrementalCompileOperation::addGraphicsContext )
                , ( bp::arg("gc") ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::assignContexts
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*assignContexts_function_type )( ::std::vector< osg::GraphicsContext* > & ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "assignContexts"
                , assignContexts_function_type( &::osgUtil::IncrementalCompileOperation::assignContexts )
                , ( bp::arg("contexts") ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::assignForceTextureDownloadGeometry
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*assignForceTextureDownloadGeometry_function_type )(  ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "assignForceTextureDownloadGeometry"
                , assignForceTextureDownloadGeometry_function_type( &::osgUtil::IncrementalCompileOperation::assignForceTextureDownloadGeometry ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::compileAllForNextFrame
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*compileAllForNextFrame_function_type )( unsigned int ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "compileAllForNextFrame"
                , compileAllForNextFrame_function_type( &::osgUtil::IncrementalCompileOperation::compileAllForNextFrame )
                , ( bp::arg("numFramesToDoCompileAll")=(unsigned int)(1) ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::getCompileAllTillFrameNumber
        
            typedef unsigned int ( ::osgUtil::IncrementalCompileOperation::*getCompileAllTillFrameNumber_function_type )(  ) const;
            
            IncrementalCompileOperation_exposer.def( 
                "getCompileAllTillFrameNumber"
                , getCompileAllTillFrameNumber_function_type( &::osgUtil::IncrementalCompileOperation::getCompileAllTillFrameNumber ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::getCompiled
        
            typedef ::std::list< osg::ref_ptr<osgUtil::IncrementalCompileOperation::CompileSet> > & ( ::osgUtil::IncrementalCompileOperation::*getCompiled_function_type )(  ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "getCompiled"
                , getCompiled_function_type( &::osgUtil::IncrementalCompileOperation::getCompiled )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::IncrementalCompileOperation::getCompiledMutex
        
            typedef ::OpenThreads::Mutex * ( ::osgUtil::IncrementalCompileOperation::*getCompiledMutex_function_type )(  ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "getCompiledMutex"
                , getCompiledMutex_function_type( &::osgUtil::IncrementalCompileOperation::getCompiledMutex )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::IncrementalCompileOperation::getConservativeTimeRatio
        
            typedef double ( ::osgUtil::IncrementalCompileOperation::*getConservativeTimeRatio_function_type )(  ) const;
            
            IncrementalCompileOperation_exposer.def( 
                "getConservativeTimeRatio"
                , getConservativeTimeRatio_function_type( &::osgUtil::IncrementalCompileOperation::getConservativeTimeRatio ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::getContextSet
        
            typedef ::std::set< osg::GraphicsContext* > & ( ::osgUtil::IncrementalCompileOperation::*getContextSet_function_type )(  ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "getContextSet"
                , getContextSet_function_type( &::osgUtil::IncrementalCompileOperation::getContextSet )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::IncrementalCompileOperation::getContextSet
        
            typedef ::std::set< osg::GraphicsContext* > const & ( ::osgUtil::IncrementalCompileOperation::*getContextSet_function_type )(  ) const;
            
            IncrementalCompileOperation_exposer.def( 
                "getContextSet"
                , getContextSet_function_type( &::osgUtil::IncrementalCompileOperation::getContextSet )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::IncrementalCompileOperation::getCurrentFrameNumber
        
            typedef unsigned int ( ::osgUtil::IncrementalCompileOperation::*getCurrentFrameNumber_function_type )(  ) const;
            
            IncrementalCompileOperation_exposer.def( 
                "getCurrentFrameNumber"
                , getCurrentFrameNumber_function_type( &::osgUtil::IncrementalCompileOperation::getCurrentFrameNumber ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::getFlushTimeRatio
        
            typedef double ( ::osgUtil::IncrementalCompileOperation::*getFlushTimeRatio_function_type )(  ) const;
            
            IncrementalCompileOperation_exposer.def( 
                "getFlushTimeRatio"
                , getFlushTimeRatio_function_type( &::osgUtil::IncrementalCompileOperation::getFlushTimeRatio ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::getForceTextureDownloadGeometry
        
            typedef ::osg::Geometry * ( ::osgUtil::IncrementalCompileOperation::*getForceTextureDownloadGeometry_function_type )(  ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "getForceTextureDownloadGeometry"
                , getForceTextureDownloadGeometry_function_type( &::osgUtil::IncrementalCompileOperation::getForceTextureDownloadGeometry )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::IncrementalCompileOperation::getForceTextureDownloadGeometry
        
            typedef ::osg::Geometry const * ( ::osgUtil::IncrementalCompileOperation::*getForceTextureDownloadGeometry_function_type )(  ) const;
            
            IncrementalCompileOperation_exposer.def( 
                "getForceTextureDownloadGeometry"
                , getForceTextureDownloadGeometry_function_type( &::osgUtil::IncrementalCompileOperation::getForceTextureDownloadGeometry )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::IncrementalCompileOperation::getMaximumNumOfObjectsToCompilePerFrame
        
            typedef unsigned int ( ::osgUtil::IncrementalCompileOperation::*getMaximumNumOfObjectsToCompilePerFrame_function_type )(  ) const;
            
            IncrementalCompileOperation_exposer.def( 
                "getMaximumNumOfObjectsToCompilePerFrame"
                , getMaximumNumOfObjectsToCompilePerFrame_function_type( &::osgUtil::IncrementalCompileOperation::getMaximumNumOfObjectsToCompilePerFrame ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::getMinimumTimeAvailableForGLCompileAndDeletePerFrame
        
            typedef double ( ::osgUtil::IncrementalCompileOperation::*getMinimumTimeAvailableForGLCompileAndDeletePerFrame_function_type )(  ) const;
            
            IncrementalCompileOperation_exposer.def( 
                "getMinimumTimeAvailableForGLCompileAndDeletePerFrame"
                , getMinimumTimeAvailableForGLCompileAndDeletePerFrame_function_type( &::osgUtil::IncrementalCompileOperation::getMinimumTimeAvailableForGLCompileAndDeletePerFrame ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::getTargetFrameRate
        
            typedef double ( ::osgUtil::IncrementalCompileOperation::*getTargetFrameRate_function_type )(  ) const;
            
            IncrementalCompileOperation_exposer.def( 
                "getTargetFrameRate"
                , getTargetFrameRate_function_type( &::osgUtil::IncrementalCompileOperation::getTargetFrameRate ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::getToCompile
        
            typedef ::std::list< osg::ref_ptr<osgUtil::IncrementalCompileOperation::CompileSet> > & ( ::osgUtil::IncrementalCompileOperation::*getToCompile_function_type )(  ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "getToCompile"
                , getToCompile_function_type( &::osgUtil::IncrementalCompileOperation::getToCompile )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::IncrementalCompileOperation::getToCompiledMutex
        
            typedef ::OpenThreads::Mutex * ( ::osgUtil::IncrementalCompileOperation::*getToCompiledMutex_function_type )(  ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "getToCompiledMutex"
                , getToCompiledMutex_function_type( &::osgUtil::IncrementalCompileOperation::getToCompiledMutex )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::IncrementalCompileOperation::isActive
        
            typedef bool ( ::osgUtil::IncrementalCompileOperation::*isActive_function_type )(  ) const;
            
            IncrementalCompileOperation_exposer.def( 
                "isActive"
                , isActive_function_type( &::osgUtil::IncrementalCompileOperation::isActive ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::mergeCompiledSubgraphs
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*mergeCompiledSubgraphs_function_type )( ::osg::FrameStamp const * ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "mergeCompiledSubgraphs"
                , mergeCompiledSubgraphs_function_type( &::osgUtil::IncrementalCompileOperation::mergeCompiledSubgraphs )
                , ( bp::arg("frameStamp") ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::operator()
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*__call___function_type )( ::osg::GraphicsContext * ) ;
            typedef void ( IncrementalCompileOperation_wrapper::*default___call___function_type )( ::osg::GraphicsContext * ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "__call__"
                , __call___function_type(&::osgUtil::IncrementalCompileOperation::operator())
                , default___call___function_type(&IncrementalCompileOperation_wrapper::default___call__)
                , ( bp::arg("context") ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::remove
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*remove_function_type )( ::osgUtil::IncrementalCompileOperation::CompileSet * ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "remove"
                , remove_function_type( &::osgUtil::IncrementalCompileOperation::remove )
                , ( bp::arg("compileSet") ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::removeContexts
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*removeContexts_function_type )( ::std::vector< osg::GraphicsContext* > & ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "removeContexts"
                , removeContexts_function_type( &::osgUtil::IncrementalCompileOperation::removeContexts )
                , ( bp::arg("contexts") ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::removeGraphicsContext
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*removeGraphicsContext_function_type )( ::osg::GraphicsContext * ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "removeGraphicsContext"
                , removeGraphicsContext_function_type( &::osgUtil::IncrementalCompileOperation::removeGraphicsContext )
                , ( bp::arg("gc") ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::requiresCompile
        
            typedef bool ( ::osgUtil::IncrementalCompileOperation::*requiresCompile_function_type )( ::osgUtil::StateToCompile & ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "requiresCompile"
                , requiresCompile_function_type( &::osgUtil::IncrementalCompileOperation::requiresCompile )
                , ( bp::arg("stateToCompile") ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::setCompileAllTillFrameNumber
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*setCompileAllTillFrameNumber_function_type )( unsigned int ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "setCompileAllTillFrameNumber"
                , setCompileAllTillFrameNumber_function_type( &::osgUtil::IncrementalCompileOperation::setCompileAllTillFrameNumber )
                , ( bp::arg("fn") ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::setConservativeTimeRatio
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*setConservativeTimeRatio_function_type )( double ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "setConservativeTimeRatio"
                , setConservativeTimeRatio_function_type( &::osgUtil::IncrementalCompileOperation::setConservativeTimeRatio )
                , ( bp::arg("ratio") ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::setCurrentFrameNumber
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*setCurrentFrameNumber_function_type )( unsigned int ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "setCurrentFrameNumber"
                , setCurrentFrameNumber_function_type( &::osgUtil::IncrementalCompileOperation::setCurrentFrameNumber )
                , ( bp::arg("fn") ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::setFlushTimeRatio
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*setFlushTimeRatio_function_type )( double ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "setFlushTimeRatio"
                , setFlushTimeRatio_function_type( &::osgUtil::IncrementalCompileOperation::setFlushTimeRatio )
                , ( bp::arg("ratio") ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::setForceTextureDownloadGeometry
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*setForceTextureDownloadGeometry_function_type )( ::osg::Geometry * ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "setForceTextureDownloadGeometry"
                , setForceTextureDownloadGeometry_function_type( &::osgUtil::IncrementalCompileOperation::setForceTextureDownloadGeometry )
                , ( bp::arg("geom") ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::setMaximumNumOfObjectsToCompilePerFrame
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*setMaximumNumOfObjectsToCompilePerFrame_function_type )( unsigned int ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "setMaximumNumOfObjectsToCompilePerFrame"
                , setMaximumNumOfObjectsToCompilePerFrame_function_type( &::osgUtil::IncrementalCompileOperation::setMaximumNumOfObjectsToCompilePerFrame )
                , ( bp::arg("num") ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::setMinimumTimeAvailableForGLCompileAndDeletePerFrame
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*setMinimumTimeAvailableForGLCompileAndDeletePerFrame_function_type )( double ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "setMinimumTimeAvailableForGLCompileAndDeletePerFrame"
                , setMinimumTimeAvailableForGLCompileAndDeletePerFrame_function_type( &::osgUtil::IncrementalCompileOperation::setMinimumTimeAvailableForGLCompileAndDeletePerFrame )
                , ( bp::arg("ta") ) );
        
        }
        { //::osgUtil::IncrementalCompileOperation::setTargetFrameRate
        
            typedef void ( ::osgUtil::IncrementalCompileOperation::*setTargetFrameRate_function_type )( double ) ;
            
            IncrementalCompileOperation_exposer.def( 
                "setTargetFrameRate"
                , setTargetFrameRate_function_type( &::osgUtil::IncrementalCompileOperation::setTargetFrameRate )
                , ( bp::arg("tfr") ) );
        
        }
    }

}
