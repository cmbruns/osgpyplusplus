// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "__convenience.pypp.hpp"
#include "wrap_osgUtil.h"
#include "wrap_referenced.h"
#include "PlaneIntersector.pypp.hpp"

namespace bp = boost::python;

struct PlaneIntersector_wrapper : osgUtil::PlaneIntersector, bp::wrapper< osgUtil::PlaneIntersector > {

    PlaneIntersector_wrapper(::osg::Plane const & plane, ::osg::Polytope const & boundingPolytope=osg::Polytope() )
    : osgUtil::PlaneIntersector( boost::ref(plane), boost::ref(boundingPolytope) )
      , bp::wrapper< osgUtil::PlaneIntersector >(){
        // constructor
    
    }

    PlaneIntersector_wrapper(::osgUtil::Intersector::CoordinateFrame cf, ::osg::Plane const & plane, ::osg::Polytope const & boundingPolytope=osg::Polytope() )
    : osgUtil::PlaneIntersector( cf, boost::ref(plane), boost::ref(boundingPolytope) )
      , bp::wrapper< osgUtil::PlaneIntersector >(){
        // constructor
    
    }

    virtual ::osgUtil::Intersector * clone( ::osgUtil::IntersectionVisitor & iv ) {
        if( bp::override func_clone = this->get_override( "clone" ) )
            return func_clone( boost::ref(iv) );
        else{
            return this->osgUtil::PlaneIntersector::clone( boost::ref(iv) );
        }
    }
    
    ::osgUtil::Intersector * default_clone( ::osgUtil::IntersectionVisitor & iv ) {
        return osgUtil::PlaneIntersector::clone( boost::ref(iv) );
    }

    virtual bool containsIntersections(  ) {
        if( bp::override func_containsIntersections = this->get_override( "containsIntersections" ) )
            return func_containsIntersections(  );
        else{
            return this->osgUtil::PlaneIntersector::containsIntersections(  );
        }
    }
    
    bool default_containsIntersections(  ) {
        return osgUtil::PlaneIntersector::containsIntersections( );
    }

    virtual bool enter( ::osg::Node const & node ) {
        namespace bpl = boost::python;
        if( bpl::override func_enter = this->get_override( "enter" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_enter.ptr(), node );
            return bpl::extract< bool >( pyplus_conv::get_out_argument( py_result, 0 ) );
        }
        else{
            return osgUtil::PlaneIntersector::enter( boost::ref(node) );
        }
    }
    
    static boost::python::object default_enter( ::osgUtil::PlaneIntersector & inst, ::osg::Node & node ){
        bool result;
        if( dynamic_cast< PlaneIntersector_wrapper * >( boost::addressof( inst ) ) ){
            result = inst.::osgUtil::PlaneIntersector::enter(node);
        }
        else{
            result = inst.enter(node);
        }
        return bp::object( result );
    }

    virtual void intersect( ::osgUtil::IntersectionVisitor & iv, ::osg::Drawable * drawable ) {
        if( bp::override func_intersect = this->get_override( "intersect" ) )
            func_intersect( boost::ref(iv), boost::python::ptr(drawable) );
        else{
            this->osgUtil::PlaneIntersector::intersect( boost::ref(iv), boost::python::ptr(drawable) );
        }
    }
    
    void default_intersect( ::osgUtil::IntersectionVisitor & iv, ::osg::Drawable * drawable ) {
        osgUtil::PlaneIntersector::intersect( boost::ref(iv), boost::python::ptr(drawable) );
    }

    virtual void leave(  ) {
        if( bp::override func_leave = this->get_override( "leave" ) )
            func_leave(  );
        else{
            this->osgUtil::PlaneIntersector::leave(  );
        }
    }
    
    void default_leave(  ) {
        osgUtil::PlaneIntersector::leave( );
    }

    virtual void reset(  ) {
        if( bp::override func_reset = this->get_override( "reset" ) )
            func_reset(  );
        else{
            this->osgUtil::PlaneIntersector::reset(  );
        }
    }
    
    void default_reset(  ) {
        osgUtil::PlaneIntersector::reset( );
    }

};

void register_PlaneIntersector_class(){

    { //::osgUtil::PlaneIntersector
        typedef bp::class_< PlaneIntersector_wrapper, bp::bases< osgUtil::Intersector >, osg::ref_ptr< PlaneIntersector_wrapper >, boost::noncopyable > PlaneIntersector_exposer_t;
        PlaneIntersector_exposer_t PlaneIntersector_exposer = PlaneIntersector_exposer_t( "PlaneIntersector", "\n Concrete class for implementing polytope intersections with the scene graph.\n To be used in conjunction with IntersectionVisitor.\n", bp::init< osg::Plane const &, bp::optional< osg::Polytope const & > >(( bp::arg("plane"), bp::arg("boundingPolytope")=osg::Polytope() ), "\n Construct a PolytopeIntersector using speified polytope in MODEL coordinates.\n") );
        bp::scope PlaneIntersector_scope( PlaneIntersector_exposer );
        bp::class_< osgUtil::PlaneIntersector::Intersection >( "PlaneIntersection", bp::init< >() )    
            .def( bp::self < bp::self )    
            .def_readwrite( "attributes", &osgUtil::PlaneIntersector::Intersection::attributes )    
            .def_readwrite( "drawable", &osgUtil::PlaneIntersector::Intersection::drawable )    
            .def_readwrite( "matrix", &osgUtil::PlaneIntersector::Intersection::matrix )    
            .def_readwrite( "nodePath", &osgUtil::PlaneIntersector::Intersection::nodePath )    
            .def_readwrite( "polyline", &osgUtil::PlaneIntersector::Intersection::polyline );
        bp::implicitly_convertible< osg::Plane const &, osgUtil::PlaneIntersector >();
        PlaneIntersector_exposer.def( bp::init< osgUtil::Intersector::CoordinateFrame, osg::Plane const &, bp::optional< osg::Polytope const & > >(( bp::arg("cf"), bp::arg("plane"), bp::arg("boundingPolytope")=osg::Polytope() ), "\n Construct a PolytopeIntersector using speified polytope in specified coordinate frame.\n") );
        { //::osgUtil::PlaneIntersector::clone
        
            typedef ::osgUtil::Intersector * ( ::osgUtil::PlaneIntersector::*clone_function_type )( ::osgUtil::IntersectionVisitor & ) ;
            typedef ::osgUtil::Intersector * ( PlaneIntersector_wrapper::*default_clone_function_type )( ::osgUtil::IntersectionVisitor & ) ;
            
            PlaneIntersector_exposer.def( 
                "clone"
                , clone_function_type(&::osgUtil::PlaneIntersector::clone)
                , default_clone_function_type(&PlaneIntersector_wrapper::default_clone)
                , ( bp::arg("iv") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osgUtil::PlaneIntersector::containsIntersections
        
            typedef bool ( ::osgUtil::PlaneIntersector::*containsIntersections_function_type )(  ) ;
            typedef bool ( PlaneIntersector_wrapper::*default_containsIntersections_function_type )(  ) ;
            
            PlaneIntersector_exposer.def( 
                "containsIntersections"
                , containsIntersections_function_type(&::osgUtil::PlaneIntersector::containsIntersections)
                , default_containsIntersections_function_type(&PlaneIntersector_wrapper::default_containsIntersections) );
        
        }
        { //::osgUtil::PlaneIntersector::enter
        
            typedef boost::python::object ( *default_enter_function_type )( ::osgUtil::PlaneIntersector &,::osg::Node & );
            
            PlaneIntersector_exposer.def( 
                "enter"
                , default_enter_function_type( &PlaneIntersector_wrapper::default_enter )
                , ( bp::arg("inst"), bp::arg("node") ) );
        
        }
        { //::osgUtil::PlaneIntersector::getEllipsoidModel
        
            typedef ::osg::EllipsoidModel const * ( ::osgUtil::PlaneIntersector::*getEllipsoidModel_function_type )(  ) const;
            
            PlaneIntersector_exposer.def( 
                "getEllipsoidModel"
                , getEllipsoidModel_function_type( &::osgUtil::PlaneIntersector::getEllipsoidModel )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::PlaneIntersector::getIntersections
        
            typedef ::std::vector< osgUtil::PlaneIntersector::Intersection > & ( ::osgUtil::PlaneIntersector::*getIntersections_function_type )(  ) ;
            
            PlaneIntersector_exposer.def( 
                "getIntersections"
                , getIntersections_function_type( &::osgUtil::PlaneIntersector::getIntersections )
                , bp::return_internal_reference< >() );
        
        }
        { //::osgUtil::PlaneIntersector::getRecordHeightsAsAttributes
        
            typedef bool ( ::osgUtil::PlaneIntersector::*getRecordHeightsAsAttributes_function_type )(  ) const;
            
            PlaneIntersector_exposer.def( 
                "getRecordHeightsAsAttributes"
                , getRecordHeightsAsAttributes_function_type( &::osgUtil::PlaneIntersector::getRecordHeightsAsAttributes ) );
        
        }
        { //::osgUtil::PlaneIntersector::insertIntersection
        
            typedef void ( ::osgUtil::PlaneIntersector::*insertIntersection_function_type )( ::osgUtil::PlaneIntersector::Intersection const & ) ;
            
            PlaneIntersector_exposer.def( 
                "insertIntersection"
                , insertIntersection_function_type( &::osgUtil::PlaneIntersector::insertIntersection )
                , ( bp::arg("intersection") ) );
        
        }
        { //::osgUtil::PlaneIntersector::intersect
        
            typedef void ( ::osgUtil::PlaneIntersector::*intersect_function_type )( ::osgUtil::IntersectionVisitor &,::osg::Drawable * ) ;
            typedef void ( PlaneIntersector_wrapper::*default_intersect_function_type )( ::osgUtil::IntersectionVisitor &,::osg::Drawable * ) ;
            
            PlaneIntersector_exposer.def( 
                "intersect"
                , intersect_function_type(&::osgUtil::PlaneIntersector::intersect)
                , default_intersect_function_type(&PlaneIntersector_wrapper::default_intersect)
                , ( bp::arg("iv"), bp::arg("drawable") ) );
        
        }
        { //::osgUtil::PlaneIntersector::leave
        
            typedef void ( ::osgUtil::PlaneIntersector::*leave_function_type )(  ) ;
            typedef void ( PlaneIntersector_wrapper::*default_leave_function_type )(  ) ;
            
            PlaneIntersector_exposer.def( 
                "leave"
                , leave_function_type(&::osgUtil::PlaneIntersector::leave)
                , default_leave_function_type(&PlaneIntersector_wrapper::default_leave) );
        
        }
        { //::osgUtil::PlaneIntersector::reset
        
            typedef void ( ::osgUtil::PlaneIntersector::*reset_function_type )(  ) ;
            typedef void ( PlaneIntersector_wrapper::*default_reset_function_type )(  ) ;
            
            PlaneIntersector_exposer.def( 
                "reset"
                , reset_function_type(&::osgUtil::PlaneIntersector::reset)
                , default_reset_function_type(&PlaneIntersector_wrapper::default_reset) );
        
        }
        { //::osgUtil::PlaneIntersector::setEllipsoidModel
        
            typedef void ( ::osgUtil::PlaneIntersector::*setEllipsoidModel_function_type )( ::osg::EllipsoidModel * ) ;
            
            PlaneIntersector_exposer.def( 
                "setEllipsoidModel"
                , setEllipsoidModel_function_type( &::osgUtil::PlaneIntersector::setEllipsoidModel )
                , ( bp::arg("em") ) );
        
        }
        { //::osgUtil::PlaneIntersector::setRecordHeightsAsAttributes
        
            typedef void ( ::osgUtil::PlaneIntersector::*setRecordHeightsAsAttributes_function_type )( bool ) ;
            
            PlaneIntersector_exposer.def( 
                "setRecordHeightsAsAttributes"
                , setRecordHeightsAsAttributes_function_type( &::osgUtil::PlaneIntersector::setRecordHeightsAsAttributes )
                , ( bp::arg("flag") ) );
        
        }
    }

}
